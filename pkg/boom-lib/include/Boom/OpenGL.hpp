#pragma once

#include <vector>
#include <string>
#include <optional>
#include <cinttypes>
#include <Boom/Memory.hpp>

namespace boom {

struct __OpenGLImpl;

class View;
class OpenGL;

using OpenGLRef = std::shared_ptr<boom::OpenGL>;
using OpenGLCRef = std::shared_ptr<boom::OpenGL const>;
using OpenGLWRef = std::weak_ptr<boom::OpenGL>;
using OpenGLCWRef = std::weak_ptr<boom::OpenGL const>;

using OpenGLBitfield = std::uint32_t;
using OpenGLBoolean = std::uint8_t;
using OpenGLByte = std::int8_t;
using OpenGLChar = char;
using OpenGLCharARB = char;
using OpenGLClampd = double;
using OpenGLClampf = float;
using OpenGLClampx = std::int32_t;
using OpenGLDouble = double;
using OpenGLEGLClientBufferEXT = void*;
using OpenGLEGLImageOES = void*;
using OpenGLEnum = std::uint32_t;
using OpenGLFixed = std::int32_t;
using OpenGLFloat = float;
using OpenGLHalf = std::uint16_t;
using OpenGLHalfARB = std::uint16_t;
using OpenGLHalfNV = std::uint16_t;
using OpenGLInt = std::int32_t;
using OpenGLInt64 = std::int64_t;
using OpenGLInt64EXT = std::int64_t;
using OpenGLIntptr = std::intptr_t;
using OpenGLIntptrARB = std::intptr_t;
using OpenGLShort = std::int16_t;
using OpenGLSizei = std::int32_t;
using OpenGLSizeiptrARB = std::int64_t;
using OpenGLSync = struct __OpenGLSync*;
using OpenGLUByte = std::uint8_t;
using OpenGLUInt = std::uint32_t;
using OpenGLUInt64 = std::uint64_t;
using OpenGLUInt64EXT = std::uint64_t;
using OpenGLUShort = std::uint16_t;
using OpenGLVDPAUSurfaceNV = boom::OpenGLIntptr;
using OpenGLDebugProc = void (*)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void const*);
using OpenGLDebugProcARB = void (*)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void const*);
using OpenGLDebugProcKHR = void (*)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void const*);
using OpenGLDebugProcAMD = void (*)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void*);
using OpenGLVulkanProcNV = void (*)(void);

#ifdef __APPLE__
using OpenGLHandleARB = void*;
#else
using OpenGLHandleARB = std::uint32_t;
#endif
#ifdef _WIN64
using OpenGLSizeiptr = std::int64_t;
#else
using OpenGLSizeiptr = long;
#endif

enum class OpenGLExtension {
    _3dfxMultisample,
    _3dfxTbuffer,
    _3dfxTextureCompressionFxt1,
    AmdBlendMinmaxFactor,
    AmdCompressed3dcTexture,
    AmdCompressedAtcTexture,
    AmdConservativeDepth,
    AmdDebugOutput,
    AmdDepthClampSeparate,
    AmdDrawBuffersBlend,
    AmdFramebufferMultisampleAdvanced,
    AmdFramebufferSamplePositions,
    AmdGcnShader,
    AmdGpuShaderHalfFloat,
    AmdGpuShaderInt16,
    AmdGpuShaderInt64,
    AmdInterleavedElements,
    AmdMultiDrawIndirect,
    AmdNameGenDelete,
    AmdOcclusionQueryEvent,
    AmdPerformanceMonitor,
    AmdPinnedMemory,
    AmdProgramBinaryZ400,
    AmdQueryBufferObject,
    AmdSamplePositions,
    AmdSeamlessCubemapPerTexture,
    AmdShaderAtomicCounterOps,
    AmdShaderBallot,
    AmdShaderGpuShaderHalfFloatFetch,
    AmdShaderImageLoadStoreLod,
    AmdShaderStencilExport,
    AmdShaderTrinaryMinmax,
    AmdShaderExplicitVertexParameter,
    AmdSparseTexture,
    AmdStencilOperationExtended,
    AmdTextureGatherBiasLod,
    AmdTextureTexture4,
    AmdTransformFeedback3LinesTriangles,
    AmdTransformFeedback4,
    AmdVertexShaderLayer,
    AmdVertexShaderTessellator,
    AmdVertexShaderViewportIndex,
    AndroidExtensionPackEs31a,
    AngleDepthTexture,
    AngleFramebufferBlit,
    AngleFramebufferMultisample,
    AngleInstancedArrays,
    AnglePackReverseRowOrder,
    AngleProgramBinary,
    AngleTextureCompressionDxt3,
    AngleTextureCompressionDxt5,
    AngleTextureUsage,
    AngleTranslatedShaderSource,
    AppleAuxDepthStencil,
    AppleClientStorage,
    AppleClipDistance,
    AppleColorBufferPackedFloat,
    AppleCopyTextureLevels,
    AppleElementArray,
    AppleFence,
    AppleFloatPixels,
    AppleFlushBufferRange,
    AppleFramebufferMultisample,
    AppleObjectPurgeable,
    AppleRgb422,
    AppleRowBytes,
    AppleSpecularVector,
    AppleSync,
    AppleTexture2dLimitedNpot,
    AppleTextureFormatBgra8888,
    AppleTextureMaxLevel,
    AppleTexturePackedFloat,
    AppleTextureRange,
    AppleTransformHint,
    AppleVertexArrayObject,
    AppleVertexArrayRange,
    AppleVertexProgramEvaluators,
    AppleYcbcr422,
    ArbEs2Compatibility,
    ArbEs31Compatibility,
    ArbEs32Compatibility,
    ArbEs3Compatibility,
    ArbArraysOfArrays,
    ArbBaseInstance,
    ArbBindlessTexture,
    ArbBlendFuncExtended,
    ArbBufferStorage,
    ArbClEvent,
    ArbClearBufferObject,
    ArbClearTexture,
    ArbClipControl,
    ArbColorBufferFloat,
    ArbCompatibility,
    ArbCompressedTexturePixelStorage,
    ArbComputeShader,
    ArbComputeVariableGroupSize,
    ArbConditionalRenderInverted,
    ArbConservativeDepth,
    ArbCopyBuffer,
    ArbCopyImage,
    ArbCullDistance,
    ArbDebugOutput,
    ArbDepthBufferFloat,
    ArbDepthClamp,
    ArbDepthTexture,
    ArbDerivativeControl,
    ArbDirectStateAccess,
    ArbDrawBuffers,
    ArbDrawBuffersBlend,
    ArbDrawElementsBaseVertex,
    ArbDrawIndirect,
    ArbDrawInstanced,
    ArbEnhancedLayouts,
    ArbExplicitAttribLocation,
    ArbExplicitUniformLocation,
    ArbFragmentCoordConventions,
    ArbFragmentLayerViewport,
    ArbFragmentProgram,
    ArbFragmentProgramShadow,
    ArbFragmentShader,
    ArbFragmentShaderInterlock,
    ArbFramebufferNoAttachments,
    ArbFramebufferObject,
    ArbFramebufferSrgb,
    ArbGeometryShader4,
    ArbGetProgramBinary,
    ArbGetTextureSubImage,
    ArbGlSpirv,
    ArbGpuShader5,
    ArbGpuShaderFp64,
    ArbGpuShaderInt64,
    ArbHalfFloatPixel,
    ArbHalfFloatVertex,
    ArbImaging,
    ArbIndirectParameters,
    ArbInstancedArrays,
    ArbInternalformatQuery,
    ArbInternalformatQuery2,
    ArbInvalidateSubdata,
    ArbMapBufferAlignment,
    ArbMapBufferRange,
    ArbMatrixPalette,
    ArbMultiBind,
    ArbMultiDrawIndirect,
    ArbMultisample,
    ArbMultitexture,
    ArbOcclusionQuery,
    ArbOcclusionQuery2,
    ArbParallelShaderCompile,
    ArbPipelineStatisticsQuery,
    ArbPixelBufferObject,
    ArbPointParameters,
    ArbPointSprite,
    ArbPolygonOffsetClamp,
    ArbPostDepthCoverage,
    ArbProgramInterfaceQuery,
    ArbProvokingVertex,
    ArbQueryBufferObject,
    ArbRobustBufferAccessBehavior,
    ArbRobustness,
    ArbRobustnessIsolation,
    ArbSampleLocations,
    ArbSampleShading,
    ArbSamplerObjects,
    ArbSeamlessCubeMap,
    ArbSeamlessCubemapPerTexture,
    ArbSeparateShaderObjects,
    ArbShaderAtomicCounterOps,
    ArbShaderAtomicCounters,
    ArbShaderBallot,
    ArbShaderBitEncoding,
    ArbShaderClock,
    ArbShaderDrawParameters,
    ArbShaderGroupVote,
    ArbShaderImageLoadStore,
    ArbShaderImageSize,
    ArbShaderObjects,
    ArbShaderPrecision,
    ArbShaderStencilExport,
    ArbShaderStorageBufferObject,
    ArbShaderSubroutine,
    ArbShaderTextureImageSamples,
    ArbShaderTextureLod,
    ArbShaderViewportLayerArray,
    ArbShadingLanguage100,
    ArbShadingLanguage420pack,
    ArbShadingLanguageInclude,
    ArbShadingLanguagePacking,
    ArbShadow,
    ArbShadowAmbient,
    ArbSparseBuffer,
    ArbSparseTexture,
    ArbSparseTexture2,
    ArbSparseTextureClamp,
    ArbSpirvExtensions,
    ArbStencilTexturing,
    ArbSync,
    ArbTessellationShader,
    ArbTextureBarrier,
    ArbTextureBorderClamp,
    ArbTextureBufferObject,
    ArbTextureBufferObjectRgb32,
    ArbTextureBufferRange,
    ArbTextureCompression,
    ArbTextureCompressionBptc,
    ArbTextureCompressionRgtc,
    ArbTextureCubeMap,
    ArbTextureCubeMapArray,
    ArbTextureEnvAdd,
    ArbTextureEnvCombine,
    ArbTextureEnvCrossbar,
    ArbTextureEnvDot3,
    ArbTextureFilterAnisotropic,
    ArbTextureFilterMinmax,
    ArbTextureFloat,
    ArbTextureGather,
    ArbTextureMirrorClampToEdge,
    ArbTextureMirroredRepeat,
    ArbTextureMultisample,
    ArbTextureNonPowerOfTwo,
    ArbTextureQueryLevels,
    ArbTextureQueryLod,
    ArbTextureRectangle,
    ArbTextureRg,
    ArbTextureRgb10A2ui,
    ArbTextureStencil8,
    ArbTextureStorage,
    ArbTextureStorageMultisample,
    ArbTextureSwizzle,
    ArbTextureView,
    ArbTimerQuery,
    ArbTransformFeedback2,
    ArbTransformFeedback3,
    ArbTransformFeedbackInstanced,
    ArbTransformFeedbackOverflowQuery,
    ArbTransposeMatrix,
    ArbUniformBufferObject,
    ArbVertexArrayBgra,
    ArbVertexArrayObject,
    ArbVertexAttrib64bit,
    ArbVertexAttribBinding,
    ArbVertexBlend,
    ArbVertexBufferObject,
    ArbVertexProgram,
    ArbVertexShader,
    ArbVertexType10f11f11fRev,
    ArbVertexType2101010Rev,
    ArbViewportArray,
    ArbWindowPos,
    ArmMaliProgramBinary,
    ArmMaliShaderBinary,
    ArmRgba8,
    ArmShaderFramebufferFetch,
    ArmShaderFramebufferFetchDepthStencil,
    ArmTextureUnnormalizedCoordinates,
    AtiDrawBuffers,
    AtiElementArray,
    AtiEnvmapBumpmap,
    AtiFragmentShader,
    AtiMapObjectBuffer,
    AtiMeminfo,
    AtiPixelFormatFloat,
    AtiPnTriangles,
    AtiSeparateStencil,
    AtiTextFragmentShader,
    AtiTextureEnvCombine3,
    AtiTextureFloat,
    AtiTextureMirrorOnce,
    AtiVertexArrayObject,
    AtiVertexAttribArrayObject,
    AtiVertexStreams,
    DmpProgramBinary,
    DmpShaderBinary,
    Ext422Pixels,
    ExtEglImageArray,
    ExtEglImageStorage,
    ExtEglImageStorageCompression,
    ExtEglSync,
    ExtYuvTarget,
    ExtAbgr,
    ExtBaseInstance,
    ExtBgra,
    ExtBindableUniform,
    ExtBlendColor,
    ExtBlendEquationSeparate,
    ExtBlendFuncExtended,
    ExtBlendFuncSeparate,
    ExtBlendLogicOp,
    ExtBlendMinmax,
    ExtBlendSubtract,
    ExtBufferStorage,
    ExtClearTexture,
    ExtClipControl,
    ExtClipCullDistance,
    ExtClipVolumeHint,
    ExtCmyka,
    ExtColorBufferFloat,
    ExtColorBufferHalfFloat,
    ExtColorSubtable,
    ExtCompiledVertexArray,
    ExtConservativeDepth,
    ExtConvolution,
    ExtCoordinateFrame,
    ExtCopyImage,
    ExtCopyTexture,
    ExtCullVertex,
    ExtDebugLabel,
    ExtDebugMarker,
    ExtDepthBoundsTest,
    ExtDepthClamp,
    ExtDirectStateAccess,
    ExtDiscardFramebuffer,
    ExtDisjointTimerQuery,
    ExtDrawBuffers,
    ExtDrawBuffers2,
    ExtDrawBuffersIndexed,
    ExtDrawElementsBaseVertex,
    ExtDrawInstanced,
    ExtDrawRangeElements,
    ExtDrawTransformFeedback,
    ExtExternalBuffer,
    ExtFloatBlend,
    ExtFogCoord,
    ExtFragmentShadingRate,
    ExtFramebufferBlit,
    ExtFramebufferMultisample,
    ExtFramebufferMultisampleBlitScaled,
    ExtFramebufferObject,
    ExtFramebufferSrgb,
    ExtGeometryPointSize,
    ExtGeometryShader,
    ExtGeometryShader4,
    ExtGpuProgramParameters,
    ExtGpuShader4,
    ExtGpuShader5,
    ExtHistogram,
    ExtIndexArrayFormats,
    ExtIndexFunc,
    ExtIndexMaterial,
    ExtIndexTexture,
    ExtInstancedArrays,
    ExtLightTexture,
    ExtMapBufferRange,
    ExtMemoryObject,
    ExtMemoryObjectFd,
    ExtMemoryObjectWin32,
    ExtMiscAttribute,
    ExtMultiDrawArrays,
    ExtMultiDrawIndirect,
    ExtMultisample,
    ExtMultisampledCompatibility,
    ExtMultisampledRenderToTexture,
    ExtMultisampledRenderToTexture2,
    ExtMultiviewDrawBuffers,
    ExtMultiviewTessellationGeometryShader,
    ExtMultiviewTextureMultisample,
    ExtMultiviewTimerQuery,
    ExtOcclusionQueryBoolean,
    ExtPackedDepthStencil,
    ExtPackedFloat,
    ExtPackedPixels,
    ExtPalettedTexture,
    ExtPixelBufferObject,
    ExtPixelTransform,
    ExtPixelTransformColorTable,
    ExtPointParameters,
    ExtPolygonOffset,
    ExtPolygonOffsetClamp,
    ExtPostDepthCoverage,
    ExtPrimitiveBoundingBox,
    ExtProtectedTextures,
    ExtProvokingVertex,
    ExtPvrtcSrgb,
    ExtRasterMultisample,
    ExtReadFormatBgra,
    ExtRenderSnorm,
    ExtRescaleNormal,
    ExtRobustness,
    ExtSemaphore,
    ExtSemaphoreFd,
    ExtSemaphoreWin32,
    ExtSrgb,
    ExtSrgbWriteControl,
    ExtSecondaryColor,
    ExtSeparateDepthStencil,
    ExtSeparateShaderObjects,
    ExtSeparateSpecularColor,
    ExtShaderFramebufferFetch,
    ExtShaderFramebufferFetchNonCoherent,
    ExtShaderGroupVote,
    ExtShaderImageLoadFormatted,
    ExtShaderImageLoadStore,
    ExtShaderImplicitConversions,
    ExtShaderIntegerMix,
    ExtShaderIoBlocks,
    ExtShaderNonConstantGlobalInitializers,
    ExtShaderPixelLocalStorage,
    ExtShaderPixelLocalStorage2,
    ExtShaderSamplesIdentical,
    ExtShaderTextureLod,
    ExtShadowFuncs,
    ExtShadowSamplers,
    ExtSharedTexturePalette,
    ExtSparseTexture,
    ExtSparseTexture2,
    ExtStencilClearTag,
    ExtStencilTwoSide,
    ExtStencilWrap,
    ExtSubtexture,
    ExtTessellationPointSize,
    ExtTessellationShader,
    ExtTexture,
    ExtTexture3d,
    ExtTextureArray,
    ExtTextureBorderClamp,
    ExtTextureBuffer,
    ExtTextureBufferObject,
    ExtTextureCompressionAstcDecodeMode,
    ExtTextureCompressionBptc,
    ExtTextureCompressionDxt1,
    ExtTextureCompressionLatc,
    ExtTextureCompressionRgtc,
    ExtTextureCompressionS3tc,
    ExtTextureCompressionS3tcSrgb,
    ExtTextureCubeMap,
    ExtTextureCubeMapArray,
    ExtTextureEnvAdd,
    ExtTextureEnvCombine,
    ExtTextureEnvDot3,
    ExtTextureFilterAnisotropic,
    ExtTextureFilterMinmax,
    ExtTextureFormatBgra8888,
    ExtTextureFormatSrgbOverride,
    ExtTextureInteger,
    ExtTextureLodBias,
    ExtTextureMirrorClamp,
    ExtTextureMirrorClampToEdge,
    ExtTextureNorm16,
    ExtTextureObject,
    ExtTexturePerturbNormal,
    ExtTextureQueryLod,
    ExtTextureRg,
    ExtTextureSrgb,
    ExtTextureSrgbR8,
    ExtTextureSrgbRg8,
    ExtTextureSrgbDecode,
    ExtTextureSharedExponent,
    ExtTextureSnorm,
    ExtTextureStorage,
    ExtTextureStorageCompression,
    ExtTextureSwizzle,
    ExtTextureType2101010Rev,
    ExtTextureView,
    NvTimelineSemaphore,
    ExtTimerQuery,
    ExtTransformFeedback,
    ExtUnpackSubimage,
    ExtVertexArray,
    ExtVertexArrayBgra,
    ExtVertexAttrib64bit,
    ExtVertexShader,
    ExtVertexWeighting,
    ExtWin32KeyedMutex,
    ExtWindowRectangles,
    ExtX11SyncObject,
    FjShaderBinaryGccso,
    GremedyFrameTerminator,
    GremedyStringMarker,
    HpConvolutionBorderModes,
    HpImageTransform,
    HpOcclusionTest,
    HpTextureLighting,
    IbmCullVertex,
    IbmMultimodeDrawArrays,
    IbmRasterposClip,
    IbmStaticData,
    IbmTextureMirroredRepeat,
    IbmVertexArrayLists,
    ImgBindlessTexture,
    ImgFramebufferDownsample,
    ImgMultisampledRenderToTexture,
    ImgProgramBinary,
    ImgReadFormat,
    ImgShaderBinary,
    ImgTextureCompressionPvrtc,
    ImgTextureCompressionPvrtc2,
    ImgTextureEnvEnhancedFixedFunction,
    ImgTextureFilterCubic,
    ImgUserClipPlane,
    ImgTileRegionProtection,
    IngrBlendFuncSeparate,
    IngrColorClamp,
    IngrInterlaceRead,
    IntelConservativeRasterization,
    IntelFragmentShaderOrdering,
    IntelFramebufferCmaa,
    IntelMapTexture,
    IntelBlackholeRender,
    IntelParallelArrays,
    IntelPerformanceQuery,
    KhrBlendEquationAdvanced,
    KhrBlendEquationAdvancedCoherent,
    KhrContextFlushControl,
    KhrDebug,
    KhrNoError,
    KhrRobustBufferAccessBehavior,
    KhrRobustness,
    KhrShaderSubgroup,
    KhrTextureCompressionAstcHdr,
    KhrTextureCompressionAstcLdr,
    KhrTextureCompressionAstcSliced3d,
    KhrParallelShaderCompile,
    MesaxTextureStack,
    MesaBgra,
    MesaFramebufferFlipX,
    MesaFramebufferFlipY,
    MesaFramebufferSwapXy,
    MesaPackInvert,
    MesaProgramBinaryFormats,
    MesaResizeBuffers,
    MesaShaderIntegerFunctions,
    MesaTileRasterOrder,
    MesaWindowPos,
    MesaYcbcrTexture,
    NvxBlendEquationAdvancedMultiDrawBuffers,
    NvxCrossProcessInterop,
    NvxConditionalRender,
    NvxGpuMemoryInfo,
    NvxLinkedGpuMulticast,
    NvAlphaToCoverageDitherControl,
    NvBindlessMultiDrawIndirect,
    NvBindlessMultiDrawIndirectCount,
    NvBindlessTexture,
    NvBlendEquationAdvanced,
    NvBlendEquationAdvancedCoherent,
    NvBlendMinmaxFactor,
    NvBlendSquare,
    NvClipSpaceWScaling,
    NvCommandList,
    NvComputeProgram5,
    NvComputeShaderDerivatives,
    NvConditionalRender,
    NvConservativeRaster,
    NvConservativeRasterDilate,
    NvConservativeRasterPreSnap,
    NvConservativeRasterPreSnapTriangles,
    NvConservativeRasterUnderestimation,
    NvCopyBuffer,
    NvCopyDepthToColor,
    NvCopyImage,
    NvCoverageSample,
    NvDeepTexture3d,
    NvDepthBufferFloat,
    NvDepthClamp,
    NvDepthNonlinear,
    NvDrawBuffers,
    NvDrawInstanced,
    NvDrawTexture,
    NvDrawVulkanImage,
    NvEvaluators,
    NvExplicitAttribLocation,
    NvExplicitMultisample,
    NvFboColorAttachments,
    NvFence,
    NvFillRectangle,
    NvFloatBuffer,
    NvFogDistance,
    NvFragmentCoverageToColor,
    NvFragmentProgram,
    NvFragmentProgram2,
    NvFragmentProgram4,
    NvFragmentProgramOption,
    NvFragmentShaderBarycentric,
    NvFragmentShaderInterlock,
    NvFramebufferBlit,
    NvFramebufferMixedSamples,
    NvFramebufferMultisample,
    NvFramebufferMultisampleCoverage,
    NvGenerateMipmapSrgb,
    NvGeometryProgram4,
    NvGeometryShader4,
    NvGeometryShaderPassthrough,
    NvGpuProgram4,
    NvGpuProgram5,
    NvGpuProgram5MemExtended,
    NvGpuShader5,
    NvHalfFloat,
    NvImageFormats,
    NvInstancedArrays,
    NvInternalformatSampleQuery,
    NvLightMaxExponent,
    NvGpuMulticast,
    NvxGpuMulticast2,
    NvxProgressFence,
    NvMemoryAttachment,
    NvMemoryObjectSparse,
    NvMeshShader,
    NvMultisampleCoverage,
    NvMultisampleFilterHint,
    NvNonSquareMatrices,
    NvOcclusionQuery,
    NvPackedDepthStencil,
    NvParameterBufferObject,
    NvParameterBufferObject2,
    NvPathRendering,
    NvPathRenderingSharedEdge,
    NvPixelDataRange,
    NvPixelBufferObject,
    NvPointSprite,
    NvPolygonMode,
    NvPresentVideo,
    NvPrimitiveRestart,
    NvPrimitiveShadingRate,
    NvQueryResource,
    NvQueryResourceTag,
    NvReadBuffer,
    NvReadBufferFront,
    NvReadDepth,
    NvReadDepthStencil,
    NvReadStencil,
    NvRegisterCombiners,
    NvRegisterCombiners2,
    NvRepresentativeFragmentTest,
    NvRobustnessVideoMemoryPurge,
    NvSrgbFormats,
    NvSampleLocations,
    NvSampleMaskOverrideCoverage,
    NvScissorExclusive,
    NvShaderAtomicCounters,
    NvShaderAtomicFloat,
    NvShaderAtomicFloat64,
    NvShaderAtomicFp16Vector,
    NvShaderAtomicInt64,
    NvShaderBufferLoad,
    NvShaderBufferStore,
    NvShaderNoperspectiveInterpolation,
    NvShaderStorageBufferObject,
    NvShaderSubgroupPartitioned,
    NvShaderTextureFootprint,
    NvShaderThreadGroup,
    NvShaderThreadShuffle,
    NvShadingRateImage,
    NvShadowSamplersArray,
    NvShadowSamplersCube,
    NvStereoViewRendering,
    NvTessellationProgram5,
    NvTexgenEmboss,
    NvTexgenReflection,
    NvTextureBarrier,
    NvTextureBorderClamp,
    NvTextureCompressionS3tcUpdate,
    NvTextureCompressionVtc,
    NvTextureEnvCombine4,
    NvTextureExpandNormal,
    NvTextureMultisample,
    NvTextureNpot2dMipmap,
    NvTextureRectangle,
    NvTextureRectangleCompressed,
    NvTextureShader,
    NvTextureShader2,
    NvTextureShader3,
    NvTransformFeedback,
    NvTransformFeedback2,
    NvUniformBufferUnifiedMemory,
    NvVdpauInterop,
    NvVdpauInterop2,
    NvVertexArrayRange,
    NvVertexArrayRange2,
    NvVertexAttribInteger64bit,
    NvVertexBufferUnifiedMemory,
    NvVertexProgram,
    NvVertexProgram11,
    NvVertexProgram2,
    NvVertexProgram2Option,
    NvVertexProgram3,
    NvVertexProgram4,
    NvVideoCapture,
    NvViewportArray,
    NvViewportArray2,
    NvViewportSwizzle,
    OesEglImage,
    OesEglImageExternal,
    OesEglImageExternalEssl3,
    OesBlendEquationSeparate,
    OesBlendFuncSeparate,
    OesBlendSubtract,
    OesByteCoordinates,
    OesCompressedEtc1Rgb8SubTexture,
    OesCompressedEtc1Rgb8Texture,
    OesCompressedPalettedTexture,
    OesCopyImage,
    OesDepth24,
    OesDepth32,
    OesDepthTexture,
    OesDrawBuffersIndexed,
    OesDrawElementsBaseVertex,
    OesDrawTexture,
    OesElementIndexUint,
    OesExtendedMatrixPalette,
    OesFboRenderMipmap,
    OesFixedPoint,
    OesFragmentPrecisionHigh,
    OesFramebufferObject,
    OesGeometryPointSize,
    OesGeometryShader,
    OesGetProgramBinary,
    OesGpuShader5,
    OesMapbuffer,
    OesMatrixGet,
    OesMatrixPalette,
    OesPackedDepthStencil,
    OesPointSizeArray,
    OesPointSprite,
    OesPrimitiveBoundingBox,
    OesQueryMatrix,
    OesReadFormat,
    OesRequiredInternalformat,
    OesRgb8Rgba8,
    OesSampleShading,
    OesSampleVariables,
    OesShaderImageAtomic,
    OesShaderIoBlocks,
    OesShaderMultisampleInterpolation,
    OesSinglePrecision,
    OesStandardDerivatives,
    OesStencil1,
    OesStencil4,
    OesStencil8,
    OesStencilWrap,
    OesSurfacelessContext,
    OesTessellationPointSize,
    OesTessellationShader,
    OesTexture3d,
    OesTextureBorderClamp,
    OesTextureBuffer,
    OesTextureCompressionAstc,
    OesTextureCubeMap,
    OesTextureCubeMapArray,
    OesTextureEnvCrossbar,
    OesTextureFloat,
    OesTextureFloatLinear,
    OesTextureHalfFloat,
    OesTextureHalfFloatLinear,
    OesTextureMirroredRepeat,
    OesTextureNpot,
    OesTextureStencil8,
    OesTextureStorageMultisample2dArray,
    OesTextureView,
    OesVertexArrayObject,
    OesVertexHalfFloat,
    OesVertexType1010102,
    OesViewportArray,
    OmlInterlace,
    OmlResample,
    OmlSubsample,
    OvrMultiview,
    OvrMultiview2,
    OvrMultiviewMultisampledRenderToTexture,
    PgiMiscHints,
    PgiVertexHints,
    QcomAlphaTest,
    QcomBinningControl,
    QcomDriverControl,
    QcomExtendedGet,
    QcomExtendedGet2,
    QcomFramebufferFoveated,
    QcomMotionEstimation,
    QcomFrameExtrapolation,
    QcomRenderSharedExponent,
    QcomTextureFoveated,
    QcomTextureFoveated2,
    QcomTextureFoveatedSubsampledLayout,
    QcomPerfmonGlobalMode,
    QcomShaderFramebufferFetchNoncoherent,
    QcomShaderFramebufferFetchRate,
    QcomShadingRate,
    QcomTiledRendering,
    QcomWriteonlyRendering,
    QcomYuvTextureGather,
    RendScreenCoordinates,
    S3S3tc,
    SgisDetailTexture,
    SgisFogFunction,
    SgisGenerateMipmap,
    SgisMultisample,
    SgisPixelTexture,
    SgisPointLineTexgen,
    SgisPointParameters,
    SgisSharpenTexture,
    SgisTexture4d,
    SgisTextureBorderClamp,
    SgisTextureColorMask,
    SgisTextureEdgeClamp,
    SgisTextureFilter4,
    SgisTextureLod,
    SgisTextureSelect,
    SgixAsync,
    SgixAsyncHistogram,
    SgixAsyncPixel,
    SgixBlendAlphaMinmax,
    SgixCalligraphicFragment,
    SgixClipmap,
    SgixConvolutionAccuracy,
    SgixDepthPassInstrument,
    SgixDepthTexture,
    SgixFlushRaster,
    SgixFogOffset,
    SgixFragmentLighting,
    SgixFramezoom,
    SgixIglooInterface,
    SgixInstruments,
    SgixInterlace,
    SgixIrInstrument1,
    SgixListPriority,
    SgixPixelTexture,
    SgixPixelTiles,
    SgixPolynomialFfd,
    SgixReferencePlane,
    SgixResample,
    SgixScalebiasHint,
    SgixShadow,
    SgixShadowAmbient,
    SgixSprite,
    SgixSubsample,
    SgixTagSampleBuffer,
    SgixTextureAddEnv,
    SgixTextureCoordinateClamp,
    SgixTextureLodBias,
    SgixTextureMultiBuffer,
    SgixTextureScaleBias,
    SgixVertexPreclip,
    SgixYcrcb,
    SgixYcrcbSubsample,
    SgixYcrcba,
    SgiColorMatrix,
    SgiColorTable,
    SgiTextureColorTable,
    SunxConstantData,
    SunConvolutionBorderModes,
    SunGlobalAlpha,
    SunMeshArray,
    SunSliceAccum,
    SunTriangleList,
    SunVertex,
    VivShaderBinary,
    WinPhongShading,
    WinSpecularFog,
    ExtTextureShadowLod
};

enum class OpenGLVersion {
    CoreProfile_32,
    CoreProfile_33,
    CoreProfile_40,
    CoreProfile_41,
    CoreProfile_42,
    CoreProfile_43,
    CoreProfile_44,
    CoreProfile_45,
    CoreProfile_46,
    CompatibilityProfile_32,
    CompatibilityProfile_33,
    CompatibilityProfile_40,
    CompatibilityProfile_41,
    CompatibilityProfile_42,
    CompatibilityProfile_43,
    CompatibilityProfile_44,
    CompatibilityProfile_45,
    CompatibilityProfile_46,
    ES_10,
    ES_11,
    ES_20,
    ES_30,
    ES_31,
    ES_32
};

struct OpenGLOptions {
    std::optional<std::shared_ptr<boom::OpenGL const>> shared;
    std::optional<std::shared_ptr<boom::View const>> view;
    std::optional<boom::OpenGLVersion> version;
    std::optional<bool> debug;
};

class OpenGL : public boom::Object {
public:
    OpenGL(boom::OpenGLOptions const& = {});
    void accum(boom::OpenGLEnum op, boom::OpenGLFloat value) const;
    void accumxOES(boom::OpenGLEnum op, boom::OpenGLFixed value) const;
    boom::OpenGLBoolean acquireKeyedMutexWin32EXT(boom::OpenGLUInt memory, boom::OpenGLUInt64 key, boom::OpenGLUInt timeout) const;
    void activeProgramEXT(boom::OpenGLUInt program) const;
    void activeShaderProgram(boom::OpenGLUInt pipeline, boom::OpenGLUInt program) const;
    void activeShaderProgramEXT(boom::OpenGLUInt pipeline, boom::OpenGLUInt program) const;
    void activeStencilFaceEXT(boom::OpenGLEnum face) const;
    void activeTexture(boom::OpenGLEnum texture) const;
    void activeTextureARB(boom::OpenGLEnum texture) const;
    void activeVaryingNV(boom::OpenGLUInt program, boom::OpenGLChar const* name) const;
    void alphaFragmentOp1ATI(boom::OpenGLEnum op, boom::OpenGLUInt dst, boom::OpenGLUInt dstMod, boom::OpenGLUInt arg1, boom::OpenGLUInt arg1Rep, boom::OpenGLUInt arg1Mod) const;
    void alphaFragmentOp2ATI(boom::OpenGLEnum op, boom::OpenGLUInt dst, boom::OpenGLUInt dstMod, boom::OpenGLUInt arg1, boom::OpenGLUInt arg1Rep, boom::OpenGLUInt arg1Mod, boom::OpenGLUInt arg2, boom::OpenGLUInt arg2Rep, boom::OpenGLUInt arg2Mod) const;
    void alphaFragmentOp3ATI(boom::OpenGLEnum op, boom::OpenGLUInt dst, boom::OpenGLUInt dstMod, boom::OpenGLUInt arg1, boom::OpenGLUInt arg1Rep, boom::OpenGLUInt arg1Mod, boom::OpenGLUInt arg2, boom::OpenGLUInt arg2Rep, boom::OpenGLUInt arg2Mod, boom::OpenGLUInt arg3, boom::OpenGLUInt arg3Rep, boom::OpenGLUInt arg3Mod) const;
    void alphaFunc(boom::OpenGLEnum func, boom::OpenGLFloat ref) const;
    void alphaFuncQCOM(boom::OpenGLEnum func, boom::OpenGLClampf ref) const;
    void alphaFuncx(boom::OpenGLEnum func, boom::OpenGLFixed ref) const;
    void alphaFuncxOES(boom::OpenGLEnum func, boom::OpenGLFixed ref) const;
    void alphaToCoverageDitherControlNV(boom::OpenGLEnum mode) const;
    void applyFramebufferAttachmentCMAAINTEL() const;
    void applyTextureEXT(boom::OpenGLEnum mode) const;
    boom::OpenGLBoolean areProgramsResidentNV(boom::OpenGLSizei n, boom::OpenGLUInt const* programs, boom::OpenGLBoolean* residences) const;
    boom::OpenGLBoolean areTexturesResident(boom::OpenGLSizei n, boom::OpenGLUInt const* textures, boom::OpenGLBoolean* residences) const;
    boom::OpenGLBoolean areTexturesResidentEXT(boom::OpenGLSizei n, boom::OpenGLUInt const* textures, boom::OpenGLBoolean* residences) const;
    void arrayElement(boom::OpenGLInt i) const;
    void arrayElementEXT(boom::OpenGLInt i) const;
    void arrayObjectATI(boom::OpenGLEnum array, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLUInt buffer, boom::OpenGLUInt offset) const;
    boom::OpenGLUInt asyncCopyBufferSubDataNVX(boom::OpenGLSizei waitSemaphoreCount, boom::OpenGLUInt const* waitSemaphoreArray, boom::OpenGLUInt64 const* fenceValueArray, boom::OpenGLUInt readGpu, boom::OpenGLBitfield writeGpuMask, boom::OpenGLUInt readBuffer, boom::OpenGLUInt writeBuffer, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size, boom::OpenGLSizei signalSemaphoreCount, boom::OpenGLUInt const* signalSemaphoreArray, boom::OpenGLUInt64 const* signalValueArray) const;
    boom::OpenGLUInt asyncCopyImageSubDataNVX(boom::OpenGLSizei waitSemaphoreCount, boom::OpenGLUInt const* waitSemaphoreArray, boom::OpenGLUInt64 const* waitValueArray, boom::OpenGLUInt srcGpu, boom::OpenGLBitfield dstGpuMask, boom::OpenGLUInt srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUInt dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei srcWidth, boom::OpenGLSizei srcHeight, boom::OpenGLSizei srcDepth, boom::OpenGLSizei signalSemaphoreCount, boom::OpenGLUInt const* signalSemaphoreArray, boom::OpenGLUInt64 const* signalValueArray) const;
    void asyncMarkerSGIX(boom::OpenGLUInt marker) const;
    void attachObjectARB(boom::OpenGLHandleARB containerObj, boom::OpenGLHandleARB obj) const;
    void attachShader(boom::OpenGLUInt program, boom::OpenGLUInt shader) const;
    void begin(boom::OpenGLEnum mode) const;
    void beginConditionalRender(boom::OpenGLUInt id, boom::OpenGLEnum mode) const;
    void beginConditionalRenderNV(boom::OpenGLUInt id, boom::OpenGLEnum mode) const;
    void beginConditionalRenderNVX(boom::OpenGLUInt id) const;
    void beginFragmentShaderATI() const;
    void beginOcclusionQueryNV(boom::OpenGLUInt id) const;
    void beginPerfMonitorAMD(boom::OpenGLUInt monitor) const;
    void beginPerfQueryINTEL(boom::OpenGLUInt queryHandle) const;
    void beginQuery(boom::OpenGLEnum target, boom::OpenGLUInt id) const;
    void beginQueryARB(boom::OpenGLEnum target, boom::OpenGLUInt id) const;
    void beginQueryEXT(boom::OpenGLEnum target, boom::OpenGLUInt id) const;
    void beginQueryIndexed(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt id) const;
    void beginTransformFeedback(boom::OpenGLEnum primitiveMode) const;
    void beginTransformFeedbackEXT(boom::OpenGLEnum primitiveMode) const;
    void beginTransformFeedbackNV(boom::OpenGLEnum primitiveMode) const;
    void beginVertexShaderEXT() const;
    void beginVideoCaptureNV(boom::OpenGLUInt video_capture_slot) const;
    void bindAttribLocation(boom::OpenGLUInt program, boom::OpenGLUInt index, boom::OpenGLChar const* name) const;
    void bindAttribLocationARB(boom::OpenGLHandleARB programObj, boom::OpenGLUInt index, boom::OpenGLCharARB const* name) const;
    void bindBuffer(boom::OpenGLEnum target, boom::OpenGLUInt buffer) const;
    void bindBufferARB(boom::OpenGLEnum target, boom::OpenGLUInt buffer) const;
    void bindBufferBase(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt buffer) const;
    void bindBufferBaseEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt buffer) const;
    void bindBufferBaseNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt buffer) const;
    void bindBufferOffsetEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset) const;
    void bindBufferOffsetNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset) const;
    void bindBufferRange(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void bindBufferRangeEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void bindBufferRangeNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void bindBuffersBase(boom::OpenGLEnum target, boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLUInt const* buffers) const;
    void bindBuffersRange(boom::OpenGLEnum target, boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLUInt const* buffers, boom::OpenGLIntptr const* offsets, boom::OpenGLSizeiptr const* sizes) const;
    void bindFragDataLocation(boom::OpenGLUInt program, boom::OpenGLUInt color, boom::OpenGLChar const* name) const;
    void bindFragDataLocationEXT(boom::OpenGLUInt program, boom::OpenGLUInt color, boom::OpenGLChar const* name) const;
    void bindFragDataLocationIndexed(boom::OpenGLUInt program, boom::OpenGLUInt colorNumber, boom::OpenGLUInt index, boom::OpenGLChar const* name) const;
    void bindFragDataLocationIndexedEXT(boom::OpenGLUInt program, boom::OpenGLUInt colorNumber, boom::OpenGLUInt index, boom::OpenGLChar const* name) const;
    void bindFragmentShaderATI(boom::OpenGLUInt id) const;
    void bindFramebuffer(boom::OpenGLEnum target, boom::OpenGLUInt framebuffer) const;
    void bindFramebufferEXT(boom::OpenGLEnum target, boom::OpenGLUInt framebuffer) const;
    void bindFramebufferOES(boom::OpenGLEnum target, boom::OpenGLUInt framebuffer) const;
    void bindImageTexture(boom::OpenGLUInt unit, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLBoolean layered, boom::OpenGLInt layer, boom::OpenGLEnum access, boom::OpenGLEnum format) const;
    void bindImageTextureEXT(boom::OpenGLUInt index, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLBoolean layered, boom::OpenGLInt layer, boom::OpenGLEnum access, boom::OpenGLInt format) const;
    void bindImageTextures(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLUInt const* textures) const;
    boom::OpenGLUInt bindLightParameterEXT(boom::OpenGLEnum light, boom::OpenGLEnum value) const;
    boom::OpenGLUInt bindMaterialParameterEXT(boom::OpenGLEnum face, boom::OpenGLEnum value) const;
    void bindMultiTextureEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLUInt texture) const;
    boom::OpenGLUInt bindParameterEXT(boom::OpenGLEnum value) const;
    void bindProgramARB(boom::OpenGLEnum target, boom::OpenGLUInt program) const;
    void bindProgramNV(boom::OpenGLEnum target, boom::OpenGLUInt id) const;
    void bindProgramPipeline(boom::OpenGLUInt pipeline) const;
    void bindProgramPipelineEXT(boom::OpenGLUInt pipeline) const;
    void bindRenderbuffer(boom::OpenGLEnum target, boom::OpenGLUInt renderbuffer) const;
    void bindRenderbufferEXT(boom::OpenGLEnum target, boom::OpenGLUInt renderbuffer) const;
    void bindRenderbufferOES(boom::OpenGLEnum target, boom::OpenGLUInt renderbuffer) const;
    void bindSampler(boom::OpenGLUInt unit, boom::OpenGLUInt sampler) const;
    void bindSamplers(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLUInt const* samplers) const;
    void bindShadingRateImageNV(boom::OpenGLUInt texture) const;
    boom::OpenGLUInt bindTexGenParameterEXT(boom::OpenGLEnum unit, boom::OpenGLEnum coord, boom::OpenGLEnum value) const;
    void bindTexture(boom::OpenGLEnum target, boom::OpenGLUInt texture) const;
    void bindTextureEXT(boom::OpenGLEnum target, boom::OpenGLUInt texture) const;
    void bindTextures(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLUInt const* textures) const;
    void bindTextureUnit(boom::OpenGLUInt unit, boom::OpenGLUInt texture) const;
    boom::OpenGLUInt bindTextureUnitParameterEXT(boom::OpenGLEnum unit, boom::OpenGLEnum value) const;
    void bindTransformFeedback(boom::OpenGLEnum target, boom::OpenGLUInt id) const;
    void bindTransformFeedbackNV(boom::OpenGLEnum target, boom::OpenGLUInt id) const;
    void bindVertexArray(boom::OpenGLUInt array) const;
    void bindVertexArrayAPPLE(boom::OpenGLUInt array) const;
    void bindVertexArrayOES(boom::OpenGLUInt array) const;
    void bindVertexBuffer(boom::OpenGLUInt bindingindex, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizei stride) const;
    void bindVertexBuffers(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLUInt const* buffers, boom::OpenGLIntptr const* offsets, boom::OpenGLSizei const* strides) const;
    void bindVertexShaderEXT(boom::OpenGLUInt id) const;
    void bindVideoCaptureStreamBufferNV(boom::OpenGLUInt video_capture_slot, boom::OpenGLUInt stream, boom::OpenGLEnum frame_region, boom::OpenGLIntptrARB offset) const;
    void bindVideoCaptureStreamTextureNV(boom::OpenGLUInt video_capture_slot, boom::OpenGLUInt stream, boom::OpenGLEnum frame_region, boom::OpenGLEnum target, boom::OpenGLUInt texture) const;
    void binormal3bEXT(boom::OpenGLByte bx, boom::OpenGLByte by, boom::OpenGLByte bz) const;
    void binormal3bvEXT(boom::OpenGLByte const* v) const;
    void binormal3dEXT(boom::OpenGLDouble bx, boom::OpenGLDouble by, boom::OpenGLDouble bz) const;
    void binormal3dvEXT(boom::OpenGLDouble const* v) const;
    void binormal3fEXT(boom::OpenGLFloat bx, boom::OpenGLFloat by, boom::OpenGLFloat bz) const;
    void binormal3fvEXT(boom::OpenGLFloat const* v) const;
    void binormal3iEXT(boom::OpenGLInt bx, boom::OpenGLInt by, boom::OpenGLInt bz) const;
    void binormal3ivEXT(boom::OpenGLInt const* v) const;
    void binormal3sEXT(boom::OpenGLShort bx, boom::OpenGLShort by, boom::OpenGLShort bz) const;
    void binormal3svEXT(boom::OpenGLShort const* v) const;
    void binormalPointerEXT(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void bitmap(boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLFloat xorig, boom::OpenGLFloat yorig, boom::OpenGLFloat xmove, boom::OpenGLFloat ymove, boom::OpenGLUByte const* bitmap) const;
    void bitmapxOES(boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLFixed xorig, boom::OpenGLFixed yorig, boom::OpenGLFixed xmove, boom::OpenGLFixed ymove, boom::OpenGLUByte const* bitmap) const;
    void blendBarrier() const;
    void blendBarrierKHR() const;
    void blendBarrierNV() const;
    void blendColor(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void blendColorEXT(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void blendColorxOES(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void blendEquation(boom::OpenGLEnum mode) const;
    void blendEquationEXT(boom::OpenGLEnum mode) const;
    void blendEquationi(boom::OpenGLUInt buf, boom::OpenGLEnum mode) const;
    void blendEquationiARB(boom::OpenGLUInt buf, boom::OpenGLEnum mode) const;
    void blendEquationiEXT(boom::OpenGLUInt buf, boom::OpenGLEnum mode) const;
    void blendEquationIndexedAMD(boom::OpenGLUInt buf, boom::OpenGLEnum mode) const;
    void blendEquationiOES(boom::OpenGLUInt buf, boom::OpenGLEnum mode) const;
    void blendEquationOES(boom::OpenGLEnum mode) const;
    void blendEquationSeparate(boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateEXT(boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparatei(boom::OpenGLUInt buf, boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateiARB(boom::OpenGLUInt buf, boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateiEXT(boom::OpenGLUInt buf, boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateIndexedAMD(boom::OpenGLUInt buf, boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateiOES(boom::OpenGLUInt buf, boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateOES(boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendFunc(boom::OpenGLEnum sfactor, boom::OpenGLEnum dfactor) const;
    void blendFunci(boom::OpenGLUInt buf, boom::OpenGLEnum src, boom::OpenGLEnum dst) const;
    void blendFunciARB(boom::OpenGLUInt buf, boom::OpenGLEnum src, boom::OpenGLEnum dst) const;
    void blendFunciEXT(boom::OpenGLUInt buf, boom::OpenGLEnum src, boom::OpenGLEnum dst) const;
    void blendFuncIndexedAMD(boom::OpenGLUInt buf, boom::OpenGLEnum src, boom::OpenGLEnum dst) const;
    void blendFunciOES(boom::OpenGLUInt buf, boom::OpenGLEnum src, boom::OpenGLEnum dst) const;
    void blendFuncSeparate(boom::OpenGLEnum sfactorRGB, boom::OpenGLEnum dfactorRGB, boom::OpenGLEnum sfactorAlpha, boom::OpenGLEnum dfactorAlpha) const;
    void blendFuncSeparateEXT(boom::OpenGLEnum sfactorRGB, boom::OpenGLEnum dfactorRGB, boom::OpenGLEnum sfactorAlpha, boom::OpenGLEnum dfactorAlpha) const;
    void blendFuncSeparatei(boom::OpenGLUInt buf, boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendFuncSeparateiARB(boom::OpenGLUInt buf, boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendFuncSeparateiEXT(boom::OpenGLUInt buf, boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendFuncSeparateIndexedAMD(boom::OpenGLUInt buf, boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendFuncSeparateINGR(boom::OpenGLEnum sfactorRGB, boom::OpenGLEnum dfactorRGB, boom::OpenGLEnum sfactorAlpha, boom::OpenGLEnum dfactorAlpha) const;
    void blendFuncSeparateiOES(boom::OpenGLUInt buf, boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendFuncSeparateOES(boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendParameteriNV(boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void blitFramebuffer(boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void blitFramebufferANGLE(boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void blitFramebufferEXT(boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void blitFramebufferNV(boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void blitNamedFramebuffer(boom::OpenGLUInt readFramebuffer, boom::OpenGLUInt drawFramebuffer, boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void bufferAddressRangeNV(boom::OpenGLEnum pname, boom::OpenGLUInt index, boom::OpenGLUInt64EXT address, boom::OpenGLSizeiptr length) const;
    void bufferAttachMemoryNV(boom::OpenGLEnum target, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void bufferData(boom::OpenGLEnum target, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLEnum usage) const;
    void bufferDataARB(boom::OpenGLEnum target, boom::OpenGLSizeiptrARB size, void const* data, boom::OpenGLEnum usage) const;
    void bufferPageCommitmentARB(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLBoolean commit) const;
    void bufferPageCommitmentMemNV(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLUInt memory, boom::OpenGLUInt64 memOffset, boom::OpenGLBoolean commit) const;
    void bufferParameteriAPPLE(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void bufferStorage(boom::OpenGLEnum target, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLBitfield flags) const;
    void bufferStorageEXT(boom::OpenGLEnum target, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLBitfield flags) const;
    void bufferStorageExternalEXT(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEGLClientBufferEXT clientBuffer, boom::OpenGLBitfield flags) const;
    void bufferStorageMemEXT(boom::OpenGLEnum target, boom::OpenGLSizeiptr size, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void bufferSubData(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void bufferSubDataARB(boom::OpenGLEnum target, boom::OpenGLIntptrARB offset, boom::OpenGLSizeiptrARB size, void const* data) const;
    void callCommandListNV(boom::OpenGLUInt list) const;
    void callList(boom::OpenGLUInt list) const;
    void callLists(boom::OpenGLSizei n, boom::OpenGLEnum type, void const* lists) const;
    boom::OpenGLEnum checkFramebufferStatus(boom::OpenGLEnum target) const;
    boom::OpenGLEnum checkFramebufferStatusEXT(boom::OpenGLEnum target) const;
    boom::OpenGLEnum checkFramebufferStatusOES(boom::OpenGLEnum target) const;
    boom::OpenGLEnum checkNamedFramebufferStatus(boom::OpenGLUInt framebuffer, boom::OpenGLEnum target) const;
    boom::OpenGLEnum checkNamedFramebufferStatusEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum target) const;
    void clampColor(boom::OpenGLEnum target, boom::OpenGLEnum clamp) const;
    void clampColorARB(boom::OpenGLEnum target, boom::OpenGLEnum clamp) const;
    void clear(boom::OpenGLBitfield mask) const;
    void clearAccum(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void clearAccumxOES(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void clearBufferData(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearBufferfi(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat depth, boom::OpenGLInt stencil) const;
    void clearBufferfv(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat const* value) const;
    void clearBufferiv(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLInt const* value) const;
    void clearBufferSubData(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearBufferuiv(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLUInt const* value) const;
    void clearColor(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void clearColorIiEXT(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue, boom::OpenGLInt alpha) const;
    void clearColorIuiEXT(boom::OpenGLUInt red, boom::OpenGLUInt green, boom::OpenGLUInt blue, boom::OpenGLUInt alpha) const;
    void clearColorx(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void clearColorxOES(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void clearDepth(boom::OpenGLDouble depth) const;
    void clearDepthdNV(boom::OpenGLDouble depth) const;
    void clearDepthf(boom::OpenGLFloat d) const;
    void clearDepthfOES(boom::OpenGLClampf depth) const;
    void clearDepthx(boom::OpenGLFixed depth) const;
    void clearDepthxOES(boom::OpenGLFixed depth) const;
    void clearIndex(boom::OpenGLFloat c) const;
    void clearNamedBufferData(boom::OpenGLUInt buffer, boom::OpenGLEnum internalformat, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearNamedBufferDataEXT(boom::OpenGLUInt buffer, boom::OpenGLEnum internalformat, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearNamedBufferSubData(boom::OpenGLUInt buffer, boom::OpenGLEnum internalformat, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearNamedBufferSubDataEXT(boom::OpenGLUInt buffer, boom::OpenGLEnum internalformat, boom::OpenGLSizeiptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearNamedFramebufferfi(boom::OpenGLUInt framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat depth, boom::OpenGLInt stencil) const;
    void clearNamedFramebufferfv(boom::OpenGLUInt framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat const* value) const;
    void clearNamedFramebufferiv(boom::OpenGLUInt framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLInt const* value) const;
    void clearNamedFramebufferuiv(boom::OpenGLUInt framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLUInt const* value) const;
    void clearPixelLocalStorageuiEXT(boom::OpenGLSizei offset, boom::OpenGLSizei n, boom::OpenGLUInt const* values) const;
    void clearStencil(boom::OpenGLInt s) const;
    void clearTexImage(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearTexImageEXT(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearTexSubImage(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearTexSubImageEXT(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clientActiveTexture(boom::OpenGLEnum texture) const;
    void clientActiveTextureARB(boom::OpenGLEnum texture) const;
    void clientActiveVertexStreamATI(boom::OpenGLEnum stream) const;
    void clientAttribDefaultEXT(boom::OpenGLBitfield mask) const;
    void clientWaitSemaphoreui64NVX(boom::OpenGLSizei fenceObjectCount, boom::OpenGLUInt const* semaphoreArray, boom::OpenGLUInt64 const* fenceValueArray) const;
    boom::OpenGLEnum clientWaitSync(boom::OpenGLSync sync, boom::OpenGLBitfield flags, boom::OpenGLUInt64 timeout) const;
    boom::OpenGLEnum clientWaitSyncAPPLE(boom::OpenGLSync sync, boom::OpenGLBitfield flags, boom::OpenGLUInt64 timeout) const;
    void clipControl(boom::OpenGLEnum origin, boom::OpenGLEnum depth) const;
    void clipControlEXT(boom::OpenGLEnum origin, boom::OpenGLEnum depth) const;
    void clipPlane(boom::OpenGLEnum plane, boom::OpenGLDouble const* equation) const;
    void clipPlanef(boom::OpenGLEnum p, boom::OpenGLFloat const* eqn) const;
    void clipPlanefIMG(boom::OpenGLEnum p, boom::OpenGLFloat const* eqn) const;
    void clipPlanefOES(boom::OpenGLEnum plane, boom::OpenGLFloat const* equation) const;
    void clipPlanex(boom::OpenGLEnum plane, boom::OpenGLFixed const* equation) const;
    void clipPlanexIMG(boom::OpenGLEnum p, boom::OpenGLFixed const* eqn) const;
    void clipPlanexOES(boom::OpenGLEnum plane, boom::OpenGLFixed const* equation) const;
    void color3b(boom::OpenGLByte red, boom::OpenGLByte green, boom::OpenGLByte blue) const;
    void color3bv(boom::OpenGLByte const* v) const;
    void color3d(boom::OpenGLDouble red, boom::OpenGLDouble green, boom::OpenGLDouble blue) const;
    void color3dv(boom::OpenGLDouble const* v) const;
    void color3f(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue) const;
    void color3fv(boom::OpenGLFloat const* v) const;
    void color3fVertex3fSUN(boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void color3fVertex3fvSUN(boom::OpenGLFloat const* c, boom::OpenGLFloat const* v) const;
    void color3hNV(boom::OpenGLHalfNV red, boom::OpenGLHalfNV green, boom::OpenGLHalfNV blue) const;
    void color3hvNV(boom::OpenGLHalfNV const* v) const;
    void color3i(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue) const;
    void color3iv(boom::OpenGLInt const* v) const;
    void color3s(boom::OpenGLShort red, boom::OpenGLShort green, boom::OpenGLShort blue) const;
    void color3sv(boom::OpenGLShort const* v) const;
    void color3ub(boom::OpenGLUByte red, boom::OpenGLUByte green, boom::OpenGLUByte blue) const;
    void color3ubv(boom::OpenGLUByte const* v) const;
    void color3ui(boom::OpenGLUInt red, boom::OpenGLUInt green, boom::OpenGLUInt blue) const;
    void color3uiv(boom::OpenGLUInt const* v) const;
    void color3us(boom::OpenGLUShort red, boom::OpenGLUShort green, boom::OpenGLUShort blue) const;
    void color3usv(boom::OpenGLUShort const* v) const;
    void color3xOES(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue) const;
    void color3xvOES(boom::OpenGLFixed const* components) const;
    void color4b(boom::OpenGLByte red, boom::OpenGLByte green, boom::OpenGLByte blue, boom::OpenGLByte alpha) const;
    void color4bv(boom::OpenGLByte const* v) const;
    void color4d(boom::OpenGLDouble red, boom::OpenGLDouble green, boom::OpenGLDouble blue, boom::OpenGLDouble alpha) const;
    void color4dv(boom::OpenGLDouble const* v) const;
    void color4f(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void color4fNormal3fVertex3fSUN(boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat a, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void color4fNormal3fVertex3fvSUN(boom::OpenGLFloat const* c, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void color4fv(boom::OpenGLFloat const* v) const;
    void color4hNV(boom::OpenGLHalfNV red, boom::OpenGLHalfNV green, boom::OpenGLHalfNV blue, boom::OpenGLHalfNV alpha) const;
    void color4hvNV(boom::OpenGLHalfNV const* v) const;
    void color4i(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue, boom::OpenGLInt alpha) const;
    void color4iv(boom::OpenGLInt const* v) const;
    void color4s(boom::OpenGLShort red, boom::OpenGLShort green, boom::OpenGLShort blue, boom::OpenGLShort alpha) const;
    void color4sv(boom::OpenGLShort const* v) const;
    void color4ub(boom::OpenGLUByte red, boom::OpenGLUByte green, boom::OpenGLUByte blue, boom::OpenGLUByte alpha) const;
    void color4ubv(boom::OpenGLUByte const* v) const;
    void color4ubVertex2fSUN(boom::OpenGLUByte r, boom::OpenGLUByte g, boom::OpenGLUByte b, boom::OpenGLUByte a, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void color4ubVertex2fvSUN(boom::OpenGLUByte const* c, boom::OpenGLFloat const* v) const;
    void color4ubVertex3fSUN(boom::OpenGLUByte r, boom::OpenGLUByte g, boom::OpenGLUByte b, boom::OpenGLUByte a, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void color4ubVertex3fvSUN(boom::OpenGLUByte const* c, boom::OpenGLFloat const* v) const;
    void color4ui(boom::OpenGLUInt red, boom::OpenGLUInt green, boom::OpenGLUInt blue, boom::OpenGLUInt alpha) const;
    void color4uiv(boom::OpenGLUInt const* v) const;
    void color4us(boom::OpenGLUShort red, boom::OpenGLUShort green, boom::OpenGLUShort blue, boom::OpenGLUShort alpha) const;
    void color4usv(boom::OpenGLUShort const* v) const;
    void color4x(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void color4xOES(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void color4xvOES(boom::OpenGLFixed const* components) const;
    void colorFormatNV(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void colorFragmentOp1ATI(boom::OpenGLEnum op, boom::OpenGLUInt dst, boom::OpenGLUInt dstMask, boom::OpenGLUInt dstMod, boom::OpenGLUInt arg1, boom::OpenGLUInt arg1Rep, boom::OpenGLUInt arg1Mod) const;
    void colorFragmentOp2ATI(boom::OpenGLEnum op, boom::OpenGLUInt dst, boom::OpenGLUInt dstMask, boom::OpenGLUInt dstMod, boom::OpenGLUInt arg1, boom::OpenGLUInt arg1Rep, boom::OpenGLUInt arg1Mod, boom::OpenGLUInt arg2, boom::OpenGLUInt arg2Rep, boom::OpenGLUInt arg2Mod) const;
    void colorFragmentOp3ATI(boom::OpenGLEnum op, boom::OpenGLUInt dst, boom::OpenGLUInt dstMask, boom::OpenGLUInt dstMod, boom::OpenGLUInt arg1, boom::OpenGLUInt arg1Rep, boom::OpenGLUInt arg1Mod, boom::OpenGLUInt arg2, boom::OpenGLUInt arg2Rep, boom::OpenGLUInt arg2Mod, boom::OpenGLUInt arg3, boom::OpenGLUInt arg3Rep, boom::OpenGLUInt arg3Mod) const;
    void colorMask(boom::OpenGLBoolean red, boom::OpenGLBoolean green, boom::OpenGLBoolean blue, boom::OpenGLBoolean alpha) const;
    void colorMaski(boom::OpenGLUInt index, boom::OpenGLBoolean r, boom::OpenGLBoolean g, boom::OpenGLBoolean b, boom::OpenGLBoolean a) const;
    void colorMaskiEXT(boom::OpenGLUInt index, boom::OpenGLBoolean r, boom::OpenGLBoolean g, boom::OpenGLBoolean b, boom::OpenGLBoolean a) const;
    void colorMaskIndexedEXT(boom::OpenGLUInt index, boom::OpenGLBoolean r, boom::OpenGLBoolean g, boom::OpenGLBoolean b, boom::OpenGLBoolean a) const;
    void colorMaskiOES(boom::OpenGLUInt index, boom::OpenGLBoolean r, boom::OpenGLBoolean g, boom::OpenGLBoolean b, boom::OpenGLBoolean a) const;
    void colorMaterial(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void colorP3ui(boom::OpenGLEnum type, boom::OpenGLUInt color) const;
    void colorP3uiv(boom::OpenGLEnum type, boom::OpenGLUInt const* color) const;
    void colorP4ui(boom::OpenGLEnum type, boom::OpenGLUInt color) const;
    void colorP4uiv(boom::OpenGLEnum type, boom::OpenGLUInt const* color) const;
    void colorPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void colorPointerEXT(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLSizei count, void const* pointer) const;
    void colorPointerListIBM(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void colorPointervINTEL(boom::OpenGLInt size, boom::OpenGLEnum type, void const** pointer) const;
    void colorSubTable(boom::OpenGLEnum target, boom::OpenGLSizei start, boom::OpenGLSizei count, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void colorSubTableEXT(boom::OpenGLEnum target, boom::OpenGLSizei start, boom::OpenGLSizei count, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void colorTable(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* table) const;
    void colorTableEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* table) const;
    void colorTableParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void colorTableParameterfvSGI(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void colorTableParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void colorTableParameterivSGI(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void colorTableSGI(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* table) const;
    void combinerInputNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum variable, boom::OpenGLEnum input, boom::OpenGLEnum mapping, boom::OpenGLEnum componentUsage) const;
    void combinerOutputNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum abOutput, boom::OpenGLEnum cdOutput, boom::OpenGLEnum sumOutput, boom::OpenGLEnum scale, boom::OpenGLEnum bias, boom::OpenGLBoolean abDotProduct, boom::OpenGLBoolean cdDotProduct, boom::OpenGLBoolean muxSum) const;
    void combinerParameterfNV(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void combinerParameterfvNV(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void combinerParameteriNV(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void combinerParameterivNV(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void combinerStageParameterfvNV(boom::OpenGLEnum stage, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void commandListSegmentsNV(boom::OpenGLUInt list, boom::OpenGLUInt segments) const;
    void compileCommandListNV(boom::OpenGLUInt list) const;
    void compileShader(boom::OpenGLUInt shader) const;
    void compileShaderARB(boom::OpenGLHandleARB shaderObj) const;
    void compileShaderIncludeARB(boom::OpenGLUInt shader, boom::OpenGLSizei count, boom::OpenGLChar const* const* path, boom::OpenGLInt const* length) const;
    void compressedMultiTexImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedMultiTexImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedMultiTexImage3DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedMultiTexSubImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedMultiTexSubImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedMultiTexSubImage3DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTexImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage1DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage2DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage3DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage3DOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage1DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage2DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage3DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage3DOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTextureImage1DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTextureImage2DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTextureImage3DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTextureSubImage1D(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTextureSubImage1DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTextureSubImage2D(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTextureSubImage2DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTextureSubImage3D(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTextureSubImage3DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void conservativeRasterParameterfNV(boom::OpenGLEnum pname, boom::OpenGLFloat value) const;
    void conservativeRasterParameteriNV(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void convolutionFilter1D(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* image) const;
    void convolutionFilter1DEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* image) const;
    void convolutionFilter2D(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* image) const;
    void convolutionFilter2DEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* image) const;
    void convolutionParameterf(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat params) const;
    void convolutionParameterfEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat params) const;
    void convolutionParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void convolutionParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void convolutionParameteri(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt params) const;
    void convolutionParameteriEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt params) const;
    void convolutionParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void convolutionParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void convolutionParameterxOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void convolutionParameterxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void copyBufferSubData(boom::OpenGLEnum readTarget, boom::OpenGLEnum writeTarget, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void copyBufferSubDataNV(boom::OpenGLEnum readTarget, boom::OpenGLEnum writeTarget, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void copyColorSubTable(boom::OpenGLEnum target, boom::OpenGLSizei start, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyColorSubTableEXT(boom::OpenGLEnum target, boom::OpenGLSizei start, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyColorTable(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyColorTableSGI(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyConvolutionFilter1D(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyConvolutionFilter1DEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyConvolutionFilter2D(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyConvolutionFilter2DEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyImageSubData(boom::OpenGLUInt srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUInt dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei srcWidth, boom::OpenGLSizei srcHeight, boom::OpenGLSizei srcDepth) const;
    void copyImageSubDataEXT(boom::OpenGLUInt srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUInt dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei srcWidth, boom::OpenGLSizei srcHeight, boom::OpenGLSizei srcDepth) const;
    void copyImageSubDataNV(boom::OpenGLUInt srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUInt dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void copyImageSubDataOES(boom::OpenGLUInt srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUInt dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei srcWidth, boom::OpenGLSizei srcHeight, boom::OpenGLSizei srcDepth) const;
    void copyMultiTexImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLInt border) const;
    void copyMultiTexImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border) const;
    void copyMultiTexSubImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyMultiTexSubImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyMultiTexSubImage3DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyNamedBufferSubData(boom::OpenGLUInt readBuffer, boom::OpenGLUInt writeBuffer, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void copyPathNV(boom::OpenGLUInt resultPath, boom::OpenGLUInt srcPath) const;
    void copyPixels(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum type) const;
    void copyTexImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLInt border) const;
    void copyTexImage1DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLInt border) const;
    void copyTexImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border) const;
    void copyTexImage2DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border) const;
    void copyTexSubImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyTexSubImage1DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyTexSubImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTexSubImage2DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTexSubImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTexSubImage3DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTexSubImage3DOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTextureImage1DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLInt border) const;
    void copyTextureImage2DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border) const;
    void copyTextureLevelsAPPLE(boom::OpenGLUInt destinationTexture, boom::OpenGLUInt sourceTexture, boom::OpenGLInt sourceBaseLevel, boom::OpenGLSizei sourceLevelCount) const;
    void copyTextureSubImage1D(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyTextureSubImage1DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyTextureSubImage2D(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTextureSubImage2DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTextureSubImage3D(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTextureSubImage3DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void coverageMaskNV(boom::OpenGLBoolean mask) const;
    void coverageModulationNV(boom::OpenGLEnum components) const;
    void coverageModulationTableNV(boom::OpenGLSizei n, boom::OpenGLFloat const* v) const;
    void coverageOperationNV(boom::OpenGLEnum operation) const;
    void coverFillPathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUInt pathBase, boom::OpenGLEnum coverMode, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void coverFillPathNV(boom::OpenGLUInt path, boom::OpenGLEnum coverMode) const;
    void coverStrokePathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUInt pathBase, boom::OpenGLEnum coverMode, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void coverStrokePathNV(boom::OpenGLUInt path, boom::OpenGLEnum coverMode) const;
    void createBuffers(boom::OpenGLSizei n, boom::OpenGLUInt* buffers) const;
    void createCommandListsNV(boom::OpenGLSizei n, boom::OpenGLUInt* lists) const;
    void createFramebuffers(boom::OpenGLSizei n, boom::OpenGLUInt* framebuffers) const;
    void createMemoryObjectsEXT(boom::OpenGLSizei n, boom::OpenGLUInt* memoryObjects) const;
    void createPerfQueryINTEL(boom::OpenGLUInt queryId, boom::OpenGLUInt* queryHandle) const;
    boom::OpenGLUInt createProgram() const;
    boom::OpenGLHandleARB createProgramObjectARB() const;
    void createProgramPipelines(boom::OpenGLSizei n, boom::OpenGLUInt* pipelines) const;
    boom::OpenGLUInt createProgressFenceNVX() const;
    void createQueries(boom::OpenGLEnum target, boom::OpenGLSizei n, boom::OpenGLUInt* ids) const;
    void createRenderbuffers(boom::OpenGLSizei n, boom::OpenGLUInt* renderbuffers) const;
    void createSamplers(boom::OpenGLSizei n, boom::OpenGLUInt* samplers) const;
    void createSemaphoresNV(boom::OpenGLSizei n, boom::OpenGLUInt* semaphores) const;
    boom::OpenGLUInt createShader(boom::OpenGLEnum type) const;
    boom::OpenGLHandleARB createShaderObjectARB(boom::OpenGLEnum shaderType) const;
    boom::OpenGLUInt createShaderProgramEXT(boom::OpenGLEnum type, boom::OpenGLChar const* string) const;
    boom::OpenGLUInt createShaderProgramv(boom::OpenGLEnum type, boom::OpenGLSizei count, boom::OpenGLChar const* const* strings) const;
    boom::OpenGLUInt createShaderProgramvEXT(boom::OpenGLEnum type, boom::OpenGLSizei count, boom::OpenGLChar const* const* strings) const;
    void createStatesNV(boom::OpenGLSizei n, boom::OpenGLUInt* states) const;
    boom::OpenGLSync createSyncFromCLeventARB(void** context, void** event, boom::OpenGLBitfield flags) const;
    void createTextures(boom::OpenGLEnum target, boom::OpenGLSizei n, boom::OpenGLUInt* textures) const;
    void createTransformFeedbacks(boom::OpenGLSizei n, boom::OpenGLUInt* ids) const;
    void createVertexArrays(boom::OpenGLSizei n, boom::OpenGLUInt* arrays) const;
    void cullFace(boom::OpenGLEnum mode) const;
    void cullParameterdvEXT(boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void cullParameterfvEXT(boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void currentPaletteMatrixARB(boom::OpenGLInt index) const;
    void currentPaletteMatrixOES(boom::OpenGLUInt matrixpaletteindex) const;
    void debugMessageCallback(boom::OpenGLDebugProc callback, void const* userParam) const;
    void debugMessageCallbackAMD(boom::OpenGLDebugProcAMD callback, void* userParam) const;
    void debugMessageCallbackARB(boom::OpenGLDebugProcARB callback, void const* userParam) const;
    void debugMessageCallbackKHR(boom::OpenGLDebugProcKHR callback, void const* userParam) const;
    void debugMessageControl(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLEnum severity, boom::OpenGLSizei count, boom::OpenGLUInt const* ids, boom::OpenGLBoolean enabled) const;
    void debugMessageControlARB(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLEnum severity, boom::OpenGLSizei count, boom::OpenGLUInt const* ids, boom::OpenGLBoolean enabled) const;
    void debugMessageControlKHR(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLEnum severity, boom::OpenGLSizei count, boom::OpenGLUInt const* ids, boom::OpenGLBoolean enabled) const;
    void debugMessageEnableAMD(boom::OpenGLEnum category, boom::OpenGLEnum severity, boom::OpenGLSizei count, boom::OpenGLUInt const* ids, boom::OpenGLBoolean enabled) const;
    void debugMessageInsert(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLUInt id, boom::OpenGLEnum severity, boom::OpenGLSizei length, boom::OpenGLChar const* buf) const;
    void debugMessageInsertAMD(boom::OpenGLEnum category, boom::OpenGLEnum severity, boom::OpenGLUInt id, boom::OpenGLSizei length, boom::OpenGLChar const* buf) const;
    void debugMessageInsertARB(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLUInt id, boom::OpenGLEnum severity, boom::OpenGLSizei length, boom::OpenGLChar const* buf) const;
    void debugMessageInsertKHR(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLUInt id, boom::OpenGLEnum severity, boom::OpenGLSizei length, boom::OpenGLChar const* buf) const;
    void deformationMap3dSGIX(boom::OpenGLEnum target, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLDouble v1, boom::OpenGLDouble v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLDouble w1, boom::OpenGLDouble w2, boom::OpenGLInt wstride, boom::OpenGLInt worder, boom::OpenGLDouble const* points) const;
    void deformationMap3fSGIX(boom::OpenGLEnum target, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLFloat w1, boom::OpenGLFloat w2, boom::OpenGLInt wstride, boom::OpenGLInt worder, boom::OpenGLFloat const* points) const;
    void deformSGIX(boom::OpenGLBitfield mask) const;
    void deleteAsyncMarkersSGIX(boom::OpenGLUInt marker, boom::OpenGLSizei range) const;
    void deleteBuffers(boom::OpenGLSizei n, boom::OpenGLUInt const* buffers) const;
    void deleteBuffersARB(boom::OpenGLSizei n, boom::OpenGLUInt const* buffers) const;
    void deleteCommandListsNV(boom::OpenGLSizei n, boom::OpenGLUInt const* lists) const;
    void deleteFencesAPPLE(boom::OpenGLSizei n, boom::OpenGLUInt const* fences) const;
    void deleteFencesNV(boom::OpenGLSizei n, boom::OpenGLUInt const* fences) const;
    void deleteFragmentShaderATI(boom::OpenGLUInt id) const;
    void deleteFramebuffers(boom::OpenGLSizei n, boom::OpenGLUInt const* framebuffers) const;
    void deleteFramebuffersEXT(boom::OpenGLSizei n, boom::OpenGLUInt const* framebuffers) const;
    void deleteFramebuffersOES(boom::OpenGLSizei n, boom::OpenGLUInt const* framebuffers) const;
    void deleteLists(boom::OpenGLUInt list, boom::OpenGLSizei range) const;
    void deleteMemoryObjectsEXT(boom::OpenGLSizei n, boom::OpenGLUInt const* memoryObjects) const;
    void deleteNamedStringARB(boom::OpenGLInt namelen, boom::OpenGLChar const* name) const;
    void deleteNamesAMD(boom::OpenGLEnum identifier, boom::OpenGLUInt num, boom::OpenGLUInt const* names) const;
    void deleteObjectARB(boom::OpenGLHandleARB obj) const;
    void deleteOcclusionQueriesNV(boom::OpenGLSizei n, boom::OpenGLUInt const* ids) const;
    void deletePathsNV(boom::OpenGLUInt path, boom::OpenGLSizei range) const;
    void deletePerfMonitorsAMD(boom::OpenGLSizei n, boom::OpenGLUInt* monitors) const;
    void deletePerfQueryINTEL(boom::OpenGLUInt queryHandle) const;
    void deleteProgram(boom::OpenGLUInt program) const;
    void deleteProgramPipelines(boom::OpenGLSizei n, boom::OpenGLUInt const* pipelines) const;
    void deleteProgramPipelinesEXT(boom::OpenGLSizei n, boom::OpenGLUInt const* pipelines) const;
    void deleteProgramsARB(boom::OpenGLSizei n, boom::OpenGLUInt const* programs) const;
    void deleteProgramsNV(boom::OpenGLSizei n, boom::OpenGLUInt const* programs) const;
    void deleteQueries(boom::OpenGLSizei n, boom::OpenGLUInt const* ids) const;
    void deleteQueriesARB(boom::OpenGLSizei n, boom::OpenGLUInt const* ids) const;
    void deleteQueriesEXT(boom::OpenGLSizei n, boom::OpenGLUInt const* ids) const;
    void deleteQueryResourceTagNV(boom::OpenGLSizei n, boom::OpenGLInt const* tagIds) const;
    void deleteRenderbuffers(boom::OpenGLSizei n, boom::OpenGLUInt const* renderbuffers) const;
    void deleteRenderbuffersEXT(boom::OpenGLSizei n, boom::OpenGLUInt const* renderbuffers) const;
    void deleteRenderbuffersOES(boom::OpenGLSizei n, boom::OpenGLUInt const* renderbuffers) const;
    void deleteSamplers(boom::OpenGLSizei count, boom::OpenGLUInt const* samplers) const;
    void deleteSemaphoresEXT(boom::OpenGLSizei n, boom::OpenGLUInt const* semaphores) const;
    void deleteShader(boom::OpenGLUInt shader) const;
    void deleteStatesNV(boom::OpenGLSizei n, boom::OpenGLUInt const* states) const;
    void deleteSync(boom::OpenGLSync sync) const;
    void deleteSyncAPPLE(boom::OpenGLSync sync) const;
    void deleteTextures(boom::OpenGLSizei n, boom::OpenGLUInt const* textures) const;
    void deleteTexturesEXT(boom::OpenGLSizei n, boom::OpenGLUInt const* textures) const;
    void deleteTransformFeedbacks(boom::OpenGLSizei n, boom::OpenGLUInt const* ids) const;
    void deleteTransformFeedbacksNV(boom::OpenGLSizei n, boom::OpenGLUInt const* ids) const;
    void deleteVertexArrays(boom::OpenGLSizei n, boom::OpenGLUInt const* arrays) const;
    void deleteVertexArraysAPPLE(boom::OpenGLSizei n, boom::OpenGLUInt const* arrays) const;
    void deleteVertexArraysOES(boom::OpenGLSizei n, boom::OpenGLUInt const* arrays) const;
    void deleteVertexShaderEXT(boom::OpenGLUInt id) const;
    void depthBoundsdNV(boom::OpenGLDouble zmin, boom::OpenGLDouble zmax) const;
    void depthBoundsEXT(boom::OpenGLClampd zmin, boom::OpenGLClampd zmax) const;
    void depthFunc(boom::OpenGLEnum func) const;
    void depthMask(boom::OpenGLBoolean flag) const;
    void depthRange(boom::OpenGLDouble n, boom::OpenGLDouble f) const;
    void depthRangeArraydvNV(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void depthRangeArrayfvNV(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void depthRangeArrayfvOES(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void depthRangeArrayv(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void depthRangedNV(boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void depthRangef(boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void depthRangefOES(boom::OpenGLClampf n, boom::OpenGLClampf f) const;
    void depthRangeIndexed(boom::OpenGLUInt index, boom::OpenGLDouble n, boom::OpenGLDouble f) const;
    void depthRangeIndexeddNV(boom::OpenGLUInt index, boom::OpenGLDouble n, boom::OpenGLDouble f) const;
    void depthRangeIndexedfNV(boom::OpenGLUInt index, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void depthRangeIndexedfOES(boom::OpenGLUInt index, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void depthRangex(boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void depthRangexOES(boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void detachObjectARB(boom::OpenGLHandleARB containerObj, boom::OpenGLHandleARB attachedObj) const;
    void detachShader(boom::OpenGLUInt program, boom::OpenGLUInt shader) const;
    void detailTexFuncSGIS(boom::OpenGLEnum target, boom::OpenGLSizei n, boom::OpenGLFloat const* points) const;
    void disable(boom::OpenGLEnum cap) const;
    void disableClientState(boom::OpenGLEnum array) const;
    void disableClientStateiEXT(boom::OpenGLEnum array, boom::OpenGLUInt index) const;
    void disableClientStateIndexedEXT(boom::OpenGLEnum array, boom::OpenGLUInt index) const;
    void disableDriverControlQCOM(boom::OpenGLUInt driverControl) const;
    void disablei(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    void disableiEXT(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    void disableIndexedEXT(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    void disableiNV(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    void disableiOES(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    void disableVariantClientStateEXT(boom::OpenGLUInt id) const;
    void disableVertexArrayAttrib(boom::OpenGLUInt vaobj, boom::OpenGLUInt index) const;
    void disableVertexArrayAttribEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt index) const;
    void disableVertexArrayEXT(boom::OpenGLUInt vaobj, boom::OpenGLEnum array) const;
    void disableVertexAttribAPPLE(boom::OpenGLUInt index, boom::OpenGLEnum pname) const;
    void disableVertexAttribArray(boom::OpenGLUInt index) const;
    void disableVertexAttribArrayARB(boom::OpenGLUInt index) const;
    void discardFramebufferEXT(boom::OpenGLEnum target, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments) const;
    void dispatchCompute(boom::OpenGLUInt num_groups_x, boom::OpenGLUInt num_groups_y, boom::OpenGLUInt num_groups_z) const;
    void dispatchComputeGroupSizeARB(boom::OpenGLUInt num_groups_x, boom::OpenGLUInt num_groups_y, boom::OpenGLUInt num_groups_z, boom::OpenGLUInt group_size_x, boom::OpenGLUInt group_size_y, boom::OpenGLUInt group_size_z) const;
    void dispatchComputeIndirect(boom::OpenGLIntptr indirect) const;
    void drawArrays(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count) const;
    void drawArraysEXT(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count) const;
    void drawArraysIndirect(boom::OpenGLEnum mode, void const* indirect) const;
    void drawArraysInstanced(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei instancecount) const;
    void drawArraysInstancedANGLE(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei primcount) const;
    void drawArraysInstancedARB(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei primcount) const;
    void drawArraysInstancedBaseInstance(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei instancecount, boom::OpenGLUInt baseinstance) const;
    void drawArraysInstancedBaseInstanceEXT(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei instancecount, boom::OpenGLUInt baseinstance) const;
    void drawArraysInstancedEXT(boom::OpenGLEnum mode, boom::OpenGLInt start, boom::OpenGLSizei count, boom::OpenGLSizei primcount) const;
    void drawArraysInstancedNV(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei primcount) const;
    void drawBuffer(boom::OpenGLEnum buf) const;
    void drawBuffers(boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void drawBuffersARB(boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void drawBuffersATI(boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void drawBuffersEXT(boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void drawBuffersIndexedEXT(boom::OpenGLInt n, boom::OpenGLEnum const* location, boom::OpenGLInt const* indices) const;
    void drawBuffersNV(boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void drawCommandsAddressNV(boom::OpenGLEnum primitiveMode, boom::OpenGLUInt64 const* indirects, boom::OpenGLSizei const* sizes, boom::OpenGLUInt count) const;
    void drawCommandsNV(boom::OpenGLEnum primitiveMode, boom::OpenGLUInt buffer, boom::OpenGLIntptr const* indirects, boom::OpenGLSizei const* sizes, boom::OpenGLUInt count) const;
    void drawCommandsStatesAddressNV(boom::OpenGLUInt64 const* indirects, boom::OpenGLSizei const* sizes, boom::OpenGLUInt const* states, boom::OpenGLUInt const* fbos, boom::OpenGLUInt count) const;
    void drawCommandsStatesNV(boom::OpenGLUInt buffer, boom::OpenGLIntptr const* indirects, boom::OpenGLSizei const* sizes, boom::OpenGLUInt const* states, boom::OpenGLUInt const* fbos, boom::OpenGLUInt count) const;
    void drawElementArrayAPPLE(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count) const;
    void drawElementArrayATI(boom::OpenGLEnum mode, boom::OpenGLSizei count) const;
    void drawElements(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices) const;
    void drawElementsBaseVertex(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawElementsBaseVertexEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawElementsBaseVertexOES(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawElementsIndirect(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect) const;
    void drawElementsInstanced(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount) const;
    void drawElementsInstancedANGLE(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei primcount) const;
    void drawElementsInstancedARB(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei primcount) const;
    void drawElementsInstancedBaseInstance(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLUInt baseinstance) const;
    void drawElementsInstancedBaseInstanceEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLUInt baseinstance) const;
    void drawElementsInstancedBaseVertex(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex) const;
    void drawElementsInstancedBaseVertexBaseInstance(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex, boom::OpenGLUInt baseinstance) const;
    void drawElementsInstancedBaseVertexBaseInstanceEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex, boom::OpenGLUInt baseinstance) const;
    void drawElementsInstancedBaseVertexEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex) const;
    void drawElementsInstancedBaseVertexOES(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex) const;
    void drawElementsInstancedEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei primcount) const;
    void drawElementsInstancedNV(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei primcount) const;
    void drawMeshArraysSUN(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei width) const;
    void drawMeshTasksIndirectNV(boom::OpenGLIntptr indirect) const;
    void drawMeshTasksNV(boom::OpenGLUInt first, boom::OpenGLUInt count) const;
    void drawPixels(boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void drawRangeElementArrayAPPLE(boom::OpenGLEnum mode, boom::OpenGLUInt start, boom::OpenGLUInt end, boom::OpenGLInt first, boom::OpenGLSizei count) const;
    void drawRangeElementArrayATI(boom::OpenGLEnum mode, boom::OpenGLUInt start, boom::OpenGLUInt end, boom::OpenGLSizei count) const;
    void drawRangeElements(boom::OpenGLEnum mode, boom::OpenGLUInt start, boom::OpenGLUInt end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices) const;
    void drawRangeElementsBaseVertex(boom::OpenGLEnum mode, boom::OpenGLUInt start, boom::OpenGLUInt end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawRangeElementsBaseVertexEXT(boom::OpenGLEnum mode, boom::OpenGLUInt start, boom::OpenGLUInt end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawRangeElementsBaseVertexOES(boom::OpenGLEnum mode, boom::OpenGLUInt start, boom::OpenGLUInt end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawRangeElementsEXT(boom::OpenGLEnum mode, boom::OpenGLUInt start, boom::OpenGLUInt end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices) const;
    void drawTexfOES(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat width, boom::OpenGLFloat height) const;
    void drawTexfvOES(boom::OpenGLFloat const* coords) const;
    void drawTexiOES(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt width, boom::OpenGLInt height) const;
    void drawTexivOES(boom::OpenGLInt const* coords) const;
    void drawTexsOES(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort width, boom::OpenGLShort height) const;
    void drawTexsvOES(boom::OpenGLShort const* coords) const;
    void drawTextureNV(boom::OpenGLUInt texture, boom::OpenGLUInt sampler, boom::OpenGLFloat x0, boom::OpenGLFloat y0, boom::OpenGLFloat x1, boom::OpenGLFloat y1, boom::OpenGLFloat z, boom::OpenGLFloat s0, boom::OpenGLFloat t0, boom::OpenGLFloat s1, boom::OpenGLFloat t1) const;
    void drawTexxOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z, boom::OpenGLFixed width, boom::OpenGLFixed height) const;
    void drawTexxvOES(boom::OpenGLFixed const* coords) const;
    void drawTransformFeedback(boom::OpenGLEnum mode, boom::OpenGLUInt id) const;
    void drawTransformFeedbackEXT(boom::OpenGLEnum mode, boom::OpenGLUInt id) const;
    void drawTransformFeedbackInstanced(boom::OpenGLEnum mode, boom::OpenGLUInt id, boom::OpenGLSizei instancecount) const;
    void drawTransformFeedbackInstancedEXT(boom::OpenGLEnum mode, boom::OpenGLUInt id, boom::OpenGLSizei instancecount) const;
    void drawTransformFeedbackNV(boom::OpenGLEnum mode, boom::OpenGLUInt id) const;
    void drawTransformFeedbackStream(boom::OpenGLEnum mode, boom::OpenGLUInt id, boom::OpenGLUInt stream) const;
    void drawTransformFeedbackStreamInstanced(boom::OpenGLEnum mode, boom::OpenGLUInt id, boom::OpenGLUInt stream, boom::OpenGLSizei instancecount) const;
    void drawVkImageNV(boom::OpenGLUInt64 vkImage, boom::OpenGLUInt sampler, boom::OpenGLFloat x0, boom::OpenGLFloat y0, boom::OpenGLFloat x1, boom::OpenGLFloat y1, boom::OpenGLFloat z, boom::OpenGLFloat s0, boom::OpenGLFloat t0, boom::OpenGLFloat s1, boom::OpenGLFloat t1) const;
    void edgeFlag(boom::OpenGLBoolean flag) const;
    void edgeFlagFormatNV(boom::OpenGLSizei stride) const;
    void edgeFlagPointer(boom::OpenGLSizei stride, void const* pointer) const;
    void edgeFlagPointerEXT(boom::OpenGLSizei stride, boom::OpenGLSizei count, boom::OpenGLBoolean const* pointer) const;
    void edgeFlagPointerListIBM(boom::OpenGLInt stride, boom::OpenGLBoolean const** pointer, boom::OpenGLInt ptrstride) const;
    void edgeFlagv(boom::OpenGLBoolean const* flag) const;
    void eGLImageTargetRenderbufferStorageOES(boom::OpenGLEnum target, boom::OpenGLEGLImageOES image) const;
    void eGLImageTargetTexStorageEXT(boom::OpenGLEnum target, boom::OpenGLEGLImageOES image, boom::OpenGLInt const* attrib_list) const;
    void eGLImageTargetTexture2DOES(boom::OpenGLEnum target, boom::OpenGLEGLImageOES image) const;
    void eGLImageTargetTextureStorageEXT(boom::OpenGLUInt texture, boom::OpenGLEGLImageOES image, boom::OpenGLInt const* attrib_list) const;
    void elementPointerAPPLE(boom::OpenGLEnum type, void const* pointer) const;
    void elementPointerATI(boom::OpenGLEnum type, void const* pointer) const;
    void enable(boom::OpenGLEnum cap) const;
    void enableClientState(boom::OpenGLEnum array) const;
    void enableClientStateiEXT(boom::OpenGLEnum array, boom::OpenGLUInt index) const;
    void enableClientStateIndexedEXT(boom::OpenGLEnum array, boom::OpenGLUInt index) const;
    void enableDriverControlQCOM(boom::OpenGLUInt driverControl) const;
    void enablei(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    void enableiEXT(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    void enableIndexedEXT(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    void enableiNV(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    void enableiOES(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    void enableVariantClientStateEXT(boom::OpenGLUInt id) const;
    void enableVertexArrayAttrib(boom::OpenGLUInt vaobj, boom::OpenGLUInt index) const;
    void enableVertexArrayAttribEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt index) const;
    void enableVertexArrayEXT(boom::OpenGLUInt vaobj, boom::OpenGLEnum array) const;
    void enableVertexAttribAPPLE(boom::OpenGLUInt index, boom::OpenGLEnum pname) const;
    void enableVertexAttribArray(boom::OpenGLUInt index) const;
    void enableVertexAttribArrayARB(boom::OpenGLUInt index) const;
    void end() const;
    void endConditionalRender() const;
    void endConditionalRenderNV() const;
    void endConditionalRenderNVX() const;
    void endFragmentShaderATI() const;
    void endList() const;
    void endOcclusionQueryNV() const;
    void endPerfMonitorAMD(boom::OpenGLUInt monitor) const;
    void endPerfQueryINTEL(boom::OpenGLUInt queryHandle) const;
    void endQuery(boom::OpenGLEnum target) const;
    void endQueryARB(boom::OpenGLEnum target) const;
    void endQueryEXT(boom::OpenGLEnum target) const;
    void endQueryIndexed(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    void endTilingQCOM(boom::OpenGLBitfield preserveMask) const;
    void endTransformFeedback() const;
    void endTransformFeedbackEXT() const;
    void endTransformFeedbackNV() const;
    void endVertexShaderEXT() const;
    void endVideoCaptureNV(boom::OpenGLUInt video_capture_slot) const;
    void evalCoord1d(boom::OpenGLDouble u) const;
    void evalCoord1dv(boom::OpenGLDouble const* u) const;
    void evalCoord1f(boom::OpenGLFloat u) const;
    void evalCoord1fv(boom::OpenGLFloat const* u) const;
    void evalCoord1xOES(boom::OpenGLFixed u) const;
    void evalCoord1xvOES(boom::OpenGLFixed const* coords) const;
    void evalCoord2d(boom::OpenGLDouble u, boom::OpenGLDouble v) const;
    void evalCoord2dv(boom::OpenGLDouble const* u) const;
    void evalCoord2f(boom::OpenGLFloat u, boom::OpenGLFloat v) const;
    void evalCoord2fv(boom::OpenGLFloat const* u) const;
    void evalCoord2xOES(boom::OpenGLFixed u, boom::OpenGLFixed v) const;
    void evalCoord2xvOES(boom::OpenGLFixed const* coords) const;
    void evalMapsNV(boom::OpenGLEnum target, boom::OpenGLEnum mode) const;
    void evalMesh1(boom::OpenGLEnum mode, boom::OpenGLInt i1, boom::OpenGLInt i2) const;
    void evalMesh2(boom::OpenGLEnum mode, boom::OpenGLInt i1, boom::OpenGLInt i2, boom::OpenGLInt j1, boom::OpenGLInt j2) const;
    void evalPoint1(boom::OpenGLInt i) const;
    void evalPoint2(boom::OpenGLInt i, boom::OpenGLInt j) const;
    void evaluateDepthValuesARB() const;
    void executeProgramNV(boom::OpenGLEnum target, boom::OpenGLUInt id, boom::OpenGLFloat const* params) const;
    void extGetBufferPointervQCOM(boom::OpenGLEnum target, void** params) const;
    void extGetBuffersQCOM(boom::OpenGLUInt* buffers, boom::OpenGLInt maxBuffers, boom::OpenGLInt* numBuffers) const;
    void extGetFramebuffersQCOM(boom::OpenGLUInt* framebuffers, boom::OpenGLInt maxFramebuffers, boom::OpenGLInt* numFramebuffers) const;
    void extGetProgramBinarySourceQCOM(boom::OpenGLUInt program, boom::OpenGLEnum shadertype, boom::OpenGLChar* source, boom::OpenGLInt* length) const;
    void extGetProgramsQCOM(boom::OpenGLUInt* programs, boom::OpenGLInt maxPrograms, boom::OpenGLInt* numPrograms) const;
    void extGetRenderbuffersQCOM(boom::OpenGLUInt* renderbuffers, boom::OpenGLInt maxRenderbuffers, boom::OpenGLInt* numRenderbuffers) const;
    void extGetShadersQCOM(boom::OpenGLUInt* shaders, boom::OpenGLInt maxShaders, boom::OpenGLInt* numShaders) const;
    void extGetTexLevelParameterivQCOM(boom::OpenGLUInt texture, boom::OpenGLEnum face, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void extGetTexSubImageQCOM(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void* texels) const;
    void extGetTexturesQCOM(boom::OpenGLUInt* textures, boom::OpenGLInt maxTextures, boom::OpenGLInt* numTextures) const;
    boom::OpenGLBoolean extIsProgramBinaryQCOM(boom::OpenGLUInt program) const;
    void extractComponentEXT(boom::OpenGLUInt res, boom::OpenGLUInt src, boom::OpenGLUInt num) const;
    void extrapolateTex2DQCOM(boom::OpenGLUInt src1, boom::OpenGLUInt src2, boom::OpenGLUInt output, boom::OpenGLFloat scaleFactor) const;
    void extTexObjectStateOverrideiQCOM(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void feedbackBuffer(boom::OpenGLSizei size, boom::OpenGLEnum type, boom::OpenGLFloat* buffer) const;
    void feedbackBufferxOES(boom::OpenGLSizei n, boom::OpenGLEnum type, boom::OpenGLFixed const* buffer) const;
    boom::OpenGLSync fenceSync(boom::OpenGLEnum condition, boom::OpenGLBitfield flags) const;
    boom::OpenGLSync fenceSyncAPPLE(boom::OpenGLEnum condition, boom::OpenGLBitfield flags) const;
    void finalCombinerInputNV(boom::OpenGLEnum variable, boom::OpenGLEnum input, boom::OpenGLEnum mapping, boom::OpenGLEnum componentUsage) const;
    void finish() const;
    boom::OpenGLInt finishAsyncSGIX(boom::OpenGLUInt* markerp) const;
    void finishFenceAPPLE(boom::OpenGLUInt fence) const;
    void finishFenceNV(boom::OpenGLUInt fence) const;
    void finishObjectAPPLE(boom::OpenGLEnum object, boom::OpenGLInt name) const;
    void finishTextureSUNX() const;
    void flush() const;
    void flushMappedBufferRange(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void flushMappedBufferRangeAPPLE(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void flushMappedBufferRangeEXT(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void flushMappedNamedBufferRange(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void flushMappedNamedBufferRangeEXT(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void flushPixelDataRangeNV(boom::OpenGLEnum target) const;
    void flushRasterSGIX() const;
    void flushStaticDataIBM(boom::OpenGLEnum target) const;
    void flushVertexArrayRangeAPPLE(boom::OpenGLSizei length, void* pointer) const;
    void flushVertexArrayRangeNV() const;
    void fogCoordd(boom::OpenGLDouble coord) const;
    void fogCoorddEXT(boom::OpenGLDouble coord) const;
    void fogCoorddv(boom::OpenGLDouble const* coord) const;
    void fogCoorddvEXT(boom::OpenGLDouble const* coord) const;
    void fogCoordf(boom::OpenGLFloat coord) const;
    void fogCoordfEXT(boom::OpenGLFloat coord) const;
    void fogCoordFormatNV(boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void fogCoordfv(boom::OpenGLFloat const* coord) const;
    void fogCoordfvEXT(boom::OpenGLFloat const* coord) const;
    void fogCoordhNV(boom::OpenGLHalfNV fog) const;
    void fogCoordhvNV(boom::OpenGLHalfNV const* fog) const;
    void fogCoordPointer(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void fogCoordPointerEXT(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void fogCoordPointerListIBM(boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void fogf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void fogFuncSGIS(boom::OpenGLSizei n, boom::OpenGLFloat const* points) const;
    void fogfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void fogi(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void fogiv(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void fogx(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void fogxOES(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void fogxv(boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void fogxvOES(boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void fragmentColorMaterialSGIX(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void fragmentCoverageColorNV(boom::OpenGLUInt color) const;
    void fragmentLightfSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void fragmentLightfvSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void fragmentLightiSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void fragmentLightivSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void fragmentLightModelfSGIX(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void fragmentLightModelfvSGIX(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void fragmentLightModeliSGIX(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void fragmentLightModelivSGIX(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void fragmentMaterialfSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void fragmentMaterialfvSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void fragmentMaterialiSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void fragmentMaterialivSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void framebufferDrawBufferEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum mode) const;
    void framebufferDrawBuffersEXT(boom::OpenGLUInt framebuffer, boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void framebufferFetchBarrierEXT() const;
    void framebufferFetchBarrierQCOM() const;
    void framebufferFoveationConfigQCOM(boom::OpenGLUInt framebuffer, boom::OpenGLUInt numLayers, boom::OpenGLUInt focalPointsPerLayer, boom::OpenGLUInt requestedFeatures, boom::OpenGLUInt* providedFeatures) const;
    void framebufferFoveationParametersQCOM(boom::OpenGLUInt framebuffer, boom::OpenGLUInt layer, boom::OpenGLUInt focalPoint, boom::OpenGLFloat focalX, boom::OpenGLFloat focalY, boom::OpenGLFloat gainX, boom::OpenGLFloat gainY, boom::OpenGLFloat foveaArea) const;
    void framebufferParameteri(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void framebufferParameteriMESA(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void framebufferPixelLocalStorageSizeEXT(boom::OpenGLUInt target, boom::OpenGLSizei size) const;
    void framebufferReadBufferEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum mode) const;
    void framebufferRenderbuffer(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUInt renderbuffer) const;
    void framebufferRenderbufferEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUInt renderbuffer) const;
    void framebufferRenderbufferOES(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUInt renderbuffer) const;
    void framebufferSampleLocationsfvARB(boom::OpenGLEnum target, boom::OpenGLUInt start, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void framebufferSampleLocationsfvNV(boom::OpenGLEnum target, boom::OpenGLUInt start, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void framebufferSamplePositionsfvAMD(boom::OpenGLEnum target, boom::OpenGLUInt numsamples, boom::OpenGLUInt pixelindex, boom::OpenGLFloat const* values) const;
    void framebufferShadingRateEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt baseLayer, boom::OpenGLSizei numLayers, boom::OpenGLSizei texelWidth, boom::OpenGLSizei texelHeight) const;
    void framebufferTexture(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void framebufferTexture1D(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void framebufferTexture1DEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void framebufferTexture2D(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void framebufferTexture2DDownsampleIMG(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xscale, boom::OpenGLInt yscale) const;
    void framebufferTexture2DEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void framebufferTexture2DMultisampleEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLSizei samples) const;
    void framebufferTexture2DMultisampleIMG(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLSizei samples) const;
    void framebufferTexture2DOES(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void framebufferTexture3D(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt zoffset) const;
    void framebufferTexture3DEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt zoffset) const;
    void framebufferTexture3DOES(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt zoffset) const;
    void framebufferTextureARB(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void framebufferTextureEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void framebufferTextureFaceARB(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLEnum face) const;
    void framebufferTextureFaceEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLEnum face) const;
    void framebufferTextureLayer(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void framebufferTextureLayerARB(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void framebufferTextureLayerDownsampleIMG(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt layer, boom::OpenGLInt xscale, boom::OpenGLInt yscale) const;
    void framebufferTextureLayerEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void framebufferTextureMultisampleMultiviewOVR(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLSizei samples, boom::OpenGLInt baseViewIndex, boom::OpenGLSizei numViews) const;
    void framebufferTextureMultiviewOVR(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt baseViewIndex, boom::OpenGLSizei numViews) const;
    void framebufferTextureOES(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void frameTerminatorGREMEDY() const;
    void frameZoomSGIX(boom::OpenGLInt factor) const;
    void freeObjectBufferATI(boom::OpenGLUInt buffer) const;
    void frontFace(boom::OpenGLEnum mode) const;
    void frustum(boom::OpenGLDouble left, boom::OpenGLDouble right, boom::OpenGLDouble bottom, boom::OpenGLDouble top, boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void frustumf(boom::OpenGLFloat l, boom::OpenGLFloat r, boom::OpenGLFloat b, boom::OpenGLFloat t, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void frustumfOES(boom::OpenGLFloat l, boom::OpenGLFloat r, boom::OpenGLFloat b, boom::OpenGLFloat t, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void frustumx(boom::OpenGLFixed l, boom::OpenGLFixed r, boom::OpenGLFixed b, boom::OpenGLFixed t, boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void frustumxOES(boom::OpenGLFixed l, boom::OpenGLFixed r, boom::OpenGLFixed b, boom::OpenGLFixed t, boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    boom::OpenGLUInt genAsyncMarkersSGIX(boom::OpenGLSizei range) const;
    void genBuffers(boom::OpenGLSizei n, boom::OpenGLUInt* buffers) const;
    void genBuffersARB(boom::OpenGLSizei n, boom::OpenGLUInt* buffers) const;
    void generateMipmap(boom::OpenGLEnum target) const;
    void generateMipmapEXT(boom::OpenGLEnum target) const;
    void generateMipmapOES(boom::OpenGLEnum target) const;
    void generateMultiTexMipmapEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target) const;
    void generateTextureMipmap(boom::OpenGLUInt texture) const;
    void generateTextureMipmapEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target) const;
    void genFencesAPPLE(boom::OpenGLSizei n, boom::OpenGLUInt* fences) const;
    void genFencesNV(boom::OpenGLSizei n, boom::OpenGLUInt* fences) const;
    boom::OpenGLUInt genFragmentShadersATI(boom::OpenGLUInt range) const;
    void genFramebuffers(boom::OpenGLSizei n, boom::OpenGLUInt* framebuffers) const;
    void genFramebuffersEXT(boom::OpenGLSizei n, boom::OpenGLUInt* framebuffers) const;
    void genFramebuffersOES(boom::OpenGLSizei n, boom::OpenGLUInt* framebuffers) const;
    boom::OpenGLUInt genLists(boom::OpenGLSizei range) const;
    void genNamesAMD(boom::OpenGLEnum identifier, boom::OpenGLUInt num, boom::OpenGLUInt* names) const;
    void genOcclusionQueriesNV(boom::OpenGLSizei n, boom::OpenGLUInt* ids) const;
    boom::OpenGLUInt genPathsNV(boom::OpenGLSizei range) const;
    void genPerfMonitorsAMD(boom::OpenGLSizei n, boom::OpenGLUInt* monitors) const;
    void genProgramPipelines(boom::OpenGLSizei n, boom::OpenGLUInt* pipelines) const;
    void genProgramPipelinesEXT(boom::OpenGLSizei n, boom::OpenGLUInt* pipelines) const;
    void genProgramsARB(boom::OpenGLSizei n, boom::OpenGLUInt* programs) const;
    void genProgramsNV(boom::OpenGLSizei n, boom::OpenGLUInt* programs) const;
    void genQueries(boom::OpenGLSizei n, boom::OpenGLUInt* ids) const;
    void genQueriesARB(boom::OpenGLSizei n, boom::OpenGLUInt* ids) const;
    void genQueriesEXT(boom::OpenGLSizei n, boom::OpenGLUInt* ids) const;
    void genQueryResourceTagNV(boom::OpenGLSizei n, boom::OpenGLInt* tagIds) const;
    void genRenderbuffers(boom::OpenGLSizei n, boom::OpenGLUInt* renderbuffers) const;
    void genRenderbuffersEXT(boom::OpenGLSizei n, boom::OpenGLUInt* renderbuffers) const;
    void genRenderbuffersOES(boom::OpenGLSizei n, boom::OpenGLUInt* renderbuffers) const;
    void genSamplers(boom::OpenGLSizei count, boom::OpenGLUInt* samplers) const;
    void genSemaphoresEXT(boom::OpenGLSizei n, boom::OpenGLUInt* semaphores) const;
    boom::OpenGLUInt genSymbolsEXT(boom::OpenGLEnum datatype, boom::OpenGLEnum storagetype, boom::OpenGLEnum range, boom::OpenGLUInt components) const;
    void genTextures(boom::OpenGLSizei n, boom::OpenGLUInt* textures) const;
    void genTexturesEXT(boom::OpenGLSizei n, boom::OpenGLUInt* textures) const;
    void genTransformFeedbacks(boom::OpenGLSizei n, boom::OpenGLUInt* ids) const;
    void genTransformFeedbacksNV(boom::OpenGLSizei n, boom::OpenGLUInt* ids) const;
    void genVertexArrays(boom::OpenGLSizei n, boom::OpenGLUInt* arrays) const;
    void genVertexArraysAPPLE(boom::OpenGLSizei n, boom::OpenGLUInt* arrays) const;
    void genVertexArraysOES(boom::OpenGLSizei n, boom::OpenGLUInt* arrays) const;
    boom::OpenGLUInt genVertexShadersEXT(boom::OpenGLUInt range) const;
    void getActiveAtomicCounterBufferiv(boom::OpenGLUInt program, boom::OpenGLUInt bufferIndex, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getActiveAttrib(boom::OpenGLUInt program, boom::OpenGLUInt index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLInt* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getActiveAttribARB(boom::OpenGLHandleARB programObj, boom::OpenGLUInt index, boom::OpenGLSizei maxLength, boom::OpenGLSizei* length, boom::OpenGLInt* size, boom::OpenGLEnum* type, boom::OpenGLCharARB* name) const;
    void getActiveSubroutineName(boom::OpenGLUInt program, boom::OpenGLEnum shadertype, boom::OpenGLUInt index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* name) const;
    void getActiveSubroutineUniformiv(boom::OpenGLUInt program, boom::OpenGLEnum shadertype, boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt* values) const;
    void getActiveSubroutineUniformName(boom::OpenGLUInt program, boom::OpenGLEnum shadertype, boom::OpenGLUInt index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* name) const;
    void getActiveUniform(boom::OpenGLUInt program, boom::OpenGLUInt index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLInt* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getActiveUniformARB(boom::OpenGLHandleARB programObj, boom::OpenGLUInt index, boom::OpenGLSizei maxLength, boom::OpenGLSizei* length, boom::OpenGLInt* size, boom::OpenGLEnum* type, boom::OpenGLCharARB* name) const;
    void getActiveUniformBlockiv(boom::OpenGLUInt program, boom::OpenGLUInt uniformBlockIndex, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getActiveUniformBlockName(boom::OpenGLUInt program, boom::OpenGLUInt uniformBlockIndex, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* uniformBlockName) const;
    void getActiveUniformName(boom::OpenGLUInt program, boom::OpenGLUInt uniformIndex, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* uniformName) const;
    void getActiveUniformsiv(boom::OpenGLUInt program, boom::OpenGLSizei uniformCount, boom::OpenGLUInt const* uniformIndices, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getActiveVaryingNV(boom::OpenGLUInt program, boom::OpenGLUInt index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLSizei* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getArrayObjectfvATI(boom::OpenGLEnum array, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getArrayObjectivATI(boom::OpenGLEnum array, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getAttachedObjectsARB(boom::OpenGLHandleARB containerObj, boom::OpenGLSizei maxCount, boom::OpenGLSizei* count, boom::OpenGLHandleARB* obj) const;
    void getAttachedShaders(boom::OpenGLUInt program, boom::OpenGLSizei maxCount, boom::OpenGLSizei* count, boom::OpenGLUInt* shaders) const;
    boom::OpenGLInt getAttribLocation(boom::OpenGLUInt program, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getAttribLocationARB(boom::OpenGLHandleARB programObj, boom::OpenGLCharARB const* name) const;
    void getBooleanIndexedvEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLBoolean* data) const;
    void getBooleani_v(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLBoolean* data) const;
    void getBooleanv(boom::OpenGLEnum pname, boom::OpenGLBoolean* data) const;
    void getBufferParameteri64v(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getBufferParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getBufferParameterivARB(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getBufferParameterui64vNV(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt64EXT* params) const;
    void getBufferPointerv(boom::OpenGLEnum target, boom::OpenGLEnum pname, void** params) const;
    void getBufferPointervARB(boom::OpenGLEnum target, boom::OpenGLEnum pname, void** params) const;
    void getBufferPointervOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, void** params) const;
    void getBufferSubData(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void* data) const;
    void getBufferSubDataARB(boom::OpenGLEnum target, boom::OpenGLIntptrARB offset, boom::OpenGLSizeiptrARB size, void* data) const;
    void getClipPlane(boom::OpenGLEnum plane, boom::OpenGLDouble* equation) const;
    void getClipPlanef(boom::OpenGLEnum plane, boom::OpenGLFloat* equation) const;
    void getClipPlanefOES(boom::OpenGLEnum plane, boom::OpenGLFloat* equation) const;
    void getClipPlanex(boom::OpenGLEnum plane, boom::OpenGLFixed* equation) const;
    void getClipPlanexOES(boom::OpenGLEnum plane, boom::OpenGLFixed* equation) const;
    void getColorTable(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* table) const;
    void getColorTableEXT(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* data) const;
    void getColorTableParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getColorTableParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getColorTableParameterfvSGI(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getColorTableParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getColorTableParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getColorTableParameterivSGI(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getColorTableSGI(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* table) const;
    void getCombinerInputParameterfvNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum variable, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getCombinerInputParameterivNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum variable, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getCombinerOutputParameterfvNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getCombinerOutputParameterivNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getCombinerStageParameterfvNV(boom::OpenGLEnum stage, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    boom::OpenGLUInt getCommandHeaderNV(boom::OpenGLEnum tokenID, boom::OpenGLUInt size) const;
    void getCompressedMultiTexImageEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt lod, void* img) const;
    void getCompressedTexImage(boom::OpenGLEnum target, boom::OpenGLInt level, void* img) const;
    void getCompressedTexImageARB(boom::OpenGLEnum target, boom::OpenGLInt level, void* img) const;
    void getCompressedTextureImage(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLSizei bufSize, void* pixels) const;
    void getCompressedTextureImageEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt lod, void* img) const;
    void getCompressedTextureSubImage(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLSizei bufSize, void* pixels) const;
    void getConvolutionFilter(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* image) const;
    void getConvolutionFilterEXT(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* image) const;
    void getConvolutionParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getConvolutionParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getConvolutionParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getConvolutionParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getConvolutionParameterxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getCoverageModulationTableNV(boom::OpenGLSizei bufSize, boom::OpenGLFloat* v) const;
    boom::OpenGLUInt getDebugMessageLog(boom::OpenGLUInt count, boom::OpenGLSizei bufSize, boom::OpenGLEnum* sources, boom::OpenGLEnum* types, boom::OpenGLUInt* ids, boom::OpenGLEnum* severities, boom::OpenGLSizei* lengths, boom::OpenGLChar* messageLog) const;
    boom::OpenGLUInt getDebugMessageLogAMD(boom::OpenGLUInt count, boom::OpenGLSizei bufSize, boom::OpenGLEnum* categories, boom::OpenGLEnum* severities, boom::OpenGLUInt* ids, boom::OpenGLSizei* lengths, boom::OpenGLChar* message) const;
    boom::OpenGLUInt getDebugMessageLogARB(boom::OpenGLUInt count, boom::OpenGLSizei bufSize, boom::OpenGLEnum* sources, boom::OpenGLEnum* types, boom::OpenGLUInt* ids, boom::OpenGLEnum* severities, boom::OpenGLSizei* lengths, boom::OpenGLChar* messageLog) const;
    boom::OpenGLUInt getDebugMessageLogKHR(boom::OpenGLUInt count, boom::OpenGLSizei bufSize, boom::OpenGLEnum* sources, boom::OpenGLEnum* types, boom::OpenGLUInt* ids, boom::OpenGLEnum* severities, boom::OpenGLSizei* lengths, boom::OpenGLChar* messageLog) const;
    void getDetailTexFuncSGIS(boom::OpenGLEnum target, boom::OpenGLFloat* points) const;
    void getDoubleIndexedvEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble* data) const;
    void getDoublei_v(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble* data) const;
    void getDoublei_vEXT(boom::OpenGLEnum pname, boom::OpenGLUInt index, boom::OpenGLDouble* params) const;
    void getDoublev(boom::OpenGLEnum pname, boom::OpenGLDouble* data) const;
    void getDriverControlsQCOM(boom::OpenGLInt* num, boom::OpenGLSizei size, boom::OpenGLUInt* driverControls) const;
    void getDriverControlStringQCOM(boom::OpenGLUInt driverControl, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* driverControlString) const;
    boom::OpenGLEnum getError() const;
    void getFenceivNV(boom::OpenGLUInt fence, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFinalCombinerInputParameterfvNV(boom::OpenGLEnum variable, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getFinalCombinerInputParameterivNV(boom::OpenGLEnum variable, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFirstPerfQueryIdINTEL(boom::OpenGLUInt* queryId) const;
    void getFixedv(boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getFixedvOES(boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getFloatIndexedvEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat* data) const;
    void getFloati_v(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat* data) const;
    void getFloati_vEXT(boom::OpenGLEnum pname, boom::OpenGLUInt index, boom::OpenGLFloat* params) const;
    void getFloati_vNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat* data) const;
    void getFloati_vOES(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat* data) const;
    void getFloatv(boom::OpenGLEnum pname, boom::OpenGLFloat* data) const;
    void getFogFuncSGIS(boom::OpenGLFloat* points) const;
    boom::OpenGLInt getFragDataIndex(boom::OpenGLUInt program, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getFragDataIndexEXT(boom::OpenGLUInt program, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getFragDataLocation(boom::OpenGLUInt program, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getFragDataLocationEXT(boom::OpenGLUInt program, boom::OpenGLChar const* name) const;
    void getFragmentLightfvSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getFragmentLightivSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFragmentMaterialfvSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getFragmentMaterialivSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFragmentShadingRatesEXT(boom::OpenGLSizei samples, boom::OpenGLSizei maxCount, boom::OpenGLSizei* count, boom::OpenGLEnum* shadingRates) const;
    void getFramebufferAttachmentParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFramebufferAttachmentParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFramebufferAttachmentParameterivOES(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFramebufferParameterfvAMD(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt numsamples, boom::OpenGLUInt pixelindex, boom::OpenGLSizei size, boom::OpenGLFloat* values) const;
    void getFramebufferParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFramebufferParameterivEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFramebufferParameterivMESA(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    boom::OpenGLSizei getFramebufferPixelLocalStorageSizeEXT(boom::OpenGLUInt target) const;
    boom::OpenGLEnum getGraphicsResetStatus() const;
    boom::OpenGLEnum getGraphicsResetStatusARB() const;
    boom::OpenGLEnum getGraphicsResetStatusEXT() const;
    boom::OpenGLEnum getGraphicsResetStatusKHR() const;
    boom::OpenGLHandleARB getHandleARB(boom::OpenGLEnum pname) const;
    void getHistogram(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, void* values) const;
    void getHistogramEXT(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, void* values) const;
    void getHistogramParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getHistogramParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getHistogramParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getHistogramParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getHistogramParameterxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    boom::OpenGLUInt64 getImageHandleARB(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLBoolean layered, boom::OpenGLInt layer, boom::OpenGLEnum format) const;
    boom::OpenGLUInt64 getImageHandleNV(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLBoolean layered, boom::OpenGLInt layer, boom::OpenGLEnum format) const;
    void getImageTransformParameterfvHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getImageTransformParameterivHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getInfoLogARB(boom::OpenGLHandleARB obj, boom::OpenGLSizei maxLength, boom::OpenGLSizei* length, boom::OpenGLCharARB* infoLog) const;
    boom::OpenGLInt getInstrumentsSGIX() const;
    void getInteger64i_v(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt64* data) const;
    void getInteger64v(boom::OpenGLEnum pname, boom::OpenGLInt64* data) const;
    void getInteger64vAPPLE(boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getInteger64vEXT(boom::OpenGLEnum pname, boom::OpenGLInt64* data) const;
    void getIntegerIndexedvEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt* data) const;
    void getIntegeri_v(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt* data) const;
    void getIntegeri_vEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt* data) const;
    void getIntegerui64i_vNV(boom::OpenGLEnum value, boom::OpenGLUInt index, boom::OpenGLUInt64EXT* result) const;
    void getIntegerui64vNV(boom::OpenGLEnum value, boom::OpenGLUInt64EXT* result) const;
    void getIntegerv(boom::OpenGLEnum pname, boom::OpenGLInt* data) const;
    void getInternalformati64v(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLInt64* params) const;
    void getInternalformativ(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLInt* params) const;
    void getInternalformatSampleivNV(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei samples, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLInt* params) const;
    void getInvariantBooleanvEXT(boom::OpenGLUInt id, boom::OpenGLEnum value, boom::OpenGLBoolean* data) const;
    void getInvariantFloatvEXT(boom::OpenGLUInt id, boom::OpenGLEnum value, boom::OpenGLFloat* data) const;
    void getInvariantIntegervEXT(boom::OpenGLUInt id, boom::OpenGLEnum value, boom::OpenGLInt* data) const;
    void getLightfv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getLightiv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getLightxOES(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getLightxv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getLightxvOES(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getListParameterfvSGIX(boom::OpenGLUInt list, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getListParameterivSGIX(boom::OpenGLUInt list, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getLocalConstantBooleanvEXT(boom::OpenGLUInt id, boom::OpenGLEnum value, boom::OpenGLBoolean* data) const;
    void getLocalConstantFloatvEXT(boom::OpenGLUInt id, boom::OpenGLEnum value, boom::OpenGLFloat* data) const;
    void getLocalConstantIntegervEXT(boom::OpenGLUInt id, boom::OpenGLEnum value, boom::OpenGLInt* data) const;
    void getMapAttribParameterfvNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMapAttribParameterivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMapControlPointsNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLEnum type, boom::OpenGLSizei ustride, boom::OpenGLSizei vstride, boom::OpenGLBoolean packed, void* points) const;
    void getMapdv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLDouble* v) const;
    void getMapfv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLFloat* v) const;
    void getMapiv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLInt* v) const;
    void getMapParameterfvNV(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMapParameterivNV(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMapxvOES(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLFixed* v) const;
    void getMaterialfv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMaterialiv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMaterialxOES(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void getMaterialxv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getMaterialxvOES(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getMemoryObjectDetachedResourcesuivNV(boom::OpenGLUInt memory, boom::OpenGLEnum pname, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLUInt* params) const;
    void getMemoryObjectParameterivEXT(boom::OpenGLUInt memoryObject, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMinmax(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, void* values) const;
    void getMinmaxEXT(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, void* values) const;
    void getMinmaxParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMinmaxParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMinmaxParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMinmaxParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMultisamplefv(boom::OpenGLEnum pname, boom::OpenGLUInt index, boom::OpenGLFloat* val) const;
    void getMultisamplefvNV(boom::OpenGLEnum pname, boom::OpenGLUInt index, boom::OpenGLFloat* val) const;
    void getMultiTexEnvfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMultiTexEnvivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMultiTexGendvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getMultiTexGenfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMultiTexGenivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMultiTexImageEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void* pixels) const;
    void getMultiTexLevelParameterfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMultiTexLevelParameterivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMultiTexParameterfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMultiTexParameterIivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMultiTexParameterIuivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getMultiTexParameterivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedBufferParameteri64v(boom::OpenGLUInt buffer, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getNamedBufferParameteriv(boom::OpenGLUInt buffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedBufferParameterivEXT(boom::OpenGLUInt buffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedBufferParameterui64vNV(boom::OpenGLUInt buffer, boom::OpenGLEnum pname, boom::OpenGLUInt64EXT* params) const;
    void getNamedBufferPointerv(boom::OpenGLUInt buffer, boom::OpenGLEnum pname, void** params) const;
    void getNamedBufferPointervEXT(boom::OpenGLUInt buffer, boom::OpenGLEnum pname, void** params) const;
    void getNamedBufferSubData(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void* data) const;
    void getNamedBufferSubDataEXT(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void* data) const;
    void getNamedFramebufferAttachmentParameteriv(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedFramebufferAttachmentParameterivEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedFramebufferParameterfvAMD(boom::OpenGLUInt framebuffer, boom::OpenGLEnum pname, boom::OpenGLUInt numsamples, boom::OpenGLUInt pixelindex, boom::OpenGLSizei size, boom::OpenGLFloat* values) const;
    void getNamedFramebufferParameteriv(boom::OpenGLUInt framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getNamedFramebufferParameterivEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedProgramivEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedProgramLocalParameterdvEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble* params) const;
    void getNamedProgramLocalParameterfvEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat* params) const;
    void getNamedProgramLocalParameterIivEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt* params) const;
    void getNamedProgramLocalParameterIuivEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt* params) const;
    void getNamedProgramStringEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLEnum pname, void* string) const;
    void getNamedRenderbufferParameteriv(boom::OpenGLUInt renderbuffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedRenderbufferParameterivEXT(boom::OpenGLUInt renderbuffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedStringARB(boom::OpenGLInt namelen, boom::OpenGLChar const* name, boom::OpenGLSizei bufSize, boom::OpenGLInt* stringlen, boom::OpenGLChar* string) const;
    void getNamedStringivARB(boom::OpenGLInt namelen, boom::OpenGLChar const* name, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getnColorTable(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* table) const;
    void getnColorTableARB(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* table) const;
    void getnCompressedTexImage(boom::OpenGLEnum target, boom::OpenGLInt lod, boom::OpenGLSizei bufSize, void* pixels) const;
    void getnCompressedTexImageARB(boom::OpenGLEnum target, boom::OpenGLInt lod, boom::OpenGLSizei bufSize, void* img) const;
    void getnConvolutionFilter(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* image) const;
    void getnConvolutionFilterARB(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* image) const;
    void getNextPerfQueryIdINTEL(boom::OpenGLUInt queryId, boom::OpenGLUInt* nextQueryId) const;
    void getnHistogram(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* values) const;
    void getnHistogramARB(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* values) const;
    void getnMapdv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLDouble* v) const;
    void getnMapdvARB(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLDouble* v) const;
    void getnMapfv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLFloat* v) const;
    void getnMapfvARB(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLFloat* v) const;
    void getnMapiv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLInt* v) const;
    void getnMapivARB(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLInt* v) const;
    void getnMinmax(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* values) const;
    void getnMinmaxARB(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* values) const;
    void getnPixelMapfv(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLFloat* values) const;
    void getnPixelMapfvARB(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLFloat* values) const;
    void getnPixelMapuiv(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLUInt* values) const;
    void getnPixelMapuivARB(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLUInt* values) const;
    void getnPixelMapusv(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLUShort* values) const;
    void getnPixelMapusvARB(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLUShort* values) const;
    void getnPolygonStipple(boom::OpenGLSizei bufSize, boom::OpenGLUByte* pattern) const;
    void getnPolygonStippleARB(boom::OpenGLSizei bufSize, boom::OpenGLUByte* pattern) const;
    void getnSeparableFilter(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei rowBufSize, void* row, boom::OpenGLSizei columnBufSize, void* column, void* span) const;
    void getnSeparableFilterARB(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei rowBufSize, void* row, boom::OpenGLSizei columnBufSize, void* column, void* span) const;
    void getnTexImage(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* pixels) const;
    void getnTexImageARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* img) const;
    void getnUniformdv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLDouble* params) const;
    void getnUniformdvARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLDouble* params) const;
    void getnUniformfv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLFloat* params) const;
    void getnUniformfvARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLFloat* params) const;
    void getnUniformfvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLFloat* params) const;
    void getnUniformfvKHR(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLFloat* params) const;
    void getnUniformi64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLInt64* params) const;
    void getnUniformiv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLInt* params) const;
    void getnUniformivARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLInt* params) const;
    void getnUniformivEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLInt* params) const;
    void getnUniformivKHR(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLInt* params) const;
    void getnUniformui64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLUInt64* params) const;
    void getnUniformuiv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLUInt* params) const;
    void getnUniformuivARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLUInt* params) const;
    void getnUniformuivKHR(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLUInt* params) const;
    void getObjectBufferfvATI(boom::OpenGLUInt buffer, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getObjectBufferivATI(boom::OpenGLUInt buffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getObjectLabel(boom::OpenGLEnum identifier, boom::OpenGLUInt name, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getObjectLabelEXT(boom::OpenGLEnum type, boom::OpenGLUInt object, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getObjectLabelKHR(boom::OpenGLEnum identifier, boom::OpenGLUInt name, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getObjectParameterfvARB(boom::OpenGLHandleARB obj, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getObjectParameterivAPPLE(boom::OpenGLEnum objectType, boom::OpenGLUInt name, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getObjectParameterivARB(boom::OpenGLHandleARB obj, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getObjectPtrLabel(void const* ptr, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getObjectPtrLabelKHR(void const* ptr, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getOcclusionQueryivNV(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getOcclusionQueryuivNV(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getPathColorGenfvNV(boom::OpenGLEnum color, boom::OpenGLEnum pname, boom::OpenGLFloat* value) const;
    void getPathColorGenivNV(boom::OpenGLEnum color, boom::OpenGLEnum pname, boom::OpenGLInt* value) const;
    void getPathCommandsNV(boom::OpenGLUInt path, boom::OpenGLUByte* commands) const;
    void getPathCoordsNV(boom::OpenGLUInt path, boom::OpenGLFloat* coords) const;
    void getPathDashArrayNV(boom::OpenGLUInt path, boom::OpenGLFloat* dashArray) const;
    boom::OpenGLFloat getPathLengthNV(boom::OpenGLUInt path, boom::OpenGLSizei startSegment, boom::OpenGLSizei numSegments) const;
    void getPathMetricRangeNV(boom::OpenGLBitfield metricQueryMask, boom::OpenGLUInt firstPathName, boom::OpenGLSizei numPaths, boom::OpenGLSizei stride, boom::OpenGLFloat* metrics) const;
    void getPathMetricsNV(boom::OpenGLBitfield metricQueryMask, boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUInt pathBase, boom::OpenGLSizei stride, boom::OpenGLFloat* metrics) const;
    void getPathParameterfvNV(boom::OpenGLUInt path, boom::OpenGLEnum pname, boom::OpenGLFloat* value) const;
    void getPathParameterivNV(boom::OpenGLUInt path, boom::OpenGLEnum pname, boom::OpenGLInt* value) const;
    void getPathSpacingNV(boom::OpenGLEnum pathListMode, boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUInt pathBase, boom::OpenGLFloat advanceScale, boom::OpenGLFloat kerningScale, boom::OpenGLEnum transformType, boom::OpenGLFloat* returnedSpacing) const;
    void getPathTexGenfvNV(boom::OpenGLEnum texCoordSet, boom::OpenGLEnum pname, boom::OpenGLFloat* value) const;
    void getPathTexGenivNV(boom::OpenGLEnum texCoordSet, boom::OpenGLEnum pname, boom::OpenGLInt* value) const;
    void getPerfCounterInfoINTEL(boom::OpenGLUInt queryId, boom::OpenGLUInt counterId, boom::OpenGLUInt counterNameLength, boom::OpenGLChar* counterName, boom::OpenGLUInt counterDescLength, boom::OpenGLChar* counterDesc, boom::OpenGLUInt* counterOffset, boom::OpenGLUInt* counterDataSize, boom::OpenGLUInt* counterTypeEnum, boom::OpenGLUInt* counterDataTypeEnum, boom::OpenGLUInt64* rawCounterMaxValue) const;
    void getPerfMonitorCounterDataAMD(boom::OpenGLUInt monitor, boom::OpenGLEnum pname, boom::OpenGLSizei dataSize, boom::OpenGLUInt* data, boom::OpenGLInt* bytesWritten) const;
    void getPerfMonitorCounterInfoAMD(boom::OpenGLUInt group, boom::OpenGLUInt counter, boom::OpenGLEnum pname, void* data) const;
    void getPerfMonitorCountersAMD(boom::OpenGLUInt group, boom::OpenGLInt* numCounters, boom::OpenGLInt* maxActiveCounters, boom::OpenGLSizei counterSize, boom::OpenGLUInt* counters) const;
    void getPerfMonitorCounterStringAMD(boom::OpenGLUInt group, boom::OpenGLUInt counter, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* counterString) const;
    void getPerfMonitorGroupsAMD(boom::OpenGLInt* numGroups, boom::OpenGLSizei groupsSize, boom::OpenGLUInt* groups) const;
    void getPerfMonitorGroupStringAMD(boom::OpenGLUInt group, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* groupString) const;
    void getPerfQueryDataINTEL(boom::OpenGLUInt queryHandle, boom::OpenGLUInt flags, boom::OpenGLSizei dataSize, void* data, boom::OpenGLUInt* bytesWritten) const;
    void getPerfQueryIdByNameINTEL(boom::OpenGLChar* queryName, boom::OpenGLUInt* queryId) const;
    void getPerfQueryInfoINTEL(boom::OpenGLUInt queryId, boom::OpenGLUInt queryNameLength, boom::OpenGLChar* queryName, boom::OpenGLUInt* dataSize, boom::OpenGLUInt* noCounters, boom::OpenGLUInt* noInstances, boom::OpenGLUInt* capsMask) const;
    void getPixelMapfv(boom::OpenGLEnum map, boom::OpenGLFloat* values) const;
    void getPixelMapuiv(boom::OpenGLEnum map, boom::OpenGLUInt* values) const;
    void getPixelMapusv(boom::OpenGLEnum map, boom::OpenGLUShort* values) const;
    void getPixelMapxv(boom::OpenGLEnum map, boom::OpenGLInt size, boom::OpenGLFixed* values) const;
    void getPixelTexGenParameterfvSGIS(boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getPixelTexGenParameterivSGIS(boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getPixelTransformParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getPixelTransformParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getPointerIndexedvEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, void** data) const;
    void getPointeri_vEXT(boom::OpenGLEnum pname, boom::OpenGLUInt index, void** params) const;
    void getPointerv(boom::OpenGLEnum pname, void** params) const;
    void getPointervEXT(boom::OpenGLEnum pname, void** params) const;
    void getPointervKHR(boom::OpenGLEnum pname, void** params) const;
    void getPolygonStipple(boom::OpenGLUByte* mask) const;
    void getProgramBinary(boom::OpenGLUInt program, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLEnum* binaryFormat, void* binary) const;
    void getProgramBinaryOES(boom::OpenGLUInt program, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLEnum* binaryFormat, void* binary) const;
    void getProgramEnvParameterdvARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble* params) const;
    void getProgramEnvParameterfvARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat* params) const;
    void getProgramEnvParameterIivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt* params) const;
    void getProgramEnvParameterIuivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt* params) const;
    void getProgramInfoLog(boom::OpenGLUInt program, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* infoLog) const;
    void getProgramInterfaceiv(boom::OpenGLUInt program, boom::OpenGLEnum programInterface, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramiv(boom::OpenGLUInt program, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramivARB(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramivNV(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramLocalParameterdvARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble* params) const;
    void getProgramLocalParameterfvARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat* params) const;
    void getProgramLocalParameterIivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt* params) const;
    void getProgramLocalParameterIuivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt* params) const;
    void getProgramNamedParameterdvNV(boom::OpenGLUInt id, boom::OpenGLSizei len, boom::OpenGLUByte const* name, boom::OpenGLDouble* params) const;
    void getProgramNamedParameterfvNV(boom::OpenGLUInt id, boom::OpenGLSizei len, boom::OpenGLUByte const* name, boom::OpenGLFloat* params) const;
    void getProgramParameterdvNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getProgramParameterfvNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getProgramPipelineInfoLog(boom::OpenGLUInt pipeline, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* infoLog) const;
    void getProgramPipelineInfoLogEXT(boom::OpenGLUInt pipeline, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* infoLog) const;
    void getProgramPipelineiv(boom::OpenGLUInt pipeline, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramPipelineivEXT(boom::OpenGLUInt pipeline, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramResourcefvNV(boom::OpenGLUInt program, boom::OpenGLEnum programInterface, boom::OpenGLUInt index, boom::OpenGLSizei propCount, boom::OpenGLEnum const* props, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLFloat* params) const;
    boom::OpenGLUInt getProgramResourceIndex(boom::OpenGLUInt program, boom::OpenGLEnum programInterface, boom::OpenGLChar const* name) const;
    void getProgramResourceiv(boom::OpenGLUInt program, boom::OpenGLEnum programInterface, boom::OpenGLUInt index, boom::OpenGLSizei propCount, boom::OpenGLEnum const* props, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLInt* params) const;
    boom::OpenGLInt getProgramResourceLocation(boom::OpenGLUInt program, boom::OpenGLEnum programInterface, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getProgramResourceLocationIndex(boom::OpenGLUInt program, boom::OpenGLEnum programInterface, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getProgramResourceLocationIndexEXT(boom::OpenGLUInt program, boom::OpenGLEnum programInterface, boom::OpenGLChar const* name) const;
    void getProgramResourceName(boom::OpenGLUInt program, boom::OpenGLEnum programInterface, boom::OpenGLUInt index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* name) const;
    void getProgramStageiv(boom::OpenGLUInt program, boom::OpenGLEnum shadertype, boom::OpenGLEnum pname, boom::OpenGLInt* values) const;
    void getProgramStringARB(boom::OpenGLEnum target, boom::OpenGLEnum pname, void* string) const;
    void getProgramStringNV(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLUByte* program) const;
    void getProgramSubroutineParameteruivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt* param) const;
    void getQueryBufferObjecti64v(boom::OpenGLUInt id, boom::OpenGLUInt buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryBufferObjectiv(boom::OpenGLUInt id, boom::OpenGLUInt buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryBufferObjectui64v(boom::OpenGLUInt id, boom::OpenGLUInt buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryBufferObjectuiv(boom::OpenGLUInt id, boom::OpenGLUInt buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryIndexediv(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryivARB(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryObjecti64v(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getQueryObjecti64vEXT(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getQueryObjectiv(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryObjectivARB(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryObjectivEXT(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryObjectui64v(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLUInt64* params) const;
    void getQueryObjectui64vEXT(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLUInt64* params) const;
    void getQueryObjectuiv(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getQueryObjectuivARB(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getQueryObjectuivEXT(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getRenderbufferParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getRenderbufferParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getRenderbufferParameterivOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSamplerParameterfv(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getSamplerParameterIiv(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSamplerParameterIivEXT(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSamplerParameterIivOES(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSamplerParameterIuiv(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getSamplerParameterIuivEXT(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getSamplerParameterIuivOES(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getSamplerParameteriv(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSemaphoreParameterivNV(boom::OpenGLUInt semaphore, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSemaphoreParameterui64vEXT(boom::OpenGLUInt semaphore, boom::OpenGLEnum pname, boom::OpenGLUInt64* params) const;
    void getSeparableFilter(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* row, void* column, void* span) const;
    void getSeparableFilterEXT(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* row, void* column, void* span) const;
    void getShaderInfoLog(boom::OpenGLUInt shader, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* infoLog) const;
    void getShaderiv(boom::OpenGLUInt shader, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getShaderPrecisionFormat(boom::OpenGLEnum shadertype, boom::OpenGLEnum precisiontype, boom::OpenGLInt* range, boom::OpenGLInt* precision) const;
    void getShaderSource(boom::OpenGLUInt shader, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* source) const;
    void getShaderSourceARB(boom::OpenGLHandleARB obj, boom::OpenGLSizei maxLength, boom::OpenGLSizei* length, boom::OpenGLCharARB* source) const;
    void getShadingRateImagePaletteNV(boom::OpenGLUInt viewport, boom::OpenGLUInt entry, boom::OpenGLEnum* rate) const;
    void getShadingRateSampleLocationivNV(boom::OpenGLEnum rate, boom::OpenGLUInt samples, boom::OpenGLUInt index, boom::OpenGLInt* location) const;
    void getSharpenTexFuncSGIS(boom::OpenGLEnum target, boom::OpenGLFloat* points) const;
    boom::OpenGLUShort getStageIndexNV(boom::OpenGLEnum shadertype) const;
    boom::OpenGLUByte  const* getString(boom::OpenGLEnum name) const;
    boom::OpenGLUByte  const* getStringi(boom::OpenGLEnum name, boom::OpenGLUInt index) const;
    boom::OpenGLUInt getSubroutineIndex(boom::OpenGLUInt program, boom::OpenGLEnum shadertype, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getSubroutineUniformLocation(boom::OpenGLUInt program, boom::OpenGLEnum shadertype, boom::OpenGLChar const* name) const;
    void getSynciv(boom::OpenGLSync sync, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLInt* values) const;
    void getSyncivAPPLE(boom::OpenGLSync sync, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLInt* values) const;
    void getTexBumpParameterfvATI(boom::OpenGLEnum pname, boom::OpenGLFloat* param) const;
    void getTexBumpParameterivATI(boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getTexEnvfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexEnviv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexEnvxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTexEnvxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTexFilterFuncSGIS(boom::OpenGLEnum target, boom::OpenGLEnum filter, boom::OpenGLFloat* weights) const;
    void getTexGendv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getTexGenfv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexGenfvOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexGeniv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexGenivOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexGenxvOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTexImage(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void* pixels) const;
    void getTexLevelParameterfv(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexLevelParameteriv(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexLevelParameterxvOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTexParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexParameterIiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexParameterIivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexParameterIivOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexParameterIuiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getTexParameterIuivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getTexParameterIuivOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getTexParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexParameterPointervAPPLE(boom::OpenGLEnum target, boom::OpenGLEnum pname, void** params) const;
    void getTexParameterxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTexParameterxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    boom::OpenGLUInt64 getTextureHandleARB(boom::OpenGLUInt texture) const;
    boom::OpenGLUInt64 getTextureHandleIMG(boom::OpenGLUInt texture) const;
    boom::OpenGLUInt64 getTextureHandleNV(boom::OpenGLUInt texture) const;
    void getTextureImage(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* pixels) const;
    void getTextureImageEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void* pixels) const;
    void getTextureLevelParameterfv(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTextureLevelParameterfvEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTextureLevelParameteriv(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureLevelParameterivEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureParameterfv(boom::OpenGLUInt texture, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTextureParameterfvEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTextureParameterIiv(boom::OpenGLUInt texture, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureParameterIivEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureParameterIuiv(boom::OpenGLUInt texture, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getTextureParameterIuivEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getTextureParameteriv(boom::OpenGLUInt texture, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureParameterivEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    boom::OpenGLUInt64 getTextureSamplerHandleARB(boom::OpenGLUInt texture, boom::OpenGLUInt sampler) const;
    boom::OpenGLUInt64 getTextureSamplerHandleIMG(boom::OpenGLUInt texture, boom::OpenGLUInt sampler) const;
    boom::OpenGLUInt64 getTextureSamplerHandleNV(boom::OpenGLUInt texture, boom::OpenGLUInt sampler) const;
    void getTextureSubImage(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* pixels) const;
    void getTrackMatrixivNV(boom::OpenGLEnum target, boom::OpenGLUInt address, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTransformFeedbacki64_v(boom::OpenGLUInt xfb, boom::OpenGLEnum pname, boom::OpenGLUInt index, boom::OpenGLInt64* param) const;
    void getTransformFeedbackiv(boom::OpenGLUInt xfb, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getTransformFeedbacki_v(boom::OpenGLUInt xfb, boom::OpenGLEnum pname, boom::OpenGLUInt index, boom::OpenGLInt* param) const;
    void getTransformFeedbackVarying(boom::OpenGLUInt program, boom::OpenGLUInt index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLSizei* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getTransformFeedbackVaryingEXT(boom::OpenGLUInt program, boom::OpenGLUInt index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLSizei* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getTransformFeedbackVaryingNV(boom::OpenGLUInt program, boom::OpenGLUInt index, boom::OpenGLInt* location) const;
    void getTranslatedShaderSourceANGLE(boom::OpenGLUInt shader, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* source) const;
    boom::OpenGLUInt getUniformBlockIndex(boom::OpenGLUInt program, boom::OpenGLChar const* uniformBlockName) const;
    boom::OpenGLInt getUniformBufferSizeEXT(boom::OpenGLUInt program, boom::OpenGLInt location) const;
    void getUniformdv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLDouble* params) const;
    void getUniformfv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLFloat* params) const;
    void getUniformfvARB(boom::OpenGLHandleARB programObj, boom::OpenGLInt location, boom::OpenGLFloat* params) const;
    void getUniformi64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt64* params) const;
    void getUniformi64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt64EXT* params) const;
    void getUniformIndices(boom::OpenGLUInt program, boom::OpenGLSizei uniformCount, boom::OpenGLChar const* const* uniformNames, boom::OpenGLUInt* uniformIndices) const;
    void getUniformiv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt* params) const;
    void getUniformivARB(boom::OpenGLHandleARB programObj, boom::OpenGLInt location, boom::OpenGLInt* params) const;
    boom::OpenGLInt getUniformLocation(boom::OpenGLUInt program, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getUniformLocationARB(boom::OpenGLHandleARB programObj, boom::OpenGLCharARB const* name) const;
    boom::OpenGLIntptr getUniformOffsetEXT(boom::OpenGLUInt program, boom::OpenGLInt location) const;
    void getUniformSubroutineuiv(boom::OpenGLEnum shadertype, boom::OpenGLInt location, boom::OpenGLUInt* params) const;
    void getUniformui64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64* params) const;
    void getUniformui64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64EXT* params) const;
    void getUniformuiv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt* params) const;
    void getUniformuivEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt* params) const;
    void getUnsignedBytei_vEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUByte* data) const;
    void getUnsignedBytevEXT(boom::OpenGLEnum pname, boom::OpenGLUByte* data) const;
    void getVariantArrayObjectfvATI(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVariantArrayObjectivATI(boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVariantBooleanvEXT(boom::OpenGLUInt id, boom::OpenGLEnum value, boom::OpenGLBoolean* data) const;
    void getVariantFloatvEXT(boom::OpenGLUInt id, boom::OpenGLEnum value, boom::OpenGLFloat* data) const;
    void getVariantIntegervEXT(boom::OpenGLUInt id, boom::OpenGLEnum value, boom::OpenGLInt* data) const;
    void getVariantPointervEXT(boom::OpenGLUInt id, boom::OpenGLEnum value, void** data) const;
    boom::OpenGLInt getVaryingLocationNV(boom::OpenGLUInt program, boom::OpenGLChar const* name) const;
    void getVertexArrayIndexed64iv(boom::OpenGLUInt vaobj, boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt64* param) const;
    void getVertexArrayIndexediv(boom::OpenGLUInt vaobj, boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getVertexArrayIntegeri_vEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getVertexArrayIntegervEXT(boom::OpenGLUInt vaobj, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getVertexArrayiv(boom::OpenGLUInt vaobj, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getVertexArrayPointeri_vEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt index, boom::OpenGLEnum pname, void** param) const;
    void getVertexArrayPointervEXT(boom::OpenGLUInt vaobj, boom::OpenGLEnum pname, void** param) const;
    void getVertexAttribArrayObjectfvATI(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVertexAttribArrayObjectivATI(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribdv(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribdvARB(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribdvNV(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribfv(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVertexAttribfvARB(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVertexAttribfvNV(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVertexAttribIiv(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribIivEXT(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribIuiv(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getVertexAttribIuivEXT(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void getVertexAttribiv(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribivARB(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribivNV(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribLdv(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribLdvEXT(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribLi64vNV(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt64EXT* params) const;
    void getVertexAttribLui64vARB(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLUInt64EXT* params) const;
    void getVertexAttribLui64vNV(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLUInt64EXT* params) const;
    void getVertexAttribPointerv(boom::OpenGLUInt index, boom::OpenGLEnum pname, void** pointer) const;
    void getVertexAttribPointervARB(boom::OpenGLUInt index, boom::OpenGLEnum pname, void** pointer) const;
    void getVertexAttribPointervNV(boom::OpenGLUInt index, boom::OpenGLEnum pname, void** pointer) const;
    void getVideoCaptureivNV(boom::OpenGLUInt video_capture_slot, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVideoCaptureStreamdvNV(boom::OpenGLUInt video_capture_slot, boom::OpenGLUInt stream, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVideoCaptureStreamfvNV(boom::OpenGLUInt video_capture_slot, boom::OpenGLUInt stream, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVideoCaptureStreamivNV(boom::OpenGLUInt video_capture_slot, boom::OpenGLUInt stream, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVideoi64vNV(boom::OpenGLUInt video_slot, boom::OpenGLEnum pname, boom::OpenGLInt64EXT* params) const;
    void getVideoivNV(boom::OpenGLUInt video_slot, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVideoui64vNV(boom::OpenGLUInt video_slot, boom::OpenGLEnum pname, boom::OpenGLUInt64EXT* params) const;
    void getVideouivNV(boom::OpenGLUInt video_slot, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    boom::OpenGLVulkanProcNV getVkProcAddrNV(boom::OpenGLChar const* name) const;
    void globalAlphaFactorbSUN(boom::OpenGLByte factor) const;
    void globalAlphaFactordSUN(boom::OpenGLDouble factor) const;
    void globalAlphaFactorfSUN(boom::OpenGLFloat factor) const;
    void globalAlphaFactoriSUN(boom::OpenGLInt factor) const;
    void globalAlphaFactorsSUN(boom::OpenGLShort factor) const;
    void globalAlphaFactorubSUN(boom::OpenGLUByte factor) const;
    void globalAlphaFactoruiSUN(boom::OpenGLUInt factor) const;
    void globalAlphaFactorusSUN(boom::OpenGLUShort factor) const;
    void hint(boom::OpenGLEnum target, boom::OpenGLEnum mode) const;
    void hintPGI(boom::OpenGLEnum target, boom::OpenGLInt mode) const;
    void histogram(boom::OpenGLEnum target, boom::OpenGLSizei width, boom::OpenGLEnum internalformat, boom::OpenGLBoolean sink) const;
    void histogramEXT(boom::OpenGLEnum target, boom::OpenGLSizei width, boom::OpenGLEnum internalformat, boom::OpenGLBoolean sink) const;
    void iglooInterfaceSGIX(boom::OpenGLEnum pname, void const* params) const;
    void imageTransformParameterfHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void imageTransformParameterfvHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void imageTransformParameteriHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void imageTransformParameterivHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void importMemoryFdEXT(boom::OpenGLUInt memory, boom::OpenGLUInt64 size, boom::OpenGLEnum handleType, boom::OpenGLInt fd) const;
    void importMemoryWin32HandleEXT(boom::OpenGLUInt memory, boom::OpenGLUInt64 size, boom::OpenGLEnum handleType, void* handle) const;
    void importMemoryWin32NameEXT(boom::OpenGLUInt memory, boom::OpenGLUInt64 size, boom::OpenGLEnum handleType, void const* name) const;
    void importSemaphoreFdEXT(boom::OpenGLUInt semaphore, boom::OpenGLEnum handleType, boom::OpenGLInt fd) const;
    void importSemaphoreWin32HandleEXT(boom::OpenGLUInt semaphore, boom::OpenGLEnum handleType, void* handle) const;
    void importSemaphoreWin32NameEXT(boom::OpenGLUInt semaphore, boom::OpenGLEnum handleType, void const* name) const;
    boom::OpenGLSync importSyncEXT(boom::OpenGLEnum external_sync_type, boom::OpenGLIntptr external_sync, boom::OpenGLBitfield flags) const;
    void indexd(boom::OpenGLDouble c) const;
    void indexdv(boom::OpenGLDouble const* c) const;
    void indexf(boom::OpenGLFloat c) const;
    void indexFormatNV(boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void indexFuncEXT(boom::OpenGLEnum func, boom::OpenGLClampf ref) const;
    void indexfv(boom::OpenGLFloat const* c) const;
    void indexi(boom::OpenGLInt c) const;
    void indexiv(boom::OpenGLInt const* c) const;
    void indexMask(boom::OpenGLUInt mask) const;
    void indexMaterialEXT(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void indexPointer(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void indexPointerEXT(boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLSizei count, void const* pointer) const;
    void indexPointerListIBM(boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void indexs(boom::OpenGLShort c) const;
    void indexsv(boom::OpenGLShort const* c) const;
    void indexub(boom::OpenGLUByte c) const;
    void indexubv(boom::OpenGLUByte const* c) const;
    void indexxOES(boom::OpenGLFixed component) const;
    void indexxvOES(boom::OpenGLFixed const* component) const;
    void initNames() const;
    void insertComponentEXT(boom::OpenGLUInt res, boom::OpenGLUInt src, boom::OpenGLUInt num) const;
    void insertEventMarkerEXT(boom::OpenGLSizei length, boom::OpenGLChar const* marker) const;
    void instrumentsBufferSGIX(boom::OpenGLSizei size, boom::OpenGLInt* buffer) const;
    void interleavedArrays(boom::OpenGLEnum format, boom::OpenGLSizei stride, void const* pointer) const;
    void interpolatePathsNV(boom::OpenGLUInt resultPath, boom::OpenGLUInt pathA, boom::OpenGLUInt pathB, boom::OpenGLFloat weight) const;
    void invalidateBufferData(boom::OpenGLUInt buffer) const;
    void invalidateBufferSubData(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void invalidateFramebuffer(boom::OpenGLEnum target, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments) const;
    void invalidateNamedFramebufferData(boom::OpenGLUInt framebuffer, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments) const;
    void invalidateNamedFramebufferSubData(boom::OpenGLUInt framebuffer, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void invalidateSubFramebuffer(boom::OpenGLEnum target, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void invalidateTexImage(boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void invalidateTexSubImage(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    boom::OpenGLBoolean isAsyncMarkerSGIX(boom::OpenGLUInt marker) const;
    boom::OpenGLBoolean isBuffer(boom::OpenGLUInt buffer) const;
    boom::OpenGLBoolean isBufferARB(boom::OpenGLUInt buffer) const;
    boom::OpenGLBoolean isBufferResidentNV(boom::OpenGLEnum target) const;
    boom::OpenGLBoolean isCommandListNV(boom::OpenGLUInt list) const;
    boom::OpenGLBoolean isEnabled(boom::OpenGLEnum cap) const;
    boom::OpenGLBoolean isEnabledi(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    boom::OpenGLBoolean isEnablediEXT(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    boom::OpenGLBoolean isEnabledIndexedEXT(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    boom::OpenGLBoolean isEnablediNV(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    boom::OpenGLBoolean isEnablediOES(boom::OpenGLEnum target, boom::OpenGLUInt index) const;
    boom::OpenGLBoolean isFenceAPPLE(boom::OpenGLUInt fence) const;
    boom::OpenGLBoolean isFenceNV(boom::OpenGLUInt fence) const;
    boom::OpenGLBoolean isFramebuffer(boom::OpenGLUInt framebuffer) const;
    boom::OpenGLBoolean isFramebufferEXT(boom::OpenGLUInt framebuffer) const;
    boom::OpenGLBoolean isFramebufferOES(boom::OpenGLUInt framebuffer) const;
    boom::OpenGLBoolean isImageHandleResidentARB(boom::OpenGLUInt64 handle) const;
    boom::OpenGLBoolean isImageHandleResidentNV(boom::OpenGLUInt64 handle) const;
    boom::OpenGLBoolean isList(boom::OpenGLUInt list) const;
    boom::OpenGLBoolean isMemoryObjectEXT(boom::OpenGLUInt memoryObject) const;
    boom::OpenGLBoolean isNameAMD(boom::OpenGLEnum identifier, boom::OpenGLUInt name) const;
    boom::OpenGLBoolean isNamedBufferResidentNV(boom::OpenGLUInt buffer) const;
    boom::OpenGLBoolean isNamedStringARB(boom::OpenGLInt namelen, boom::OpenGLChar const* name) const;
    boom::OpenGLBoolean isObjectBufferATI(boom::OpenGLUInt buffer) const;
    boom::OpenGLBoolean isOcclusionQueryNV(boom::OpenGLUInt id) const;
    boom::OpenGLBoolean isPathNV(boom::OpenGLUInt path) const;
    boom::OpenGLBoolean isPointInFillPathNV(boom::OpenGLUInt path, boom::OpenGLUInt mask, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    boom::OpenGLBoolean isPointInStrokePathNV(boom::OpenGLUInt path, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    boom::OpenGLBoolean isProgram(boom::OpenGLUInt program) const;
    boom::OpenGLBoolean isProgramARB(boom::OpenGLUInt program) const;
    boom::OpenGLBoolean isProgramNV(boom::OpenGLUInt id) const;
    boom::OpenGLBoolean isProgramPipeline(boom::OpenGLUInt pipeline) const;
    boom::OpenGLBoolean isProgramPipelineEXT(boom::OpenGLUInt pipeline) const;
    boom::OpenGLBoolean isQuery(boom::OpenGLUInt id) const;
    boom::OpenGLBoolean isQueryARB(boom::OpenGLUInt id) const;
    boom::OpenGLBoolean isQueryEXT(boom::OpenGLUInt id) const;
    boom::OpenGLBoolean isRenderbuffer(boom::OpenGLUInt renderbuffer) const;
    boom::OpenGLBoolean isRenderbufferEXT(boom::OpenGLUInt renderbuffer) const;
    boom::OpenGLBoolean isRenderbufferOES(boom::OpenGLUInt renderbuffer) const;
    boom::OpenGLBoolean isSampler(boom::OpenGLUInt sampler) const;
    boom::OpenGLBoolean isSemaphoreEXT(boom::OpenGLUInt semaphore) const;
    boom::OpenGLBoolean isShader(boom::OpenGLUInt shader) const;
    boom::OpenGLBoolean isStateNV(boom::OpenGLUInt state) const;
    boom::OpenGLBoolean isSync(boom::OpenGLSync sync) const;
    boom::OpenGLBoolean isSyncAPPLE(boom::OpenGLSync sync) const;
    boom::OpenGLBoolean isTexture(boom::OpenGLUInt texture) const;
    boom::OpenGLBoolean isTextureEXT(boom::OpenGLUInt texture) const;
    boom::OpenGLBoolean isTextureHandleResidentARB(boom::OpenGLUInt64 handle) const;
    boom::OpenGLBoolean isTextureHandleResidentNV(boom::OpenGLUInt64 handle) const;
    boom::OpenGLBoolean isTransformFeedback(boom::OpenGLUInt id) const;
    boom::OpenGLBoolean isTransformFeedbackNV(boom::OpenGLUInt id) const;
    boom::OpenGLBoolean isVariantEnabledEXT(boom::OpenGLUInt id, boom::OpenGLEnum cap) const;
    boom::OpenGLBoolean isVertexArray(boom::OpenGLUInt array) const;
    boom::OpenGLBoolean isVertexArrayAPPLE(boom::OpenGLUInt array) const;
    boom::OpenGLBoolean isVertexArrayOES(boom::OpenGLUInt array) const;
    boom::OpenGLBoolean isVertexAttribEnabledAPPLE(boom::OpenGLUInt index, boom::OpenGLEnum pname) const;
    void labelObjectEXT(boom::OpenGLEnum type, boom::OpenGLUInt object, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    void lGPUCopyImageSubDataNVX(boom::OpenGLUInt sourceGpu, boom::OpenGLBitfield destinationGpuMask, boom::OpenGLUInt srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srxY, boom::OpenGLInt srcZ, boom::OpenGLUInt dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void lGPUInterlockNVX() const;
    void lGPUNamedBufferSubDataNVX(boom::OpenGLBitfield gpuMask, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void lightEnviSGIX(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void lightf(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void lightfv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void lighti(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void lightiv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void lightModelf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void lightModelfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void lightModeli(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void lightModeliv(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void lightModelx(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void lightModelxOES(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void lightModelxv(boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void lightModelxvOES(boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void lightx(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void lightxOES(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void lightxv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void lightxvOES(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void lineStipple(boom::OpenGLInt factor, boom::OpenGLUShort pattern) const;
    void lineWidth(boom::OpenGLFloat width) const;
    void lineWidthx(boom::OpenGLFixed width) const;
    void lineWidthxOES(boom::OpenGLFixed width) const;
    void linkProgram(boom::OpenGLUInt program) const;
    void linkProgramARB(boom::OpenGLHandleARB programObj) const;
    void listBase(boom::OpenGLUInt base) const;
    void listDrawCommandsStatesClientNV(boom::OpenGLUInt list, boom::OpenGLUInt segment, void const** indirects, boom::OpenGLSizei const* sizes, boom::OpenGLUInt const* states, boom::OpenGLUInt const* fbos, boom::OpenGLUInt count) const;
    void listParameterfSGIX(boom::OpenGLUInt list, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void listParameterfvSGIX(boom::OpenGLUInt list, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void listParameteriSGIX(boom::OpenGLUInt list, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void listParameterivSGIX(boom::OpenGLUInt list, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void loadIdentity() const;
    void loadIdentityDeformationMapSGIX(boom::OpenGLBitfield mask) const;
    void loadMatrixd(boom::OpenGLDouble const* m) const;
    void loadMatrixf(boom::OpenGLFloat const* m) const;
    void loadMatrixx(boom::OpenGLFixed const* m) const;
    void loadMatrixxOES(boom::OpenGLFixed const* m) const;
    void loadName(boom::OpenGLUInt name) const;
    void loadPaletteFromModelViewMatrixOES() const;
    void loadProgramNV(boom::OpenGLEnum target, boom::OpenGLUInt id, boom::OpenGLSizei len, boom::OpenGLUByte const* program) const;
    void loadTransposeMatrixd(boom::OpenGLDouble const* m) const;
    void loadTransposeMatrixdARB(boom::OpenGLDouble const* m) const;
    void loadTransposeMatrixf(boom::OpenGLFloat const* m) const;
    void loadTransposeMatrixfARB(boom::OpenGLFloat const* m) const;
    void loadTransposeMatrixxOES(boom::OpenGLFixed const* m) const;
    void lockArraysEXT(boom::OpenGLInt first, boom::OpenGLSizei count) const;
    void logicOp(boom::OpenGLEnum opcode) const;
    void makeBufferNonResidentNV(boom::OpenGLEnum target) const;
    void makeBufferResidentNV(boom::OpenGLEnum target, boom::OpenGLEnum access) const;
    void makeImageHandleNonResidentARB(boom::OpenGLUInt64 handle) const;
    void makeImageHandleNonResidentNV(boom::OpenGLUInt64 handle) const;
    void makeImageHandleResidentARB(boom::OpenGLUInt64 handle, boom::OpenGLEnum access) const;
    void makeImageHandleResidentNV(boom::OpenGLUInt64 handle, boom::OpenGLEnum access) const;
    void makeNamedBufferNonResidentNV(boom::OpenGLUInt buffer) const;
    void makeNamedBufferResidentNV(boom::OpenGLUInt buffer, boom::OpenGLEnum access) const;
    void makeTextureHandleNonResidentARB(boom::OpenGLUInt64 handle) const;
    void makeTextureHandleNonResidentNV(boom::OpenGLUInt64 handle) const;
    void makeTextureHandleResidentARB(boom::OpenGLUInt64 handle) const;
    void makeTextureHandleResidentNV(boom::OpenGLUInt64 handle) const;
    void map1d(boom::OpenGLEnum target, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLDouble const* points) const;
    void map1f(boom::OpenGLEnum target, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLFloat const* points) const;
    void map1xOES(boom::OpenGLEnum target, boom::OpenGLFixed u1, boom::OpenGLFixed u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLFixed points) const;
    void map2d(boom::OpenGLEnum target, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLDouble v1, boom::OpenGLDouble v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLDouble const* points) const;
    void map2f(boom::OpenGLEnum target, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLFloat const* points) const;
    void map2xOES(boom::OpenGLEnum target, boom::OpenGLFixed u1, boom::OpenGLFixed u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLFixed v1, boom::OpenGLFixed v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLFixed points) const;
    void * mapBuffer(boom::OpenGLEnum target, boom::OpenGLEnum access) const;
    void * mapBufferARB(boom::OpenGLEnum target, boom::OpenGLEnum access) const;
    void * mapBufferOES(boom::OpenGLEnum target, boom::OpenGLEnum access) const;
    void * mapBufferRange(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length, boom::OpenGLBitfield access) const;
    void * mapBufferRangeEXT(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length, boom::OpenGLBitfield access) const;
    void mapControlPointsNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLEnum type, boom::OpenGLSizei ustride, boom::OpenGLSizei vstride, boom::OpenGLInt uorder, boom::OpenGLInt vorder, boom::OpenGLBoolean packed, void const* points) const;
    void mapGrid1d(boom::OpenGLInt un, boom::OpenGLDouble u1, boom::OpenGLDouble u2) const;
    void mapGrid1f(boom::OpenGLInt un, boom::OpenGLFloat u1, boom::OpenGLFloat u2) const;
    void mapGrid1xOES(boom::OpenGLInt n, boom::OpenGLFixed u1, boom::OpenGLFixed u2) const;
    void mapGrid2d(boom::OpenGLInt un, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt vn, boom::OpenGLDouble v1, boom::OpenGLDouble v2) const;
    void mapGrid2f(boom::OpenGLInt un, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt vn, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void mapGrid2xOES(boom::OpenGLInt n, boom::OpenGLFixed u1, boom::OpenGLFixed u2, boom::OpenGLFixed v1, boom::OpenGLFixed v2) const;
    void * mapNamedBuffer(boom::OpenGLUInt buffer, boom::OpenGLEnum access) const;
    void * mapNamedBufferEXT(boom::OpenGLUInt buffer, boom::OpenGLEnum access) const;
    void * mapNamedBufferRange(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length, boom::OpenGLBitfield access) const;
    void * mapNamedBufferRangeEXT(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length, boom::OpenGLBitfield access) const;
    void * mapObjectBufferATI(boom::OpenGLUInt buffer) const;
    void mapParameterfvNV(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void mapParameterivNV(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void * mapTexture2DINTEL(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLBitfield access, boom::OpenGLInt* stride, boom::OpenGLEnum* layout) const;
    void mapVertexAttrib1dAPPLE(boom::OpenGLUInt index, boom::OpenGLUInt size, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLDouble const* points) const;
    void mapVertexAttrib1fAPPLE(boom::OpenGLUInt index, boom::OpenGLUInt size, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLFloat const* points) const;
    void mapVertexAttrib2dAPPLE(boom::OpenGLUInt index, boom::OpenGLUInt size, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLDouble v1, boom::OpenGLDouble v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLDouble const* points) const;
    void mapVertexAttrib2fAPPLE(boom::OpenGLUInt index, boom::OpenGLUInt size, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLFloat const* points) const;
    void materialf(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void materialfv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void materiali(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void materialiv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void materialx(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void materialxOES(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void materialxv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void materialxvOES(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void matrixFrustumEXT(boom::OpenGLEnum mode, boom::OpenGLDouble left, boom::OpenGLDouble right, boom::OpenGLDouble bottom, boom::OpenGLDouble top, boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void matrixIndexPointerARB(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void matrixIndexPointerOES(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void matrixIndexubvARB(boom::OpenGLInt size, boom::OpenGLUByte const* indices) const;
    void matrixIndexuivARB(boom::OpenGLInt size, boom::OpenGLUInt const* indices) const;
    void matrixIndexusvARB(boom::OpenGLInt size, boom::OpenGLUShort const* indices) const;
    void matrixLoad3x2fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixLoad3x3fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixLoaddEXT(boom::OpenGLEnum mode, boom::OpenGLDouble const* m) const;
    void matrixLoadfEXT(boom::OpenGLEnum mode, boom::OpenGLFloat const* m) const;
    void matrixLoadIdentityEXT(boom::OpenGLEnum mode) const;
    void matrixLoadTranspose3x3fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixLoadTransposedEXT(boom::OpenGLEnum mode, boom::OpenGLDouble const* m) const;
    void matrixLoadTransposefEXT(boom::OpenGLEnum mode, boom::OpenGLFloat const* m) const;
    void matrixMode(boom::OpenGLEnum mode) const;
    void matrixMult3x2fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixMult3x3fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixMultdEXT(boom::OpenGLEnum mode, boom::OpenGLDouble const* m) const;
    void matrixMultfEXT(boom::OpenGLEnum mode, boom::OpenGLFloat const* m) const;
    void matrixMultTranspose3x3fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixMultTransposedEXT(boom::OpenGLEnum mode, boom::OpenGLDouble const* m) const;
    void matrixMultTransposefEXT(boom::OpenGLEnum mode, boom::OpenGLFloat const* m) const;
    void matrixOrthoEXT(boom::OpenGLEnum mode, boom::OpenGLDouble left, boom::OpenGLDouble right, boom::OpenGLDouble bottom, boom::OpenGLDouble top, boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void matrixPopEXT(boom::OpenGLEnum mode) const;
    void matrixPushEXT(boom::OpenGLEnum mode) const;
    void matrixRotatedEXT(boom::OpenGLEnum mode, boom::OpenGLDouble angle, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void matrixRotatefEXT(boom::OpenGLEnum mode, boom::OpenGLFloat angle, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void matrixScaledEXT(boom::OpenGLEnum mode, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void matrixScalefEXT(boom::OpenGLEnum mode, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void matrixTranslatedEXT(boom::OpenGLEnum mode, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void matrixTranslatefEXT(boom::OpenGLEnum mode, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void maxShaderCompilerThreadsARB(boom::OpenGLUInt count) const;
    void maxShaderCompilerThreadsKHR(boom::OpenGLUInt count) const;
    void memoryBarrier(boom::OpenGLBitfield barriers) const;
    void memoryBarrierByRegion(boom::OpenGLBitfield barriers) const;
    void memoryBarrierEXT(boom::OpenGLBitfield barriers) const;
    void memoryObjectParameterivEXT(boom::OpenGLUInt memoryObject, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void minmax(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLBoolean sink) const;
    void minmaxEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLBoolean sink) const;
    void minSampleShading(boom::OpenGLFloat value) const;
    void minSampleShadingARB(boom::OpenGLFloat value) const;
    void minSampleShadingOES(boom::OpenGLFloat value) const;
    void multicastBarrierNV() const;
    void multicastBlitFramebufferNV(boom::OpenGLUInt srcGpu, boom::OpenGLUInt dstGpu, boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void multicastBufferSubDataNV(boom::OpenGLBitfield gpuMask, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void multicastCopyBufferSubDataNV(boom::OpenGLUInt readGpu, boom::OpenGLBitfield writeGpuMask, boom::OpenGLUInt readBuffer, boom::OpenGLUInt writeBuffer, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void multicastCopyImageSubDataNV(boom::OpenGLUInt srcGpu, boom::OpenGLBitfield dstGpuMask, boom::OpenGLUInt srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUInt dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei srcWidth, boom::OpenGLSizei srcHeight, boom::OpenGLSizei srcDepth) const;
    void multicastFramebufferSampleLocationsfvNV(boom::OpenGLUInt gpu, boom::OpenGLUInt framebuffer, boom::OpenGLUInt start, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void multicastGetQueryObjecti64vNV(boom::OpenGLUInt gpu, boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void multicastGetQueryObjectivNV(boom::OpenGLUInt gpu, boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void multicastGetQueryObjectui64vNV(boom::OpenGLUInt gpu, boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLUInt64* params) const;
    void multicastGetQueryObjectuivNV(boom::OpenGLUInt gpu, boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLUInt* params) const;
    void multicastScissorArrayvNVX(boom::OpenGLUInt gpu, boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLInt const* v) const;
    void multicastViewportArrayvNVX(boom::OpenGLUInt gpu, boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void multicastViewportPositionWScaleNVX(boom::OpenGLUInt gpu, boom::OpenGLUInt index, boom::OpenGLFloat xcoeff, boom::OpenGLFloat ycoeff) const;
    void multicastWaitSyncNV(boom::OpenGLUInt signalGpu, boom::OpenGLBitfield waitGpuMask) const;
    void multiDrawArrays(boom::OpenGLEnum mode, boom::OpenGLInt const* first, boom::OpenGLSizei const* count, boom::OpenGLSizei drawcount) const;
    void multiDrawArraysEXT(boom::OpenGLEnum mode, boom::OpenGLInt const* first, boom::OpenGLSizei const* count, boom::OpenGLSizei primcount) const;
    void multiDrawArraysIndirect(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawArraysIndirectAMD(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLSizei primcount, boom::OpenGLSizei stride) const;
    void multiDrawArraysIndirectBindlessCountNV(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLSizei drawCount, boom::OpenGLSizei maxDrawCount, boom::OpenGLSizei stride, boom::OpenGLInt vertexBufferCount) const;
    void multiDrawArraysIndirectBindlessNV(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLSizei drawCount, boom::OpenGLSizei stride, boom::OpenGLInt vertexBufferCount) const;
    void multiDrawArraysIndirectCount(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiDrawArraysIndirectCountARB(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiDrawArraysIndirectEXT(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawElementArrayAPPLE(boom::OpenGLEnum mode, boom::OpenGLInt const* first, boom::OpenGLSizei const* count, boom::OpenGLSizei primcount) const;
    void multiDrawElements(boom::OpenGLEnum mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei drawcount) const;
    void multiDrawElementsBaseVertex(boom::OpenGLEnum mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei drawcount, boom::OpenGLInt const* basevertex) const;
    void multiDrawElementsBaseVertexEXT(boom::OpenGLEnum mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei drawcount, boom::OpenGLInt const* basevertex) const;
    void multiDrawElementsEXT(boom::OpenGLEnum mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei primcount) const;
    void multiDrawElementsIndirect(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawElementsIndirectAMD(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLSizei primcount, boom::OpenGLSizei stride) const;
    void multiDrawElementsIndirectBindlessCountNV(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLSizei drawCount, boom::OpenGLSizei maxDrawCount, boom::OpenGLSizei stride, boom::OpenGLInt vertexBufferCount) const;
    void multiDrawElementsIndirectBindlessNV(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLSizei drawCount, boom::OpenGLSizei stride, boom::OpenGLInt vertexBufferCount) const;
    void multiDrawElementsIndirectCount(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiDrawElementsIndirectCountARB(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiDrawElementsIndirectEXT(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawMeshTasksIndirectCountNV(boom::OpenGLIntptr indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiDrawMeshTasksIndirectNV(boom::OpenGLIntptr indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawRangeElementArrayAPPLE(boom::OpenGLEnum mode, boom::OpenGLUInt start, boom::OpenGLUInt end, boom::OpenGLInt const* first, boom::OpenGLSizei const* count, boom::OpenGLSizei primcount) const;
    void multiModeDrawArraysIBM(boom::OpenGLEnum const* mode, boom::OpenGLInt const* first, boom::OpenGLSizei const* count, boom::OpenGLSizei primcount, boom::OpenGLInt modestride) const;
    void multiModeDrawElementsIBM(boom::OpenGLEnum const* mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei primcount, boom::OpenGLInt modestride) const;
    void multiTexBufferEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer) const;
    void multiTexCoord1bOES(boom::OpenGLEnum texture, boom::OpenGLByte s) const;
    void multiTexCoord1bvOES(boom::OpenGLEnum texture, boom::OpenGLByte const* coords) const;
    void multiTexCoord1d(boom::OpenGLEnum target, boom::OpenGLDouble s) const;
    void multiTexCoord1dARB(boom::OpenGLEnum target, boom::OpenGLDouble s) const;
    void multiTexCoord1dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord1dvARB(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord1f(boom::OpenGLEnum target, boom::OpenGLFloat s) const;
    void multiTexCoord1fARB(boom::OpenGLEnum target, boom::OpenGLFloat s) const;
    void multiTexCoord1fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord1fvARB(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord1hNV(boom::OpenGLEnum target, boom::OpenGLHalfNV s) const;
    void multiTexCoord1hvNV(boom::OpenGLEnum target, boom::OpenGLHalfNV const* v) const;
    void multiTexCoord1i(boom::OpenGLEnum target, boom::OpenGLInt s) const;
    void multiTexCoord1iARB(boom::OpenGLEnum target, boom::OpenGLInt s) const;
    void multiTexCoord1iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord1ivARB(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord1s(boom::OpenGLEnum target, boom::OpenGLShort s) const;
    void multiTexCoord1sARB(boom::OpenGLEnum target, boom::OpenGLShort s) const;
    void multiTexCoord1sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord1svARB(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord1xOES(boom::OpenGLEnum texture, boom::OpenGLFixed s) const;
    void multiTexCoord1xvOES(boom::OpenGLEnum texture, boom::OpenGLFixed const* coords) const;
    void multiTexCoord2bOES(boom::OpenGLEnum texture, boom::OpenGLByte s, boom::OpenGLByte t) const;
    void multiTexCoord2bvOES(boom::OpenGLEnum texture, boom::OpenGLByte const* coords) const;
    void multiTexCoord2d(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t) const;
    void multiTexCoord2dARB(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t) const;
    void multiTexCoord2dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord2dvARB(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord2f(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t) const;
    void multiTexCoord2fARB(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t) const;
    void multiTexCoord2fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord2fvARB(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord2hNV(boom::OpenGLEnum target, boom::OpenGLHalfNV s, boom::OpenGLHalfNV t) const;
    void multiTexCoord2hvNV(boom::OpenGLEnum target, boom::OpenGLHalfNV const* v) const;
    void multiTexCoord2i(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t) const;
    void multiTexCoord2iARB(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t) const;
    void multiTexCoord2iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord2ivARB(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord2s(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t) const;
    void multiTexCoord2sARB(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t) const;
    void multiTexCoord2sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord2svARB(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord2xOES(boom::OpenGLEnum texture, boom::OpenGLFixed s, boom::OpenGLFixed t) const;
    void multiTexCoord2xvOES(boom::OpenGLEnum texture, boom::OpenGLFixed const* coords) const;
    void multiTexCoord3bOES(boom::OpenGLEnum texture, boom::OpenGLByte s, boom::OpenGLByte t, boom::OpenGLByte r) const;
    void multiTexCoord3bvOES(boom::OpenGLEnum texture, boom::OpenGLByte const* coords) const;
    void multiTexCoord3d(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r) const;
    void multiTexCoord3dARB(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r) const;
    void multiTexCoord3dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord3dvARB(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord3f(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r) const;
    void multiTexCoord3fARB(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r) const;
    void multiTexCoord3fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord3fvARB(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord3hNV(boom::OpenGLEnum target, boom::OpenGLHalfNV s, boom::OpenGLHalfNV t, boom::OpenGLHalfNV r) const;
    void multiTexCoord3hvNV(boom::OpenGLEnum target, boom::OpenGLHalfNV const* v) const;
    void multiTexCoord3i(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r) const;
    void multiTexCoord3iARB(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r) const;
    void multiTexCoord3iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord3ivARB(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord3s(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r) const;
    void multiTexCoord3sARB(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r) const;
    void multiTexCoord3sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord3svARB(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord3xOES(boom::OpenGLEnum texture, boom::OpenGLFixed s, boom::OpenGLFixed t, boom::OpenGLFixed r) const;
    void multiTexCoord3xvOES(boom::OpenGLEnum texture, boom::OpenGLFixed const* coords) const;
    void multiTexCoord4bOES(boom::OpenGLEnum texture, boom::OpenGLByte s, boom::OpenGLByte t, boom::OpenGLByte r, boom::OpenGLByte q) const;
    void multiTexCoord4bvOES(boom::OpenGLEnum texture, boom::OpenGLByte const* coords) const;
    void multiTexCoord4d(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r, boom::OpenGLDouble q) const;
    void multiTexCoord4dARB(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r, boom::OpenGLDouble q) const;
    void multiTexCoord4dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord4dvARB(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord4f(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat q) const;
    void multiTexCoord4fARB(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat q) const;
    void multiTexCoord4fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord4fvARB(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord4hNV(boom::OpenGLEnum target, boom::OpenGLHalfNV s, boom::OpenGLHalfNV t, boom::OpenGLHalfNV r, boom::OpenGLHalfNV q) const;
    void multiTexCoord4hvNV(boom::OpenGLEnum target, boom::OpenGLHalfNV const* v) const;
    void multiTexCoord4i(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r, boom::OpenGLInt q) const;
    void multiTexCoord4iARB(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r, boom::OpenGLInt q) const;
    void multiTexCoord4iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord4ivARB(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord4s(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r, boom::OpenGLShort q) const;
    void multiTexCoord4sARB(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r, boom::OpenGLShort q) const;
    void multiTexCoord4sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord4svARB(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord4x(boom::OpenGLEnum texture, boom::OpenGLFixed s, boom::OpenGLFixed t, boom::OpenGLFixed r, boom::OpenGLFixed q) const;
    void multiTexCoord4xOES(boom::OpenGLEnum texture, boom::OpenGLFixed s, boom::OpenGLFixed t, boom::OpenGLFixed r, boom::OpenGLFixed q) const;
    void multiTexCoord4xvOES(boom::OpenGLEnum texture, boom::OpenGLFixed const* coords) const;
    void multiTexCoordP1ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUInt coords) const;
    void multiTexCoordP1uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUInt const* coords) const;
    void multiTexCoordP2ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUInt coords) const;
    void multiTexCoordP2uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUInt const* coords) const;
    void multiTexCoordP3ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUInt coords) const;
    void multiTexCoordP3uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUInt const* coords) const;
    void multiTexCoordP4ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUInt coords) const;
    void multiTexCoordP4uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUInt const* coords) const;
    void multiTexCoordPointerEXT(boom::OpenGLEnum texunit, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void multiTexEnvfEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void multiTexEnvfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void multiTexEnviEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void multiTexEnvivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void multiTexGendEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble param) const;
    void multiTexGendvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble const* params) const;
    void multiTexGenfEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void multiTexGenfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void multiTexGeniEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void multiTexGenivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void multiTexImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multiTexImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multiTexImage3DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multiTexParameterfEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void multiTexParameterfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void multiTexParameteriEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void multiTexParameterIivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void multiTexParameterIuivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt const* params) const;
    void multiTexParameterivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void multiTexRenderbufferEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLUInt renderbuffer) const;
    void multiTexSubImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multiTexSubImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multiTexSubImage3DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multMatrixd(boom::OpenGLDouble const* m) const;
    void multMatrixf(boom::OpenGLFloat const* m) const;
    void multMatrixx(boom::OpenGLFixed const* m) const;
    void multMatrixxOES(boom::OpenGLFixed const* m) const;
    void multTransposeMatrixd(boom::OpenGLDouble const* m) const;
    void multTransposeMatrixdARB(boom::OpenGLDouble const* m) const;
    void multTransposeMatrixf(boom::OpenGLFloat const* m) const;
    void multTransposeMatrixfARB(boom::OpenGLFloat const* m) const;
    void multTransposeMatrixxOES(boom::OpenGLFixed const* m) const;
    void namedBufferAttachMemoryNV(boom::OpenGLUInt buffer, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void namedBufferData(boom::OpenGLUInt buffer, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLEnum usage) const;
    void namedBufferDataEXT(boom::OpenGLUInt buffer, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLEnum usage) const;
    void namedBufferPageCommitmentARB(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLBoolean commit) const;
    void namedBufferPageCommitmentEXT(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLBoolean commit) const;
    void namedBufferPageCommitmentMemNV(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLUInt memory, boom::OpenGLUInt64 memOffset, boom::OpenGLBoolean commit) const;
    void namedBufferStorage(boom::OpenGLUInt buffer, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLBitfield flags) const;
    void namedBufferStorageEXT(boom::OpenGLUInt buffer, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLBitfield flags) const;
    void namedBufferStorageExternalEXT(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEGLClientBufferEXT clientBuffer, boom::OpenGLBitfield flags) const;
    void namedBufferStorageMemEXT(boom::OpenGLUInt buffer, boom::OpenGLSizeiptr size, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void namedBufferSubData(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void namedBufferSubDataEXT(boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void namedCopyBufferSubDataEXT(boom::OpenGLUInt readBuffer, boom::OpenGLUInt writeBuffer, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void namedFramebufferDrawBuffer(boom::OpenGLUInt framebuffer, boom::OpenGLEnum buf) const;
    void namedFramebufferDrawBuffers(boom::OpenGLUInt framebuffer, boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void namedFramebufferParameteri(boom::OpenGLUInt framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void namedFramebufferParameteriEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void namedFramebufferReadBuffer(boom::OpenGLUInt framebuffer, boom::OpenGLEnum src) const;
    void namedFramebufferRenderbuffer(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUInt renderbuffer) const;
    void namedFramebufferRenderbufferEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUInt renderbuffer) const;
    void namedFramebufferSampleLocationsfvARB(boom::OpenGLUInt framebuffer, boom::OpenGLUInt start, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void namedFramebufferSampleLocationsfvNV(boom::OpenGLUInt framebuffer, boom::OpenGLUInt start, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void namedFramebufferSamplePositionsfvAMD(boom::OpenGLUInt framebuffer, boom::OpenGLUInt numsamples, boom::OpenGLUInt pixelindex, boom::OpenGLFloat const* values) const;
    void namedFramebufferTexture(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void namedFramebufferTexture1DEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void namedFramebufferTexture2DEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void namedFramebufferTexture3DEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt zoffset) const;
    void namedFramebufferTextureEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void namedFramebufferTextureFaceEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLEnum face) const;
    void namedFramebufferTextureLayer(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void namedFramebufferTextureLayerEXT(boom::OpenGLUInt framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void namedProgramLocalParameter4dEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void namedProgramLocalParameter4dvEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble const* params) const;
    void namedProgramLocalParameter4fEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void namedProgramLocalParameter4fvEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat const* params) const;
    void namedProgramLocalParameterI4iEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void namedProgramLocalParameterI4ivEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt const* params) const;
    void namedProgramLocalParameterI4uiEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt x, boom::OpenGLUInt y, boom::OpenGLUInt z, boom::OpenGLUInt w) const;
    void namedProgramLocalParameterI4uivEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt const* params) const;
    void namedProgramLocalParameters4fvEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLFloat const* params) const;
    void namedProgramLocalParametersI4ivEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLInt const* params) const;
    void namedProgramLocalParametersI4uivEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLUInt const* params) const;
    void namedProgramStringEXT(boom::OpenGLUInt program, boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLSizei len, void const* string) const;
    void namedRenderbufferStorage(boom::OpenGLUInt renderbuffer, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedRenderbufferStorageEXT(boom::OpenGLUInt renderbuffer, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedRenderbufferStorageMultisample(boom::OpenGLUInt renderbuffer, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedRenderbufferStorageMultisampleAdvancedAMD(boom::OpenGLUInt renderbuffer, boom::OpenGLSizei samples, boom::OpenGLSizei storageSamples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedRenderbufferStorageMultisampleCoverageEXT(boom::OpenGLUInt renderbuffer, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedRenderbufferStorageMultisampleEXT(boom::OpenGLUInt renderbuffer, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedStringARB(boom::OpenGLEnum type, boom::OpenGLInt namelen, boom::OpenGLChar const* name, boom::OpenGLInt stringlen, boom::OpenGLChar const* string) const;
    void newList(boom::OpenGLUInt list, boom::OpenGLEnum mode) const;
    boom::OpenGLUInt newObjectBufferATI(boom::OpenGLSizei size, void const* pointer, boom::OpenGLEnum usage) const;
    void normal3b(boom::OpenGLByte nx, boom::OpenGLByte ny, boom::OpenGLByte nz) const;
    void normal3bv(boom::OpenGLByte const* v) const;
    void normal3d(boom::OpenGLDouble nx, boom::OpenGLDouble ny, boom::OpenGLDouble nz) const;
    void normal3dv(boom::OpenGLDouble const* v) const;
    void normal3f(boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz) const;
    void normal3fv(boom::OpenGLFloat const* v) const;
    void normal3fVertex3fSUN(boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void normal3fVertex3fvSUN(boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void normal3hNV(boom::OpenGLHalfNV nx, boom::OpenGLHalfNV ny, boom::OpenGLHalfNV nz) const;
    void normal3hvNV(boom::OpenGLHalfNV const* v) const;
    void normal3i(boom::OpenGLInt nx, boom::OpenGLInt ny, boom::OpenGLInt nz) const;
    void normal3iv(boom::OpenGLInt const* v) const;
    void normal3s(boom::OpenGLShort nx, boom::OpenGLShort ny, boom::OpenGLShort nz) const;
    void normal3sv(boom::OpenGLShort const* v) const;
    void normal3x(boom::OpenGLFixed nx, boom::OpenGLFixed ny, boom::OpenGLFixed nz) const;
    void normal3xOES(boom::OpenGLFixed nx, boom::OpenGLFixed ny, boom::OpenGLFixed nz) const;
    void normal3xvOES(boom::OpenGLFixed const* coords) const;
    void normalFormatNV(boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void normalP3ui(boom::OpenGLEnum type, boom::OpenGLUInt coords) const;
    void normalP3uiv(boom::OpenGLEnum type, boom::OpenGLUInt const* coords) const;
    void normalPointer(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void normalPointerEXT(boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLSizei count, void const* pointer) const;
    void normalPointerListIBM(boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void normalPointervINTEL(boom::OpenGLEnum type, void const** pointer) const;
    void normalStream3bATI(boom::OpenGLEnum stream, boom::OpenGLByte nx, boom::OpenGLByte ny, boom::OpenGLByte nz) const;
    void normalStream3bvATI(boom::OpenGLEnum stream, boom::OpenGLByte const* coords) const;
    void normalStream3dATI(boom::OpenGLEnum stream, boom::OpenGLDouble nx, boom::OpenGLDouble ny, boom::OpenGLDouble nz) const;
    void normalStream3dvATI(boom::OpenGLEnum stream, boom::OpenGLDouble const* coords) const;
    void normalStream3fATI(boom::OpenGLEnum stream, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz) const;
    void normalStream3fvATI(boom::OpenGLEnum stream, boom::OpenGLFloat const* coords) const;
    void normalStream3iATI(boom::OpenGLEnum stream, boom::OpenGLInt nx, boom::OpenGLInt ny, boom::OpenGLInt nz) const;
    void normalStream3ivATI(boom::OpenGLEnum stream, boom::OpenGLInt const* coords) const;
    void normalStream3sATI(boom::OpenGLEnum stream, boom::OpenGLShort nx, boom::OpenGLShort ny, boom::OpenGLShort nz) const;
    void normalStream3svATI(boom::OpenGLEnum stream, boom::OpenGLShort const* coords) const;
    void objectLabel(boom::OpenGLEnum identifier, boom::OpenGLUInt name, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    void objectLabelKHR(boom::OpenGLEnum identifier, boom::OpenGLUInt name, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    void objectPtrLabel(void const* ptr, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    void objectPtrLabelKHR(void const* ptr, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    boom::OpenGLEnum objectPurgeableAPPLE(boom::OpenGLEnum objectType, boom::OpenGLUInt name, boom::OpenGLEnum option) const;
    boom::OpenGLEnum objectUnpurgeableAPPLE(boom::OpenGLEnum objectType, boom::OpenGLUInt name, boom::OpenGLEnum option) const;
    void ortho(boom::OpenGLDouble left, boom::OpenGLDouble right, boom::OpenGLDouble bottom, boom::OpenGLDouble top, boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void orthof(boom::OpenGLFloat l, boom::OpenGLFloat r, boom::OpenGLFloat b, boom::OpenGLFloat t, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void orthofOES(boom::OpenGLFloat l, boom::OpenGLFloat r, boom::OpenGLFloat b, boom::OpenGLFloat t, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void orthox(boom::OpenGLFixed l, boom::OpenGLFixed r, boom::OpenGLFixed b, boom::OpenGLFixed t, boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void orthoxOES(boom::OpenGLFixed l, boom::OpenGLFixed r, boom::OpenGLFixed b, boom::OpenGLFixed t, boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void passTexCoordATI(boom::OpenGLUInt dst, boom::OpenGLUInt coord, boom::OpenGLEnum swizzle) const;
    void passThrough(boom::OpenGLFloat token) const;
    void passThroughxOES(boom::OpenGLFixed token) const;
    void patchParameterfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* values) const;
    void patchParameteri(boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void patchParameteriEXT(boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void patchParameteriOES(boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void pathColorGenNV(boom::OpenGLEnum color, boom::OpenGLEnum genMode, boom::OpenGLEnum colorFormat, boom::OpenGLFloat const* coeffs) const;
    void pathCommandsNV(boom::OpenGLUInt path, boom::OpenGLSizei numCommands, boom::OpenGLUByte const* commands, boom::OpenGLSizei numCoords, boom::OpenGLEnum coordType, void const* coords) const;
    void pathCoordsNV(boom::OpenGLUInt path, boom::OpenGLSizei numCoords, boom::OpenGLEnum coordType, void const* coords) const;
    void pathCoverDepthFuncNV(boom::OpenGLEnum func) const;
    void pathDashArrayNV(boom::OpenGLUInt path, boom::OpenGLSizei dashCount, boom::OpenGLFloat const* dashArray) const;
    void pathFogGenNV(boom::OpenGLEnum genMode) const;
    boom::OpenGLEnum pathGlyphIndexArrayNV(boom::OpenGLUInt firstPathName, boom::OpenGLEnum fontTarget, void const* fontName, boom::OpenGLBitfield fontStyle, boom::OpenGLUInt firstGlyphIndex, boom::OpenGLSizei numGlyphs, boom::OpenGLUInt pathParameterTemplate, boom::OpenGLFloat emScale) const;
    boom::OpenGLEnum pathGlyphIndexRangeNV(boom::OpenGLEnum fontTarget, void const* fontName, boom::OpenGLBitfield fontStyle, boom::OpenGLUInt pathParameterTemplate, boom::OpenGLFloat emScale, boom::OpenGLUInt* baseAndCount) const;
    void pathGlyphRangeNV(boom::OpenGLUInt firstPathName, boom::OpenGLEnum fontTarget, void const* fontName, boom::OpenGLBitfield fontStyle, boom::OpenGLUInt firstGlyph, boom::OpenGLSizei numGlyphs, boom::OpenGLEnum handleMissingGlyphs, boom::OpenGLUInt pathParameterTemplate, boom::OpenGLFloat emScale) const;
    void pathGlyphsNV(boom::OpenGLUInt firstPathName, boom::OpenGLEnum fontTarget, void const* fontName, boom::OpenGLBitfield fontStyle, boom::OpenGLSizei numGlyphs, boom::OpenGLEnum type, void const* charcodes, boom::OpenGLEnum handleMissingGlyphs, boom::OpenGLUInt pathParameterTemplate, boom::OpenGLFloat emScale) const;
    boom::OpenGLEnum pathMemoryGlyphIndexArrayNV(boom::OpenGLUInt firstPathName, boom::OpenGLEnum fontTarget, boom::OpenGLSizeiptr fontSize, void const* fontData, boom::OpenGLSizei faceIndex, boom::OpenGLUInt firstGlyphIndex, boom::OpenGLSizei numGlyphs, boom::OpenGLUInt pathParameterTemplate, boom::OpenGLFloat emScale) const;
    void pathParameterfNV(boom::OpenGLUInt path, boom::OpenGLEnum pname, boom::OpenGLFloat value) const;
    void pathParameterfvNV(boom::OpenGLUInt path, boom::OpenGLEnum pname, boom::OpenGLFloat const* value) const;
    void pathParameteriNV(boom::OpenGLUInt path, boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void pathParameterivNV(boom::OpenGLUInt path, boom::OpenGLEnum pname, boom::OpenGLInt const* value) const;
    void pathStencilDepthOffsetNV(boom::OpenGLFloat factor, boom::OpenGLFloat units) const;
    void pathStencilFuncNV(boom::OpenGLEnum func, boom::OpenGLInt ref, boom::OpenGLUInt mask) const;
    void pathStringNV(boom::OpenGLUInt path, boom::OpenGLEnum format, boom::OpenGLSizei length, void const* pathString) const;
    void pathSubCommandsNV(boom::OpenGLUInt path, boom::OpenGLSizei commandStart, boom::OpenGLSizei commandsToDelete, boom::OpenGLSizei numCommands, boom::OpenGLUByte const* commands, boom::OpenGLSizei numCoords, boom::OpenGLEnum coordType, void const* coords) const;
    void pathSubCoordsNV(boom::OpenGLUInt path, boom::OpenGLSizei coordStart, boom::OpenGLSizei numCoords, boom::OpenGLEnum coordType, void const* coords) const;
    void pathTexGenNV(boom::OpenGLEnum texCoordSet, boom::OpenGLEnum genMode, boom::OpenGLInt components, boom::OpenGLFloat const* coeffs) const;
    void pauseTransformFeedback() const;
    void pauseTransformFeedbackNV() const;
    void pixelDataRangeNV(boom::OpenGLEnum target, boom::OpenGLSizei length, void const* pointer) const;
    void pixelMapfv(boom::OpenGLEnum map, boom::OpenGLSizei mapsize, boom::OpenGLFloat const* values) const;
    void pixelMapuiv(boom::OpenGLEnum map, boom::OpenGLSizei mapsize, boom::OpenGLUInt const* values) const;
    void pixelMapusv(boom::OpenGLEnum map, boom::OpenGLSizei mapsize, boom::OpenGLUShort const* values) const;
    void pixelMapx(boom::OpenGLEnum map, boom::OpenGLInt size, boom::OpenGLFixed const* values) const;
    void pixelStoref(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pixelStorei(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pixelStorex(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void pixelTexGenParameterfSGIS(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pixelTexGenParameterfvSGIS(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pixelTexGenParameteriSGIS(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pixelTexGenParameterivSGIS(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void pixelTexGenSGIX(boom::OpenGLEnum mode) const;
    void pixelTransferf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pixelTransferi(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pixelTransferxOES(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void pixelTransformParameterfEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pixelTransformParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pixelTransformParameteriEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pixelTransformParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void pixelZoom(boom::OpenGLFloat xfactor, boom::OpenGLFloat yfactor) const;
    void pixelZoomxOES(boom::OpenGLFixed xfactor, boom::OpenGLFixed yfactor) const;
    void pNTrianglesfATI(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pNTrianglesiATI(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    boom::OpenGLBoolean pointAlongPathNV(boom::OpenGLUInt path, boom::OpenGLSizei startSegment, boom::OpenGLSizei numSegments, boom::OpenGLFloat distance, boom::OpenGLFloat* x, boom::OpenGLFloat* y, boom::OpenGLFloat* tangentX, boom::OpenGLFloat* tangentY) const;
    void pointParameterf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pointParameterfARB(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pointParameterfEXT(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pointParameterfSGIS(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pointParameterfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pointParameterfvARB(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pointParameterfvEXT(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pointParameterfvSGIS(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pointParameteri(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pointParameteriNV(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pointParameteriv(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void pointParameterivNV(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void pointParameterx(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void pointParameterxOES(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void pointParameterxv(boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void pointParameterxvOES(boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void pointSize(boom::OpenGLFloat size) const;
    void pointSizePointerOES(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void pointSizex(boom::OpenGLFixed size) const;
    void pointSizexOES(boom::OpenGLFixed size) const;
    boom::OpenGLInt pollAsyncSGIX(boom::OpenGLUInt* markerp) const;
    boom::OpenGLInt pollInstrumentsSGIX(boom::OpenGLInt* marker_p) const;
    void polygonMode(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void polygonModeNV(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void polygonOffset(boom::OpenGLFloat factor, boom::OpenGLFloat units) const;
    void polygonOffsetClamp(boom::OpenGLFloat factor, boom::OpenGLFloat units, boom::OpenGLFloat clamp) const;
    void polygonOffsetClampEXT(boom::OpenGLFloat factor, boom::OpenGLFloat units, boom::OpenGLFloat clamp) const;
    void polygonOffsetEXT(boom::OpenGLFloat factor, boom::OpenGLFloat bias) const;
    void polygonOffsetx(boom::OpenGLFixed factor, boom::OpenGLFixed units) const;
    void polygonOffsetxOES(boom::OpenGLFixed factor, boom::OpenGLFixed units) const;
    void polygonStipple(boom::OpenGLUByte const* mask) const;
    void popAttrib() const;
    void popClientAttrib() const;
    void popDebugGroup() const;
    void popDebugGroupKHR() const;
    void popGroupMarkerEXT() const;
    void popMatrix() const;
    void popName() const;
    void presentFrameDualFillNV(boom::OpenGLUInt video_slot, boom::OpenGLUInt64EXT minPresentTime, boom::OpenGLUInt beginPresentTimeId, boom::OpenGLUInt presentDurationId, boom::OpenGLEnum type, boom::OpenGLEnum target0, boom::OpenGLUInt fill0, boom::OpenGLEnum target1, boom::OpenGLUInt fill1, boom::OpenGLEnum target2, boom::OpenGLUInt fill2, boom::OpenGLEnum target3, boom::OpenGLUInt fill3) const;
    void presentFrameKeyedNV(boom::OpenGLUInt video_slot, boom::OpenGLUInt64EXT minPresentTime, boom::OpenGLUInt beginPresentTimeId, boom::OpenGLUInt presentDurationId, boom::OpenGLEnum type, boom::OpenGLEnum target0, boom::OpenGLUInt fill0, boom::OpenGLUInt key0, boom::OpenGLEnum target1, boom::OpenGLUInt fill1, boom::OpenGLUInt key1) const;
    void primitiveBoundingBox(boom::OpenGLFloat minX, boom::OpenGLFloat minY, boom::OpenGLFloat minZ, boom::OpenGLFloat minW, boom::OpenGLFloat maxX, boom::OpenGLFloat maxY, boom::OpenGLFloat maxZ, boom::OpenGLFloat maxW) const;
    void primitiveBoundingBoxARB(boom::OpenGLFloat minX, boom::OpenGLFloat minY, boom::OpenGLFloat minZ, boom::OpenGLFloat minW, boom::OpenGLFloat maxX, boom::OpenGLFloat maxY, boom::OpenGLFloat maxZ, boom::OpenGLFloat maxW) const;
    void primitiveBoundingBoxEXT(boom::OpenGLFloat minX, boom::OpenGLFloat minY, boom::OpenGLFloat minZ, boom::OpenGLFloat minW, boom::OpenGLFloat maxX, boom::OpenGLFloat maxY, boom::OpenGLFloat maxZ, boom::OpenGLFloat maxW) const;
    void primitiveBoundingBoxOES(boom::OpenGLFloat minX, boom::OpenGLFloat minY, boom::OpenGLFloat minZ, boom::OpenGLFloat minW, boom::OpenGLFloat maxX, boom::OpenGLFloat maxY, boom::OpenGLFloat maxZ, boom::OpenGLFloat maxW) const;
    void primitiveRestartIndex(boom::OpenGLUInt index) const;
    void primitiveRestartIndexNV(boom::OpenGLUInt index) const;
    void primitiveRestartNV() const;
    void prioritizeTextures(boom::OpenGLSizei n, boom::OpenGLUInt const* textures, boom::OpenGLFloat const* priorities) const;
    void prioritizeTexturesEXT(boom::OpenGLSizei n, boom::OpenGLUInt const* textures, boom::OpenGLClampf const* priorities) const;
    void prioritizeTexturesxOES(boom::OpenGLSizei n, boom::OpenGLUInt const* textures, boom::OpenGLFixed const* priorities) const;
    void programBinary(boom::OpenGLUInt program, boom::OpenGLEnum binaryFormat, void const* binary, boom::OpenGLSizei length) const;
    void programBinaryOES(boom::OpenGLUInt program, boom::OpenGLEnum binaryFormat, void const* binary, boom::OpenGLInt length) const;
    void programBufferParametersfvNV(boom::OpenGLEnum target, boom::OpenGLUInt bindingIndex, boom::OpenGLUInt wordIndex, boom::OpenGLSizei count, boom::OpenGLFloat const* params) const;
    void programBufferParametersIivNV(boom::OpenGLEnum target, boom::OpenGLUInt bindingIndex, boom::OpenGLUInt wordIndex, boom::OpenGLSizei count, boom::OpenGLInt const* params) const;
    void programBufferParametersIuivNV(boom::OpenGLEnum target, boom::OpenGLUInt bindingIndex, boom::OpenGLUInt wordIndex, boom::OpenGLSizei count, boom::OpenGLUInt const* params) const;
    void programEnvParameter4dARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void programEnvParameter4dvARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble const* params) const;
    void programEnvParameter4fARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void programEnvParameter4fvARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat const* params) const;
    void programEnvParameterI4iNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void programEnvParameterI4ivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt const* params) const;
    void programEnvParameterI4uiNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt x, boom::OpenGLUInt y, boom::OpenGLUInt z, boom::OpenGLUInt w) const;
    void programEnvParameterI4uivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt const* params) const;
    void programEnvParameters4fvEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLFloat const* params) const;
    void programEnvParametersI4ivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLInt const* params) const;
    void programEnvParametersI4uivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLUInt const* params) const;
    void programLocalParameter4dARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void programLocalParameter4dvARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble const* params) const;
    void programLocalParameter4fARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void programLocalParameter4fvARB(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat const* params) const;
    void programLocalParameterI4iNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void programLocalParameterI4ivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLInt const* params) const;
    void programLocalParameterI4uiNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt x, boom::OpenGLUInt y, boom::OpenGLUInt z, boom::OpenGLUInt w) const;
    void programLocalParameterI4uivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLUInt const* params) const;
    void programLocalParameters4fvEXT(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLFloat const* params) const;
    void programLocalParametersI4ivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLInt const* params) const;
    void programLocalParametersI4uivNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLUInt const* params) const;
    void programNamedParameter4dNV(boom::OpenGLUInt id, boom::OpenGLSizei len, boom::OpenGLUByte const* name, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void programNamedParameter4dvNV(boom::OpenGLUInt id, boom::OpenGLSizei len, boom::OpenGLUByte const* name, boom::OpenGLDouble const* v) const;
    void programNamedParameter4fNV(boom::OpenGLUInt id, boom::OpenGLSizei len, boom::OpenGLUByte const* name, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void programNamedParameter4fvNV(boom::OpenGLUInt id, boom::OpenGLSizei len, boom::OpenGLUByte const* name, boom::OpenGLFloat const* v) const;
    void programParameter4dNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void programParameter4dvNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void programParameter4fNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void programParameter4fvNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void programParameteri(boom::OpenGLUInt program, boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void programParameteriARB(boom::OpenGLUInt program, boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void programParameteriEXT(boom::OpenGLUInt program, boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void programParameters4dvNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void programParameters4fvNV(boom::OpenGLEnum target, boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void programPathFragmentInputGenNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLEnum genMode, boom::OpenGLInt components, boom::OpenGLFloat const* coeffs) const;
    void programStringARB(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLSizei len, void const* string) const;
    void programSubroutineParametersuivNV(boom::OpenGLEnum target, boom::OpenGLSizei count, boom::OpenGLUInt const* params) const;
    void programUniform1d(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLDouble v0) const;
    void programUniform1dEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLDouble x) const;
    void programUniform1dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform1dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform1f(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLFloat v0) const;
    void programUniform1fEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLFloat v0) const;
    void programUniform1fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform1fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform1i(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt v0) const;
    void programUniform1i64ARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt64 x) const;
    void programUniform1i64NV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt64EXT x) const;
    void programUniform1i64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void programUniform1i64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void programUniform1iEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt v0) const;
    void programUniform1iv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform1ivEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform1ui(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt v0) const;
    void programUniform1ui64ARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64 x) const;
    void programUniform1ui64NV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64EXT x) const;
    void programUniform1ui64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void programUniform1ui64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void programUniform1uiEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt v0) const;
    void programUniform1uiv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void programUniform1uivEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void programUniform2d(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLDouble v0, boom::OpenGLDouble v1) const;
    void programUniform2dEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void programUniform2dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform2dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform2f(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1) const;
    void programUniform2fEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1) const;
    void programUniform2fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform2fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform2i(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1) const;
    void programUniform2i64ARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y) const;
    void programUniform2i64NV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y) const;
    void programUniform2i64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void programUniform2i64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void programUniform2iEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1) const;
    void programUniform2iv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform2ivEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform2ui(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1) const;
    void programUniform2ui64ARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y) const;
    void programUniform2ui64NV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y) const;
    void programUniform2ui64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void programUniform2ui64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void programUniform2uiEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1) const;
    void programUniform2uiv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void programUniform2uivEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void programUniform3d(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLDouble v0, boom::OpenGLDouble v1, boom::OpenGLDouble v2) const;
    void programUniform3dEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void programUniform3dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform3dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform3f(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void programUniform3fEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void programUniform3fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform3fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform3i(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2) const;
    void programUniform3i64ARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y, boom::OpenGLInt64 z) const;
    void programUniform3i64NV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z) const;
    void programUniform3i64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void programUniform3i64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void programUniform3iEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2) const;
    void programUniform3iv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform3ivEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform3ui(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1, boom::OpenGLUInt v2) const;
    void programUniform3ui64ARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y, boom::OpenGLUInt64 z) const;
    void programUniform3ui64NV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z) const;
    void programUniform3ui64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void programUniform3ui64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void programUniform3uiEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1, boom::OpenGLUInt v2) const;
    void programUniform3uiv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void programUniform3uivEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void programUniform4d(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLDouble v0, boom::OpenGLDouble v1, boom::OpenGLDouble v2, boom::OpenGLDouble v3) const;
    void programUniform4dEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void programUniform4dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform4dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform4f(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLFloat v3) const;
    void programUniform4fEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLFloat v3) const;
    void programUniform4fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform4fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform4i(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2, boom::OpenGLInt v3) const;
    void programUniform4i64ARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y, boom::OpenGLInt64 z, boom::OpenGLInt64 w) const;
    void programUniform4i64NV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z, boom::OpenGLInt64EXT w) const;
    void programUniform4i64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void programUniform4i64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void programUniform4iEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2, boom::OpenGLInt v3) const;
    void programUniform4iv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform4ivEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform4ui(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1, boom::OpenGLUInt v2, boom::OpenGLUInt v3) const;
    void programUniform4ui64ARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y, boom::OpenGLUInt64 z, boom::OpenGLUInt64 w) const;
    void programUniform4ui64NV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z, boom::OpenGLUInt64EXT w) const;
    void programUniform4ui64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void programUniform4ui64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void programUniform4uiEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1, boom::OpenGLUInt v2, boom::OpenGLUInt v3) const;
    void programUniform4uiv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void programUniform4uivEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void programUniformHandleui64ARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void programUniformHandleui64IMG(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void programUniformHandleui64NV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void programUniformHandleui64vARB(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* values) const;
    void programUniformHandleui64vIMG(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* values) const;
    void programUniformHandleui64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* values) const;
    void programUniformMatrix2dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2x3dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2x3dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2x3fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2x3fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2x4dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2x4dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2x4fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2x4fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3x2dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3x2dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3x2fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3x2fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3x4dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3x4dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3x4fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3x4fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4x2dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4x2dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4x2fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4x2fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4x3dv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4x3dvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4x3fv(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4x3fvEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformui64NV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt64EXT value) const;
    void programUniformui64vNV(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void programVertexLimitNV(boom::OpenGLEnum target, boom::OpenGLInt limit) const;
    void provokingVertex(boom::OpenGLEnum mode) const;
    void provokingVertexEXT(boom::OpenGLEnum mode) const;
    void pushAttrib(boom::OpenGLBitfield mask) const;
    void pushClientAttrib(boom::OpenGLBitfield mask) const;
    void pushClientAttribDefaultEXT(boom::OpenGLBitfield mask) const;
    void pushDebugGroup(boom::OpenGLEnum source, boom::OpenGLUInt id, boom::OpenGLSizei length, boom::OpenGLChar const* message) const;
    void pushDebugGroupKHR(boom::OpenGLEnum source, boom::OpenGLUInt id, boom::OpenGLSizei length, boom::OpenGLChar const* message) const;
    void pushGroupMarkerEXT(boom::OpenGLSizei length, boom::OpenGLChar const* marker) const;
    void pushMatrix() const;
    void pushName(boom::OpenGLUInt name) const;
    void queryCounter(boom::OpenGLUInt id, boom::OpenGLEnum target) const;
    void queryCounterEXT(boom::OpenGLUInt id, boom::OpenGLEnum target) const;
    boom::OpenGLBitfield queryMatrixxOES(boom::OpenGLFixed* mantissa, boom::OpenGLInt* exponent) const;
    void queryObjectParameteruiAMD(boom::OpenGLEnum target, boom::OpenGLUInt id, boom::OpenGLEnum pname, boom::OpenGLUInt param) const;
    boom::OpenGLInt queryResourceNV(boom::OpenGLEnum queryType, boom::OpenGLInt tagId, boom::OpenGLUInt count, boom::OpenGLInt* buffer) const;
    void queryResourceTagNV(boom::OpenGLInt tagId, boom::OpenGLChar const* tagString) const;
    void rasterPos2d(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void rasterPos2dv(boom::OpenGLDouble const* v) const;
    void rasterPos2f(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void rasterPos2fv(boom::OpenGLFloat const* v) const;
    void rasterPos2i(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void rasterPos2iv(boom::OpenGLInt const* v) const;
    void rasterPos2s(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void rasterPos2sv(boom::OpenGLShort const* v) const;
    void rasterPos2xOES(boom::OpenGLFixed x, boom::OpenGLFixed y) const;
    void rasterPos2xvOES(boom::OpenGLFixed const* coords) const;
    void rasterPos3d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void rasterPos3dv(boom::OpenGLDouble const* v) const;
    void rasterPos3f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void rasterPos3fv(boom::OpenGLFloat const* v) const;
    void rasterPos3i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void rasterPos3iv(boom::OpenGLInt const* v) const;
    void rasterPos3s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void rasterPos3sv(boom::OpenGLShort const* v) const;
    void rasterPos3xOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void rasterPos3xvOES(boom::OpenGLFixed const* coords) const;
    void rasterPos4d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void rasterPos4dv(boom::OpenGLDouble const* v) const;
    void rasterPos4f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void rasterPos4fv(boom::OpenGLFloat const* v) const;
    void rasterPos4i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void rasterPos4iv(boom::OpenGLInt const* v) const;
    void rasterPos4s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void rasterPos4sv(boom::OpenGLShort const* v) const;
    void rasterPos4xOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z, boom::OpenGLFixed w) const;
    void rasterPos4xvOES(boom::OpenGLFixed const* coords) const;
    void rasterSamplesEXT(boom::OpenGLUInt samples, boom::OpenGLBoolean fixedsamplelocations) const;
    void readBuffer(boom::OpenGLEnum src) const;
    void readBufferIndexedEXT(boom::OpenGLEnum src, boom::OpenGLInt index) const;
    void readBufferNV(boom::OpenGLEnum mode) const;
    void readInstrumentsSGIX(boom::OpenGLInt marker) const;
    void readnPixels(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* data) const;
    void readnPixelsARB(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* data) const;
    void readnPixelsEXT(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* data) const;
    void readnPixelsKHR(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* data) const;
    void readPixels(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void* pixels) const;
    void rectd(boom::OpenGLDouble x1, boom::OpenGLDouble y1, boom::OpenGLDouble x2, boom::OpenGLDouble y2) const;
    void rectdv(boom::OpenGLDouble const* v1, boom::OpenGLDouble const* v2) const;
    void rectf(boom::OpenGLFloat x1, boom::OpenGLFloat y1, boom::OpenGLFloat x2, boom::OpenGLFloat y2) const;
    void rectfv(boom::OpenGLFloat const* v1, boom::OpenGLFloat const* v2) const;
    void recti(boom::OpenGLInt x1, boom::OpenGLInt y1, boom::OpenGLInt x2, boom::OpenGLInt y2) const;
    void rectiv(boom::OpenGLInt const* v1, boom::OpenGLInt const* v2) const;
    void rects(boom::OpenGLShort x1, boom::OpenGLShort y1, boom::OpenGLShort x2, boom::OpenGLShort y2) const;
    void rectsv(boom::OpenGLShort const* v1, boom::OpenGLShort const* v2) const;
    void rectxOES(boom::OpenGLFixed x1, boom::OpenGLFixed y1, boom::OpenGLFixed x2, boom::OpenGLFixed y2) const;
    void rectxvOES(boom::OpenGLFixed const* v1, boom::OpenGLFixed const* v2) const;
    void referencePlaneSGIX(boom::OpenGLDouble const* equation) const;
    boom::OpenGLBoolean releaseKeyedMutexWin32EXT(boom::OpenGLUInt memory, boom::OpenGLUInt64 key) const;
    void releaseShaderCompiler() const;
    void renderbufferStorage(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleAdvancedAMD(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLSizei storageSamples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleANGLE(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleAPPLE(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleCoverageNV(boom::OpenGLEnum target, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleEXT(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleIMG(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleNV(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageOES(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderGpuMaskNV(boom::OpenGLBitfield mask) const;
    boom::OpenGLInt renderMode(boom::OpenGLEnum mode) const;
    void replacementCodePointerSUN(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const** pointer) const;
    void replacementCodeubSUN(boom::OpenGLUByte code) const;
    void replacementCodeubvSUN(boom::OpenGLUByte const* code) const;
    void replacementCodeuiColor3fVertex3fSUN(boom::OpenGLUInt rc, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiColor3fVertex3fvSUN(boom::OpenGLUInt const* rc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* v) const;
    void replacementCodeuiColor4fNormal3fVertex3fSUN(boom::OpenGLUInt rc, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat a, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiColor4fNormal3fVertex3fvSUN(boom::OpenGLUInt const* rc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void replacementCodeuiColor4ubVertex3fSUN(boom::OpenGLUInt rc, boom::OpenGLUByte r, boom::OpenGLUByte g, boom::OpenGLUByte b, boom::OpenGLUByte a, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiColor4ubVertex3fvSUN(boom::OpenGLUInt const* rc, boom::OpenGLUByte const* c, boom::OpenGLFloat const* v) const;
    void replacementCodeuiNormal3fVertex3fSUN(boom::OpenGLUInt rc, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiNormal3fVertex3fvSUN(boom::OpenGLUInt const* rc, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void replacementCodeuiSUN(boom::OpenGLUInt code) const;
    void replacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(boom::OpenGLUInt rc, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat a, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(boom::OpenGLUInt const* rc, boom::OpenGLFloat const* tc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void replacementCodeuiTexCoord2fNormal3fVertex3fSUN(boom::OpenGLUInt rc, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiTexCoord2fNormal3fVertex3fvSUN(boom::OpenGLUInt const* rc, boom::OpenGLFloat const* tc, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void replacementCodeuiTexCoord2fVertex3fSUN(boom::OpenGLUInt rc, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiTexCoord2fVertex3fvSUN(boom::OpenGLUInt const* rc, boom::OpenGLFloat const* tc, boom::OpenGLFloat const* v) const;
    void replacementCodeuiVertex3fSUN(boom::OpenGLUInt rc, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiVertex3fvSUN(boom::OpenGLUInt const* rc, boom::OpenGLFloat const* v) const;
    void replacementCodeuivSUN(boom::OpenGLUInt const* code) const;
    void replacementCodeusSUN(boom::OpenGLUShort code) const;
    void replacementCodeusvSUN(boom::OpenGLUShort const* code) const;
    void requestResidentProgramsNV(boom::OpenGLSizei n, boom::OpenGLUInt const* programs) const;
    void resetHistogram(boom::OpenGLEnum target) const;
    void resetHistogramEXT(boom::OpenGLEnum target) const;
    void resetMemoryObjectParameterNV(boom::OpenGLUInt memory, boom::OpenGLEnum pname) const;
    void resetMinmax(boom::OpenGLEnum target) const;
    void resetMinmaxEXT(boom::OpenGLEnum target) const;
    void resizeBuffersMESA() const;
    void resolveDepthValuesNV() const;
    void resolveMultisampleFramebufferAPPLE() const;
    void resumeTransformFeedback() const;
    void resumeTransformFeedbackNV() const;
    void rotated(boom::OpenGLDouble angle, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void rotatef(boom::OpenGLFloat angle, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void rotatex(boom::OpenGLFixed angle, boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void rotatexOES(boom::OpenGLFixed angle, boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void sampleCoverage(boom::OpenGLFloat value, boom::OpenGLBoolean invert) const;
    void sampleCoverageARB(boom::OpenGLFloat value, boom::OpenGLBoolean invert) const;
    void sampleCoveragex(boom::OpenGLClampx value, boom::OpenGLBoolean invert) const;
    void sampleCoveragexOES(boom::OpenGLClampx value, boom::OpenGLBoolean invert) const;
    void sampleMapATI(boom::OpenGLUInt dst, boom::OpenGLUInt interp, boom::OpenGLEnum swizzle) const;
    void sampleMaskEXT(boom::OpenGLClampf value, boom::OpenGLBoolean invert) const;
    void sampleMaski(boom::OpenGLUInt maskNumber, boom::OpenGLBitfield mask) const;
    void sampleMaskIndexedNV(boom::OpenGLUInt index, boom::OpenGLBitfield mask) const;
    void sampleMaskSGIS(boom::OpenGLClampf value, boom::OpenGLBoolean invert) const;
    void samplePatternEXT(boom::OpenGLEnum pattern) const;
    void samplePatternSGIS(boom::OpenGLEnum pattern) const;
    void samplerParameterf(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void samplerParameterfv(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLFloat const* param) const;
    void samplerParameteri(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void samplerParameterIiv(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void samplerParameterIivEXT(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void samplerParameterIivOES(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void samplerParameterIuiv(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLUInt const* param) const;
    void samplerParameterIuivEXT(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLUInt const* param) const;
    void samplerParameterIuivOES(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLUInt const* param) const;
    void samplerParameteriv(boom::OpenGLUInt sampler, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void scaled(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void scalef(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void scalex(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void scalexOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void scissor(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorArrayv(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLInt const* v) const;
    void scissorArrayvNV(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLInt const* v) const;
    void scissorArrayvOES(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLInt const* v) const;
    void scissorExclusiveArrayvNV(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLInt const* v) const;
    void scissorExclusiveNV(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorIndexed(boom::OpenGLUInt index, boom::OpenGLInt left, boom::OpenGLInt bottom, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorIndexedNV(boom::OpenGLUInt index, boom::OpenGLInt left, boom::OpenGLInt bottom, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorIndexedOES(boom::OpenGLUInt index, boom::OpenGLInt left, boom::OpenGLInt bottom, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorIndexedv(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void scissorIndexedvNV(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void scissorIndexedvOES(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void secondaryColor3b(boom::OpenGLByte red, boom::OpenGLByte green, boom::OpenGLByte blue) const;
    void secondaryColor3bEXT(boom::OpenGLByte red, boom::OpenGLByte green, boom::OpenGLByte blue) const;
    void secondaryColor3bv(boom::OpenGLByte const* v) const;
    void secondaryColor3bvEXT(boom::OpenGLByte const* v) const;
    void secondaryColor3d(boom::OpenGLDouble red, boom::OpenGLDouble green, boom::OpenGLDouble blue) const;
    void secondaryColor3dEXT(boom::OpenGLDouble red, boom::OpenGLDouble green, boom::OpenGLDouble blue) const;
    void secondaryColor3dv(boom::OpenGLDouble const* v) const;
    void secondaryColor3dvEXT(boom::OpenGLDouble const* v) const;
    void secondaryColor3f(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue) const;
    void secondaryColor3fEXT(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue) const;
    void secondaryColor3fv(boom::OpenGLFloat const* v) const;
    void secondaryColor3fvEXT(boom::OpenGLFloat const* v) const;
    void secondaryColor3hNV(boom::OpenGLHalfNV red, boom::OpenGLHalfNV green, boom::OpenGLHalfNV blue) const;
    void secondaryColor3hvNV(boom::OpenGLHalfNV const* v) const;
    void secondaryColor3i(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue) const;
    void secondaryColor3iEXT(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue) const;
    void secondaryColor3iv(boom::OpenGLInt const* v) const;
    void secondaryColor3ivEXT(boom::OpenGLInt const* v) const;
    void secondaryColor3s(boom::OpenGLShort red, boom::OpenGLShort green, boom::OpenGLShort blue) const;
    void secondaryColor3sEXT(boom::OpenGLShort red, boom::OpenGLShort green, boom::OpenGLShort blue) const;
    void secondaryColor3sv(boom::OpenGLShort const* v) const;
    void secondaryColor3svEXT(boom::OpenGLShort const* v) const;
    void secondaryColor3ub(boom::OpenGLUByte red, boom::OpenGLUByte green, boom::OpenGLUByte blue) const;
    void secondaryColor3ubEXT(boom::OpenGLUByte red, boom::OpenGLUByte green, boom::OpenGLUByte blue) const;
    void secondaryColor3ubv(boom::OpenGLUByte const* v) const;
    void secondaryColor3ubvEXT(boom::OpenGLUByte const* v) const;
    void secondaryColor3ui(boom::OpenGLUInt red, boom::OpenGLUInt green, boom::OpenGLUInt blue) const;
    void secondaryColor3uiEXT(boom::OpenGLUInt red, boom::OpenGLUInt green, boom::OpenGLUInt blue) const;
    void secondaryColor3uiv(boom::OpenGLUInt const* v) const;
    void secondaryColor3uivEXT(boom::OpenGLUInt const* v) const;
    void secondaryColor3us(boom::OpenGLUShort red, boom::OpenGLUShort green, boom::OpenGLUShort blue) const;
    void secondaryColor3usEXT(boom::OpenGLUShort red, boom::OpenGLUShort green, boom::OpenGLUShort blue) const;
    void secondaryColor3usv(boom::OpenGLUShort const* v) const;
    void secondaryColor3usvEXT(boom::OpenGLUShort const* v) const;
    void secondaryColorFormatNV(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void secondaryColorP3ui(boom::OpenGLEnum type, boom::OpenGLUInt color) const;
    void secondaryColorP3uiv(boom::OpenGLEnum type, boom::OpenGLUInt const* color) const;
    void secondaryColorPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void secondaryColorPointerEXT(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void secondaryColorPointerListIBM(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void selectBuffer(boom::OpenGLSizei size, boom::OpenGLUInt* buffer) const;
    void selectPerfMonitorCountersAMD(boom::OpenGLUInt monitor, boom::OpenGLBoolean enable, boom::OpenGLUInt group, boom::OpenGLInt numCounters, boom::OpenGLUInt* counterList) const;
    void semaphoreParameterivNV(boom::OpenGLUInt semaphore, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void semaphoreParameterui64vEXT(boom::OpenGLUInt semaphore, boom::OpenGLEnum pname, boom::OpenGLUInt64 const* params) const;
    void separableFilter2D(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* row, void const* column) const;
    void separableFilter2DEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* row, void const* column) const;
    void setFenceAPPLE(boom::OpenGLUInt fence) const;
    void setFenceNV(boom::OpenGLUInt fence, boom::OpenGLEnum condition) const;
    void setFragmentShaderConstantATI(boom::OpenGLUInt dst, boom::OpenGLFloat const* value) const;
    void setInvariantEXT(boom::OpenGLUInt id, boom::OpenGLEnum type, void const* addr) const;
    void setLocalConstantEXT(boom::OpenGLUInt id, boom::OpenGLEnum type, void const* addr) const;
    void setMultisamplefvAMD(boom::OpenGLEnum pname, boom::OpenGLUInt index, boom::OpenGLFloat const* val) const;
    void shadeModel(boom::OpenGLEnum mode) const;
    void shaderBinary(boom::OpenGLSizei count, boom::OpenGLUInt const* shaders, boom::OpenGLEnum binaryFormat, void const* binary, boom::OpenGLSizei length) const;
    void shaderOp1EXT(boom::OpenGLEnum op, boom::OpenGLUInt res, boom::OpenGLUInt arg1) const;
    void shaderOp2EXT(boom::OpenGLEnum op, boom::OpenGLUInt res, boom::OpenGLUInt arg1, boom::OpenGLUInt arg2) const;
    void shaderOp3EXT(boom::OpenGLEnum op, boom::OpenGLUInt res, boom::OpenGLUInt arg1, boom::OpenGLUInt arg2, boom::OpenGLUInt arg3) const;
    void shaderSource(boom::OpenGLUInt shader, boom::OpenGLSizei count, boom::OpenGLChar const* const* string, boom::OpenGLInt const* length) const;
    void shaderSourceARB(boom::OpenGLHandleARB shaderObj, boom::OpenGLSizei count, boom::OpenGLCharARB const** string, boom::OpenGLInt const* length) const;
    void shaderStorageBlockBinding(boom::OpenGLUInt program, boom::OpenGLUInt storageBlockIndex, boom::OpenGLUInt storageBlockBinding) const;
    void shadingRateCombinerOpsEXT(boom::OpenGLEnum combinerOp0, boom::OpenGLEnum combinerOp1) const;
    void shadingRateEXT(boom::OpenGLEnum rate) const;
    void shadingRateImageBarrierNV(boom::OpenGLBoolean synchronize) const;
    void shadingRateImagePaletteNV(boom::OpenGLUInt viewport, boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLEnum const* rates) const;
    void shadingRateQCOM(boom::OpenGLEnum rate) const;
    void shadingRateSampleOrderCustomNV(boom::OpenGLEnum rate, boom::OpenGLUInt samples, boom::OpenGLInt const* locations) const;
    void shadingRateSampleOrderNV(boom::OpenGLEnum order) const;
    void sharpenTexFuncSGIS(boom::OpenGLEnum target, boom::OpenGLSizei n, boom::OpenGLFloat const* points) const;
    void signalSemaphoreEXT(boom::OpenGLUInt semaphore, boom::OpenGLUInt numBufferBarriers, boom::OpenGLUInt const* buffers, boom::OpenGLUInt numTextureBarriers, boom::OpenGLUInt const* textures, boom::OpenGLEnum const* dstLayouts) const;
    void signalSemaphoreui64NVX(boom::OpenGLUInt signalGpu, boom::OpenGLSizei fenceObjectCount, boom::OpenGLUInt const* semaphoreArray, boom::OpenGLUInt64 const* fenceValueArray) const;
    void signalVkFenceNV(boom::OpenGLUInt64 vkFence) const;
    void signalVkSemaphoreNV(boom::OpenGLUInt64 vkSemaphore) const;
    void specializeShader(boom::OpenGLUInt shader, boom::OpenGLChar const* pEntryPoint, boom::OpenGLUInt numSpecializationConstants, boom::OpenGLUInt const* pConstantIndex, boom::OpenGLUInt const* pConstantValue) const;
    void specializeShaderARB(boom::OpenGLUInt shader, boom::OpenGLChar const* pEntryPoint, boom::OpenGLUInt numSpecializationConstants, boom::OpenGLUInt const* pConstantIndex, boom::OpenGLUInt const* pConstantValue) const;
    void spriteParameterfSGIX(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void spriteParameterfvSGIX(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void spriteParameteriSGIX(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void spriteParameterivSGIX(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void startInstrumentsSGIX() const;
    void startTilingQCOM(boom::OpenGLUInt x, boom::OpenGLUInt y, boom::OpenGLUInt width, boom::OpenGLUInt height, boom::OpenGLBitfield preserveMask) const;
    void stateCaptureNV(boom::OpenGLUInt state, boom::OpenGLEnum mode) const;
    void stencilClearTagEXT(boom::OpenGLSizei stencilTagBits, boom::OpenGLUInt stencilClearTag) const;
    void stencilFillPathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUInt pathBase, boom::OpenGLEnum fillMode, boom::OpenGLUInt mask, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void stencilFillPathNV(boom::OpenGLUInt path, boom::OpenGLEnum fillMode, boom::OpenGLUInt mask) const;
    void stencilFunc(boom::OpenGLEnum func, boom::OpenGLInt ref, boom::OpenGLUInt mask) const;
    void stencilFuncSeparate(boom::OpenGLEnum face, boom::OpenGLEnum func, boom::OpenGLInt ref, boom::OpenGLUInt mask) const;
    void stencilFuncSeparateATI(boom::OpenGLEnum frontfunc, boom::OpenGLEnum backfunc, boom::OpenGLInt ref, boom::OpenGLUInt mask) const;
    void stencilMask(boom::OpenGLUInt mask) const;
    void stencilMaskSeparate(boom::OpenGLEnum face, boom::OpenGLUInt mask) const;
    void stencilOp(boom::OpenGLEnum fail, boom::OpenGLEnum zfail, boom::OpenGLEnum zpass) const;
    void stencilOpSeparate(boom::OpenGLEnum face, boom::OpenGLEnum sfail, boom::OpenGLEnum dpfail, boom::OpenGLEnum dppass) const;
    void stencilOpSeparateATI(boom::OpenGLEnum face, boom::OpenGLEnum sfail, boom::OpenGLEnum dpfail, boom::OpenGLEnum dppass) const;
    void stencilOpValueAMD(boom::OpenGLEnum face, boom::OpenGLUInt value) const;
    void stencilStrokePathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUInt pathBase, boom::OpenGLInt reference, boom::OpenGLUInt mask, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void stencilStrokePathNV(boom::OpenGLUInt path, boom::OpenGLInt reference, boom::OpenGLUInt mask) const;
    void stencilThenCoverFillPathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUInt pathBase, boom::OpenGLEnum fillMode, boom::OpenGLUInt mask, boom::OpenGLEnum coverMode, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void stencilThenCoverFillPathNV(boom::OpenGLUInt path, boom::OpenGLEnum fillMode, boom::OpenGLUInt mask, boom::OpenGLEnum coverMode) const;
    void stencilThenCoverStrokePathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUInt pathBase, boom::OpenGLInt reference, boom::OpenGLUInt mask, boom::OpenGLEnum coverMode, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void stencilThenCoverStrokePathNV(boom::OpenGLUInt path, boom::OpenGLInt reference, boom::OpenGLUInt mask, boom::OpenGLEnum coverMode) const;
    void stopInstrumentsSGIX(boom::OpenGLInt marker) const;
    void stringMarkerGREMEDY(boom::OpenGLSizei len, void const* string) const;
    void subpixelPrecisionBiasNV(boom::OpenGLUInt xbits, boom::OpenGLUInt ybits) const;
    void swizzleEXT(boom::OpenGLUInt res, boom::OpenGLUInt in, boom::OpenGLEnum outX, boom::OpenGLEnum outY, boom::OpenGLEnum outZ, boom::OpenGLEnum outW) const;
    void syncTextureINTEL(boom::OpenGLUInt texture) const;
    void tagSampleBufferSGIX() const;
    void tangent3bEXT(boom::OpenGLByte tx, boom::OpenGLByte ty, boom::OpenGLByte tz) const;
    void tangent3bvEXT(boom::OpenGLByte const* v) const;
    void tangent3dEXT(boom::OpenGLDouble tx, boom::OpenGLDouble ty, boom::OpenGLDouble tz) const;
    void tangent3dvEXT(boom::OpenGLDouble const* v) const;
    void tangent3fEXT(boom::OpenGLFloat tx, boom::OpenGLFloat ty, boom::OpenGLFloat tz) const;
    void tangent3fvEXT(boom::OpenGLFloat const* v) const;
    void tangent3iEXT(boom::OpenGLInt tx, boom::OpenGLInt ty, boom::OpenGLInt tz) const;
    void tangent3ivEXT(boom::OpenGLInt const* v) const;
    void tangent3sEXT(boom::OpenGLShort tx, boom::OpenGLShort ty, boom::OpenGLShort tz) const;
    void tangent3svEXT(boom::OpenGLShort const* v) const;
    void tangentPointerEXT(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void tbufferMask3DFX(boom::OpenGLUInt mask) const;
    void tessellationFactorAMD(boom::OpenGLFloat factor) const;
    void tessellationModeAMD(boom::OpenGLEnum mode) const;
    boom::OpenGLBoolean testFenceAPPLE(boom::OpenGLUInt fence) const;
    boom::OpenGLBoolean testFenceNV(boom::OpenGLUInt fence) const;
    boom::OpenGLBoolean testObjectAPPLE(boom::OpenGLEnum object, boom::OpenGLUInt name) const;
    void texAttachMemoryNV(boom::OpenGLEnum target, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void texBuffer(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer) const;
    void texBufferARB(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer) const;
    void texBufferEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer) const;
    void texBufferOES(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer) const;
    void texBufferRange(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void texBufferRangeEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void texBufferRangeOES(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void texBumpParameterfvATI(boom::OpenGLEnum pname, boom::OpenGLFloat const* param) const;
    void texBumpParameterivATI(boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void texCoord1bOES(boom::OpenGLByte s) const;
    void texCoord1bvOES(boom::OpenGLByte const* coords) const;
    void texCoord1d(boom::OpenGLDouble s) const;
    void texCoord1dv(boom::OpenGLDouble const* v) const;
    void texCoord1f(boom::OpenGLFloat s) const;
    void texCoord1fv(boom::OpenGLFloat const* v) const;
    void texCoord1hNV(boom::OpenGLHalfNV s) const;
    void texCoord1hvNV(boom::OpenGLHalfNV const* v) const;
    void texCoord1i(boom::OpenGLInt s) const;
    void texCoord1iv(boom::OpenGLInt const* v) const;
    void texCoord1s(boom::OpenGLShort s) const;
    void texCoord1sv(boom::OpenGLShort const* v) const;
    void texCoord1xOES(boom::OpenGLFixed s) const;
    void texCoord1xvOES(boom::OpenGLFixed const* coords) const;
    void texCoord2bOES(boom::OpenGLByte s, boom::OpenGLByte t) const;
    void texCoord2bvOES(boom::OpenGLByte const* coords) const;
    void texCoord2d(boom::OpenGLDouble s, boom::OpenGLDouble t) const;
    void texCoord2dv(boom::OpenGLDouble const* v) const;
    void texCoord2f(boom::OpenGLFloat s, boom::OpenGLFloat t) const;
    void texCoord2fColor3fVertex3fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void texCoord2fColor3fVertex3fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* v) const;
    void texCoord2fColor4fNormal3fVertex3fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat a, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void texCoord2fColor4fNormal3fVertex3fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void texCoord2fColor4ubVertex3fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLUByte r, boom::OpenGLUByte g, boom::OpenGLUByte b, boom::OpenGLUByte a, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void texCoord2fColor4ubVertex3fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLUByte const* c, boom::OpenGLFloat const* v) const;
    void texCoord2fNormal3fVertex3fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void texCoord2fNormal3fVertex3fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void texCoord2fv(boom::OpenGLFloat const* v) const;
    void texCoord2fVertex3fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void texCoord2fVertex3fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* v) const;
    void texCoord2hNV(boom::OpenGLHalfNV s, boom::OpenGLHalfNV t) const;
    void texCoord2hvNV(boom::OpenGLHalfNV const* v) const;
    void texCoord2i(boom::OpenGLInt s, boom::OpenGLInt t) const;
    void texCoord2iv(boom::OpenGLInt const* v) const;
    void texCoord2s(boom::OpenGLShort s, boom::OpenGLShort t) const;
    void texCoord2sv(boom::OpenGLShort const* v) const;
    void texCoord2xOES(boom::OpenGLFixed s, boom::OpenGLFixed t) const;
    void texCoord2xvOES(boom::OpenGLFixed const* coords) const;
    void texCoord3bOES(boom::OpenGLByte s, boom::OpenGLByte t, boom::OpenGLByte r) const;
    void texCoord3bvOES(boom::OpenGLByte const* coords) const;
    void texCoord3d(boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r) const;
    void texCoord3dv(boom::OpenGLDouble const* v) const;
    void texCoord3f(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r) const;
    void texCoord3fv(boom::OpenGLFloat const* v) const;
    void texCoord3hNV(boom::OpenGLHalfNV s, boom::OpenGLHalfNV t, boom::OpenGLHalfNV r) const;
    void texCoord3hvNV(boom::OpenGLHalfNV const* v) const;
    void texCoord3i(boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r) const;
    void texCoord3iv(boom::OpenGLInt const* v) const;
    void texCoord3s(boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r) const;
    void texCoord3sv(boom::OpenGLShort const* v) const;
    void texCoord3xOES(boom::OpenGLFixed s, boom::OpenGLFixed t, boom::OpenGLFixed r) const;
    void texCoord3xvOES(boom::OpenGLFixed const* coords) const;
    void texCoord4bOES(boom::OpenGLByte s, boom::OpenGLByte t, boom::OpenGLByte r, boom::OpenGLByte q) const;
    void texCoord4bvOES(boom::OpenGLByte const* coords) const;
    void texCoord4d(boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r, boom::OpenGLDouble q) const;
    void texCoord4dv(boom::OpenGLDouble const* v) const;
    void texCoord4f(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat q) const;
    void texCoord4fColor4fNormal3fVertex4fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat p, boom::OpenGLFloat q, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat a, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void texCoord4fColor4fNormal3fVertex4fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void texCoord4fv(boom::OpenGLFloat const* v) const;
    void texCoord4fVertex4fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat p, boom::OpenGLFloat q, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void texCoord4fVertex4fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* v) const;
    void texCoord4hNV(boom::OpenGLHalfNV s, boom::OpenGLHalfNV t, boom::OpenGLHalfNV r, boom::OpenGLHalfNV q) const;
    void texCoord4hvNV(boom::OpenGLHalfNV const* v) const;
    void texCoord4i(boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r, boom::OpenGLInt q) const;
    void texCoord4iv(boom::OpenGLInt const* v) const;
    void texCoord4s(boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r, boom::OpenGLShort q) const;
    void texCoord4sv(boom::OpenGLShort const* v) const;
    void texCoord4xOES(boom::OpenGLFixed s, boom::OpenGLFixed t, boom::OpenGLFixed r, boom::OpenGLFixed q) const;
    void texCoord4xvOES(boom::OpenGLFixed const* coords) const;
    void texCoordFormatNV(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void texCoordP1ui(boom::OpenGLEnum type, boom::OpenGLUInt coords) const;
    void texCoordP1uiv(boom::OpenGLEnum type, boom::OpenGLUInt const* coords) const;
    void texCoordP2ui(boom::OpenGLEnum type, boom::OpenGLUInt coords) const;
    void texCoordP2uiv(boom::OpenGLEnum type, boom::OpenGLUInt const* coords) const;
    void texCoordP3ui(boom::OpenGLEnum type, boom::OpenGLUInt coords) const;
    void texCoordP3uiv(boom::OpenGLEnum type, boom::OpenGLUInt const* coords) const;
    void texCoordP4ui(boom::OpenGLEnum type, boom::OpenGLUInt coords) const;
    void texCoordP4uiv(boom::OpenGLEnum type, boom::OpenGLUInt const* coords) const;
    void texCoordPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void texCoordPointerEXT(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLSizei count, void const* pointer) const;
    void texCoordPointerListIBM(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void texCoordPointervINTEL(boom::OpenGLInt size, boom::OpenGLEnum type, void const** pointer) const;
    void texEnvf(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void texEnvfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void texEnvi(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void texEnviv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texEnvx(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texEnvxOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texEnvxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texEnvxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texEstimateMotionQCOM(boom::OpenGLUInt ref, boom::OpenGLUInt target, boom::OpenGLUInt output) const;
    void texEstimateMotionRegionsQCOM(boom::OpenGLUInt ref, boom::OpenGLUInt target, boom::OpenGLUInt output, boom::OpenGLUInt mask) const;
    void texFilterFuncSGIS(boom::OpenGLEnum target, boom::OpenGLEnum filter, boom::OpenGLSizei n, boom::OpenGLFloat const* weights) const;
    void texGend(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble param) const;
    void texGendv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble const* params) const;
    void texGenf(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void texGenfOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void texGenfv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void texGenfvOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void texGeni(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void texGeniOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void texGeniv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texGenivOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texGenxOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texGenxvOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage2DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void texImage2DMultisampleCoverageNV(boom::OpenGLEnum target, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedSampleLocations) const;
    void texImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage3DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage3DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void texImage3DMultisampleCoverageNV(boom::OpenGLEnum target, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedSampleLocations) const;
    void texImage3DOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage4DSGIS(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLSizei size4d, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texPageCommitmentARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean commit) const;
    void texPageCommitmentEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean commit) const;
    void texPageCommitmentMemNV(boom::OpenGLEnum target, boom::OpenGLInt layer, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset, boom::OpenGLBoolean commit) const;
    void texParameterf(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void texParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void texParameteri(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void texParameterIiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texParameterIivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texParameterIivOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texParameterIuiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt const* params) const;
    void texParameterIuivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt const* params) const;
    void texParameterIuivOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt const* params) const;
    void texParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texParameterx(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texParameterxOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texParameterxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texParameterxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texRenderbufferNV(boom::OpenGLEnum target, boom::OpenGLUInt renderbuffer) const;
    void texStorage1D(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width) const;
    void texStorage1DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width) const;
    void texStorage2D(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void texStorage2DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void texStorage2DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void texStorage3D(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void texStorage3DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void texStorage3DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void texStorage3DMultisampleOES(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void texStorageAttribs2DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt const* attrib_list) const;
    void texStorageAttribs3DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt const* attrib_list) const;
    void texStorageMem1DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void texStorageMem2DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void texStorageMem2DMultisampleEXT(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedSampleLocations, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void texStorageMem3DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void texStorageMem3DMultisampleEXT(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedSampleLocations, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void texStorageSparseAMD(boom::OpenGLEnum target, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLSizei layers, boom::OpenGLBitfield flags) const;
    void texSubImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage1DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage2DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage3DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage3DOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage4DSGIS(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt woffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLSizei size4d, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureAttachMemoryNV(boom::OpenGLUInt texture, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void textureBarrier() const;
    void textureBarrierNV() const;
    void textureBuffer(boom::OpenGLUInt texture, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer) const;
    void textureBufferEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer) const;
    void textureBufferRange(boom::OpenGLUInt texture, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void textureBufferRangeEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void textureColorMaskSGIS(boom::OpenGLBoolean red, boom::OpenGLBoolean green, boom::OpenGLBoolean blue, boom::OpenGLBoolean alpha) const;
    void textureFoveationParametersQCOM(boom::OpenGLUInt texture, boom::OpenGLUInt layer, boom::OpenGLUInt focalPoint, boom::OpenGLFloat focalX, boom::OpenGLFloat focalY, boom::OpenGLFloat gainX, boom::OpenGLFloat gainY, boom::OpenGLFloat foveaArea) const;
    void textureImage1DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureImage2DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureImage2DMultisampleCoverageNV(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedSampleLocations) const;
    void textureImage2DMultisampleNV(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedSampleLocations) const;
    void textureImage3DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureImage3DMultisampleCoverageNV(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedSampleLocations) const;
    void textureImage3DMultisampleNV(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedSampleLocations) const;
    void textureLightEXT(boom::OpenGLEnum pname) const;
    void textureMaterialEXT(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void textureNormalEXT(boom::OpenGLEnum mode) const;
    void texturePageCommitmentEXT(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean commit) const;
    void texturePageCommitmentMemNV(boom::OpenGLUInt texture, boom::OpenGLInt layer, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset, boom::OpenGLBoolean commit) const;
    void textureParameterf(boom::OpenGLUInt texture, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void textureParameterfEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void textureParameterfv(boom::OpenGLUInt texture, boom::OpenGLEnum pname, boom::OpenGLFloat const* param) const;
    void textureParameterfvEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void textureParameteri(boom::OpenGLUInt texture, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void textureParameteriEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void textureParameterIiv(boom::OpenGLUInt texture, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void textureParameterIivEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void textureParameterIuiv(boom::OpenGLUInt texture, boom::OpenGLEnum pname, boom::OpenGLUInt const* params) const;
    void textureParameterIuivEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt const* params) const;
    void textureParameteriv(boom::OpenGLUInt texture, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void textureParameterivEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void textureRangeAPPLE(boom::OpenGLEnum target, boom::OpenGLSizei length, void const* pointer) const;
    void textureRenderbufferEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLUInt renderbuffer) const;
    void textureStorage1D(boom::OpenGLUInt texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width) const;
    void textureStorage1DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width) const;
    void textureStorage2D(boom::OpenGLUInt texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void textureStorage2DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void textureStorage2DMultisample(boom::OpenGLUInt texture, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void textureStorage2DMultisampleEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void textureStorage3D(boom::OpenGLUInt texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void textureStorage3DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void textureStorage3DMultisample(boom::OpenGLUInt texture, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void textureStorage3DMultisampleEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void textureStorageMem1DEXT(boom::OpenGLUInt texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void textureStorageMem2DEXT(boom::OpenGLUInt texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void textureStorageMem2DMultisampleEXT(boom::OpenGLUInt texture, boom::OpenGLSizei samples, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedSampleLocations, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void textureStorageMem3DEXT(boom::OpenGLUInt texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void textureStorageMem3DMultisampleEXT(boom::OpenGLUInt texture, boom::OpenGLSizei samples, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedSampleLocations, boom::OpenGLUInt memory, boom::OpenGLUInt64 offset) const;
    void textureStorageSparseAMD(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLSizei layers, boom::OpenGLBitfield flags) const;
    void textureSubImage1D(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage1DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage2D(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage2DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage3D(boom::OpenGLUInt texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage3DEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureView(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLUInt origtexture, boom::OpenGLEnum internalformat, boom::OpenGLUInt minlevel, boom::OpenGLUInt numlevels, boom::OpenGLUInt minlayer, boom::OpenGLUInt numlayers) const;
    void textureViewEXT(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLUInt origtexture, boom::OpenGLEnum internalformat, boom::OpenGLUInt minlevel, boom::OpenGLUInt numlevels, boom::OpenGLUInt minlayer, boom::OpenGLUInt numlayers) const;
    void textureViewOES(boom::OpenGLUInt texture, boom::OpenGLEnum target, boom::OpenGLUInt origtexture, boom::OpenGLEnum internalformat, boom::OpenGLUInt minlevel, boom::OpenGLUInt numlevels, boom::OpenGLUInt minlayer, boom::OpenGLUInt numlayers) const;
    void trackMatrixNV(boom::OpenGLEnum target, boom::OpenGLUInt address, boom::OpenGLEnum matrix, boom::OpenGLEnum transform) const;
    void transformFeedbackAttribsNV(boom::OpenGLSizei count, boom::OpenGLInt const* attribs, boom::OpenGLEnum bufferMode) const;
    void transformFeedbackBufferBase(boom::OpenGLUInt xfb, boom::OpenGLUInt index, boom::OpenGLUInt buffer) const;
    void transformFeedbackBufferRange(boom::OpenGLUInt xfb, boom::OpenGLUInt index, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void transformFeedbackStreamAttribsNV(boom::OpenGLSizei count, boom::OpenGLInt const* attribs, boom::OpenGLSizei nbuffers, boom::OpenGLInt const* bufstreams, boom::OpenGLEnum bufferMode) const;
    void transformFeedbackVaryings(boom::OpenGLUInt program, boom::OpenGLSizei count, boom::OpenGLChar const* const* varyings, boom::OpenGLEnum bufferMode) const;
    void transformFeedbackVaryingsEXT(boom::OpenGLUInt program, boom::OpenGLSizei count, boom::OpenGLChar const* const* varyings, boom::OpenGLEnum bufferMode) const;
    void transformFeedbackVaryingsNV(boom::OpenGLUInt program, boom::OpenGLSizei count, boom::OpenGLInt const* locations, boom::OpenGLEnum bufferMode) const;
    void transformPathNV(boom::OpenGLUInt resultPath, boom::OpenGLUInt srcPath, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void translated(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void translatef(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void translatex(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void translatexOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void uniform1d(boom::OpenGLInt location, boom::OpenGLDouble x) const;
    void uniform1dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform1f(boom::OpenGLInt location, boom::OpenGLFloat v0) const;
    void uniform1fARB(boom::OpenGLInt location, boom::OpenGLFloat v0) const;
    void uniform1fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform1fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform1i(boom::OpenGLInt location, boom::OpenGLInt v0) const;
    void uniform1i64ARB(boom::OpenGLInt location, boom::OpenGLInt64 x) const;
    void uniform1i64NV(boom::OpenGLInt location, boom::OpenGLInt64EXT x) const;
    void uniform1i64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void uniform1i64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void uniform1iARB(boom::OpenGLInt location, boom::OpenGLInt v0) const;
    void uniform1iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform1ivARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform1ui(boom::OpenGLInt location, boom::OpenGLUInt v0) const;
    void uniform1ui64ARB(boom::OpenGLInt location, boom::OpenGLUInt64 x) const;
    void uniform1ui64NV(boom::OpenGLInt location, boom::OpenGLUInt64EXT x) const;
    void uniform1ui64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniform1ui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void uniform1uiEXT(boom::OpenGLInt location, boom::OpenGLUInt v0) const;
    void uniform1uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void uniform1uivEXT(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void uniform2d(boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void uniform2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform2f(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1) const;
    void uniform2fARB(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1) const;
    void uniform2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform2fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform2i(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1) const;
    void uniform2i64ARB(boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y) const;
    void uniform2i64NV(boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y) const;
    void uniform2i64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void uniform2i64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void uniform2iARB(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1) const;
    void uniform2iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform2ivARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform2ui(boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1) const;
    void uniform2ui64ARB(boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y) const;
    void uniform2ui64NV(boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y) const;
    void uniform2ui64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniform2ui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void uniform2uiEXT(boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1) const;
    void uniform2uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void uniform2uivEXT(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void uniform3d(boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void uniform3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform3f(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void uniform3fARB(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void uniform3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform3fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform3i(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2) const;
    void uniform3i64ARB(boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y, boom::OpenGLInt64 z) const;
    void uniform3i64NV(boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z) const;
    void uniform3i64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void uniform3i64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void uniform3iARB(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2) const;
    void uniform3iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform3ivARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform3ui(boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1, boom::OpenGLUInt v2) const;
    void uniform3ui64ARB(boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y, boom::OpenGLUInt64 z) const;
    void uniform3ui64NV(boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z) const;
    void uniform3ui64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniform3ui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void uniform3uiEXT(boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1, boom::OpenGLUInt v2) const;
    void uniform3uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void uniform3uivEXT(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void uniform4d(boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void uniform4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform4f(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLFloat v3) const;
    void uniform4fARB(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLFloat v3) const;
    void uniform4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform4fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform4i(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2, boom::OpenGLInt v3) const;
    void uniform4i64ARB(boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y, boom::OpenGLInt64 z, boom::OpenGLInt64 w) const;
    void uniform4i64NV(boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z, boom::OpenGLInt64EXT w) const;
    void uniform4i64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void uniform4i64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void uniform4iARB(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2, boom::OpenGLInt v3) const;
    void uniform4iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform4ivARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform4ui(boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1, boom::OpenGLUInt v2, boom::OpenGLUInt v3) const;
    void uniform4ui64ARB(boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y, boom::OpenGLUInt64 z, boom::OpenGLUInt64 w) const;
    void uniform4ui64NV(boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z, boom::OpenGLUInt64EXT w) const;
    void uniform4ui64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniform4ui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void uniform4uiEXT(boom::OpenGLInt location, boom::OpenGLUInt v0, boom::OpenGLUInt v1, boom::OpenGLUInt v2, boom::OpenGLUInt v3) const;
    void uniform4uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void uniform4uivEXT(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt const* value) const;
    void uniformBlockBinding(boom::OpenGLUInt program, boom::OpenGLUInt uniformBlockIndex, boom::OpenGLUInt uniformBlockBinding) const;
    void uniformBufferEXT(boom::OpenGLUInt program, boom::OpenGLInt location, boom::OpenGLUInt buffer) const;
    void uniformHandleui64ARB(boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void uniformHandleui64IMG(boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void uniformHandleui64NV(boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void uniformHandleui64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniformHandleui64vIMG(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniformHandleui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniformMatrix2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2x3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix2x3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2x3fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2x4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix2x4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2x4fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3x2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix3x2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3x2fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3x4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix3x4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3x4fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4x2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix4x2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4x2fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4x3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix4x3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4x3fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformSubroutinesuiv(boom::OpenGLEnum shadertype, boom::OpenGLSizei count, boom::OpenGLUInt const* indices) const;
    void uniformui64NV(boom::OpenGLInt location, boom::OpenGLUInt64EXT value) const;
    void uniformui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void unlockArraysEXT() const;
    boom::OpenGLBoolean unmapBuffer(boom::OpenGLEnum target) const;
    boom::OpenGLBoolean unmapBufferARB(boom::OpenGLEnum target) const;
    boom::OpenGLBoolean unmapBufferOES(boom::OpenGLEnum target) const;
    boom::OpenGLBoolean unmapNamedBuffer(boom::OpenGLUInt buffer) const;
    boom::OpenGLBoolean unmapNamedBufferEXT(boom::OpenGLUInt buffer) const;
    void unmapObjectBufferATI(boom::OpenGLUInt buffer) const;
    void unmapTexture2DINTEL(boom::OpenGLUInt texture, boom::OpenGLInt level) const;
    void updateObjectBufferATI(boom::OpenGLUInt buffer, boom::OpenGLUInt offset, boom::OpenGLSizei size, void const* pointer, boom::OpenGLEnum preserve) const;
    void uploadGpuMaskNVX(boom::OpenGLBitfield mask) const;
    void useProgram(boom::OpenGLUInt program) const;
    void useProgramObjectARB(boom::OpenGLHandleARB programObj) const;
    void useProgramStages(boom::OpenGLUInt pipeline, boom::OpenGLBitfield stages, boom::OpenGLUInt program) const;
    void useProgramStagesEXT(boom::OpenGLUInt pipeline, boom::OpenGLBitfield stages, boom::OpenGLUInt program) const;
    void useShaderProgramEXT(boom::OpenGLEnum type, boom::OpenGLUInt program) const;
    void validateProgram(boom::OpenGLUInt program) const;
    void validateProgramARB(boom::OpenGLHandleARB programObj) const;
    void validateProgramPipeline(boom::OpenGLUInt pipeline) const;
    void validateProgramPipelineEXT(boom::OpenGLUInt pipeline) const;
    void variantArrayObjectATI(boom::OpenGLUInt id, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLUInt buffer, boom::OpenGLUInt offset) const;
    void variantbvEXT(boom::OpenGLUInt id, boom::OpenGLByte const* addr) const;
    void variantdvEXT(boom::OpenGLUInt id, boom::OpenGLDouble const* addr) const;
    void variantfvEXT(boom::OpenGLUInt id, boom::OpenGLFloat const* addr) const;
    void variantivEXT(boom::OpenGLUInt id, boom::OpenGLInt const* addr) const;
    void variantPointerEXT(boom::OpenGLUInt id, boom::OpenGLEnum type, boom::OpenGLUInt stride, void const* addr) const;
    void variantsvEXT(boom::OpenGLUInt id, boom::OpenGLShort const* addr) const;
    void variantubvEXT(boom::OpenGLUInt id, boom::OpenGLUByte const* addr) const;
    void variantuivEXT(boom::OpenGLUInt id, boom::OpenGLUInt const* addr) const;
    void variantusvEXT(boom::OpenGLUInt id, boom::OpenGLUShort const* addr) const;
    void vDPAUFiniNV() const;
    void vDPAUGetSurfaceivNV(boom::OpenGLVDPAUSurfaceNV surface, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLInt* values) const;
    void vDPAUInitNV(void const* vdpDevice, void const* getProcAddress) const;
    boom::OpenGLBoolean vDPAUIsSurfaceNV(boom::OpenGLVDPAUSurfaceNV surface) const;
    void vDPAUMapSurfacesNV(boom::OpenGLSizei numSurfaces, boom::OpenGLVDPAUSurfaceNV const* surfaces) const;
    boom::OpenGLVDPAUSurfaceNV vDPAURegisterOutputSurfaceNV(void const* vdpSurface, boom::OpenGLEnum target, boom::OpenGLSizei numTextureNames, boom::OpenGLUInt const* textureNames) const;
    boom::OpenGLVDPAUSurfaceNV vDPAURegisterVideoSurfaceNV(void const* vdpSurface, boom::OpenGLEnum target, boom::OpenGLSizei numTextureNames, boom::OpenGLUInt const* textureNames) const;
    boom::OpenGLVDPAUSurfaceNV vDPAURegisterVideoSurfaceWithPictureStructureNV(void const* vdpSurface, boom::OpenGLEnum target, boom::OpenGLSizei numTextureNames, boom::OpenGLUInt const* textureNames, boom::OpenGLBoolean isFrameStructure) const;
    void vDPAUSurfaceAccessNV(boom::OpenGLVDPAUSurfaceNV surface, boom::OpenGLEnum access) const;
    void vDPAUUnmapSurfacesNV(boom::OpenGLSizei numSurface, boom::OpenGLVDPAUSurfaceNV const* surfaces) const;
    void vDPAUUnregisterSurfaceNV(boom::OpenGLVDPAUSurfaceNV surface) const;
    void vertex2bOES(boom::OpenGLByte x, boom::OpenGLByte y) const;
    void vertex2bvOES(boom::OpenGLByte const* coords) const;
    void vertex2d(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertex2dv(boom::OpenGLDouble const* v) const;
    void vertex2f(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertex2fv(boom::OpenGLFloat const* v) const;
    void vertex2hNV(boom::OpenGLHalfNV x, boom::OpenGLHalfNV y) const;
    void vertex2hvNV(boom::OpenGLHalfNV const* v) const;
    void vertex2i(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void vertex2iv(boom::OpenGLInt const* v) const;
    void vertex2s(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertex2sv(boom::OpenGLShort const* v) const;
    void vertex2xOES(boom::OpenGLFixed x) const;
    void vertex2xvOES(boom::OpenGLFixed const* coords) const;
    void vertex3bOES(boom::OpenGLByte x, boom::OpenGLByte y, boom::OpenGLByte z) const;
    void vertex3bvOES(boom::OpenGLByte const* coords) const;
    void vertex3d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertex3dv(boom::OpenGLDouble const* v) const;
    void vertex3f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertex3fv(boom::OpenGLFloat const* v) const;
    void vertex3hNV(boom::OpenGLHalfNV x, boom::OpenGLHalfNV y, boom::OpenGLHalfNV z) const;
    void vertex3hvNV(boom::OpenGLHalfNV const* v) const;
    void vertex3i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void vertex3iv(boom::OpenGLInt const* v) const;
    void vertex3s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertex3sv(boom::OpenGLShort const* v) const;
    void vertex3xOES(boom::OpenGLFixed x, boom::OpenGLFixed y) const;
    void vertex3xvOES(boom::OpenGLFixed const* coords) const;
    void vertex4bOES(boom::OpenGLByte x, boom::OpenGLByte y, boom::OpenGLByte z, boom::OpenGLByte w) const;
    void vertex4bvOES(boom::OpenGLByte const* coords) const;
    void vertex4d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertex4dv(boom::OpenGLDouble const* v) const;
    void vertex4f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertex4fv(boom::OpenGLFloat const* v) const;
    void vertex4hNV(boom::OpenGLHalfNV x, boom::OpenGLHalfNV y, boom::OpenGLHalfNV z, boom::OpenGLHalfNV w) const;
    void vertex4hvNV(boom::OpenGLHalfNV const* v) const;
    void vertex4i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void vertex4iv(boom::OpenGLInt const* v) const;
    void vertex4s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertex4sv(boom::OpenGLShort const* v) const;
    void vertex4xOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void vertex4xvOES(boom::OpenGLFixed const* coords) const;
    void vertexArrayAttribBinding(boom::OpenGLUInt vaobj, boom::OpenGLUInt attribindex, boom::OpenGLUInt bindingindex) const;
    void vertexArrayAttribFormat(boom::OpenGLUInt vaobj, boom::OpenGLUInt attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUInt relativeoffset) const;
    void vertexArrayAttribIFormat(boom::OpenGLUInt vaobj, boom::OpenGLUInt attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUInt relativeoffset) const;
    void vertexArrayAttribLFormat(boom::OpenGLUInt vaobj, boom::OpenGLUInt attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUInt relativeoffset) const;
    void vertexArrayBindingDivisor(boom::OpenGLUInt vaobj, boom::OpenGLUInt bindingindex, boom::OpenGLUInt divisor) const;
    void vertexArrayBindVertexBufferEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt bindingindex, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizei stride) const;
    void vertexArrayColorOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayEdgeFlagOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayElementBuffer(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer) const;
    void vertexArrayFogCoordOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayIndexOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayMultiTexCoordOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLEnum texunit, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayNormalOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayParameteriAPPLE(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void vertexArrayRangeAPPLE(boom::OpenGLSizei length, void* pointer) const;
    void vertexArrayRangeNV(boom::OpenGLSizei length, void const* pointer) const;
    void vertexArraySecondaryColorOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayTexCoordOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayVertexAttribBindingEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt attribindex, boom::OpenGLUInt bindingindex) const;
    void vertexArrayVertexAttribDivisorEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt index, boom::OpenGLUInt divisor) const;
    void vertexArrayVertexAttribFormatEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUInt relativeoffset) const;
    void vertexArrayVertexAttribIFormatEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUInt relativeoffset) const;
    void vertexArrayVertexAttribIOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayVertexAttribLFormatEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUInt relativeoffset) const;
    void vertexArrayVertexAttribLOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayVertexAttribOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayVertexBindingDivisorEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt bindingindex, boom::OpenGLUInt divisor) const;
    void vertexArrayVertexBuffer(boom::OpenGLUInt vaobj, boom::OpenGLUInt bindingindex, boom::OpenGLUInt buffer, boom::OpenGLIntptr offset, boom::OpenGLSizei stride) const;
    void vertexArrayVertexBuffers(boom::OpenGLUInt vaobj, boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLUInt const* buffers, boom::OpenGLIntptr const* offsets, boom::OpenGLSizei const* strides) const;
    void vertexArrayVertexOffsetEXT(boom::OpenGLUInt vaobj, boom::OpenGLUInt buffer, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexAttrib1d(boom::OpenGLUInt index, boom::OpenGLDouble x) const;
    void vertexAttrib1dARB(boom::OpenGLUInt index, boom::OpenGLDouble x) const;
    void vertexAttrib1dNV(boom::OpenGLUInt index, boom::OpenGLDouble x) const;
    void vertexAttrib1dv(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib1dvARB(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib1dvNV(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib1f(boom::OpenGLUInt index, boom::OpenGLFloat x) const;
    void vertexAttrib1fARB(boom::OpenGLUInt index, boom::OpenGLFloat x) const;
    void vertexAttrib1fNV(boom::OpenGLUInt index, boom::OpenGLFloat x) const;
    void vertexAttrib1fv(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib1fvARB(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib1fvNV(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib1hNV(boom::OpenGLUInt index, boom::OpenGLHalfNV x) const;
    void vertexAttrib1hvNV(boom::OpenGLUInt index, boom::OpenGLHalfNV const* v) const;
    void vertexAttrib1s(boom::OpenGLUInt index, boom::OpenGLShort x) const;
    void vertexAttrib1sARB(boom::OpenGLUInt index, boom::OpenGLShort x) const;
    void vertexAttrib1sNV(boom::OpenGLUInt index, boom::OpenGLShort x) const;
    void vertexAttrib1sv(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib1svARB(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib1svNV(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib2d(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttrib2dARB(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttrib2dNV(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttrib2dv(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib2dvARB(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib2dvNV(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib2f(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertexAttrib2fARB(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertexAttrib2fNV(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertexAttrib2fv(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib2fvARB(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib2fvNV(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib2hNV(boom::OpenGLUInt index, boom::OpenGLHalfNV x, boom::OpenGLHalfNV y) const;
    void vertexAttrib2hvNV(boom::OpenGLUInt index, boom::OpenGLHalfNV const* v) const;
    void vertexAttrib2s(boom::OpenGLUInt index, boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertexAttrib2sARB(boom::OpenGLUInt index, boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertexAttrib2sNV(boom::OpenGLUInt index, boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertexAttrib2sv(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib2svARB(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib2svNV(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib3d(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttrib3dARB(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttrib3dNV(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttrib3dv(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib3dvARB(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib3dvNV(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib3f(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertexAttrib3fARB(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertexAttrib3fNV(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertexAttrib3fv(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib3fvARB(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib3fvNV(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib3hNV(boom::OpenGLUInt index, boom::OpenGLHalfNV x, boom::OpenGLHalfNV y, boom::OpenGLHalfNV z) const;
    void vertexAttrib3hvNV(boom::OpenGLUInt index, boom::OpenGLHalfNV const* v) const;
    void vertexAttrib3s(boom::OpenGLUInt index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertexAttrib3sARB(boom::OpenGLUInt index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertexAttrib3sNV(boom::OpenGLUInt index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertexAttrib3sv(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib3svARB(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib3svNV(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib4bv(boom::OpenGLUInt index, boom::OpenGLByte const* v) const;
    void vertexAttrib4bvARB(boom::OpenGLUInt index, boom::OpenGLByte const* v) const;
    void vertexAttrib4d(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttrib4dARB(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttrib4dNV(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttrib4dv(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib4dvARB(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib4dvNV(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttrib4f(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertexAttrib4fARB(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertexAttrib4fNV(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertexAttrib4fv(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib4fvARB(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib4fvNV(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void vertexAttrib4hNV(boom::OpenGLUInt index, boom::OpenGLHalfNV x, boom::OpenGLHalfNV y, boom::OpenGLHalfNV z, boom::OpenGLHalfNV w) const;
    void vertexAttrib4hvNV(boom::OpenGLUInt index, boom::OpenGLHalfNV const* v) const;
    void vertexAttrib4iv(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttrib4ivARB(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttrib4Nbv(boom::OpenGLUInt index, boom::OpenGLByte const* v) const;
    void vertexAttrib4NbvARB(boom::OpenGLUInt index, boom::OpenGLByte const* v) const;
    void vertexAttrib4Niv(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttrib4NivARB(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttrib4Nsv(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib4NsvARB(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib4Nub(boom::OpenGLUInt index, boom::OpenGLUByte x, boom::OpenGLUByte y, boom::OpenGLUByte z, boom::OpenGLUByte w) const;
    void vertexAttrib4NubARB(boom::OpenGLUInt index, boom::OpenGLUByte x, boom::OpenGLUByte y, boom::OpenGLUByte z, boom::OpenGLUByte w) const;
    void vertexAttrib4Nubv(boom::OpenGLUInt index, boom::OpenGLUByte const* v) const;
    void vertexAttrib4NubvARB(boom::OpenGLUInt index, boom::OpenGLUByte const* v) const;
    void vertexAttrib4Nuiv(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttrib4NuivARB(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttrib4Nusv(boom::OpenGLUInt index, boom::OpenGLUShort const* v) const;
    void vertexAttrib4NusvARB(boom::OpenGLUInt index, boom::OpenGLUShort const* v) const;
    void vertexAttrib4s(boom::OpenGLUInt index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertexAttrib4sARB(boom::OpenGLUInt index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertexAttrib4sNV(boom::OpenGLUInt index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertexAttrib4sv(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib4svARB(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib4svNV(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttrib4ubNV(boom::OpenGLUInt index, boom::OpenGLUByte x, boom::OpenGLUByte y, boom::OpenGLUByte z, boom::OpenGLUByte w) const;
    void vertexAttrib4ubv(boom::OpenGLUInt index, boom::OpenGLUByte const* v) const;
    void vertexAttrib4ubvARB(boom::OpenGLUInt index, boom::OpenGLUByte const* v) const;
    void vertexAttrib4ubvNV(boom::OpenGLUInt index, boom::OpenGLUByte const* v) const;
    void vertexAttrib4uiv(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttrib4uivARB(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttrib4usv(boom::OpenGLUInt index, boom::OpenGLUShort const* v) const;
    void vertexAttrib4usvARB(boom::OpenGLUInt index, boom::OpenGLUShort const* v) const;
    void vertexAttribArrayObjectATI(boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLSizei stride, boom::OpenGLUInt buffer, boom::OpenGLUInt offset) const;
    void vertexAttribBinding(boom::OpenGLUInt attribindex, boom::OpenGLUInt bindingindex) const;
    void vertexAttribDivisor(boom::OpenGLUInt index, boom::OpenGLUInt divisor) const;
    void vertexAttribDivisorANGLE(boom::OpenGLUInt index, boom::OpenGLUInt divisor) const;
    void vertexAttribDivisorARB(boom::OpenGLUInt index, boom::OpenGLUInt divisor) const;
    void vertexAttribDivisorEXT(boom::OpenGLUInt index, boom::OpenGLUInt divisor) const;
    void vertexAttribDivisorNV(boom::OpenGLUInt index, boom::OpenGLUInt divisor) const;
    void vertexAttribFormat(boom::OpenGLUInt attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUInt relativeoffset) const;
    void vertexAttribFormatNV(boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLSizei stride) const;
    void vertexAttribI1i(boom::OpenGLUInt index, boom::OpenGLInt x) const;
    void vertexAttribI1iEXT(boom::OpenGLUInt index, boom::OpenGLInt x) const;
    void vertexAttribI1iv(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttribI1ivEXT(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttribI1ui(boom::OpenGLUInt index, boom::OpenGLUInt x) const;
    void vertexAttribI1uiEXT(boom::OpenGLUInt index, boom::OpenGLUInt x) const;
    void vertexAttribI1uiv(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttribI1uivEXT(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttribI2i(boom::OpenGLUInt index, boom::OpenGLInt x, boom::OpenGLInt y) const;
    void vertexAttribI2iEXT(boom::OpenGLUInt index, boom::OpenGLInt x, boom::OpenGLInt y) const;
    void vertexAttribI2iv(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttribI2ivEXT(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttribI2ui(boom::OpenGLUInt index, boom::OpenGLUInt x, boom::OpenGLUInt y) const;
    void vertexAttribI2uiEXT(boom::OpenGLUInt index, boom::OpenGLUInt x, boom::OpenGLUInt y) const;
    void vertexAttribI2uiv(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttribI2uivEXT(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttribI3i(boom::OpenGLUInt index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void vertexAttribI3iEXT(boom::OpenGLUInt index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void vertexAttribI3iv(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttribI3ivEXT(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttribI3ui(boom::OpenGLUInt index, boom::OpenGLUInt x, boom::OpenGLUInt y, boom::OpenGLUInt z) const;
    void vertexAttribI3uiEXT(boom::OpenGLUInt index, boom::OpenGLUInt x, boom::OpenGLUInt y, boom::OpenGLUInt z) const;
    void vertexAttribI3uiv(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttribI3uivEXT(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttribI4bv(boom::OpenGLUInt index, boom::OpenGLByte const* v) const;
    void vertexAttribI4bvEXT(boom::OpenGLUInt index, boom::OpenGLByte const* v) const;
    void vertexAttribI4i(boom::OpenGLUInt index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void vertexAttribI4iEXT(boom::OpenGLUInt index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void vertexAttribI4iv(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttribI4ivEXT(boom::OpenGLUInt index, boom::OpenGLInt const* v) const;
    void vertexAttribI4sv(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttribI4svEXT(boom::OpenGLUInt index, boom::OpenGLShort const* v) const;
    void vertexAttribI4ubv(boom::OpenGLUInt index, boom::OpenGLUByte const* v) const;
    void vertexAttribI4ubvEXT(boom::OpenGLUInt index, boom::OpenGLUByte const* v) const;
    void vertexAttribI4ui(boom::OpenGLUInt index, boom::OpenGLUInt x, boom::OpenGLUInt y, boom::OpenGLUInt z, boom::OpenGLUInt w) const;
    void vertexAttribI4uiEXT(boom::OpenGLUInt index, boom::OpenGLUInt x, boom::OpenGLUInt y, boom::OpenGLUInt z, boom::OpenGLUInt w) const;
    void vertexAttribI4uiv(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttribI4uivEXT(boom::OpenGLUInt index, boom::OpenGLUInt const* v) const;
    void vertexAttribI4usv(boom::OpenGLUInt index, boom::OpenGLUShort const* v) const;
    void vertexAttribI4usvEXT(boom::OpenGLUInt index, boom::OpenGLUShort const* v) const;
    void vertexAttribIFormat(boom::OpenGLUInt attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUInt relativeoffset) const;
    void vertexAttribIFormatNV(boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void vertexAttribIPointer(boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribIPointerEXT(boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribL1d(boom::OpenGLUInt index, boom::OpenGLDouble x) const;
    void vertexAttribL1dEXT(boom::OpenGLUInt index, boom::OpenGLDouble x) const;
    void vertexAttribL1dv(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttribL1dvEXT(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttribL1i64NV(boom::OpenGLUInt index, boom::OpenGLInt64EXT x) const;
    void vertexAttribL1i64vNV(boom::OpenGLUInt index, boom::OpenGLInt64EXT const* v) const;
    void vertexAttribL1ui64ARB(boom::OpenGLUInt index, boom::OpenGLUInt64EXT x) const;
    void vertexAttribL1ui64NV(boom::OpenGLUInt index, boom::OpenGLUInt64EXT x) const;
    void vertexAttribL1ui64vARB(boom::OpenGLUInt index, boom::OpenGLUInt64EXT const* v) const;
    void vertexAttribL1ui64vNV(boom::OpenGLUInt index, boom::OpenGLUInt64EXT const* v) const;
    void vertexAttribL2d(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttribL2dEXT(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttribL2dv(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttribL2dvEXT(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttribL2i64NV(boom::OpenGLUInt index, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y) const;
    void vertexAttribL2i64vNV(boom::OpenGLUInt index, boom::OpenGLInt64EXT const* v) const;
    void vertexAttribL2ui64NV(boom::OpenGLUInt index, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y) const;
    void vertexAttribL2ui64vNV(boom::OpenGLUInt index, boom::OpenGLUInt64EXT const* v) const;
    void vertexAttribL3d(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttribL3dEXT(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttribL3dv(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttribL3dvEXT(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttribL3i64NV(boom::OpenGLUInt index, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z) const;
    void vertexAttribL3i64vNV(boom::OpenGLUInt index, boom::OpenGLInt64EXT const* v) const;
    void vertexAttribL3ui64NV(boom::OpenGLUInt index, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z) const;
    void vertexAttribL3ui64vNV(boom::OpenGLUInt index, boom::OpenGLUInt64EXT const* v) const;
    void vertexAttribL4d(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttribL4dEXT(boom::OpenGLUInt index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttribL4dv(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttribL4dvEXT(boom::OpenGLUInt index, boom::OpenGLDouble const* v) const;
    void vertexAttribL4i64NV(boom::OpenGLUInt index, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z, boom::OpenGLInt64EXT w) const;
    void vertexAttribL4i64vNV(boom::OpenGLUInt index, boom::OpenGLInt64EXT const* v) const;
    void vertexAttribL4ui64NV(boom::OpenGLUInt index, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z, boom::OpenGLUInt64EXT w) const;
    void vertexAttribL4ui64vNV(boom::OpenGLUInt index, boom::OpenGLUInt64EXT const* v) const;
    void vertexAttribLFormat(boom::OpenGLUInt attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUInt relativeoffset) const;
    void vertexAttribLFormatNV(boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void vertexAttribLPointer(boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribLPointerEXT(boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribP1ui(boom::OpenGLUInt index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUInt value) const;
    void vertexAttribP1uiv(boom::OpenGLUInt index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUInt const* value) const;
    void vertexAttribP2ui(boom::OpenGLUInt index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUInt value) const;
    void vertexAttribP2uiv(boom::OpenGLUInt index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUInt const* value) const;
    void vertexAttribP3ui(boom::OpenGLUInt index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUInt value) const;
    void vertexAttribP3uiv(boom::OpenGLUInt index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUInt const* value) const;
    void vertexAttribP4ui(boom::OpenGLUInt index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUInt value) const;
    void vertexAttribP4uiv(boom::OpenGLUInt index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUInt const* value) const;
    void vertexAttribParameteriAMD(boom::OpenGLUInt index, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void vertexAttribPointer(boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribPointerARB(boom::OpenGLUInt index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribPointerNV(boom::OpenGLUInt index, boom::OpenGLInt fsize, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribs1dvNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void vertexAttribs1fvNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void vertexAttribs1hvNV(boom::OpenGLUInt index, boom::OpenGLSizei n, boom::OpenGLHalfNV const* v) const;
    void vertexAttribs1svNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLShort const* v) const;
    void vertexAttribs2dvNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void vertexAttribs2fvNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void vertexAttribs2hvNV(boom::OpenGLUInt index, boom::OpenGLSizei n, boom::OpenGLHalfNV const* v) const;
    void vertexAttribs2svNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLShort const* v) const;
    void vertexAttribs3dvNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void vertexAttribs3fvNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void vertexAttribs3hvNV(boom::OpenGLUInt index, boom::OpenGLSizei n, boom::OpenGLHalfNV const* v) const;
    void vertexAttribs3svNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLShort const* v) const;
    void vertexAttribs4dvNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void vertexAttribs4fvNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void vertexAttribs4hvNV(boom::OpenGLUInt index, boom::OpenGLSizei n, boom::OpenGLHalfNV const* v) const;
    void vertexAttribs4svNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLShort const* v) const;
    void vertexAttribs4ubvNV(boom::OpenGLUInt index, boom::OpenGLSizei count, boom::OpenGLUByte const* v) const;
    void vertexBindingDivisor(boom::OpenGLUInt bindingindex, boom::OpenGLUInt divisor) const;
    void vertexBlendARB(boom::OpenGLInt count) const;
    void vertexBlendEnvfATI(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void vertexBlendEnviATI(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void vertexFormatNV(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void vertexP2ui(boom::OpenGLEnum type, boom::OpenGLUInt value) const;
    void vertexP2uiv(boom::OpenGLEnum type, boom::OpenGLUInt const* value) const;
    void vertexP3ui(boom::OpenGLEnum type, boom::OpenGLUInt value) const;
    void vertexP3uiv(boom::OpenGLEnum type, boom::OpenGLUInt const* value) const;
    void vertexP4ui(boom::OpenGLEnum type, boom::OpenGLUInt value) const;
    void vertexP4uiv(boom::OpenGLEnum type, boom::OpenGLUInt const* value) const;
    void vertexPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexPointerEXT(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLSizei count, void const* pointer) const;
    void vertexPointerListIBM(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void vertexPointervINTEL(boom::OpenGLInt size, boom::OpenGLEnum type, void const** pointer) const;
    void vertexStream1dATI(boom::OpenGLEnum stream, boom::OpenGLDouble x) const;
    void vertexStream1dvATI(boom::OpenGLEnum stream, boom::OpenGLDouble const* coords) const;
    void vertexStream1fATI(boom::OpenGLEnum stream, boom::OpenGLFloat x) const;
    void vertexStream1fvATI(boom::OpenGLEnum stream, boom::OpenGLFloat const* coords) const;
    void vertexStream1iATI(boom::OpenGLEnum stream, boom::OpenGLInt x) const;
    void vertexStream1ivATI(boom::OpenGLEnum stream, boom::OpenGLInt const* coords) const;
    void vertexStream1sATI(boom::OpenGLEnum stream, boom::OpenGLShort x) const;
    void vertexStream1svATI(boom::OpenGLEnum stream, boom::OpenGLShort const* coords) const;
    void vertexStream2dATI(boom::OpenGLEnum stream, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexStream2dvATI(boom::OpenGLEnum stream, boom::OpenGLDouble const* coords) const;
    void vertexStream2fATI(boom::OpenGLEnum stream, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertexStream2fvATI(boom::OpenGLEnum stream, boom::OpenGLFloat const* coords) const;
    void vertexStream2iATI(boom::OpenGLEnum stream, boom::OpenGLInt x, boom::OpenGLInt y) const;
    void vertexStream2ivATI(boom::OpenGLEnum stream, boom::OpenGLInt const* coords) const;
    void vertexStream2sATI(boom::OpenGLEnum stream, boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertexStream2svATI(boom::OpenGLEnum stream, boom::OpenGLShort const* coords) const;
    void vertexStream3dATI(boom::OpenGLEnum stream, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexStream3dvATI(boom::OpenGLEnum stream, boom::OpenGLDouble const* coords) const;
    void vertexStream3fATI(boom::OpenGLEnum stream, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertexStream3fvATI(boom::OpenGLEnum stream, boom::OpenGLFloat const* coords) const;
    void vertexStream3iATI(boom::OpenGLEnum stream, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void vertexStream3ivATI(boom::OpenGLEnum stream, boom::OpenGLInt const* coords) const;
    void vertexStream3sATI(boom::OpenGLEnum stream, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertexStream3svATI(boom::OpenGLEnum stream, boom::OpenGLShort const* coords) const;
    void vertexStream4dATI(boom::OpenGLEnum stream, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexStream4dvATI(boom::OpenGLEnum stream, boom::OpenGLDouble const* coords) const;
    void vertexStream4fATI(boom::OpenGLEnum stream, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertexStream4fvATI(boom::OpenGLEnum stream, boom::OpenGLFloat const* coords) const;
    void vertexStream4iATI(boom::OpenGLEnum stream, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void vertexStream4ivATI(boom::OpenGLEnum stream, boom::OpenGLInt const* coords) const;
    void vertexStream4sATI(boom::OpenGLEnum stream, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertexStream4svATI(boom::OpenGLEnum stream, boom::OpenGLShort const* coords) const;
    void vertexWeightfEXT(boom::OpenGLFloat weight) const;
    void vertexWeightfvEXT(boom::OpenGLFloat const* weight) const;
    void vertexWeighthNV(boom::OpenGLHalfNV weight) const;
    void vertexWeighthvNV(boom::OpenGLHalfNV const* weight) const;
    void vertexWeightPointerEXT(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    boom::OpenGLEnum videoCaptureNV(boom::OpenGLUInt video_capture_slot, boom::OpenGLUInt* sequence_num, boom::OpenGLUInt64EXT* capture_time) const;
    void videoCaptureStreamParameterdvNV(boom::OpenGLUInt video_capture_slot, boom::OpenGLUInt stream, boom::OpenGLEnum pname, boom::OpenGLDouble const* params) const;
    void videoCaptureStreamParameterfvNV(boom::OpenGLUInt video_capture_slot, boom::OpenGLUInt stream, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void videoCaptureStreamParameterivNV(boom::OpenGLUInt video_capture_slot, boom::OpenGLUInt stream, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void viewport(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void viewportArrayv(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void viewportArrayvNV(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void viewportArrayvOES(boom::OpenGLUInt first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void viewportIndexedf(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat w, boom::OpenGLFloat h) const;
    void viewportIndexedfNV(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat w, boom::OpenGLFloat h) const;
    void viewportIndexedfOES(boom::OpenGLUInt index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat w, boom::OpenGLFloat h) const;
    void viewportIndexedfv(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void viewportIndexedfvNV(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void viewportIndexedfvOES(boom::OpenGLUInt index, boom::OpenGLFloat const* v) const;
    void viewportPositionWScaleNV(boom::OpenGLUInt index, boom::OpenGLFloat xcoeff, boom::OpenGLFloat ycoeff) const;
    void viewportSwizzleNV(boom::OpenGLUInt index, boom::OpenGLEnum swizzlex, boom::OpenGLEnum swizzley, boom::OpenGLEnum swizzlez, boom::OpenGLEnum swizzlew) const;
    void waitSemaphoreEXT(boom::OpenGLUInt semaphore, boom::OpenGLUInt numBufferBarriers, boom::OpenGLUInt const* buffers, boom::OpenGLUInt numTextureBarriers, boom::OpenGLUInt const* textures, boom::OpenGLEnum const* srcLayouts) const;
    void waitSemaphoreui64NVX(boom::OpenGLUInt waitGpu, boom::OpenGLSizei fenceObjectCount, boom::OpenGLUInt const* semaphoreArray, boom::OpenGLUInt64 const* fenceValueArray) const;
    void waitSync(boom::OpenGLSync sync, boom::OpenGLBitfield flags, boom::OpenGLUInt64 timeout) const;
    void waitSyncAPPLE(boom::OpenGLSync sync, boom::OpenGLBitfield flags, boom::OpenGLUInt64 timeout) const;
    void waitVkSemaphoreNV(boom::OpenGLUInt64 vkSemaphore) const;
    void weightbvARB(boom::OpenGLInt size, boom::OpenGLByte const* weights) const;
    void weightdvARB(boom::OpenGLInt size, boom::OpenGLDouble const* weights) const;
    void weightfvARB(boom::OpenGLInt size, boom::OpenGLFloat const* weights) const;
    void weightivARB(boom::OpenGLInt size, boom::OpenGLInt const* weights) const;
    void weightPathsNV(boom::OpenGLUInt resultPath, boom::OpenGLSizei numPaths, boom::OpenGLUInt const* paths, boom::OpenGLFloat const* weights) const;
    void weightPointerARB(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void weightPointerOES(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void weightsvARB(boom::OpenGLInt size, boom::OpenGLShort const* weights) const;
    void weightubvARB(boom::OpenGLInt size, boom::OpenGLUByte const* weights) const;
    void weightuivARB(boom::OpenGLInt size, boom::OpenGLUInt const* weights) const;
    void weightusvARB(boom::OpenGLInt size, boom::OpenGLUShort const* weights) const;
    void windowPos2d(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void windowPos2dARB(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void windowPos2dMESA(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void windowPos2dv(boom::OpenGLDouble const* v) const;
    void windowPos2dvARB(boom::OpenGLDouble const* v) const;
    void windowPos2dvMESA(boom::OpenGLDouble const* v) const;
    void windowPos2f(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void windowPos2fARB(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void windowPos2fMESA(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void windowPos2fv(boom::OpenGLFloat const* v) const;
    void windowPos2fvARB(boom::OpenGLFloat const* v) const;
    void windowPos2fvMESA(boom::OpenGLFloat const* v) const;
    void windowPos2i(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void windowPos2iARB(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void windowPos2iMESA(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void windowPos2iv(boom::OpenGLInt const* v) const;
    void windowPos2ivARB(boom::OpenGLInt const* v) const;
    void windowPos2ivMESA(boom::OpenGLInt const* v) const;
    void windowPos2s(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void windowPos2sARB(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void windowPos2sMESA(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void windowPos2sv(boom::OpenGLShort const* v) const;
    void windowPos2svARB(boom::OpenGLShort const* v) const;
    void windowPos2svMESA(boom::OpenGLShort const* v) const;
    void windowPos3d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void windowPos3dARB(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void windowPos3dMESA(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void windowPos3dv(boom::OpenGLDouble const* v) const;
    void windowPos3dvARB(boom::OpenGLDouble const* v) const;
    void windowPos3dvMESA(boom::OpenGLDouble const* v) const;
    void windowPos3f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void windowPos3fARB(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void windowPos3fMESA(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void windowPos3fv(boom::OpenGLFloat const* v) const;
    void windowPos3fvARB(boom::OpenGLFloat const* v) const;
    void windowPos3fvMESA(boom::OpenGLFloat const* v) const;
    void windowPos3i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void windowPos3iARB(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void windowPos3iMESA(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void windowPos3iv(boom::OpenGLInt const* v) const;
    void windowPos3ivARB(boom::OpenGLInt const* v) const;
    void windowPos3ivMESA(boom::OpenGLInt const* v) const;
    void windowPos3s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void windowPos3sARB(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void windowPos3sMESA(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void windowPos3sv(boom::OpenGLShort const* v) const;
    void windowPos3svARB(boom::OpenGLShort const* v) const;
    void windowPos3svMESA(boom::OpenGLShort const* v) const;
    void windowPos4dMESA(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void windowPos4dvMESA(boom::OpenGLDouble const* v) const;
    void windowPos4fMESA(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void windowPos4fvMESA(boom::OpenGLFloat const* v) const;
    void windowPos4iMESA(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void windowPos4ivMESA(boom::OpenGLInt const* v) const;
    void windowPos4sMESA(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void windowPos4svMESA(boom::OpenGLShort const* v) const;
    void windowRectanglesEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLInt const* box) const;
    void writeMaskEXT(boom::OpenGLUInt res, boom::OpenGLUInt in, boom::OpenGLEnum outX, boom::OpenGLEnum outY, boom::OpenGLEnum outZ, boom::OpenGLEnum outW) const;
    bool supports(boom::OpenGLExtension) const;
    void swap() const;
    virtual ~OpenGL();
private:
    void (*_accum)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_accumxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    boom::OpenGLBoolean (*_acquireKeyedMutexWin32EXT)(boom::OpenGLUInt, boom::OpenGLUInt64, boom::OpenGLUInt);
    void (*_activeProgramEXT)(boom::OpenGLUInt);
    void (*_activeShaderProgram)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_activeShaderProgramEXT)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_activeStencilFaceEXT)(boom::OpenGLEnum);
    void (*_activeTexture)(boom::OpenGLEnum);
    void (*_activeTextureARB)(boom::OpenGLEnum);
    void (*_activeVaryingNV)(boom::OpenGLUInt, boom::OpenGLChar const*);
    void (*_alphaFragmentOp1ATI)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_alphaFragmentOp2ATI)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_alphaFragmentOp3ATI)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_alphaFunc)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_alphaFuncQCOM)(boom::OpenGLEnum, boom::OpenGLClampf);
    void (*_alphaFuncx)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_alphaFuncxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_alphaToCoverageDitherControlNV)(boom::OpenGLEnum);
    void (*_applyFramebufferAttachmentCMAAINTEL)();
    void (*_applyTextureEXT)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_areProgramsResidentNV)(boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLBoolean*);
    boom::OpenGLBoolean (*_areTexturesResident)(boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLBoolean*);
    boom::OpenGLBoolean (*_areTexturesResidentEXT)(boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLBoolean*);
    void (*_arrayElement)(boom::OpenGLInt);
    void (*_arrayElementEXT)(boom::OpenGLInt);
    void (*_arrayObjectATI)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLUInt);
    boom::OpenGLUInt (*_asyncCopyBufferSubDataNVX)(boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLUInt64 const*, boom::OpenGLUInt, boom::OpenGLBitfield, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLUInt64 const*);
    boom::OpenGLUInt (*_asyncCopyImageSubDataNVX)(boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLUInt64 const*, boom::OpenGLUInt, boom::OpenGLBitfield, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLUInt64 const*);
    void (*_asyncMarkerSGIX)(boom::OpenGLUInt);
    void (*_attachObjectARB)(boom::OpenGLHandleARB, boom::OpenGLHandleARB);
    void (*_attachShader)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_begin)(boom::OpenGLEnum);
    void (*_beginConditionalRender)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_beginConditionalRenderNV)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_beginConditionalRenderNVX)(boom::OpenGLUInt);
    void (*_beginFragmentShaderATI)();
    void (*_beginOcclusionQueryNV)(boom::OpenGLUInt);
    void (*_beginPerfMonitorAMD)(boom::OpenGLUInt);
    void (*_beginPerfQueryINTEL)(boom::OpenGLUInt);
    void (*_beginQuery)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_beginQueryARB)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_beginQueryEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_beginQueryIndexed)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_beginTransformFeedback)(boom::OpenGLEnum);
    void (*_beginTransformFeedbackEXT)(boom::OpenGLEnum);
    void (*_beginTransformFeedbackNV)(boom::OpenGLEnum);
    void (*_beginVertexShaderEXT)();
    void (*_beginVideoCaptureNV)(boom::OpenGLUInt);
    void (*_bindAttribLocation)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLChar const*);
    void (*_bindAttribLocationARB)(boom::OpenGLHandleARB, boom::OpenGLUInt, boom::OpenGLCharARB const*);
    void (*_bindBuffer)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindBufferARB)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindBufferBase)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_bindBufferBaseEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_bindBufferBaseNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_bindBufferOffsetEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr);
    void (*_bindBufferOffsetNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr);
    void (*_bindBufferRange)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_bindBufferRangeEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_bindBufferRangeNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_bindBuffersBase)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_bindBuffersRange)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLIntptr const*, boom::OpenGLSizeiptr const*);
    void (*_bindFragDataLocation)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLChar const*);
    void (*_bindFragDataLocationEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLChar const*);
    void (*_bindFragDataLocationIndexed)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLChar const*);
    void (*_bindFragDataLocationIndexedEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLChar const*);
    void (*_bindFragmentShaderATI)(boom::OpenGLUInt);
    void (*_bindFramebuffer)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindFramebufferEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindFramebufferOES)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindImageTexture)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLBoolean, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_bindImageTextureEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLBoolean, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_bindImageTextures)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    boom::OpenGLUInt (*_bindLightParameterEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    boom::OpenGLUInt (*_bindMaterialParameterEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_bindMultiTextureEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    boom::OpenGLUInt (*_bindParameterEXT)(boom::OpenGLEnum);
    void (*_bindProgramARB)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindProgramNV)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindProgramPipeline)(boom::OpenGLUInt);
    void (*_bindProgramPipelineEXT)(boom::OpenGLUInt);
    void (*_bindRenderbuffer)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindRenderbufferEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindRenderbufferOES)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindSampler)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_bindSamplers)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_bindShadingRateImageNV)(boom::OpenGLUInt);
    boom::OpenGLUInt (*_bindTexGenParameterEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_bindTexture)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindTextureEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindTextures)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_bindTextureUnit)(boom::OpenGLUInt, boom::OpenGLUInt);
    boom::OpenGLUInt (*_bindTextureUnitParameterEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_bindTransformFeedback)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindTransformFeedbackNV)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_bindVertexArray)(boom::OpenGLUInt);
    void (*_bindVertexArrayAPPLE)(boom::OpenGLUInt);
    void (*_bindVertexArrayOES)(boom::OpenGLUInt);
    void (*_bindVertexBuffer)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizei);
    void (*_bindVertexBuffers)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLIntptr const*, boom::OpenGLSizei const*);
    void (*_bindVertexShaderEXT)(boom::OpenGLUInt);
    void (*_bindVideoCaptureStreamBufferNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLIntptrARB);
    void (*_bindVideoCaptureStreamTextureNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_binormal3bEXT)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_binormal3bvEXT)(boom::OpenGLByte const*);
    void (*_binormal3dEXT)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_binormal3dvEXT)(boom::OpenGLDouble const*);
    void (*_binormal3fEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_binormal3fvEXT)(boom::OpenGLFloat const*);
    void (*_binormal3iEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_binormal3ivEXT)(boom::OpenGLInt const*);
    void (*_binormal3sEXT)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_binormal3svEXT)(boom::OpenGLShort const*);
    void (*_binormalPointerEXT)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_bitmap)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLUByte const*);
    void (*_bitmapxOES)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLUByte const*);
    void (*_blendBarrier)();
    void (*_blendBarrierKHR)();
    void (*_blendBarrierNV)();
    void (*_blendColor)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_blendColorEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_blendColorxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_blendEquation)(boom::OpenGLEnum);
    void (*_blendEquationEXT)(boom::OpenGLEnum);
    void (*_blendEquationi)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_blendEquationiARB)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_blendEquationiEXT)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_blendEquationIndexedAMD)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_blendEquationiOES)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_blendEquationOES)(boom::OpenGLEnum);
    void (*_blendEquationSeparate)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparatei)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateiARB)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateiEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateIndexedAMD)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateiOES)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateOES)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFunc)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFunci)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFunciARB)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFunciEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncIndexedAMD)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFunciOES)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparate)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparatei)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateiARB)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateiEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateIndexedAMD)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateINGR)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateiOES)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendParameteriNV)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_blitFramebuffer)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_blitFramebufferANGLE)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_blitFramebufferEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_blitFramebufferNV)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_blitNamedFramebuffer)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_bufferAddressRangeNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt64EXT, boom::OpenGLSizeiptr);
    void (*_bufferAttachMemoryNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_bufferData)(boom::OpenGLEnum, boom::OpenGLSizeiptr, void const*, boom::OpenGLEnum);
    void (*_bufferDataARB)(boom::OpenGLEnum, boom::OpenGLSizeiptrARB, void const*, boom::OpenGLEnum);
    void (*_bufferPageCommitmentARB)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBoolean);
    void (*_bufferPageCommitmentMemNV)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLUInt, boom::OpenGLUInt64, boom::OpenGLBoolean);
    void (*_bufferParameteriAPPLE)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_bufferStorage)(boom::OpenGLEnum, boom::OpenGLSizeiptr, void const*, boom::OpenGLBitfield);
    void (*_bufferStorageEXT)(boom::OpenGLEnum, boom::OpenGLSizeiptr, void const*, boom::OpenGLBitfield);
    void (*_bufferStorageExternalEXT)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLEGLClientBufferEXT, boom::OpenGLBitfield);
    void (*_bufferStorageMemEXT)(boom::OpenGLEnum, boom::OpenGLSizeiptr, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_bufferSubData)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void const*);
    void (*_bufferSubDataARB)(boom::OpenGLEnum, boom::OpenGLIntptrARB, boom::OpenGLSizeiptrARB, void const*);
    void (*_callCommandListNV)(boom::OpenGLUInt);
    void (*_callList)(boom::OpenGLUInt);
    void (*_callLists)(boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    boom::OpenGLEnum (*_checkFramebufferStatus)(boom::OpenGLEnum);
    boom::OpenGLEnum (*_checkFramebufferStatusEXT)(boom::OpenGLEnum);
    boom::OpenGLEnum (*_checkFramebufferStatusOES)(boom::OpenGLEnum);
    boom::OpenGLEnum (*_checkNamedFramebufferStatus)(boom::OpenGLUInt, boom::OpenGLEnum);
    boom::OpenGLEnum (*_checkNamedFramebufferStatusEXT)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_clampColor)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_clampColorARB)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_clear)(boom::OpenGLBitfield);
    void (*_clearAccum)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_clearAccumxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_clearBufferData)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearBufferfi)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLInt);
    void (*_clearBufferfv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_clearBufferiv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt const*);
    void (*_clearBufferSubData)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearBufferuiv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUInt const*);
    void (*_clearColor)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_clearColorIiEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_clearColorIuiEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_clearColorx)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_clearColorxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_clearDepth)(boom::OpenGLDouble);
    void (*_clearDepthdNV)(boom::OpenGLDouble);
    void (*_clearDepthf)(boom::OpenGLFloat);
    void (*_clearDepthfOES)(boom::OpenGLClampf);
    void (*_clearDepthx)(boom::OpenGLFixed);
    void (*_clearDepthxOES)(boom::OpenGLFixed);
    void (*_clearIndex)(boom::OpenGLFloat);
    void (*_clearNamedBufferData)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearNamedBufferDataEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearNamedBufferSubData)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearNamedBufferSubDataEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizeiptr, boom::OpenGLSizeiptr, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearNamedFramebufferfi)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLInt);
    void (*_clearNamedFramebufferfv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_clearNamedFramebufferiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt const*);
    void (*_clearNamedFramebufferuiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUInt const*);
    void (*_clearPixelLocalStorageuiEXT)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_clearStencil)(boom::OpenGLInt);
    void (*_clearTexImage)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearTexImageEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearTexSubImage)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearTexSubImageEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clientActiveTexture)(boom::OpenGLEnum);
    void (*_clientActiveTextureARB)(boom::OpenGLEnum);
    void (*_clientActiveVertexStreamATI)(boom::OpenGLEnum);
    void (*_clientAttribDefaultEXT)(boom::OpenGLBitfield);
    void (*_clientWaitSemaphoreui64NVX)(boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLUInt64 const*);
    boom::OpenGLEnum (*_clientWaitSync)(boom::OpenGLSync, boom::OpenGLBitfield, boom::OpenGLUInt64);
    boom::OpenGLEnum (*_clientWaitSyncAPPLE)(boom::OpenGLSync, boom::OpenGLBitfield, boom::OpenGLUInt64);
    void (*_clipControl)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_clipControlEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_clipPlane)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_clipPlanef)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_clipPlanefIMG)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_clipPlanefOES)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_clipPlanex)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_clipPlanexIMG)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_clipPlanexOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_color3b)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_color3bv)(boom::OpenGLByte const*);
    void (*_color3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_color3dv)(boom::OpenGLDouble const*);
    void (*_color3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color3fv)(boom::OpenGLFloat const*);
    void (*_color3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_color3hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_color3hvNV)(boom::OpenGLHalfNV const*);
    void (*_color3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_color3iv)(boom::OpenGLInt const*);
    void (*_color3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_color3sv)(boom::OpenGLShort const*);
    void (*_color3ub)(boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte);
    void (*_color3ubv)(boom::OpenGLUByte const*);
    void (*_color3ui)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_color3uiv)(boom::OpenGLUInt const*);
    void (*_color3us)(boom::OpenGLUShort, boom::OpenGLUShort, boom::OpenGLUShort);
    void (*_color3usv)(boom::OpenGLUShort const*);
    void (*_color3xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_color3xvOES)(boom::OpenGLFixed const*);
    void (*_color4b)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_color4bv)(boom::OpenGLByte const*);
    void (*_color4d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_color4dv)(boom::OpenGLDouble const*);
    void (*_color4f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color4fNormal3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color4fNormal3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_color4fv)(boom::OpenGLFloat const*);
    void (*_color4hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_color4hvNV)(boom::OpenGLHalfNV const*);
    void (*_color4i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_color4iv)(boom::OpenGLInt const*);
    void (*_color4s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_color4sv)(boom::OpenGLShort const*);
    void (*_color4ub)(boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte);
    void (*_color4ubv)(boom::OpenGLUByte const*);
    void (*_color4ubVertex2fSUN)(boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color4ubVertex2fvSUN)(boom::OpenGLUByte const*, boom::OpenGLFloat const*);
    void (*_color4ubVertex3fSUN)(boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color4ubVertex3fvSUN)(boom::OpenGLUByte const*, boom::OpenGLFloat const*);
    void (*_color4ui)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_color4uiv)(boom::OpenGLUInt const*);
    void (*_color4us)(boom::OpenGLUShort, boom::OpenGLUShort, boom::OpenGLUShort, boom::OpenGLUShort);
    void (*_color4usv)(boom::OpenGLUShort const*);
    void (*_color4x)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_color4xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_color4xvOES)(boom::OpenGLFixed const*);
    void (*_colorFormatNV)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_colorFragmentOp1ATI)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_colorFragmentOp2ATI)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_colorFragmentOp3ATI)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_colorMask)(boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_colorMaski)(boom::OpenGLUInt, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_colorMaskiEXT)(boom::OpenGLUInt, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_colorMaskIndexedEXT)(boom::OpenGLUInt, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_colorMaskiOES)(boom::OpenGLUInt, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_colorMaterial)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_colorP3ui)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_colorP3uiv)(boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_colorP4ui)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_colorP4uiv)(boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_colorPointer)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_colorPointerEXT)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, void const*);
    void (*_colorPointerListIBM)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_colorPointervINTEL)(boom::OpenGLInt, boom::OpenGLEnum, void const**);
    void (*_colorSubTable)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_colorSubTableEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_colorTable)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_colorTableEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_colorTableParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_colorTableParameterfvSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_colorTableParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_colorTableParameterivSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_colorTableSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_combinerInputNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_combinerOutputNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_combinerParameterfNV)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_combinerParameterfvNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_combinerParameteriNV)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_combinerParameterivNV)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_combinerStageParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_commandListSegmentsNV)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_compileCommandListNV)(boom::OpenGLUInt);
    void (*_compileShader)(boom::OpenGLUInt);
    void (*_compileShaderARB)(boom::OpenGLHandleARB);
    void (*_compileShaderIncludeARB)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLChar const* const*, boom::OpenGLInt const*);
    void (*_compressedMultiTexImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedMultiTexImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedMultiTexImage3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedMultiTexSubImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedMultiTexSubImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedMultiTexSubImage3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage1DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage2DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage3D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage3DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage3DOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage1DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage2DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage3D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage3DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage3DOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureImage1DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTextureImage2DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTextureImage3DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage1D)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage1DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage2D)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage2DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage3D)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage3DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_conservativeRasterParameterfNV)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_conservativeRasterParameteriNV)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_convolutionFilter1D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_convolutionFilter1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_convolutionFilter2D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_convolutionFilter2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_convolutionParameterf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_convolutionParameterfEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_convolutionParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_convolutionParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_convolutionParameteri)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_convolutionParameteriEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_convolutionParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_convolutionParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_convolutionParameterxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_convolutionParameterxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_copyBufferSubData)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_copyBufferSubDataNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_copyColorSubTable)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyColorSubTableEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyColorTable)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyColorTableSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyConvolutionFilter1D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyConvolutionFilter1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyConvolutionFilter2D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyConvolutionFilter2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyImageSubData)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyImageSubDataEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyImageSubDataNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyImageSubDataOES)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyMultiTexImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyMultiTexImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyMultiTexSubImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyMultiTexSubImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyMultiTexSubImage3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyNamedBufferSubData)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_copyPathNV)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_copyPixels)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum);
    void (*_copyTexImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTexImage1DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTexImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTexImage2DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTexSubImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyTexSubImage1DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyTexSubImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTexSubImage2DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTexSubImage3D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTexSubImage3DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTexSubImage3DOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTextureImage1DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTextureImage2DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTextureLevelsAPPLE)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyTextureSubImage1D)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyTextureSubImage1DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyTextureSubImage2D)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTextureSubImage2DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTextureSubImage3D)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTextureSubImage3DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_coverageMaskNV)(boom::OpenGLBoolean);
    void (*_coverageModulationNV)(boom::OpenGLEnum);
    void (*_coverageModulationTableNV)(boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_coverageOperationNV)(boom::OpenGLEnum);
    void (*_coverFillPathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_coverFillPathNV)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_coverStrokePathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_coverStrokePathNV)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_createBuffers)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_createCommandListsNV)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_createFramebuffers)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_createMemoryObjectsEXT)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_createPerfQueryINTEL)(boom::OpenGLUInt, boom::OpenGLUInt*);
    boom::OpenGLUInt (*_createProgram)();
    boom::OpenGLHandleARB (*_createProgramObjectARB)();
    void (*_createProgramPipelines)(boom::OpenGLSizei, boom::OpenGLUInt*);
    boom::OpenGLUInt (*_createProgressFenceNVX)();
    void (*_createQueries)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_createRenderbuffers)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_createSamplers)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_createSemaphoresNV)(boom::OpenGLSizei, boom::OpenGLUInt*);
    boom::OpenGLUInt (*_createShader)(boom::OpenGLEnum);
    boom::OpenGLHandleARB (*_createShaderObjectARB)(boom::OpenGLEnum);
    boom::OpenGLUInt (*_createShaderProgramEXT)(boom::OpenGLEnum, boom::OpenGLChar const*);
    boom::OpenGLUInt (*_createShaderProgramv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const* const*);
    boom::OpenGLUInt (*_createShaderProgramvEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const* const*);
    void (*_createStatesNV)(boom::OpenGLSizei, boom::OpenGLUInt*);
    boom::OpenGLSync (*_createSyncFromCLeventARB)(void**, void**, boom::OpenGLBitfield);
    void (*_createTextures)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_createTransformFeedbacks)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_createVertexArrays)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_cullFace)(boom::OpenGLEnum);
    void (*_cullParameterdvEXT)(boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_cullParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_currentPaletteMatrixARB)(boom::OpenGLInt);
    void (*_currentPaletteMatrixOES)(boom::OpenGLUInt);
    void (*_debugMessageCallback)(boom::OpenGLDebugProc, void const*);
    void (*_debugMessageCallbackAMD)(boom::OpenGLDebugProcAMD, void*);
    void (*_debugMessageCallbackARB)(boom::OpenGLDebugProcARB, void const*);
    void (*_debugMessageCallbackKHR)(boom::OpenGLDebugProcKHR, void const*);
    void (*_debugMessageControl)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLBoolean);
    void (*_debugMessageControlARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLBoolean);
    void (*_debugMessageControlKHR)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLBoolean);
    void (*_debugMessageEnableAMD)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLBoolean);
    void (*_debugMessageInsert)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_debugMessageInsertAMD)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_debugMessageInsertARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_debugMessageInsertKHR)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_deformationMap3dSGIX)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_deformationMap3fSGIX)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_deformSGIX)(boom::OpenGLBitfield);
    void (*_deleteAsyncMarkersSGIX)(boom::OpenGLUInt, boom::OpenGLSizei);
    void (*_deleteBuffers)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteBuffersARB)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteCommandListsNV)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteFencesAPPLE)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteFencesNV)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteFragmentShaderATI)(boom::OpenGLUInt);
    void (*_deleteFramebuffers)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteFramebuffersEXT)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteFramebuffersOES)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteLists)(boom::OpenGLUInt, boom::OpenGLSizei);
    void (*_deleteMemoryObjectsEXT)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteNamedStringARB)(boom::OpenGLInt, boom::OpenGLChar const*);
    void (*_deleteNamesAMD)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_deleteObjectARB)(boom::OpenGLHandleARB);
    void (*_deleteOcclusionQueriesNV)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deletePathsNV)(boom::OpenGLUInt, boom::OpenGLSizei);
    void (*_deletePerfMonitorsAMD)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_deletePerfQueryINTEL)(boom::OpenGLUInt);
    void (*_deleteProgram)(boom::OpenGLUInt);
    void (*_deleteProgramPipelines)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteProgramPipelinesEXT)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteProgramsARB)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteProgramsNV)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteQueries)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteQueriesARB)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteQueriesEXT)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteQueryResourceTagNV)(boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_deleteRenderbuffers)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteRenderbuffersEXT)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteRenderbuffersOES)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteSamplers)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteSemaphoresEXT)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteShader)(boom::OpenGLUInt);
    void (*_deleteStatesNV)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteSync)(boom::OpenGLSync);
    void (*_deleteSyncAPPLE)(boom::OpenGLSync);
    void (*_deleteTextures)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteTexturesEXT)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteTransformFeedbacks)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteTransformFeedbacksNV)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteVertexArrays)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteVertexArraysAPPLE)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteVertexArraysOES)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_deleteVertexShaderEXT)(boom::OpenGLUInt);
    void (*_depthBoundsdNV)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_depthBoundsEXT)(boom::OpenGLClampd, boom::OpenGLClampd);
    void (*_depthFunc)(boom::OpenGLEnum);
    void (*_depthMask)(boom::OpenGLBoolean);
    void (*_depthRange)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_depthRangeArraydvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_depthRangeArrayfvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_depthRangeArrayfvOES)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_depthRangeArrayv)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_depthRangedNV)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_depthRangef)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_depthRangefOES)(boom::OpenGLClampf, boom::OpenGLClampf);
    void (*_depthRangeIndexed)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_depthRangeIndexeddNV)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_depthRangeIndexedfNV)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_depthRangeIndexedfOES)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_depthRangex)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_depthRangexOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_detachObjectARB)(boom::OpenGLHandleARB, boom::OpenGLHandleARB);
    void (*_detachShader)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_detailTexFuncSGIS)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_disable)(boom::OpenGLEnum);
    void (*_disableClientState)(boom::OpenGLEnum);
    void (*_disableClientStateiEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_disableClientStateIndexedEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_disableDriverControlQCOM)(boom::OpenGLUInt);
    void (*_disablei)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_disableiEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_disableIndexedEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_disableiNV)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_disableiOES)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_disableVariantClientStateEXT)(boom::OpenGLUInt);
    void (*_disableVertexArrayAttrib)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_disableVertexArrayAttribEXT)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_disableVertexArrayEXT)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_disableVertexAttribAPPLE)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_disableVertexAttribArray)(boom::OpenGLUInt);
    void (*_disableVertexAttribArrayARB)(boom::OpenGLUInt);
    void (*_discardFramebufferEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_dispatchCompute)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_dispatchComputeGroupSizeARB)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_dispatchComputeIndirect)(boom::OpenGLIntptr);
    void (*_drawArrays)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_drawArraysEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_drawArraysIndirect)(boom::OpenGLEnum, void const*);
    void (*_drawArraysInstanced)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawArraysInstancedANGLE)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawArraysInstancedARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawArraysInstancedBaseInstance)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUInt);
    void (*_drawArraysInstancedBaseInstanceEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUInt);
    void (*_drawArraysInstancedEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawArraysInstancedNV)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawBuffer)(boom::OpenGLEnum);
    void (*_drawBuffers)(boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_drawBuffersARB)(boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_drawBuffersATI)(boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_drawBuffersEXT)(boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_drawBuffersIndexedEXT)(boom::OpenGLInt, boom::OpenGLEnum const*, boom::OpenGLInt const*);
    void (*_drawBuffersNV)(boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_drawCommandsAddressNV)(boom::OpenGLEnum, boom::OpenGLUInt64 const*, boom::OpenGLSizei const*, boom::OpenGLUInt);
    void (*_drawCommandsNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLIntptr const*, boom::OpenGLSizei const*, boom::OpenGLUInt);
    void (*_drawCommandsStatesAddressNV)(boom::OpenGLUInt64 const*, boom::OpenGLSizei const*, boom::OpenGLUInt const*, boom::OpenGLUInt const*, boom::OpenGLUInt);
    void (*_drawCommandsStatesNV)(boom::OpenGLUInt, boom::OpenGLIntptr const*, boom::OpenGLSizei const*, boom::OpenGLUInt const*, boom::OpenGLUInt const*, boom::OpenGLUInt);
    void (*_drawElementArrayAPPLE)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_drawElementArrayATI)(boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_drawElements)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_drawElementsBaseVertex)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawElementsBaseVertexEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawElementsBaseVertexOES)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawElementsIndirect)(boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_drawElementsInstanced)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_drawElementsInstancedANGLE)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_drawElementsInstancedARB)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_drawElementsInstancedBaseInstance)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLUInt);
    void (*_drawElementsInstancedBaseInstanceEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLUInt);
    void (*_drawElementsInstancedBaseVertex)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_drawElementsInstancedBaseVertexBaseInstance)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLUInt);
    void (*_drawElementsInstancedBaseVertexBaseInstanceEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLUInt);
    void (*_drawElementsInstancedBaseVertexEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_drawElementsInstancedBaseVertexOES)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_drawElementsInstancedEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_drawElementsInstancedNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_drawMeshArraysSUN)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawMeshTasksIndirectNV)(boom::OpenGLIntptr);
    void (*_drawMeshTasksNV)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_drawPixels)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_drawRangeElementArrayAPPLE)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_drawRangeElementArrayATI)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei);
    void (*_drawRangeElements)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_drawRangeElementsBaseVertex)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawRangeElementsBaseVertexEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawRangeElementsBaseVertexOES)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawRangeElementsEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_drawTexfOES)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_drawTexfvOES)(boom::OpenGLFloat const*);
    void (*_drawTexiOES)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_drawTexivOES)(boom::OpenGLInt const*);
    void (*_drawTexsOES)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_drawTexsvOES)(boom::OpenGLShort const*);
    void (*_drawTextureNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_drawTexxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_drawTexxvOES)(boom::OpenGLFixed const*);
    void (*_drawTransformFeedback)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_drawTransformFeedbackEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_drawTransformFeedbackInstanced)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei);
    void (*_drawTransformFeedbackInstancedEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei);
    void (*_drawTransformFeedbackNV)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_drawTransformFeedbackStream)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_drawTransformFeedbackStreamInstanced)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei);
    void (*_drawVkImageNV)(boom::OpenGLUInt64, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_edgeFlag)(boom::OpenGLBoolean);
    void (*_edgeFlagFormatNV)(boom::OpenGLSizei);
    void (*_edgeFlagPointer)(boom::OpenGLSizei, void const*);
    void (*_edgeFlagPointerEXT)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean const*);
    void (*_edgeFlagPointerListIBM)(boom::OpenGLInt, boom::OpenGLBoolean const**, boom::OpenGLInt);
    void (*_edgeFlagv)(boom::OpenGLBoolean const*);
    void (*_eGLImageTargetRenderbufferStorageOES)(boom::OpenGLEnum, boom::OpenGLEGLImageOES);
    void (*_eGLImageTargetTexStorageEXT)(boom::OpenGLEnum, boom::OpenGLEGLImageOES, boom::OpenGLInt const*);
    void (*_eGLImageTargetTexture2DOES)(boom::OpenGLEnum, boom::OpenGLEGLImageOES);
    void (*_eGLImageTargetTextureStorageEXT)(boom::OpenGLUInt, boom::OpenGLEGLImageOES, boom::OpenGLInt const*);
    void (*_elementPointerAPPLE)(boom::OpenGLEnum, void const*);
    void (*_elementPointerATI)(boom::OpenGLEnum, void const*);
    void (*_enable)(boom::OpenGLEnum);
    void (*_enableClientState)(boom::OpenGLEnum);
    void (*_enableClientStateiEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_enableClientStateIndexedEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_enableDriverControlQCOM)(boom::OpenGLUInt);
    void (*_enablei)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_enableiEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_enableIndexedEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_enableiNV)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_enableiOES)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_enableVariantClientStateEXT)(boom::OpenGLUInt);
    void (*_enableVertexArrayAttrib)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_enableVertexArrayAttribEXT)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_enableVertexArrayEXT)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_enableVertexAttribAPPLE)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_enableVertexAttribArray)(boom::OpenGLUInt);
    void (*_enableVertexAttribArrayARB)(boom::OpenGLUInt);
    void (*_end)();
    void (*_endConditionalRender)();
    void (*_endConditionalRenderNV)();
    void (*_endConditionalRenderNVX)();
    void (*_endFragmentShaderATI)();
    void (*_endList)();
    void (*_endOcclusionQueryNV)();
    void (*_endPerfMonitorAMD)(boom::OpenGLUInt);
    void (*_endPerfQueryINTEL)(boom::OpenGLUInt);
    void (*_endQuery)(boom::OpenGLEnum);
    void (*_endQueryARB)(boom::OpenGLEnum);
    void (*_endQueryEXT)(boom::OpenGLEnum);
    void (*_endQueryIndexed)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_endTilingQCOM)(boom::OpenGLBitfield);
    void (*_endTransformFeedback)();
    void (*_endTransformFeedbackEXT)();
    void (*_endTransformFeedbackNV)();
    void (*_endVertexShaderEXT)();
    void (*_endVideoCaptureNV)(boom::OpenGLUInt);
    void (*_evalCoord1d)(boom::OpenGLDouble);
    void (*_evalCoord1dv)(boom::OpenGLDouble const*);
    void (*_evalCoord1f)(boom::OpenGLFloat);
    void (*_evalCoord1fv)(boom::OpenGLFloat const*);
    void (*_evalCoord1xOES)(boom::OpenGLFixed);
    void (*_evalCoord1xvOES)(boom::OpenGLFixed const*);
    void (*_evalCoord2d)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_evalCoord2dv)(boom::OpenGLDouble const*);
    void (*_evalCoord2f)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_evalCoord2fv)(boom::OpenGLFloat const*);
    void (*_evalCoord2xOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_evalCoord2xvOES)(boom::OpenGLFixed const*);
    void (*_evalMapsNV)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_evalMesh1)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt);
    void (*_evalMesh2)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_evalPoint1)(boom::OpenGLInt);
    void (*_evalPoint2)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_evaluateDepthValuesARB)();
    void (*_executeProgramNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_extGetBufferPointervQCOM)(boom::OpenGLEnum, void**);
    void (*_extGetBuffersQCOM)(boom::OpenGLUInt*, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_extGetFramebuffersQCOM)(boom::OpenGLUInt*, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_extGetProgramBinarySourceQCOM)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLChar*, boom::OpenGLInt*);
    void (*_extGetProgramsQCOM)(boom::OpenGLUInt*, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_extGetRenderbuffersQCOM)(boom::OpenGLUInt*, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_extGetShadersQCOM)(boom::OpenGLUInt*, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_extGetTexLevelParameterivQCOM)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_extGetTexSubImageQCOM)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_extGetTexturesQCOM)(boom::OpenGLUInt*, boom::OpenGLInt, boom::OpenGLInt*);
    boom::OpenGLBoolean (*_extIsProgramBinaryQCOM)(boom::OpenGLUInt);
    void (*_extractComponentEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_extrapolateTex2DQCOM)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLFloat);
    void (*_extTexObjectStateOverrideiQCOM)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_feedbackBuffer)(boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_feedbackBufferxOES)(boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLFixed const*);
    boom::OpenGLSync (*_fenceSync)(boom::OpenGLEnum, boom::OpenGLBitfield);
    boom::OpenGLSync (*_fenceSyncAPPLE)(boom::OpenGLEnum, boom::OpenGLBitfield);
    void (*_finalCombinerInputNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_finish)();
    boom::OpenGLInt (*_finishAsyncSGIX)(boom::OpenGLUInt*);
    void (*_finishFenceAPPLE)(boom::OpenGLUInt);
    void (*_finishFenceNV)(boom::OpenGLUInt);
    void (*_finishObjectAPPLE)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_finishTextureSUNX)();
    void (*_flush)();
    void (*_flushMappedBufferRange)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_flushMappedBufferRangeAPPLE)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_flushMappedBufferRangeEXT)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_flushMappedNamedBufferRange)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_flushMappedNamedBufferRangeEXT)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_flushPixelDataRangeNV)(boom::OpenGLEnum);
    void (*_flushRasterSGIX)();
    void (*_flushStaticDataIBM)(boom::OpenGLEnum);
    void (*_flushVertexArrayRangeAPPLE)(boom::OpenGLSizei, void*);
    void (*_flushVertexArrayRangeNV)();
    void (*_fogCoordd)(boom::OpenGLDouble);
    void (*_fogCoorddEXT)(boom::OpenGLDouble);
    void (*_fogCoorddv)(boom::OpenGLDouble const*);
    void (*_fogCoorddvEXT)(boom::OpenGLDouble const*);
    void (*_fogCoordf)(boom::OpenGLFloat);
    void (*_fogCoordfEXT)(boom::OpenGLFloat);
    void (*_fogCoordFormatNV)(boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_fogCoordfv)(boom::OpenGLFloat const*);
    void (*_fogCoordfvEXT)(boom::OpenGLFloat const*);
    void (*_fogCoordhNV)(boom::OpenGLHalfNV);
    void (*_fogCoordhvNV)(boom::OpenGLHalfNV const*);
    void (*_fogCoordPointer)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_fogCoordPointerEXT)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_fogCoordPointerListIBM)(boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_fogf)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_fogFuncSGIS)(boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_fogfv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_fogi)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_fogiv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_fogx)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_fogxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_fogxv)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_fogxvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_fragmentColorMaterialSGIX)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_fragmentCoverageColorNV)(boom::OpenGLUInt);
    void (*_fragmentLightfSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_fragmentLightfvSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_fragmentLightiSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_fragmentLightivSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_fragmentLightModelfSGIX)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_fragmentLightModelfvSGIX)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_fragmentLightModeliSGIX)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_fragmentLightModelivSGIX)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_fragmentMaterialfSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_fragmentMaterialfvSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_fragmentMaterialiSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_fragmentMaterialivSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_framebufferDrawBufferEXT)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_framebufferDrawBuffersEXT)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_framebufferFetchBarrierEXT)();
    void (*_framebufferFetchBarrierQCOM)();
    void (*_framebufferFoveationConfigQCOM)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt*);
    void (*_framebufferFoveationParametersQCOM)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_framebufferParameteri)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_framebufferParameteriMESA)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_framebufferPixelLocalStorageSizeEXT)(boom::OpenGLUInt, boom::OpenGLSizei);
    void (*_framebufferReadBufferEXT)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_framebufferRenderbuffer)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_framebufferRenderbufferEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_framebufferRenderbufferOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_framebufferSampleLocationsfvARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_framebufferSampleLocationsfvNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_framebufferSamplePositionsfvAMD)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_framebufferShadingRateEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_framebufferTexture)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_framebufferTexture1D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_framebufferTexture1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_framebufferTexture2D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_framebufferTexture2DDownsampleIMG)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTexture2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_framebufferTexture2DMultisampleEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_framebufferTexture2DMultisampleIMG)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_framebufferTexture2DOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_framebufferTexture3D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTexture3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTexture3DOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTextureARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_framebufferTextureEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_framebufferTextureFaceARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum);
    void (*_framebufferTextureFaceEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum);
    void (*_framebufferTextureLayer)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTextureLayerARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTextureLayerDownsampleIMG)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTextureLayerEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTextureMultisampleMultiviewOVR)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_framebufferTextureMultiviewOVR)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_framebufferTextureOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_frameTerminatorGREMEDY)();
    void (*_frameZoomSGIX)(boom::OpenGLInt);
    void (*_freeObjectBufferATI)(boom::OpenGLUInt);
    void (*_frontFace)(boom::OpenGLEnum);
    void (*_frustum)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_frustumf)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_frustumfOES)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_frustumx)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_frustumxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    boom::OpenGLUInt (*_genAsyncMarkersSGIX)(boom::OpenGLSizei);
    void (*_genBuffers)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genBuffersARB)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_generateMipmap)(boom::OpenGLEnum);
    void (*_generateMipmapEXT)(boom::OpenGLEnum);
    void (*_generateMipmapOES)(boom::OpenGLEnum);
    void (*_generateMultiTexMipmapEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_generateTextureMipmap)(boom::OpenGLUInt);
    void (*_generateTextureMipmapEXT)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_genFencesAPPLE)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genFencesNV)(boom::OpenGLSizei, boom::OpenGLUInt*);
    boom::OpenGLUInt (*_genFragmentShadersATI)(boom::OpenGLUInt);
    void (*_genFramebuffers)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genFramebuffersEXT)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genFramebuffersOES)(boom::OpenGLSizei, boom::OpenGLUInt*);
    boom::OpenGLUInt (*_genLists)(boom::OpenGLSizei);
    void (*_genNamesAMD)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt*);
    void (*_genOcclusionQueriesNV)(boom::OpenGLSizei, boom::OpenGLUInt*);
    boom::OpenGLUInt (*_genPathsNV)(boom::OpenGLSizei);
    void (*_genPerfMonitorsAMD)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genProgramPipelines)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genProgramPipelinesEXT)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genProgramsARB)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genProgramsNV)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genQueries)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genQueriesARB)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genQueriesEXT)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genQueryResourceTagNV)(boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_genRenderbuffers)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genRenderbuffersEXT)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genRenderbuffersOES)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genSamplers)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genSemaphoresEXT)(boom::OpenGLSizei, boom::OpenGLUInt*);
    boom::OpenGLUInt (*_genSymbolsEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_genTextures)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genTexturesEXT)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genTransformFeedbacks)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genTransformFeedbacksNV)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genVertexArrays)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genVertexArraysAPPLE)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_genVertexArraysOES)(boom::OpenGLSizei, boom::OpenGLUInt*);
    boom::OpenGLUInt (*_genVertexShadersEXT)(boom::OpenGLUInt);
    void (*_getActiveAtomicCounterBufferiv)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getActiveAttrib)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*, boom::OpenGLEnum*, boom::OpenGLChar*);
    void (*_getActiveAttribARB)(boom::OpenGLHandleARB, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*, boom::OpenGLEnum*, boom::OpenGLCharARB*);
    void (*_getActiveSubroutineName)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getActiveSubroutineUniformiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getActiveSubroutineUniformName)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getActiveUniform)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*, boom::OpenGLEnum*, boom::OpenGLChar*);
    void (*_getActiveUniformARB)(boom::OpenGLHandleARB, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*, boom::OpenGLEnum*, boom::OpenGLCharARB*);
    void (*_getActiveUniformBlockiv)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getActiveUniformBlockName)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getActiveUniformName)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getActiveUniformsiv)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getActiveVaryingNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLSizei*, boom::OpenGLEnum*, boom::OpenGLChar*);
    void (*_getArrayObjectfvATI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getArrayObjectivATI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getAttachedObjectsARB)(boom::OpenGLHandleARB, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLHandleARB*);
    void (*_getAttachedShaders)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLUInt*);
    boom::OpenGLInt (*_getAttribLocation)(boom::OpenGLUInt, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getAttribLocationARB)(boom::OpenGLHandleARB, boom::OpenGLCharARB const*);
    void (*_getBooleanIndexedvEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLBoolean*);
    void (*_getBooleani_v)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLBoolean*);
    void (*_getBooleanv)(boom::OpenGLEnum, boom::OpenGLBoolean*);
    void (*_getBufferParameteri64v)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getBufferParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getBufferParameterivARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getBufferParameterui64vNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getBufferPointerv)(boom::OpenGLEnum, boom::OpenGLEnum, void**);
    void (*_getBufferPointervARB)(boom::OpenGLEnum, boom::OpenGLEnum, void**);
    void (*_getBufferPointervOES)(boom::OpenGLEnum, boom::OpenGLEnum, void**);
    void (*_getBufferSubData)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void*);
    void (*_getBufferSubDataARB)(boom::OpenGLEnum, boom::OpenGLIntptrARB, boom::OpenGLSizeiptrARB, void*);
    void (*_getClipPlane)(boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getClipPlanef)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getClipPlanefOES)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getClipPlanex)(boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getClipPlanexOES)(boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getColorTable)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getColorTableEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getColorTableParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getColorTableParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getColorTableParameterfvSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getColorTableParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getColorTableParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getColorTableParameterivSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getColorTableSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getCombinerInputParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getCombinerInputParameterivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getCombinerOutputParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getCombinerOutputParameterivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getCombinerStageParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    boom::OpenGLUInt (*_getCommandHeaderNV)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_getCompressedMultiTexImageEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, void*);
    void (*_getCompressedTexImage)(boom::OpenGLEnum, boom::OpenGLInt, void*);
    void (*_getCompressedTexImageARB)(boom::OpenGLEnum, boom::OpenGLInt, void*);
    void (*_getCompressedTextureImage)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, void*);
    void (*_getCompressedTextureImageEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, void*);
    void (*_getCompressedTextureSubImage)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, void*);
    void (*_getConvolutionFilter)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getConvolutionFilterEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getConvolutionParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getConvolutionParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getConvolutionParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getConvolutionParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getConvolutionParameterxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getCoverageModulationTableNV)(boom::OpenGLSizei, boom::OpenGLFloat*);
    boom::OpenGLUInt (*_getDebugMessageLog)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum*, boom::OpenGLEnum*, boom::OpenGLUInt*, boom::OpenGLEnum*, boom::OpenGLSizei*, boom::OpenGLChar*);
    boom::OpenGLUInt (*_getDebugMessageLogAMD)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum*, boom::OpenGLEnum*, boom::OpenGLUInt*, boom::OpenGLSizei*, boom::OpenGLChar*);
    boom::OpenGLUInt (*_getDebugMessageLogARB)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum*, boom::OpenGLEnum*, boom::OpenGLUInt*, boom::OpenGLEnum*, boom::OpenGLSizei*, boom::OpenGLChar*);
    boom::OpenGLUInt (*_getDebugMessageLogKHR)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum*, boom::OpenGLEnum*, boom::OpenGLUInt*, boom::OpenGLEnum*, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getDetailTexFuncSGIS)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getDoubleIndexedvEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble*);
    void (*_getDoublei_v)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble*);
    void (*_getDoublei_vEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble*);
    void (*_getDoublev)(boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getDriverControlsQCOM)(boom::OpenGLInt*, boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_getDriverControlStringQCOM)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    boom::OpenGLEnum (*_getError)();
    void (*_getFenceivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFinalCombinerInputParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getFinalCombinerInputParameterivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFirstPerfQueryIdINTEL)(boom::OpenGLUInt*);
    void (*_getFixedv)(boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getFixedvOES)(boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getFloatIndexedvEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat*);
    void (*_getFloati_v)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat*);
    void (*_getFloati_vEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat*);
    void (*_getFloati_vNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat*);
    void (*_getFloati_vOES)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat*);
    void (*_getFloatv)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getFogFuncSGIS)(boom::OpenGLFloat*);
    boom::OpenGLInt (*_getFragDataIndex)(boom::OpenGLUInt, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getFragDataIndexEXT)(boom::OpenGLUInt, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getFragDataLocation)(boom::OpenGLUInt, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getFragDataLocationEXT)(boom::OpenGLUInt, boom::OpenGLChar const*);
    void (*_getFragmentLightfvSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getFragmentLightivSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFragmentMaterialfvSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getFragmentMaterialivSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFragmentShadingRatesEXT)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLEnum*);
    void (*_getFramebufferAttachmentParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFramebufferAttachmentParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFramebufferAttachmentParameterivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFramebufferParameterfvAMD)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getFramebufferParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFramebufferParameterivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFramebufferParameterivMESA)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    boom::OpenGLSizei (*_getFramebufferPixelLocalStorageSizeEXT)(boom::OpenGLUInt);
    boom::OpenGLEnum (*_getGraphicsResetStatus)();
    boom::OpenGLEnum (*_getGraphicsResetStatusARB)();
    boom::OpenGLEnum (*_getGraphicsResetStatusEXT)();
    boom::OpenGLEnum (*_getGraphicsResetStatusKHR)();
    boom::OpenGLHandleARB (*_getHandleARB)(boom::OpenGLEnum);
    void (*_getHistogram)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getHistogramEXT)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getHistogramParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getHistogramParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getHistogramParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getHistogramParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getHistogramParameterxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    boom::OpenGLUInt64 (*_getImageHandleARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLBoolean, boom::OpenGLInt, boom::OpenGLEnum);
    boom::OpenGLUInt64 (*_getImageHandleNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLBoolean, boom::OpenGLInt, boom::OpenGLEnum);
    void (*_getImageTransformParameterfvHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getImageTransformParameterivHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getInfoLogARB)(boom::OpenGLHandleARB, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLCharARB*);
    boom::OpenGLInt (*_getInstrumentsSGIX)();
    void (*_getInteger64i_v)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt64*);
    void (*_getInteger64v)(boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getInteger64vAPPLE)(boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getInteger64vEXT)(boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getIntegerIndexedvEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt*);
    void (*_getIntegeri_v)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt*);
    void (*_getIntegeri_vEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt*);
    void (*_getIntegerui64i_vNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt64EXT*);
    void (*_getIntegerui64vNV)(boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getIntegerv)(boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getInternalformati64v)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt64*);
    void (*_getInternalformativ)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getInternalformatSampleivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getInvariantBooleanvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLBoolean*);
    void (*_getInvariantFloatvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getInvariantIntegervEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getLightfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getLightiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getLightxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getLightxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getLightxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getListParameterfvSGIX)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getListParameterivSGIX)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getLocalConstantBooleanvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLBoolean*);
    void (*_getLocalConstantFloatvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getLocalConstantIntegervEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMapAttribParameterfvNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMapAttribParameterivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMapControlPointsNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean, void*);
    void (*_getMapdv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getMapfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMapiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMapParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMapParameterivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMapxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getMaterialfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMaterialiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMaterialxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_getMaterialxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getMaterialxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getMemoryObjectDetachedResourcesuivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_getMemoryObjectParameterivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMinmax)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getMinmaxEXT)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getMinmaxParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMinmaxParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMinmaxParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMinmaxParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMultisamplefv)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat*);
    void (*_getMultisamplefvNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat*);
    void (*_getMultiTexEnvfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMultiTexEnvivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMultiTexGendvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getMultiTexGenfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMultiTexGenivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMultiTexImageEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getMultiTexLevelParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMultiTexLevelParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMultiTexParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMultiTexParameterIivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMultiTexParameterIuivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getMultiTexParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedBufferParameteri64v)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getNamedBufferParameteriv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedBufferParameterivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedBufferParameterui64vNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getNamedBufferPointerv)(boom::OpenGLUInt, boom::OpenGLEnum, void**);
    void (*_getNamedBufferPointervEXT)(boom::OpenGLUInt, boom::OpenGLEnum, void**);
    void (*_getNamedBufferSubData)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void*);
    void (*_getNamedBufferSubDataEXT)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void*);
    void (*_getNamedFramebufferAttachmentParameteriv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedFramebufferAttachmentParameterivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedFramebufferParameterfvAMD)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getNamedFramebufferParameteriv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedFramebufferParameterivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedProgramivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedProgramLocalParameterdvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble*);
    void (*_getNamedProgramLocalParameterfvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat*);
    void (*_getNamedProgramLocalParameterIivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt*);
    void (*_getNamedProgramLocalParameterIuivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt*);
    void (*_getNamedProgramStringEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getNamedRenderbufferParameteriv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedRenderbufferParameterivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedStringARB)(boom::OpenGLInt, boom::OpenGLChar const*, boom::OpenGLSizei, boom::OpenGLInt*, boom::OpenGLChar*);
    void (*_getNamedStringivARB)(boom::OpenGLInt, boom::OpenGLChar const*, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getnColorTable)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnColorTableARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnCompressedTexImage)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, void*);
    void (*_getnCompressedTexImageARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, void*);
    void (*_getnConvolutionFilter)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnConvolutionFilterARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getNextPerfQueryIdINTEL)(boom::OpenGLUInt, boom::OpenGLUInt*);
    void (*_getnHistogram)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnHistogramARB)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnMapdv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLDouble*);
    void (*_getnMapdvARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLDouble*);
    void (*_getnMapfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnMapfvARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnMapiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnMapivARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnMinmax)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnMinmaxARB)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnPixelMapfv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnPixelMapfvARB)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnPixelMapuiv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_getnPixelMapuivARB)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_getnPixelMapusv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUShort*);
    void (*_getnPixelMapusvARB)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUShort*);
    void (*_getnPolygonStipple)(boom::OpenGLSizei, boom::OpenGLUByte*);
    void (*_getnPolygonStippleARB)(boom::OpenGLSizei, boom::OpenGLUByte*);
    void (*_getnSeparableFilter)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*, boom::OpenGLSizei, void*, void*);
    void (*_getnSeparableFilterARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*, boom::OpenGLSizei, void*, void*);
    void (*_getnTexImage)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnTexImageARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnUniformdv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble*);
    void (*_getnUniformdvARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble*);
    void (*_getnUniformfv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnUniformfvARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnUniformfvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnUniformfvKHR)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnUniformi64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64*);
    void (*_getnUniformiv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnUniformivARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnUniformivEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnUniformivKHR)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnUniformui64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64*);
    void (*_getnUniformuiv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_getnUniformuivARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_getnUniformuivKHR)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_getObjectBufferfvATI)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getObjectBufferivATI)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getObjectLabel)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getObjectLabelEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getObjectLabelKHR)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getObjectParameterfvARB)(boom::OpenGLHandleARB, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getObjectParameterivAPPLE)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getObjectParameterivARB)(boom::OpenGLHandleARB, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getObjectPtrLabel)(void const*, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getObjectPtrLabelKHR)(void const*, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getOcclusionQueryivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getOcclusionQueryuivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getPathColorGenfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPathColorGenivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getPathCommandsNV)(boom::OpenGLUInt, boom::OpenGLUByte*);
    void (*_getPathCoordsNV)(boom::OpenGLUInt, boom::OpenGLFloat*);
    void (*_getPathDashArrayNV)(boom::OpenGLUInt, boom::OpenGLFloat*);
    boom::OpenGLFloat (*_getPathLengthNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_getPathMetricRangeNV)(boom::OpenGLBitfield, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getPathMetricsNV)(boom::OpenGLBitfield, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getPathParameterfvNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPathParameterivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getPathSpacingNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPathTexGenfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPathTexGenivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getPerfCounterInfoINTEL)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLChar*, boom::OpenGLUInt, boom::OpenGLChar*, boom::OpenGLUInt*, boom::OpenGLUInt*, boom::OpenGLUInt*, boom::OpenGLUInt*, boom::OpenGLUInt64*);
    void (*_getPerfMonitorCounterDataAMD)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt*, boom::OpenGLInt*);
    void (*_getPerfMonitorCounterInfoAMD)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, void*);
    void (*_getPerfMonitorCountersAMD)(boom::OpenGLUInt, boom::OpenGLInt*, boom::OpenGLInt*, boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_getPerfMonitorCounterStringAMD)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getPerfMonitorGroupsAMD)(boom::OpenGLInt*, boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_getPerfMonitorGroupStringAMD)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getPerfQueryDataINTEL)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, void*, boom::OpenGLUInt*);
    void (*_getPerfQueryIdByNameINTEL)(boom::OpenGLChar*, boom::OpenGLUInt*);
    void (*_getPerfQueryInfoINTEL)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLChar*, boom::OpenGLUInt*, boom::OpenGLUInt*, boom::OpenGLUInt*, boom::OpenGLUInt*);
    void (*_getPixelMapfv)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPixelMapuiv)(boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getPixelMapusv)(boom::OpenGLEnum, boom::OpenGLUShort*);
    void (*_getPixelMapxv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFixed*);
    void (*_getPixelTexGenParameterfvSGIS)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPixelTexGenParameterivSGIS)(boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getPixelTransformParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPixelTransformParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getPointerIndexedvEXT)(boom::OpenGLEnum, boom::OpenGLUInt, void**);
    void (*_getPointeri_vEXT)(boom::OpenGLEnum, boom::OpenGLUInt, void**);
    void (*_getPointerv)(boom::OpenGLEnum, void**);
    void (*_getPointervEXT)(boom::OpenGLEnum, void**);
    void (*_getPointervKHR)(boom::OpenGLEnum, void**);
    void (*_getPolygonStipple)(boom::OpenGLUByte*);
    void (*_getProgramBinary)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLEnum*, void*);
    void (*_getProgramBinaryOES)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLEnum*, void*);
    void (*_getProgramEnvParameterdvARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble*);
    void (*_getProgramEnvParameterfvARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat*);
    void (*_getProgramEnvParameterIivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt*);
    void (*_getProgramEnvParameterIuivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt*);
    void (*_getProgramInfoLog)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getProgramInterfaceiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramivARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramLocalParameterdvARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble*);
    void (*_getProgramLocalParameterfvARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat*);
    void (*_getProgramLocalParameterIivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt*);
    void (*_getProgramLocalParameterIuivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt*);
    void (*_getProgramNamedParameterdvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUByte const*, boom::OpenGLDouble*);
    void (*_getProgramNamedParameterfvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUByte const*, boom::OpenGLFloat*);
    void (*_getProgramParameterdvNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getProgramParameterfvNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getProgramPipelineInfoLog)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getProgramPipelineInfoLogEXT)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getProgramPipelineiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramPipelineivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramResourcefvNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum const*, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLFloat*);
    boom::OpenGLUInt (*_getProgramResourceIndex)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLChar const*);
    void (*_getProgramResourceiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum const*, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*);
    boom::OpenGLInt (*_getProgramResourceLocation)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getProgramResourceLocationIndex)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getProgramResourceLocationIndexEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLChar const*);
    void (*_getProgramResourceName)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getProgramStageiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramStringARB)(boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getProgramStringNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUByte*);
    void (*_getProgramSubroutineParameteruivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt*);
    void (*_getQueryBufferObjecti64v)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLIntptr);
    void (*_getQueryBufferObjectiv)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLIntptr);
    void (*_getQueryBufferObjectui64v)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLIntptr);
    void (*_getQueryBufferObjectuiv)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLIntptr);
    void (*_getQueryIndexediv)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryivARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryObjecti64v)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getQueryObjecti64vEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getQueryObjectiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryObjectivARB)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryObjectivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryObjectui64v)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt64*);
    void (*_getQueryObjectui64vEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt64*);
    void (*_getQueryObjectuiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getQueryObjectuivARB)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getQueryObjectuivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getRenderbufferParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getRenderbufferParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getRenderbufferParameterivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSamplerParameterfv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getSamplerParameterIiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSamplerParameterIivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSamplerParameterIivOES)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSamplerParameterIuiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getSamplerParameterIuivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getSamplerParameterIuivOES)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getSamplerParameteriv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSemaphoreParameterivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSemaphoreParameterui64vEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt64*);
    void (*_getSeparableFilter)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*, void*, void*);
    void (*_getSeparableFilterEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*, void*, void*);
    void (*_getShaderInfoLog)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getShaderiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getShaderPrecisionFormat)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*, boom::OpenGLInt*);
    void (*_getShaderSource)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getShaderSourceARB)(boom::OpenGLHandleARB, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLCharARB*);
    void (*_getShadingRateImagePaletteNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum*);
    void (*_getShadingRateSampleLocationivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt*);
    void (*_getSharpenTexFuncSGIS)(boom::OpenGLEnum, boom::OpenGLFloat*);
    boom::OpenGLUShort (*_getStageIndexNV)(boom::OpenGLEnum);
    boom::OpenGLUByte const* (*_getString)(boom::OpenGLEnum);
    boom::OpenGLUByte const* (*_getStringi)(boom::OpenGLEnum, boom::OpenGLUInt);
    boom::OpenGLUInt (*_getSubroutineIndex)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getSubroutineUniformLocation)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLChar const*);
    void (*_getSynciv)(boom::OpenGLSync, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*);
    void (*_getSyncivAPPLE)(boom::OpenGLSync, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*);
    void (*_getTexBumpParameterfvATI)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexBumpParameterivATI)(boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexEnvfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexEnviv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexEnvxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getTexEnvxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getTexFilterFuncSGIS)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexGendv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getTexGenfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexGenfvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexGeniv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexGenivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexGenxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getTexImage)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getTexLevelParameterfv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexLevelParameteriv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexLevelParameterxvOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getTexParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexParameterIiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexParameterIivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexParameterIivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexParameterIuiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getTexParameterIuivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getTexParameterIuivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getTexParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexParameterPointervAPPLE)(boom::OpenGLEnum, boom::OpenGLEnum, void**);
    void (*_getTexParameterxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getTexParameterxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    boom::OpenGLUInt64 (*_getTextureHandleARB)(boom::OpenGLUInt);
    boom::OpenGLUInt64 (*_getTextureHandleIMG)(boom::OpenGLUInt);
    boom::OpenGLUInt64 (*_getTextureHandleNV)(boom::OpenGLUInt);
    void (*_getTextureImage)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getTextureImageEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getTextureLevelParameterfv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTextureLevelParameterfvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTextureLevelParameteriv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTextureLevelParameterivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTextureParameterfv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTextureParameterfvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTextureParameterIiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTextureParameterIivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTextureParameterIuiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getTextureParameterIuivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getTextureParameteriv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTextureParameterivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    boom::OpenGLUInt64 (*_getTextureSamplerHandleARB)(boom::OpenGLUInt, boom::OpenGLUInt);
    boom::OpenGLUInt64 (*_getTextureSamplerHandleIMG)(boom::OpenGLUInt, boom::OpenGLUInt);
    boom::OpenGLUInt64 (*_getTextureSamplerHandleNV)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_getTextureSubImage)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getTrackMatrixivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTransformFeedbacki64_v)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt64*);
    void (*_getTransformFeedbackiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTransformFeedbacki_v)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt*);
    void (*_getTransformFeedbackVarying)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLSizei*, boom::OpenGLEnum*, boom::OpenGLChar*);
    void (*_getTransformFeedbackVaryingEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLSizei*, boom::OpenGLEnum*, boom::OpenGLChar*);
    void (*_getTransformFeedbackVaryingNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt*);
    void (*_getTranslatedShaderSourceANGLE)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    boom::OpenGLUInt (*_getUniformBlockIndex)(boom::OpenGLUInt, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getUniformBufferSizeEXT)(boom::OpenGLUInt, boom::OpenGLInt);
    void (*_getUniformdv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLDouble*);
    void (*_getUniformfv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLFloat*);
    void (*_getUniformfvARB)(boom::OpenGLHandleARB, boom::OpenGLInt, boom::OpenGLFloat*);
    void (*_getUniformi64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt64*);
    void (*_getUniformi64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt64EXT*);
    void (*_getUniformIndices)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLChar const* const*, boom::OpenGLUInt*);
    void (*_getUniformiv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_getUniformivARB)(boom::OpenGLHandleARB, boom::OpenGLInt, boom::OpenGLInt*);
    boom::OpenGLInt (*_getUniformLocation)(boom::OpenGLUInt, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getUniformLocationARB)(boom::OpenGLHandleARB, boom::OpenGLCharARB const*);
    boom::OpenGLIntptr (*_getUniformOffsetEXT)(boom::OpenGLUInt, boom::OpenGLInt);
    void (*_getUniformSubroutineuiv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUInt*);
    void (*_getUniformui64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64*);
    void (*_getUniformui64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64EXT*);
    void (*_getUniformuiv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt*);
    void (*_getUniformuivEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt*);
    void (*_getUnsignedBytei_vEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUByte*);
    void (*_getUnsignedBytevEXT)(boom::OpenGLEnum, boom::OpenGLUByte*);
    void (*_getVariantArrayObjectfvATI)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVariantArrayObjectivATI)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVariantBooleanvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLBoolean*);
    void (*_getVariantFloatvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVariantIntegervEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVariantPointervEXT)(boom::OpenGLUInt, boom::OpenGLEnum, void**);
    boom::OpenGLInt (*_getVaryingLocationNV)(boom::OpenGLUInt, boom::OpenGLChar const*);
    void (*_getVertexArrayIndexed64iv)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getVertexArrayIndexediv)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexArrayIntegeri_vEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexArrayIntegervEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexArrayiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexArrayPointeri_vEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, void**);
    void (*_getVertexArrayPointervEXT)(boom::OpenGLUInt, boom::OpenGLEnum, void**);
    void (*_getVertexAttribArrayObjectfvATI)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVertexAttribArrayObjectivATI)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribdv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVertexAttribdvARB)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVertexAttribdvNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVertexAttribfv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVertexAttribfvARB)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVertexAttribfvNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVertexAttribIiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribIivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribIuiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getVertexAttribIuivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_getVertexAttribiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribivARB)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribLdv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVertexAttribLdvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVertexAttribLi64vNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt64EXT*);
    void (*_getVertexAttribLui64vARB)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getVertexAttribLui64vNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getVertexAttribPointerv)(boom::OpenGLUInt, boom::OpenGLEnum, void**);
    void (*_getVertexAttribPointervARB)(boom::OpenGLUInt, boom::OpenGLEnum, void**);
    void (*_getVertexAttribPointervNV)(boom::OpenGLUInt, boom::OpenGLEnum, void**);
    void (*_getVideoCaptureivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVideoCaptureStreamdvNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVideoCaptureStreamfvNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVideoCaptureStreamivNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVideoi64vNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt64EXT*);
    void (*_getVideoivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVideoui64vNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getVideouivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    boom::OpenGLVulkanProcNV (*_getVkProcAddrNV)(boom::OpenGLChar const*);
    void (*_globalAlphaFactorbSUN)(boom::OpenGLByte);
    void (*_globalAlphaFactordSUN)(boom::OpenGLDouble);
    void (*_globalAlphaFactorfSUN)(boom::OpenGLFloat);
    void (*_globalAlphaFactoriSUN)(boom::OpenGLInt);
    void (*_globalAlphaFactorsSUN)(boom::OpenGLShort);
    void (*_globalAlphaFactorubSUN)(boom::OpenGLUByte);
    void (*_globalAlphaFactoruiSUN)(boom::OpenGLUInt);
    void (*_globalAlphaFactorusSUN)(boom::OpenGLUShort);
    void (*_hint)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_hintPGI)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_histogram)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLBoolean);
    void (*_histogramEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLBoolean);
    void (*_iglooInterfaceSGIX)(boom::OpenGLEnum, void const*);
    void (*_imageTransformParameterfHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_imageTransformParameterfvHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_imageTransformParameteriHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_imageTransformParameterivHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_importMemoryFdEXT)(boom::OpenGLUInt, boom::OpenGLUInt64, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_importMemoryWin32HandleEXT)(boom::OpenGLUInt, boom::OpenGLUInt64, boom::OpenGLEnum, void*);
    void (*_importMemoryWin32NameEXT)(boom::OpenGLUInt, boom::OpenGLUInt64, boom::OpenGLEnum, void const*);
    void (*_importSemaphoreFdEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_importSemaphoreWin32HandleEXT)(boom::OpenGLUInt, boom::OpenGLEnum, void*);
    void (*_importSemaphoreWin32NameEXT)(boom::OpenGLUInt, boom::OpenGLEnum, void const*);
    boom::OpenGLSync (*_importSyncEXT)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLBitfield);
    void (*_indexd)(boom::OpenGLDouble);
    void (*_indexdv)(boom::OpenGLDouble const*);
    void (*_indexf)(boom::OpenGLFloat);
    void (*_indexFormatNV)(boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_indexFuncEXT)(boom::OpenGLEnum, boom::OpenGLClampf);
    void (*_indexfv)(boom::OpenGLFloat const*);
    void (*_indexi)(boom::OpenGLInt);
    void (*_indexiv)(boom::OpenGLInt const*);
    void (*_indexMask)(boom::OpenGLUInt);
    void (*_indexMaterialEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_indexPointer)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_indexPointerEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, void const*);
    void (*_indexPointerListIBM)(boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_indexs)(boom::OpenGLShort);
    void (*_indexsv)(boom::OpenGLShort const*);
    void (*_indexub)(boom::OpenGLUByte);
    void (*_indexubv)(boom::OpenGLUByte const*);
    void (*_indexxOES)(boom::OpenGLFixed);
    void (*_indexxvOES)(boom::OpenGLFixed const*);
    void (*_initNames)();
    void (*_insertComponentEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_insertEventMarkerEXT)(boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_instrumentsBufferSGIX)(boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_interleavedArrays)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_interpolatePathsNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLFloat);
    void (*_invalidateBufferData)(boom::OpenGLUInt);
    void (*_invalidateBufferSubData)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_invalidateFramebuffer)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_invalidateNamedFramebufferData)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_invalidateNamedFramebufferSubData)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum const*, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_invalidateSubFramebuffer)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum const*, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_invalidateTexImage)(boom::OpenGLUInt, boom::OpenGLInt);
    void (*_invalidateTexSubImage)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    boom::OpenGLBoolean (*_isAsyncMarkerSGIX)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isBuffer)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isBufferARB)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isBufferResidentNV)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_isCommandListNV)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isEnabled)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_isEnabledi)(boom::OpenGLEnum, boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isEnablediEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isEnabledIndexedEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isEnablediNV)(boom::OpenGLEnum, boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isEnablediOES)(boom::OpenGLEnum, boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isFenceAPPLE)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isFenceNV)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isFramebuffer)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isFramebufferEXT)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isFramebufferOES)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isImageHandleResidentARB)(boom::OpenGLUInt64);
    boom::OpenGLBoolean (*_isImageHandleResidentNV)(boom::OpenGLUInt64);
    boom::OpenGLBoolean (*_isList)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isMemoryObjectEXT)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isNameAMD)(boom::OpenGLEnum, boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isNamedBufferResidentNV)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isNamedStringARB)(boom::OpenGLInt, boom::OpenGLChar const*);
    boom::OpenGLBoolean (*_isObjectBufferATI)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isOcclusionQueryNV)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isPathNV)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isPointInFillPathNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat);
    boom::OpenGLBoolean (*_isPointInStrokePathNV)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat);
    boom::OpenGLBoolean (*_isProgram)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isProgramARB)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isProgramNV)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isProgramPipeline)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isProgramPipelineEXT)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isQuery)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isQueryARB)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isQueryEXT)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isRenderbuffer)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isRenderbufferEXT)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isRenderbufferOES)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isSampler)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isSemaphoreEXT)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isShader)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isStateNV)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isSync)(boom::OpenGLSync);
    boom::OpenGLBoolean (*_isSyncAPPLE)(boom::OpenGLSync);
    boom::OpenGLBoolean (*_isTexture)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isTextureEXT)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isTextureHandleResidentARB)(boom::OpenGLUInt64);
    boom::OpenGLBoolean (*_isTextureHandleResidentNV)(boom::OpenGLUInt64);
    boom::OpenGLBoolean (*_isTransformFeedback)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isTransformFeedbackNV)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isVariantEnabledEXT)(boom::OpenGLUInt, boom::OpenGLEnum);
    boom::OpenGLBoolean (*_isVertexArray)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isVertexArrayAPPLE)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isVertexArrayOES)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_isVertexAttribEnabledAPPLE)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_labelObjectEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_lGPUCopyImageSubDataNVX)(boom::OpenGLUInt, boom::OpenGLBitfield, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_lGPUInterlockNVX)();
    void (*_lGPUNamedBufferSubDataNVX)(boom::OpenGLBitfield, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void const*);
    void (*_lightEnviSGIX)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_lightf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_lightfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_lighti)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_lightiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_lightModelf)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_lightModelfv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_lightModeli)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_lightModeliv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_lightModelx)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_lightModelxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_lightModelxv)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_lightModelxvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_lightx)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_lightxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_lightxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_lightxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_lineStipple)(boom::OpenGLInt, boom::OpenGLUShort);
    void (*_lineWidth)(boom::OpenGLFloat);
    void (*_lineWidthx)(boom::OpenGLFixed);
    void (*_lineWidthxOES)(boom::OpenGLFixed);
    void (*_linkProgram)(boom::OpenGLUInt);
    void (*_linkProgramARB)(boom::OpenGLHandleARB);
    void (*_listBase)(boom::OpenGLUInt);
    void (*_listDrawCommandsStatesClientNV)(boom::OpenGLUInt, boom::OpenGLUInt, void const**, boom::OpenGLSizei const*, boom::OpenGLUInt const*, boom::OpenGLUInt const*, boom::OpenGLUInt);
    void (*_listParameterfSGIX)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_listParameterfvSGIX)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_listParameteriSGIX)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_listParameterivSGIX)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_loadIdentity)();
    void (*_loadIdentityDeformationMapSGIX)(boom::OpenGLBitfield);
    void (*_loadMatrixd)(boom::OpenGLDouble const*);
    void (*_loadMatrixf)(boom::OpenGLFloat const*);
    void (*_loadMatrixx)(boom::OpenGLFixed const*);
    void (*_loadMatrixxOES)(boom::OpenGLFixed const*);
    void (*_loadName)(boom::OpenGLUInt);
    void (*_loadPaletteFromModelViewMatrixOES)();
    void (*_loadProgramNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUByte const*);
    void (*_loadTransposeMatrixd)(boom::OpenGLDouble const*);
    void (*_loadTransposeMatrixdARB)(boom::OpenGLDouble const*);
    void (*_loadTransposeMatrixf)(boom::OpenGLFloat const*);
    void (*_loadTransposeMatrixfARB)(boom::OpenGLFloat const*);
    void (*_loadTransposeMatrixxOES)(boom::OpenGLFixed const*);
    void (*_lockArraysEXT)(boom::OpenGLInt, boom::OpenGLSizei);
    void (*_logicOp)(boom::OpenGLEnum);
    void (*_makeBufferNonResidentNV)(boom::OpenGLEnum);
    void (*_makeBufferResidentNV)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_makeImageHandleNonResidentARB)(boom::OpenGLUInt64);
    void (*_makeImageHandleNonResidentNV)(boom::OpenGLUInt64);
    void (*_makeImageHandleResidentARB)(boom::OpenGLUInt64, boom::OpenGLEnum);
    void (*_makeImageHandleResidentNV)(boom::OpenGLUInt64, boom::OpenGLEnum);
    void (*_makeNamedBufferNonResidentNV)(boom::OpenGLUInt);
    void (*_makeNamedBufferResidentNV)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_makeTextureHandleNonResidentARB)(boom::OpenGLUInt64);
    void (*_makeTextureHandleNonResidentNV)(boom::OpenGLUInt64);
    void (*_makeTextureHandleResidentARB)(boom::OpenGLUInt64);
    void (*_makeTextureHandleResidentNV)(boom::OpenGLUInt64);
    void (*_map1d)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_map1f)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_map1xOES)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFixed);
    void (*_map2d)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_map2f)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_map2xOES)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFixed);
    void* (*_mapBuffer)(boom::OpenGLEnum, boom::OpenGLEnum);
    void* (*_mapBufferARB)(boom::OpenGLEnum, boom::OpenGLEnum);
    void* (*_mapBufferOES)(boom::OpenGLEnum, boom::OpenGLEnum);
    void* (*_mapBufferRange)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBitfield);
    void* (*_mapBufferRangeEXT)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBitfield);
    void (*_mapControlPointsNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBoolean, void const*);
    void (*_mapGrid1d)(boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_mapGrid1f)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_mapGrid1xOES)(boom::OpenGLInt, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_mapGrid2d)(boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_mapGrid2f)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_mapGrid2xOES)(boom::OpenGLInt, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void* (*_mapNamedBuffer)(boom::OpenGLUInt, boom::OpenGLEnum);
    void* (*_mapNamedBufferEXT)(boom::OpenGLUInt, boom::OpenGLEnum);
    void* (*_mapNamedBufferRange)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBitfield);
    void* (*_mapNamedBufferRangeEXT)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBitfield);
    void* (*_mapObjectBufferATI)(boom::OpenGLUInt);
    void (*_mapParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_mapParameterivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void* (*_mapTexture2DINTEL)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLInt*, boom::OpenGLEnum*);
    void (*_mapVertexAttrib1dAPPLE)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_mapVertexAttrib1fAPPLE)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_mapVertexAttrib2dAPPLE)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_mapVertexAttrib2fAPPLE)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_materialf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_materialfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_materiali)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_materialiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_materialx)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_materialxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_materialxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_materialxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_matrixFrustumEXT)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_matrixIndexPointerARB)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_matrixIndexPointerOES)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_matrixIndexubvARB)(boom::OpenGLInt, boom::OpenGLUByte const*);
    void (*_matrixIndexuivARB)(boom::OpenGLInt, boom::OpenGLUInt const*);
    void (*_matrixIndexusvARB)(boom::OpenGLInt, boom::OpenGLUShort const*);
    void (*_matrixLoad3x2fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixLoad3x3fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixLoaddEXT)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_matrixLoadfEXT)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixLoadIdentityEXT)(boom::OpenGLEnum);
    void (*_matrixLoadTranspose3x3fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixLoadTransposedEXT)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_matrixLoadTransposefEXT)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixMode)(boom::OpenGLEnum);
    void (*_matrixMult3x2fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixMult3x3fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixMultdEXT)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_matrixMultfEXT)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixMultTranspose3x3fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixMultTransposedEXT)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_matrixMultTransposefEXT)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixOrthoEXT)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_matrixPopEXT)(boom::OpenGLEnum);
    void (*_matrixPushEXT)(boom::OpenGLEnum);
    void (*_matrixRotatedEXT)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_matrixRotatefEXT)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_matrixScaledEXT)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_matrixScalefEXT)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_matrixTranslatedEXT)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_matrixTranslatefEXT)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_maxShaderCompilerThreadsARB)(boom::OpenGLUInt);
    void (*_maxShaderCompilerThreadsKHR)(boom::OpenGLUInt);
    void (*_memoryBarrier)(boom::OpenGLBitfield);
    void (*_memoryBarrierByRegion)(boom::OpenGLBitfield);
    void (*_memoryBarrierEXT)(boom::OpenGLBitfield);
    void (*_memoryObjectParameterivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_minmax)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLBoolean);
    void (*_minmaxEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLBoolean);
    void (*_minSampleShading)(boom::OpenGLFloat);
    void (*_minSampleShadingARB)(boom::OpenGLFloat);
    void (*_minSampleShadingOES)(boom::OpenGLFloat);
    void (*_multicastBarrierNV)();
    void (*_multicastBlitFramebufferNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_multicastBufferSubDataNV)(boom::OpenGLBitfield, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void const*);
    void (*_multicastCopyBufferSubDataNV)(boom::OpenGLUInt, boom::OpenGLBitfield, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_multicastCopyImageSubDataNV)(boom::OpenGLUInt, boom::OpenGLBitfield, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multicastFramebufferSampleLocationsfvNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_multicastGetQueryObjecti64vNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_multicastGetQueryObjectivNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_multicastGetQueryObjectui64vNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt64*);
    void (*_multicastGetQueryObjectuivNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt*);
    void (*_multicastScissorArrayvNVX)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_multicastViewportArrayvNVX)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_multicastViewportPositionWScaleNVX)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multicastWaitSyncNV)(boom::OpenGLUInt, boom::OpenGLBitfield);
    void (*_multiDrawArrays)(boom::OpenGLEnum, boom::OpenGLInt const*, boom::OpenGLSizei const*, boom::OpenGLSizei);
    void (*_multiDrawArraysEXT)(boom::OpenGLEnum, boom::OpenGLInt const*, boom::OpenGLSizei const*, boom::OpenGLSizei);
    void (*_multiDrawArraysIndirect)(boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawArraysIndirectAMD)(boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawArraysIndirectBindlessCountNV)(boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiDrawArraysIndirectBindlessNV)(boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiDrawArraysIndirectCount)(boom::OpenGLEnum, void const*, boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawArraysIndirectCountARB)(boom::OpenGLEnum, void const*, boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawArraysIndirectEXT)(boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawElementArrayAPPLE)(boom::OpenGLEnum, boom::OpenGLInt const*, boom::OpenGLSizei const*, boom::OpenGLSizei);
    void (*_multiDrawElements)(boom::OpenGLEnum, boom::OpenGLSizei const*, boom::OpenGLEnum, void const* const*, boom::OpenGLSizei);
    void (*_multiDrawElementsBaseVertex)(boom::OpenGLEnum, boom::OpenGLSizei const*, boom::OpenGLEnum, void const* const*, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_multiDrawElementsBaseVertexEXT)(boom::OpenGLEnum, boom::OpenGLSizei const*, boom::OpenGLEnum, void const* const*, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_multiDrawElementsEXT)(boom::OpenGLEnum, boom::OpenGLSizei const*, boom::OpenGLEnum, void const* const*, boom::OpenGLSizei);
    void (*_multiDrawElementsIndirect)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawElementsIndirectAMD)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawElementsIndirectBindlessCountNV)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiDrawElementsIndirectBindlessNV)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiDrawElementsIndirectCount)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawElementsIndirectCountARB)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawElementsIndirectEXT)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawMeshTasksIndirectCountNV)(boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawMeshTasksIndirectNV)(boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawRangeElementArrayAPPLE)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt const*, boom::OpenGLSizei const*, boom::OpenGLSizei);
    void (*_multiModeDrawArraysIBM)(boom::OpenGLEnum const*, boom::OpenGLInt const*, boom::OpenGLSizei const*, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiModeDrawElementsIBM)(boom::OpenGLEnum const*, boom::OpenGLSizei const*, boom::OpenGLEnum, void const* const*, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiTexBufferEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_multiTexCoord1bOES)(boom::OpenGLEnum, boom::OpenGLByte);
    void (*_multiTexCoord1bvOES)(boom::OpenGLEnum, boom::OpenGLByte const*);
    void (*_multiTexCoord1d)(boom::OpenGLEnum, boom::OpenGLDouble);
    void (*_multiTexCoord1dARB)(boom::OpenGLEnum, boom::OpenGLDouble);
    void (*_multiTexCoord1dv)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord1dvARB)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord1f)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_multiTexCoord1fARB)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_multiTexCoord1fv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord1fvARB)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord1hNV)(boom::OpenGLEnum, boom::OpenGLHalfNV);
    void (*_multiTexCoord1hvNV)(boom::OpenGLEnum, boom::OpenGLHalfNV const*);
    void (*_multiTexCoord1i)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_multiTexCoord1iARB)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_multiTexCoord1iv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord1ivARB)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord1s)(boom::OpenGLEnum, boom::OpenGLShort);
    void (*_multiTexCoord1sARB)(boom::OpenGLEnum, boom::OpenGLShort);
    void (*_multiTexCoord1sv)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord1svARB)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord1xOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_multiTexCoord1xvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_multiTexCoord2bOES)(boom::OpenGLEnum, boom::OpenGLByte, boom::OpenGLByte);
    void (*_multiTexCoord2bvOES)(boom::OpenGLEnum, boom::OpenGLByte const*);
    void (*_multiTexCoord2d)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord2dARB)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord2dv)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord2dvARB)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord2f)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord2fARB)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord2fv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord2fvARB)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord2hNV)(boom::OpenGLEnum, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_multiTexCoord2hvNV)(boom::OpenGLEnum, boom::OpenGLHalfNV const*);
    void (*_multiTexCoord2i)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord2iARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord2iv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord2ivARB)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord2s)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord2sARB)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord2sv)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord2svARB)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord2xOES)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_multiTexCoord2xvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_multiTexCoord3bOES)(boom::OpenGLEnum, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_multiTexCoord3bvOES)(boom::OpenGLEnum, boom::OpenGLByte const*);
    void (*_multiTexCoord3d)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord3dARB)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord3dv)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord3dvARB)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord3f)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord3fARB)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord3fv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord3fvARB)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord3hNV)(boom::OpenGLEnum, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_multiTexCoord3hvNV)(boom::OpenGLEnum, boom::OpenGLHalfNV const*);
    void (*_multiTexCoord3i)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord3iARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord3iv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord3ivARB)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord3s)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord3sARB)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord3sv)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord3svARB)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord3xOES)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_multiTexCoord3xvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_multiTexCoord4bOES)(boom::OpenGLEnum, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_multiTexCoord4bvOES)(boom::OpenGLEnum, boom::OpenGLByte const*);
    void (*_multiTexCoord4d)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord4dARB)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord4dv)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord4dvARB)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord4f)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord4fARB)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord4fv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord4fvARB)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord4hNV)(boom::OpenGLEnum, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_multiTexCoord4hvNV)(boom::OpenGLEnum, boom::OpenGLHalfNV const*);
    void (*_multiTexCoord4i)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord4iARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord4iv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord4ivARB)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord4s)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord4sARB)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord4sv)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord4svARB)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord4x)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_multiTexCoord4xOES)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_multiTexCoord4xvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_multiTexCoordP1ui)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_multiTexCoordP1uiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_multiTexCoordP2ui)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_multiTexCoordP2uiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_multiTexCoordP3ui)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_multiTexCoordP3uiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_multiTexCoordP4ui)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_multiTexCoordP4uiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_multiTexCoordPointerEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_multiTexEnvfEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_multiTexEnvfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexEnviEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_multiTexEnvivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexGendEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble);
    void (*_multiTexGendvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexGenfEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_multiTexGenfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexGeniEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_multiTexGenivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multiTexImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multiTexImage3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multiTexParameterfEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_multiTexParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexParameteriEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_multiTexParameterIivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexParameterIuivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_multiTexParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexRenderbufferEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_multiTexSubImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multiTexSubImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multiTexSubImage3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multMatrixd)(boom::OpenGLDouble const*);
    void (*_multMatrixf)(boom::OpenGLFloat const*);
    void (*_multMatrixx)(boom::OpenGLFixed const*);
    void (*_multMatrixxOES)(boom::OpenGLFixed const*);
    void (*_multTransposeMatrixd)(boom::OpenGLDouble const*);
    void (*_multTransposeMatrixdARB)(boom::OpenGLDouble const*);
    void (*_multTransposeMatrixf)(boom::OpenGLFloat const*);
    void (*_multTransposeMatrixfARB)(boom::OpenGLFloat const*);
    void (*_multTransposeMatrixxOES)(boom::OpenGLFixed const*);
    void (*_namedBufferAttachMemoryNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_namedBufferData)(boom::OpenGLUInt, boom::OpenGLSizeiptr, void const*, boom::OpenGLEnum);
    void (*_namedBufferDataEXT)(boom::OpenGLUInt, boom::OpenGLSizeiptr, void const*, boom::OpenGLEnum);
    void (*_namedBufferPageCommitmentARB)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBoolean);
    void (*_namedBufferPageCommitmentEXT)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBoolean);
    void (*_namedBufferPageCommitmentMemNV)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLUInt, boom::OpenGLUInt64, boom::OpenGLBoolean);
    void (*_namedBufferStorage)(boom::OpenGLUInt, boom::OpenGLSizeiptr, void const*, boom::OpenGLBitfield);
    void (*_namedBufferStorageEXT)(boom::OpenGLUInt, boom::OpenGLSizeiptr, void const*, boom::OpenGLBitfield);
    void (*_namedBufferStorageExternalEXT)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLEGLClientBufferEXT, boom::OpenGLBitfield);
    void (*_namedBufferStorageMemEXT)(boom::OpenGLUInt, boom::OpenGLSizeiptr, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_namedBufferSubData)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void const*);
    void (*_namedBufferSubDataEXT)(boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void const*);
    void (*_namedCopyBufferSubDataEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_namedFramebufferDrawBuffer)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_namedFramebufferDrawBuffers)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_namedFramebufferParameteri)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_namedFramebufferParameteriEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_namedFramebufferReadBuffer)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_namedFramebufferRenderbuffer)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_namedFramebufferRenderbufferEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_namedFramebufferSampleLocationsfvARB)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_namedFramebufferSampleLocationsfvNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_namedFramebufferSamplePositionsfvAMD)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_namedFramebufferTexture)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_namedFramebufferTexture1DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_namedFramebufferTexture2DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_namedFramebufferTexture3DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_namedFramebufferTextureEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt);
    void (*_namedFramebufferTextureFaceEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum);
    void (*_namedFramebufferTextureLayer)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_namedFramebufferTextureLayerEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_namedProgramLocalParameter4dEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_namedProgramLocalParameter4dvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_namedProgramLocalParameter4fEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_namedProgramLocalParameter4fvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_namedProgramLocalParameterI4iEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_namedProgramLocalParameterI4ivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_namedProgramLocalParameterI4uiEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_namedProgramLocalParameterI4uivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_namedProgramLocalParameters4fvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_namedProgramLocalParametersI4ivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_namedProgramLocalParametersI4uivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_namedProgramStringEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_namedRenderbufferStorage)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedRenderbufferStorageEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedRenderbufferStorageMultisample)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedRenderbufferStorageMultisampleAdvancedAMD)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedRenderbufferStorageMultisampleCoverageEXT)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedRenderbufferStorageMultisampleEXT)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedStringARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLChar const*, boom::OpenGLInt, boom::OpenGLChar const*);
    void (*_newList)(boom::OpenGLUInt, boom::OpenGLEnum);
    boom::OpenGLUInt (*_newObjectBufferATI)(boom::OpenGLSizei, void const*, boom::OpenGLEnum);
    void (*_normal3b)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_normal3bv)(boom::OpenGLByte const*);
    void (*_normal3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_normal3dv)(boom::OpenGLDouble const*);
    void (*_normal3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_normal3fv)(boom::OpenGLFloat const*);
    void (*_normal3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_normal3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_normal3hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_normal3hvNV)(boom::OpenGLHalfNV const*);
    void (*_normal3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_normal3iv)(boom::OpenGLInt const*);
    void (*_normal3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_normal3sv)(boom::OpenGLShort const*);
    void (*_normal3x)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_normal3xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_normal3xvOES)(boom::OpenGLFixed const*);
    void (*_normalFormatNV)(boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_normalP3ui)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_normalP3uiv)(boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_normalPointer)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_normalPointerEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, void const*);
    void (*_normalPointerListIBM)(boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_normalPointervINTEL)(boom::OpenGLEnum, void const**);
    void (*_normalStream3bATI)(boom::OpenGLEnum, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_normalStream3bvATI)(boom::OpenGLEnum, boom::OpenGLByte const*);
    void (*_normalStream3dATI)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_normalStream3dvATI)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_normalStream3fATI)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_normalStream3fvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_normalStream3iATI)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_normalStream3ivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_normalStream3sATI)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_normalStream3svATI)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_objectLabel)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_objectLabelKHR)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_objectPtrLabel)(void const*, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_objectPtrLabelKHR)(void const*, boom::OpenGLSizei, boom::OpenGLChar const*);
    boom::OpenGLEnum (*_objectPurgeableAPPLE)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum);
    boom::OpenGLEnum (*_objectUnpurgeableAPPLE)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_ortho)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_orthof)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_orthofOES)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_orthox)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_orthoxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_passTexCoordATI)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_passThrough)(boom::OpenGLFloat);
    void (*_passThroughxOES)(boom::OpenGLFixed);
    void (*_patchParameterfv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_patchParameteri)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_patchParameteriEXT)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_patchParameteriOES)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pathColorGenNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pathCommandsNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUByte const*, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_pathCoordsNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_pathCoverDepthFuncNV)(boom::OpenGLEnum);
    void (*_pathDashArrayNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_pathFogGenNV)(boom::OpenGLEnum);
    boom::OpenGLEnum (*_pathGlyphIndexArrayNV)(boom::OpenGLUInt, boom::OpenGLEnum, void const*, boom::OpenGLBitfield, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLFloat);
    boom::OpenGLEnum (*_pathGlyphIndexRangeNV)(boom::OpenGLEnum, void const*, boom::OpenGLBitfield, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLUInt*);
    void (*_pathGlyphRangeNV)(boom::OpenGLUInt, boom::OpenGLEnum, void const*, boom::OpenGLBitfield, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat);
    void (*_pathGlyphsNV)(boom::OpenGLUInt, boom::OpenGLEnum, void const*, boom::OpenGLBitfield, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat);
    boom::OpenGLEnum (*_pathMemoryGlyphIndexArrayNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizeiptr, void const*, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLFloat);
    void (*_pathParameterfNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pathParameterfvNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pathParameteriNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pathParameterivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_pathStencilDepthOffsetNV)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_pathStencilFuncNV)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUInt);
    void (*_pathStringNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_pathSubCommandsNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUByte const*, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_pathSubCoordsNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_pathTexGenNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_pauseTransformFeedback)();
    void (*_pauseTransformFeedbackNV)();
    void (*_pixelDataRangeNV)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_pixelMapfv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_pixelMapuiv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_pixelMapusv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUShort const*);
    void (*_pixelMapx)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFixed const*);
    void (*_pixelStoref)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pixelStorei)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pixelStorex)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_pixelTexGenParameterfSGIS)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pixelTexGenParameterfvSGIS)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pixelTexGenParameteriSGIS)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pixelTexGenParameterivSGIS)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_pixelTexGenSGIX)(boom::OpenGLEnum);
    void (*_pixelTransferf)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pixelTransferi)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pixelTransferxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_pixelTransformParameterfEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pixelTransformParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pixelTransformParameteriEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pixelTransformParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_pixelZoom)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_pixelZoomxOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_pNTrianglesfATI)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pNTrianglesiATI)(boom::OpenGLEnum, boom::OpenGLInt);
    boom::OpenGLBoolean (*_pointAlongPathNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLFloat, boom::OpenGLFloat*, boom::OpenGLFloat*, boom::OpenGLFloat*, boom::OpenGLFloat*);
    void (*_pointParameterf)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pointParameterfARB)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pointParameterfEXT)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pointParameterfSGIS)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pointParameterfv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pointParameterfvARB)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pointParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pointParameterfvSGIS)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pointParameteri)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pointParameteriNV)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pointParameteriv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_pointParameterivNV)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_pointParameterx)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_pointParameterxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_pointParameterxv)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_pointParameterxvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_pointSize)(boom::OpenGLFloat);
    void (*_pointSizePointerOES)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_pointSizex)(boom::OpenGLFixed);
    void (*_pointSizexOES)(boom::OpenGLFixed);
    boom::OpenGLInt (*_pollAsyncSGIX)(boom::OpenGLUInt*);
    boom::OpenGLInt (*_pollInstrumentsSGIX)(boom::OpenGLInt*);
    void (*_polygonMode)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_polygonModeNV)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_polygonOffset)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_polygonOffsetClamp)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_polygonOffsetClampEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_polygonOffsetEXT)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_polygonOffsetx)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_polygonOffsetxOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_polygonStipple)(boom::OpenGLUByte const*);
    void (*_popAttrib)();
    void (*_popClientAttrib)();
    void (*_popDebugGroup)();
    void (*_popDebugGroupKHR)();
    void (*_popGroupMarkerEXT)();
    void (*_popMatrix)();
    void (*_popName)();
    void (*_presentFrameDualFillNV)(boom::OpenGLUInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_presentFrameKeyedNV)(boom::OpenGLUInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_primitiveBoundingBox)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_primitiveBoundingBoxARB)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_primitiveBoundingBoxEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_primitiveBoundingBoxOES)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_primitiveRestartIndex)(boom::OpenGLUInt);
    void (*_primitiveRestartIndexNV)(boom::OpenGLUInt);
    void (*_primitiveRestartNV)();
    void (*_prioritizeTextures)(boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLFloat const*);
    void (*_prioritizeTexturesEXT)(boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLClampf const*);
    void (*_prioritizeTexturesxOES)(boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLFixed const*);
    void (*_programBinary)(boom::OpenGLUInt, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_programBinaryOES)(boom::OpenGLUInt, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_programBufferParametersfvNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programBufferParametersIivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programBufferParametersIuivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programEnvParameter4dARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programEnvParameter4dvARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_programEnvParameter4fARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programEnvParameter4fvARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_programEnvParameterI4iNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programEnvParameterI4ivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_programEnvParameterI4uiNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_programEnvParameterI4uivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_programEnvParameters4fvEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programEnvParametersI4ivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programEnvParametersI4uivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programLocalParameter4dARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programLocalParameter4dvARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_programLocalParameter4fARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programLocalParameter4fvARB)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_programLocalParameterI4iNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programLocalParameterI4ivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_programLocalParameterI4uiNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_programLocalParameterI4uivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_programLocalParameters4fvEXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programLocalParametersI4ivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programLocalParametersI4uivNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programNamedParameter4dNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUByte const*, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programNamedParameter4dvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUByte const*, boom::OpenGLDouble const*);
    void (*_programNamedParameter4fNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUByte const*, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programNamedParameter4fvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUByte const*, boom::OpenGLFloat const*);
    void (*_programParameter4dNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programParameter4dvNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_programParameter4fNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programParameter4fvNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_programParameteri)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_programParameteriARB)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_programParameteriEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_programParameters4dvNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programParameters4fvNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programPathFragmentInputGenNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_programStringARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_programSubroutineParametersuivNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programUniform1d)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLDouble);
    void (*_programUniform1dEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLDouble);
    void (*_programUniform1dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform1dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform1f)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLFloat);
    void (*_programUniform1fEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLFloat);
    void (*_programUniform1fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform1fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform1i)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform1i64ARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt64);
    void (*_programUniform1i64NV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt64EXT);
    void (*_programUniform1i64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_programUniform1i64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_programUniform1iEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform1iv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform1ivEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform1ui)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt);
    void (*_programUniform1ui64ARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_programUniform1ui64NV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64EXT);
    void (*_programUniform1ui64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniform1ui64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_programUniform1uiEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt);
    void (*_programUniform1uiv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programUniform1uivEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programUniform2d)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform2dEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform2dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform2dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform2f)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform2fEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform2fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform2fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform2i)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform2i64ARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_programUniform2i64NV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_programUniform2i64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_programUniform2i64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_programUniform2iEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform2iv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform2ivEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform2ui)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_programUniform2ui64ARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_programUniform2ui64NV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_programUniform2ui64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniform2ui64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_programUniform2uiEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_programUniform2uiv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programUniform2uivEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programUniform3d)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform3dEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform3dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform3dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform3f)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform3fEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform3fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform3fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform3i)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform3i64ARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_programUniform3i64NV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_programUniform3i64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_programUniform3i64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_programUniform3iEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform3iv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform3ivEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform3ui)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_programUniform3ui64ARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_programUniform3ui64NV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_programUniform3ui64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniform3ui64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_programUniform3uiEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_programUniform3uiv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programUniform3uivEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programUniform4d)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform4dEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform4dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform4dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform4f)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform4fEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform4fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform4fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform4i)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform4i64ARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_programUniform4i64NV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_programUniform4i64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_programUniform4i64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_programUniform4iEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform4iv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform4ivEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform4ui)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_programUniform4ui64ARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_programUniform4ui64NV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_programUniform4ui64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniform4ui64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_programUniform4uiEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_programUniform4uiv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programUniform4uivEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_programUniformHandleui64ARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_programUniformHandleui64IMG)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_programUniformHandleui64NV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_programUniformHandleui64vARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniformHandleui64vIMG)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniformHandleui64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniformMatrix2dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix2fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix2x3dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2x3dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2x3fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix2x3fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix2x4dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2x4dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2x4fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix2x4fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3x2dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3x2dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3x2fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3x2fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3x4dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3x4dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3x4fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3x4fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4x2dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4x2dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4x2fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4x2fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4x3dv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4x3dvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4x3fv)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4x3fvEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformui64NV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt64EXT);
    void (*_programUniformui64vNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_programVertexLimitNV)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_provokingVertex)(boom::OpenGLEnum);
    void (*_provokingVertexEXT)(boom::OpenGLEnum);
    void (*_pushAttrib)(boom::OpenGLBitfield);
    void (*_pushClientAttrib)(boom::OpenGLBitfield);
    void (*_pushClientAttribDefaultEXT)(boom::OpenGLBitfield);
    void (*_pushDebugGroup)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_pushDebugGroupKHR)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_pushGroupMarkerEXT)(boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_pushMatrix)();
    void (*_pushName)(boom::OpenGLUInt);
    void (*_queryCounter)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_queryCounterEXT)(boom::OpenGLUInt, boom::OpenGLEnum);
    boom::OpenGLBitfield (*_queryMatrixxOES)(boom::OpenGLFixed*, boom::OpenGLInt*);
    void (*_queryObjectParameteruiAMD)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt);
    boom::OpenGLInt (*_queryResourceNV)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLInt*);
    void (*_queryResourceTagNV)(boom::OpenGLInt, boom::OpenGLChar const*);
    void (*_rasterPos2d)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_rasterPos2dv)(boom::OpenGLDouble const*);
    void (*_rasterPos2f)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_rasterPos2fv)(boom::OpenGLFloat const*);
    void (*_rasterPos2i)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_rasterPos2iv)(boom::OpenGLInt const*);
    void (*_rasterPos2s)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_rasterPos2sv)(boom::OpenGLShort const*);
    void (*_rasterPos2xOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_rasterPos2xvOES)(boom::OpenGLFixed const*);
    void (*_rasterPos3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_rasterPos3dv)(boom::OpenGLDouble const*);
    void (*_rasterPos3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_rasterPos3fv)(boom::OpenGLFloat const*);
    void (*_rasterPos3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_rasterPos3iv)(boom::OpenGLInt const*);
    void (*_rasterPos3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_rasterPos3sv)(boom::OpenGLShort const*);
    void (*_rasterPos3xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_rasterPos3xvOES)(boom::OpenGLFixed const*);
    void (*_rasterPos4d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_rasterPos4dv)(boom::OpenGLDouble const*);
    void (*_rasterPos4f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_rasterPos4fv)(boom::OpenGLFloat const*);
    void (*_rasterPos4i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_rasterPos4iv)(boom::OpenGLInt const*);
    void (*_rasterPos4s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_rasterPos4sv)(boom::OpenGLShort const*);
    void (*_rasterPos4xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_rasterPos4xvOES)(boom::OpenGLFixed const*);
    void (*_rasterSamplesEXT)(boom::OpenGLUInt, boom::OpenGLBoolean);
    void (*_readBuffer)(boom::OpenGLEnum);
    void (*_readBufferIndexedEXT)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_readBufferNV)(boom::OpenGLEnum);
    void (*_readInstrumentsSGIX)(boom::OpenGLInt);
    void (*_readnPixels)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_readnPixelsARB)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_readnPixelsEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_readnPixelsKHR)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_readPixels)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_rectd)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_rectdv)(boom::OpenGLDouble const*, boom::OpenGLDouble const*);
    void (*_rectf)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_rectfv)(boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_recti)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_rectiv)(boom::OpenGLInt const*, boom::OpenGLInt const*);
    void (*_rects)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_rectsv)(boom::OpenGLShort const*, boom::OpenGLShort const*);
    void (*_rectxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_rectxvOES)(boom::OpenGLFixed const*, boom::OpenGLFixed const*);
    void (*_referencePlaneSGIX)(boom::OpenGLDouble const*);
    boom::OpenGLBoolean (*_releaseKeyedMutexWin32EXT)(boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_releaseShaderCompiler)();
    void (*_renderbufferStorage)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisample)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleAdvancedAMD)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleANGLE)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleAPPLE)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleCoverageNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleIMG)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderGpuMaskNV)(boom::OpenGLBitfield);
    boom::OpenGLInt (*_renderMode)(boom::OpenGLEnum);
    void (*_replacementCodePointerSUN)(boom::OpenGLEnum, boom::OpenGLSizei, void const**);
    void (*_replacementCodeubSUN)(boom::OpenGLUByte);
    void (*_replacementCodeubvSUN)(boom::OpenGLUByte const*);
    void (*_replacementCodeuiColor3fVertex3fSUN)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiColor3fVertex3fvSUN)(boom::OpenGLUInt const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiColor4fNormal3fVertex3fSUN)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiColor4fNormal3fVertex3fvSUN)(boom::OpenGLUInt const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiColor4ubVertex3fSUN)(boom::OpenGLUInt, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiColor4ubVertex3fvSUN)(boom::OpenGLUInt const*, boom::OpenGLUByte const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiNormal3fVertex3fSUN)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiNormal3fVertex3fvSUN)(boom::OpenGLUInt const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiSUN)(boom::OpenGLUInt);
    void (*_replacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(boom::OpenGLUInt const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiTexCoord2fNormal3fVertex3fSUN)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(boom::OpenGLUInt const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiTexCoord2fVertex3fSUN)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiTexCoord2fVertex3fvSUN)(boom::OpenGLUInt const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiVertex3fSUN)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiVertex3fvSUN)(boom::OpenGLUInt const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuivSUN)(boom::OpenGLUInt const*);
    void (*_replacementCodeusSUN)(boom::OpenGLUShort);
    void (*_replacementCodeusvSUN)(boom::OpenGLUShort const*);
    void (*_requestResidentProgramsNV)(boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_resetHistogram)(boom::OpenGLEnum);
    void (*_resetHistogramEXT)(boom::OpenGLEnum);
    void (*_resetMemoryObjectParameterNV)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_resetMinmax)(boom::OpenGLEnum);
    void (*_resetMinmaxEXT)(boom::OpenGLEnum);
    void (*_resizeBuffersMESA)();
    void (*_resolveDepthValuesNV)();
    void (*_resolveMultisampleFramebufferAPPLE)();
    void (*_resumeTransformFeedback)();
    void (*_resumeTransformFeedbackNV)();
    void (*_rotated)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_rotatef)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_rotatex)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_rotatexOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_sampleCoverage)(boom::OpenGLFloat, boom::OpenGLBoolean);
    void (*_sampleCoverageARB)(boom::OpenGLFloat, boom::OpenGLBoolean);
    void (*_sampleCoveragex)(boom::OpenGLClampx, boom::OpenGLBoolean);
    void (*_sampleCoveragexOES)(boom::OpenGLClampx, boom::OpenGLBoolean);
    void (*_sampleMapATI)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_sampleMaskEXT)(boom::OpenGLClampf, boom::OpenGLBoolean);
    void (*_sampleMaski)(boom::OpenGLUInt, boom::OpenGLBitfield);
    void (*_sampleMaskIndexedNV)(boom::OpenGLUInt, boom::OpenGLBitfield);
    void (*_sampleMaskSGIS)(boom::OpenGLClampf, boom::OpenGLBoolean);
    void (*_samplePatternEXT)(boom::OpenGLEnum);
    void (*_samplePatternSGIS)(boom::OpenGLEnum);
    void (*_samplerParameterf)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_samplerParameterfv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_samplerParameteri)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_samplerParameterIiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_samplerParameterIivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_samplerParameterIivOES)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_samplerParameterIuiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_samplerParameterIuivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_samplerParameterIuivOES)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_samplerParameteriv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_scaled)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_scalef)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_scalex)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_scalexOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_scissor)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_scissorArrayv)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_scissorArrayvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_scissorArrayvOES)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_scissorExclusiveArrayvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_scissorExclusiveNV)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_scissorIndexed)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_scissorIndexedNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_scissorIndexedOES)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_scissorIndexedv)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_scissorIndexedvNV)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_scissorIndexedvOES)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_secondaryColor3b)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_secondaryColor3bEXT)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_secondaryColor3bv)(boom::OpenGLByte const*);
    void (*_secondaryColor3bvEXT)(boom::OpenGLByte const*);
    void (*_secondaryColor3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_secondaryColor3dEXT)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_secondaryColor3dv)(boom::OpenGLDouble const*);
    void (*_secondaryColor3dvEXT)(boom::OpenGLDouble const*);
    void (*_secondaryColor3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_secondaryColor3fEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_secondaryColor3fv)(boom::OpenGLFloat const*);
    void (*_secondaryColor3fvEXT)(boom::OpenGLFloat const*);
    void (*_secondaryColor3hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_secondaryColor3hvNV)(boom::OpenGLHalfNV const*);
    void (*_secondaryColor3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_secondaryColor3iEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_secondaryColor3iv)(boom::OpenGLInt const*);
    void (*_secondaryColor3ivEXT)(boom::OpenGLInt const*);
    void (*_secondaryColor3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_secondaryColor3sEXT)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_secondaryColor3sv)(boom::OpenGLShort const*);
    void (*_secondaryColor3svEXT)(boom::OpenGLShort const*);
    void (*_secondaryColor3ub)(boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte);
    void (*_secondaryColor3ubEXT)(boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte);
    void (*_secondaryColor3ubv)(boom::OpenGLUByte const*);
    void (*_secondaryColor3ubvEXT)(boom::OpenGLUByte const*);
    void (*_secondaryColor3ui)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_secondaryColor3uiEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_secondaryColor3uiv)(boom::OpenGLUInt const*);
    void (*_secondaryColor3uivEXT)(boom::OpenGLUInt const*);
    void (*_secondaryColor3us)(boom::OpenGLUShort, boom::OpenGLUShort, boom::OpenGLUShort);
    void (*_secondaryColor3usEXT)(boom::OpenGLUShort, boom::OpenGLUShort, boom::OpenGLUShort);
    void (*_secondaryColor3usv)(boom::OpenGLUShort const*);
    void (*_secondaryColor3usvEXT)(boom::OpenGLUShort const*);
    void (*_secondaryColorFormatNV)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_secondaryColorP3ui)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_secondaryColorP3uiv)(boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_secondaryColorPointer)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_secondaryColorPointerEXT)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_secondaryColorPointerListIBM)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_selectBuffer)(boom::OpenGLSizei, boom::OpenGLUInt*);
    void (*_selectPerfMonitorCountersAMD)(boom::OpenGLUInt, boom::OpenGLBoolean, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt*);
    void (*_semaphoreParameterivNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_semaphoreParameterui64vEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt64 const*);
    void (*_separableFilter2D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*, void const*);
    void (*_separableFilter2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*, void const*);
    void (*_setFenceAPPLE)(boom::OpenGLUInt);
    void (*_setFenceNV)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_setFragmentShaderConstantATI)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_setInvariantEXT)(boom::OpenGLUInt, boom::OpenGLEnum, void const*);
    void (*_setLocalConstantEXT)(boom::OpenGLUInt, boom::OpenGLEnum, void const*);
    void (*_setMultisamplefvAMD)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_shadeModel)(boom::OpenGLEnum);
    void (*_shaderBinary)(boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_shaderOp1EXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_shaderOp2EXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_shaderOp3EXT)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_shaderSource)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLChar const* const*, boom::OpenGLInt const*);
    void (*_shaderSourceARB)(boom::OpenGLHandleARB, boom::OpenGLSizei, boom::OpenGLCharARB const**, boom::OpenGLInt const*);
    void (*_shaderStorageBlockBinding)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_shadingRateCombinerOpsEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_shadingRateEXT)(boom::OpenGLEnum);
    void (*_shadingRateImageBarrierNV)(boom::OpenGLBoolean);
    void (*_shadingRateImagePaletteNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_shadingRateQCOM)(boom::OpenGLEnum);
    void (*_shadingRateSampleOrderCustomNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_shadingRateSampleOrderNV)(boom::OpenGLEnum);
    void (*_sharpenTexFuncSGIS)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_signalSemaphoreEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt const*, boom::OpenGLUInt, boom::OpenGLUInt const*, boom::OpenGLEnum const*);
    void (*_signalSemaphoreui64NVX)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLUInt64 const*);
    void (*_signalVkFenceNV)(boom::OpenGLUInt64);
    void (*_signalVkSemaphoreNV)(boom::OpenGLUInt64);
    void (*_specializeShader)(boom::OpenGLUInt, boom::OpenGLChar const*, boom::OpenGLUInt, boom::OpenGLUInt const*, boom::OpenGLUInt const*);
    void (*_specializeShaderARB)(boom::OpenGLUInt, boom::OpenGLChar const*, boom::OpenGLUInt, boom::OpenGLUInt const*, boom::OpenGLUInt const*);
    void (*_spriteParameterfSGIX)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_spriteParameterfvSGIX)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_spriteParameteriSGIX)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_spriteParameterivSGIX)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_startInstrumentsSGIX)();
    void (*_startTilingQCOM)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLBitfield);
    void (*_stateCaptureNV)(boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_stencilClearTagEXT)(boom::OpenGLSizei, boom::OpenGLUInt);
    void (*_stencilFillPathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_stencilFillPathNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_stencilFunc)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUInt);
    void (*_stencilFuncSeparate)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUInt);
    void (*_stencilFuncSeparateATI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUInt);
    void (*_stencilMask)(boom::OpenGLUInt);
    void (*_stencilMaskSeparate)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_stencilOp)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_stencilOpSeparate)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_stencilOpSeparateATI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_stencilOpValueAMD)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_stencilStrokePathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_stencilStrokePathNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt);
    void (*_stencilThenCoverFillPathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_stencilThenCoverFillPathNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_stencilThenCoverStrokePathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_stencilThenCoverStrokePathNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLEnum);
    void (*_stopInstrumentsSGIX)(boom::OpenGLInt);
    void (*_stringMarkerGREMEDY)(boom::OpenGLSizei, void const*);
    void (*_subpixelPrecisionBiasNV)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_swizzleEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_syncTextureINTEL)(boom::OpenGLUInt);
    void (*_tagSampleBufferSGIX)();
    void (*_tangent3bEXT)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_tangent3bvEXT)(boom::OpenGLByte const*);
    void (*_tangent3dEXT)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_tangent3dvEXT)(boom::OpenGLDouble const*);
    void (*_tangent3fEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_tangent3fvEXT)(boom::OpenGLFloat const*);
    void (*_tangent3iEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_tangent3ivEXT)(boom::OpenGLInt const*);
    void (*_tangent3sEXT)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_tangent3svEXT)(boom::OpenGLShort const*);
    void (*_tangentPointerEXT)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_tbufferMask3DFX)(boom::OpenGLUInt);
    void (*_tessellationFactorAMD)(boom::OpenGLFloat);
    void (*_tessellationModeAMD)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_testFenceAPPLE)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_testFenceNV)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_testObjectAPPLE)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_texAttachMemoryNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_texBuffer)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_texBufferARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_texBufferEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_texBufferOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_texBufferRange)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_texBufferRangeEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_texBufferRangeOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_texBumpParameterfvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_texBumpParameterivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texCoord1bOES)(boom::OpenGLByte);
    void (*_texCoord1bvOES)(boom::OpenGLByte const*);
    void (*_texCoord1d)(boom::OpenGLDouble);
    void (*_texCoord1dv)(boom::OpenGLDouble const*);
    void (*_texCoord1f)(boom::OpenGLFloat);
    void (*_texCoord1fv)(boom::OpenGLFloat const*);
    void (*_texCoord1hNV)(boom::OpenGLHalfNV);
    void (*_texCoord1hvNV)(boom::OpenGLHalfNV const*);
    void (*_texCoord1i)(boom::OpenGLInt);
    void (*_texCoord1iv)(boom::OpenGLInt const*);
    void (*_texCoord1s)(boom::OpenGLShort);
    void (*_texCoord1sv)(boom::OpenGLShort const*);
    void (*_texCoord1xOES)(boom::OpenGLFixed);
    void (*_texCoord1xvOES)(boom::OpenGLFixed const*);
    void (*_texCoord2bOES)(boom::OpenGLByte, boom::OpenGLByte);
    void (*_texCoord2bvOES)(boom::OpenGLByte const*);
    void (*_texCoord2d)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_texCoord2dv)(boom::OpenGLDouble const*);
    void (*_texCoord2f)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fColor3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fColor3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord2fColor4fNormal3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fColor4fNormal3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord2fColor4ubVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fColor4ubVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLUByte const*, boom::OpenGLFloat const*);
    void (*_texCoord2fNormal3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fNormal3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord2fv)(boom::OpenGLFloat const*);
    void (*_texCoord2fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord2hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_texCoord2hvNV)(boom::OpenGLHalfNV const*);
    void (*_texCoord2i)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_texCoord2iv)(boom::OpenGLInt const*);
    void (*_texCoord2s)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_texCoord2sv)(boom::OpenGLShort const*);
    void (*_texCoord2xOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_texCoord2xvOES)(boom::OpenGLFixed const*);
    void (*_texCoord3bOES)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_texCoord3bvOES)(boom::OpenGLByte const*);
    void (*_texCoord3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_texCoord3dv)(boom::OpenGLDouble const*);
    void (*_texCoord3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord3fv)(boom::OpenGLFloat const*);
    void (*_texCoord3hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_texCoord3hvNV)(boom::OpenGLHalfNV const*);
    void (*_texCoord3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_texCoord3iv)(boom::OpenGLInt const*);
    void (*_texCoord3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_texCoord3sv)(boom::OpenGLShort const*);
    void (*_texCoord3xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_texCoord3xvOES)(boom::OpenGLFixed const*);
    void (*_texCoord4bOES)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_texCoord4bvOES)(boom::OpenGLByte const*);
    void (*_texCoord4d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_texCoord4dv)(boom::OpenGLDouble const*);
    void (*_texCoord4f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord4fColor4fNormal3fVertex4fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord4fColor4fNormal3fVertex4fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord4fv)(boom::OpenGLFloat const*);
    void (*_texCoord4fVertex4fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord4fVertex4fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord4hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_texCoord4hvNV)(boom::OpenGLHalfNV const*);
    void (*_texCoord4i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_texCoord4iv)(boom::OpenGLInt const*);
    void (*_texCoord4s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_texCoord4sv)(boom::OpenGLShort const*);
    void (*_texCoord4xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_texCoord4xvOES)(boom::OpenGLFixed const*);
    void (*_texCoordFormatNV)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_texCoordP1ui)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_texCoordP1uiv)(boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_texCoordP2ui)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_texCoordP2uiv)(boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_texCoordP3ui)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_texCoordP3uiv)(boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_texCoordP4ui)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_texCoordP4uiv)(boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_texCoordPointer)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_texCoordPointerEXT)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, void const*);
    void (*_texCoordPointerListIBM)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_texCoordPointervINTEL)(boom::OpenGLInt, boom::OpenGLEnum, void const**);
    void (*_texEnvf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_texEnvfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_texEnvi)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_texEnviv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texEnvx)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_texEnvxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_texEnvxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_texEnvxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_texEstimateMotionQCOM)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_texEstimateMotionRegionsQCOM)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_texFilterFuncSGIS)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_texGend)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble);
    void (*_texGendv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_texGenf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_texGenfOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_texGenfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_texGenfvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_texGeni)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_texGeniOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_texGeniv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texGenivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texGenxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_texGenxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_texImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texImage2DMultisample)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texImage2DMultisampleCoverageNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texImage3D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texImage3DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texImage3DMultisample)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texImage3DMultisampleCoverageNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texImage3DOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texImage4DSGIS)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texPageCommitmentARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texPageCommitmentEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texPageCommitmentMemNV)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLUInt64, boom::OpenGLBoolean);
    void (*_texParameterf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_texParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_texParameteri)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_texParameterIiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texParameterIivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texParameterIivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texParameterIuiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_texParameterIuivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_texParameterIuivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_texParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texParameterx)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_texParameterxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_texParameterxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_texParameterxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_texRenderbufferNV)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_texStorage1D)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_texStorage1DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_texStorage2D)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_texStorage2DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_texStorage2DMultisample)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texStorage3D)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_texStorage3DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_texStorage3DMultisample)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texStorage3DMultisampleOES)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texStorageAttribs2DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_texStorageAttribs3DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_texStorageMem1DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_texStorageMem2DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_texStorageMem2DMultisampleEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_texStorageMem3DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_texStorageMem3DMultisampleEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_texStorageSparseAMD)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBitfield);
    void (*_texSubImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage1DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage2DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage3D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage3DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage3DOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage4DSGIS)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureAttachMemoryNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_textureBarrier)();
    void (*_textureBarrierNV)();
    void (*_textureBuffer)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_textureBufferEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_textureBufferRange)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_textureBufferRangeEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_textureColorMaskSGIS)(boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_textureFoveationParametersQCOM)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_textureImage1DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureImage2DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureImage2DMultisampleCoverageNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureImage2DMultisampleNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureImage3DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureImage3DMultisampleCoverageNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureImage3DMultisampleNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureLightEXT)(boom::OpenGLEnum);
    void (*_textureMaterialEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_textureNormalEXT)(boom::OpenGLEnum);
    void (*_texturePageCommitmentEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texturePageCommitmentMemNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLUInt64, boom::OpenGLBoolean);
    void (*_textureParameterf)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_textureParameterfEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_textureParameterfv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_textureParameterfvEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_textureParameteri)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_textureParameteriEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_textureParameterIiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_textureParameterIivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_textureParameterIuiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_textureParameterIuivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_textureParameteriv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_textureParameterivEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_textureRangeAPPLE)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_textureRenderbufferEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_textureStorage1D)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_textureStorage1DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_textureStorage2D)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_textureStorage2DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_textureStorage2DMultisample)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureStorage2DMultisampleEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureStorage3D)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_textureStorage3DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_textureStorage3DMultisample)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureStorage3DMultisampleEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureStorageMem1DEXT)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_textureStorageMem2DEXT)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_textureStorageMem2DMultisampleEXT)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_textureStorageMem3DEXT)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_textureStorageMem3DMultisampleEXT)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLUInt, boom::OpenGLUInt64);
    void (*_textureStorageSparseAMD)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBitfield);
    void (*_textureSubImage1D)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureSubImage1DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureSubImage2D)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureSubImage2DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureSubImage3D)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureSubImage3DEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureView)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_textureViewEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_textureViewOES)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_trackMatrixNV)(boom::OpenGLEnum, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_transformFeedbackAttribsNV)(boom::OpenGLSizei, boom::OpenGLInt const*, boom::OpenGLEnum);
    void (*_transformFeedbackBufferBase)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_transformFeedbackBufferRange)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_transformFeedbackStreamAttribsNV)(boom::OpenGLSizei, boom::OpenGLInt const*, boom::OpenGLSizei, boom::OpenGLInt const*, boom::OpenGLEnum);
    void (*_transformFeedbackVaryings)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLChar const* const*, boom::OpenGLEnum);
    void (*_transformFeedbackVaryingsEXT)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLChar const* const*, boom::OpenGLEnum);
    void (*_transformFeedbackVaryingsNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLInt const*, boom::OpenGLEnum);
    void (*_transformPathNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_translated)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_translatef)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_translatex)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_translatexOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_uniform1d)(boom::OpenGLInt, boom::OpenGLDouble);
    void (*_uniform1dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_uniform1f)(boom::OpenGLInt, boom::OpenGLFloat);
    void (*_uniform1fARB)(boom::OpenGLInt, boom::OpenGLFloat);
    void (*_uniform1fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform1fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform1i)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform1i64ARB)(boom::OpenGLInt, boom::OpenGLInt64);
    void (*_uniform1i64NV)(boom::OpenGLInt, boom::OpenGLInt64EXT);
    void (*_uniform1i64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_uniform1i64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_uniform1iARB)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform1iv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform1ivARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform1ui)(boom::OpenGLInt, boom::OpenGLUInt);
    void (*_uniform1ui64ARB)(boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_uniform1ui64NV)(boom::OpenGLInt, boom::OpenGLUInt64EXT);
    void (*_uniform1ui64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniform1ui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_uniform1uiEXT)(boom::OpenGLInt, boom::OpenGLUInt);
    void (*_uniform1uiv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_uniform1uivEXT)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_uniform2d)(boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_uniform2dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_uniform2f)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform2fARB)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform2fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform2fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform2i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform2i64ARB)(boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_uniform2i64NV)(boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_uniform2i64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_uniform2i64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_uniform2iARB)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform2iv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform2ivARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform2ui)(boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_uniform2ui64ARB)(boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_uniform2ui64NV)(boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_uniform2ui64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniform2ui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_uniform2uiEXT)(boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_uniform2uiv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_uniform2uivEXT)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_uniform3d)(boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_uniform3dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_uniform3f)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform3fARB)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform3fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform3fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform3i64ARB)(boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_uniform3i64NV)(boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_uniform3i64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_uniform3i64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_uniform3iARB)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform3iv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform3ivARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform3ui)(boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_uniform3ui64ARB)(boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_uniform3ui64NV)(boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_uniform3ui64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniform3ui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_uniform3uiEXT)(boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_uniform3uiv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_uniform3uivEXT)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_uniform4d)(boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_uniform4dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_uniform4f)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform4fARB)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform4fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform4fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform4i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform4i64ARB)(boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_uniform4i64NV)(boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_uniform4i64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_uniform4i64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_uniform4iARB)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform4iv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform4ivARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform4ui)(boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_uniform4ui64ARB)(boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_uniform4ui64NV)(boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_uniform4ui64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniform4ui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_uniform4uiEXT)(boom::OpenGLInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_uniform4uiv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_uniform4uivEXT)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_uniformBlockBinding)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_uniformBufferEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLUInt);
    void (*_uniformHandleui64ARB)(boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_uniformHandleui64IMG)(boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_uniformHandleui64NV)(boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_uniformHandleui64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniformHandleui64vIMG)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniformHandleui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniformMatrix2dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix2fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix2fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix2x3dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix2x3fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix2x3fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix2x4dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix2x4fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix2x4fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix3fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3x2dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix3x2fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3x2fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3x4dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix3x4fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3x4fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix4fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4x2dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix4x2fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4x2fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4x3dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix4x3fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4x3fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformSubroutinesuiv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt const*);
    void (*_uniformui64NV)(boom::OpenGLInt, boom::OpenGLUInt64EXT);
    void (*_uniformui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_unlockArraysEXT)();
    boom::OpenGLBoolean (*_unmapBuffer)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_unmapBufferARB)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_unmapBufferOES)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_unmapNamedBuffer)(boom::OpenGLUInt);
    boom::OpenGLBoolean (*_unmapNamedBufferEXT)(boom::OpenGLUInt);
    void (*_unmapObjectBufferATI)(boom::OpenGLUInt);
    void (*_unmapTexture2DINTEL)(boom::OpenGLUInt, boom::OpenGLInt);
    void (*_updateObjectBufferATI)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, void const*, boom::OpenGLEnum);
    void (*_uploadGpuMaskNVX)(boom::OpenGLBitfield);
    void (*_useProgram)(boom::OpenGLUInt);
    void (*_useProgramObjectARB)(boom::OpenGLHandleARB);
    void (*_useProgramStages)(boom::OpenGLUInt, boom::OpenGLBitfield, boom::OpenGLUInt);
    void (*_useProgramStagesEXT)(boom::OpenGLUInt, boom::OpenGLBitfield, boom::OpenGLUInt);
    void (*_useShaderProgramEXT)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_validateProgram)(boom::OpenGLUInt);
    void (*_validateProgramARB)(boom::OpenGLHandleARB);
    void (*_validateProgramPipeline)(boom::OpenGLUInt);
    void (*_validateProgramPipelineEXT)(boom::OpenGLUInt);
    void (*_variantArrayObjectATI)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_variantbvEXT)(boom::OpenGLUInt, boom::OpenGLByte const*);
    void (*_variantdvEXT)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_variantfvEXT)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_variantivEXT)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_variantPointerEXT)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLUInt, void const*);
    void (*_variantsvEXT)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_variantubvEXT)(boom::OpenGLUInt, boom::OpenGLUByte const*);
    void (*_variantuivEXT)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_variantusvEXT)(boom::OpenGLUInt, boom::OpenGLUShort const*);
    void (*_vDPAUFiniNV)();
    void (*_vDPAUGetSurfaceivNV)(boom::OpenGLVDPAUSurfaceNV, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*);
    void (*_vDPAUInitNV)(void const*, void const*);
    boom::OpenGLBoolean (*_vDPAUIsSurfaceNV)(boom::OpenGLVDPAUSurfaceNV);
    void (*_vDPAUMapSurfacesNV)(boom::OpenGLSizei, boom::OpenGLVDPAUSurfaceNV const*);
    boom::OpenGLVDPAUSurfaceNV (*_vDPAURegisterOutputSurfaceNV)(void const*, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt const*);
    boom::OpenGLVDPAUSurfaceNV (*_vDPAURegisterVideoSurfaceNV)(void const*, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt const*);
    boom::OpenGLVDPAUSurfaceNV (*_vDPAURegisterVideoSurfaceWithPictureStructureNV)(void const*, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLBoolean);
    void (*_vDPAUSurfaceAccessNV)(boom::OpenGLVDPAUSurfaceNV, boom::OpenGLEnum);
    void (*_vDPAUUnmapSurfacesNV)(boom::OpenGLSizei, boom::OpenGLVDPAUSurfaceNV const*);
    void (*_vDPAUUnregisterSurfaceNV)(boom::OpenGLVDPAUSurfaceNV);
    void (*_vertex2bOES)(boom::OpenGLByte, boom::OpenGLByte);
    void (*_vertex2bvOES)(boom::OpenGLByte const*);
    void (*_vertex2d)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertex2dv)(boom::OpenGLDouble const*);
    void (*_vertex2f)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertex2fv)(boom::OpenGLFloat const*);
    void (*_vertex2hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertex2hvNV)(boom::OpenGLHalfNV const*);
    void (*_vertex2i)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertex2iv)(boom::OpenGLInt const*);
    void (*_vertex2s)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertex2sv)(boom::OpenGLShort const*);
    void (*_vertex2xOES)(boom::OpenGLFixed);
    void (*_vertex2xvOES)(boom::OpenGLFixed const*);
    void (*_vertex3bOES)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_vertex3bvOES)(boom::OpenGLByte const*);
    void (*_vertex3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertex3dv)(boom::OpenGLDouble const*);
    void (*_vertex3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertex3fv)(boom::OpenGLFloat const*);
    void (*_vertex3hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertex3hvNV)(boom::OpenGLHalfNV const*);
    void (*_vertex3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertex3iv)(boom::OpenGLInt const*);
    void (*_vertex3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertex3sv)(boom::OpenGLShort const*);
    void (*_vertex3xOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_vertex3xvOES)(boom::OpenGLFixed const*);
    void (*_vertex4bOES)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_vertex4bvOES)(boom::OpenGLByte const*);
    void (*_vertex4d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertex4dv)(boom::OpenGLDouble const*);
    void (*_vertex4f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertex4fv)(boom::OpenGLFloat const*);
    void (*_vertex4hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertex4hvNV)(boom::OpenGLHalfNV const*);
    void (*_vertex4i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertex4iv)(boom::OpenGLInt const*);
    void (*_vertex4s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertex4sv)(boom::OpenGLShort const*);
    void (*_vertex4xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_vertex4xvOES)(boom::OpenGLFixed const*);
    void (*_vertexArrayAttribBinding)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexArrayAttribFormat)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUInt);
    void (*_vertexArrayAttribIFormat)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_vertexArrayAttribLFormat)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_vertexArrayBindingDivisor)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexArrayBindVertexBufferEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizei);
    void (*_vertexArrayColorOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayEdgeFlagOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayElementBuffer)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexArrayFogCoordOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayIndexOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayMultiTexCoordOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayNormalOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayParameteriAPPLE)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_vertexArrayRangeAPPLE)(boom::OpenGLSizei, void*);
    void (*_vertexArrayRangeNV)(boom::OpenGLSizei, void const*);
    void (*_vertexArraySecondaryColorOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayTexCoordOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayVertexAttribBindingEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexArrayVertexAttribDivisorEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexArrayVertexAttribFormatEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUInt);
    void (*_vertexArrayVertexAttribIFormatEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_vertexArrayVertexAttribIOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayVertexAttribLFormatEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_vertexArrayVertexAttribLOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayVertexAttribOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayVertexBindingDivisorEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexArrayVertexBuffer)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLIntptr, boom::OpenGLSizei);
    void (*_vertexArrayVertexBuffers)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLIntptr const*, boom::OpenGLSizei const*);
    void (*_vertexArrayVertexOffsetEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexAttrib1d)(boom::OpenGLUInt, boom::OpenGLDouble);
    void (*_vertexAttrib1dARB)(boom::OpenGLUInt, boom::OpenGLDouble);
    void (*_vertexAttrib1dNV)(boom::OpenGLUInt, boom::OpenGLDouble);
    void (*_vertexAttrib1dv)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib1dvARB)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib1dvNV)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib1f)(boom::OpenGLUInt, boom::OpenGLFloat);
    void (*_vertexAttrib1fARB)(boom::OpenGLUInt, boom::OpenGLFloat);
    void (*_vertexAttrib1fNV)(boom::OpenGLUInt, boom::OpenGLFloat);
    void (*_vertexAttrib1fv)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib1fvARB)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib1fvNV)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib1hNV)(boom::OpenGLUInt, boom::OpenGLHalfNV);
    void (*_vertexAttrib1hvNV)(boom::OpenGLUInt, boom::OpenGLHalfNV const*);
    void (*_vertexAttrib1s)(boom::OpenGLUInt, boom::OpenGLShort);
    void (*_vertexAttrib1sARB)(boom::OpenGLUInt, boom::OpenGLShort);
    void (*_vertexAttrib1sNV)(boom::OpenGLUInt, boom::OpenGLShort);
    void (*_vertexAttrib1sv)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib1svARB)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib1svNV)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib2d)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib2dARB)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib2dNV)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib2dv)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib2dvARB)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib2dvNV)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib2f)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib2fARB)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib2fNV)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib2fv)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib2fvARB)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib2fvNV)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib2hNV)(boom::OpenGLUInt, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertexAttrib2hvNV)(boom::OpenGLUInt, boom::OpenGLHalfNV const*);
    void (*_vertexAttrib2s)(boom::OpenGLUInt, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib2sARB)(boom::OpenGLUInt, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib2sNV)(boom::OpenGLUInt, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib2sv)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib2svARB)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib2svNV)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib3d)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib3dARB)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib3dNV)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib3dv)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib3dvARB)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib3dvNV)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib3f)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib3fARB)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib3fNV)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib3fv)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib3fvARB)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib3fvNV)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib3hNV)(boom::OpenGLUInt, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertexAttrib3hvNV)(boom::OpenGLUInt, boom::OpenGLHalfNV const*);
    void (*_vertexAttrib3s)(boom::OpenGLUInt, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib3sARB)(boom::OpenGLUInt, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib3sNV)(boom::OpenGLUInt, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib3sv)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib3svARB)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib3svNV)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib4bv)(boom::OpenGLUInt, boom::OpenGLByte const*);
    void (*_vertexAttrib4bvARB)(boom::OpenGLUInt, boom::OpenGLByte const*);
    void (*_vertexAttrib4d)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib4dARB)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib4dNV)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib4dv)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib4dvARB)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib4dvNV)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttrib4f)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib4fARB)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib4fNV)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib4fv)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib4fvARB)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib4fvNV)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_vertexAttrib4hNV)(boom::OpenGLUInt, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertexAttrib4hvNV)(boom::OpenGLUInt, boom::OpenGLHalfNV const*);
    void (*_vertexAttrib4iv)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttrib4ivARB)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttrib4Nbv)(boom::OpenGLUInt, boom::OpenGLByte const*);
    void (*_vertexAttrib4NbvARB)(boom::OpenGLUInt, boom::OpenGLByte const*);
    void (*_vertexAttrib4Niv)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttrib4NivARB)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttrib4Nsv)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib4NsvARB)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib4Nub)(boom::OpenGLUInt, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte);
    void (*_vertexAttrib4NubARB)(boom::OpenGLUInt, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte);
    void (*_vertexAttrib4Nubv)(boom::OpenGLUInt, boom::OpenGLUByte const*);
    void (*_vertexAttrib4NubvARB)(boom::OpenGLUInt, boom::OpenGLUByte const*);
    void (*_vertexAttrib4Nuiv)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttrib4NuivARB)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttrib4Nusv)(boom::OpenGLUInt, boom::OpenGLUShort const*);
    void (*_vertexAttrib4NusvARB)(boom::OpenGLUInt, boom::OpenGLUShort const*);
    void (*_vertexAttrib4s)(boom::OpenGLUInt, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib4sARB)(boom::OpenGLUInt, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib4sNV)(boom::OpenGLUInt, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib4sv)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib4svARB)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib4svNV)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttrib4ubNV)(boom::OpenGLUInt, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte, boom::OpenGLUByte);
    void (*_vertexAttrib4ubv)(boom::OpenGLUInt, boom::OpenGLUByte const*);
    void (*_vertexAttrib4ubvARB)(boom::OpenGLUInt, boom::OpenGLUByte const*);
    void (*_vertexAttrib4ubvNV)(boom::OpenGLUInt, boom::OpenGLUByte const*);
    void (*_vertexAttrib4uiv)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttrib4uivARB)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttrib4usv)(boom::OpenGLUInt, boom::OpenGLUShort const*);
    void (*_vertexAttrib4usvARB)(boom::OpenGLUInt, boom::OpenGLUShort const*);
    void (*_vertexAttribArrayObjectATI)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLSizei, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribBinding)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribDivisor)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribDivisorANGLE)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribDivisorARB)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribDivisorEXT)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribDivisorNV)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribFormat)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUInt);
    void (*_vertexAttribFormatNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLSizei);
    void (*_vertexAttribI1i)(boom::OpenGLUInt, boom::OpenGLInt);
    void (*_vertexAttribI1iEXT)(boom::OpenGLUInt, boom::OpenGLInt);
    void (*_vertexAttribI1iv)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttribI1ivEXT)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttribI1ui)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribI1uiEXT)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribI1uiv)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttribI1uivEXT)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttribI2i)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI2iEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI2iv)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttribI2ivEXT)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttribI2ui)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribI2uiEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribI2uiv)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttribI2uivEXT)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttribI3i)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI3iEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI3iv)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttribI3ivEXT)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttribI3ui)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribI3uiEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribI3uiv)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttribI3uivEXT)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttribI4bv)(boom::OpenGLUInt, boom::OpenGLByte const*);
    void (*_vertexAttribI4bvEXT)(boom::OpenGLUInt, boom::OpenGLByte const*);
    void (*_vertexAttribI4i)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI4iEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI4iv)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttribI4ivEXT)(boom::OpenGLUInt, boom::OpenGLInt const*);
    void (*_vertexAttribI4sv)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttribI4svEXT)(boom::OpenGLUInt, boom::OpenGLShort const*);
    void (*_vertexAttribI4ubv)(boom::OpenGLUInt, boom::OpenGLUByte const*);
    void (*_vertexAttribI4ubvEXT)(boom::OpenGLUInt, boom::OpenGLUByte const*);
    void (*_vertexAttribI4ui)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribI4uiEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexAttribI4uiv)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttribI4uivEXT)(boom::OpenGLUInt, boom::OpenGLUInt const*);
    void (*_vertexAttribI4usv)(boom::OpenGLUInt, boom::OpenGLUShort const*);
    void (*_vertexAttribI4usvEXT)(boom::OpenGLUInt, boom::OpenGLUShort const*);
    void (*_vertexAttribIFormat)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_vertexAttribIFormatNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_vertexAttribIPointer)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexAttribIPointerEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexAttribL1d)(boom::OpenGLUInt, boom::OpenGLDouble);
    void (*_vertexAttribL1dEXT)(boom::OpenGLUInt, boom::OpenGLDouble);
    void (*_vertexAttribL1dv)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttribL1dvEXT)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttribL1i64NV)(boom::OpenGLUInt, boom::OpenGLInt64EXT);
    void (*_vertexAttribL1i64vNV)(boom::OpenGLUInt, boom::OpenGLInt64EXT const*);
    void (*_vertexAttribL1ui64ARB)(boom::OpenGLUInt, boom::OpenGLUInt64EXT);
    void (*_vertexAttribL1ui64NV)(boom::OpenGLUInt, boom::OpenGLUInt64EXT);
    void (*_vertexAttribL1ui64vARB)(boom::OpenGLUInt, boom::OpenGLUInt64EXT const*);
    void (*_vertexAttribL1ui64vNV)(boom::OpenGLUInt, boom::OpenGLUInt64EXT const*);
    void (*_vertexAttribL2d)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL2dEXT)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL2dv)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttribL2dvEXT)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttribL2i64NV)(boom::OpenGLUInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_vertexAttribL2i64vNV)(boom::OpenGLUInt, boom::OpenGLInt64EXT const*);
    void (*_vertexAttribL2ui64NV)(boom::OpenGLUInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_vertexAttribL2ui64vNV)(boom::OpenGLUInt, boom::OpenGLUInt64EXT const*);
    void (*_vertexAttribL3d)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL3dEXT)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL3dv)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttribL3dvEXT)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttribL3i64NV)(boom::OpenGLUInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_vertexAttribL3i64vNV)(boom::OpenGLUInt, boom::OpenGLInt64EXT const*);
    void (*_vertexAttribL3ui64NV)(boom::OpenGLUInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_vertexAttribL3ui64vNV)(boom::OpenGLUInt, boom::OpenGLUInt64EXT const*);
    void (*_vertexAttribL4d)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL4dEXT)(boom::OpenGLUInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL4dv)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttribL4dvEXT)(boom::OpenGLUInt, boom::OpenGLDouble const*);
    void (*_vertexAttribL4i64NV)(boom::OpenGLUInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_vertexAttribL4i64vNV)(boom::OpenGLUInt, boom::OpenGLInt64EXT const*);
    void (*_vertexAttribL4ui64NV)(boom::OpenGLUInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_vertexAttribL4ui64vNV)(boom::OpenGLUInt, boom::OpenGLUInt64EXT const*);
    void (*_vertexAttribLFormat)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_vertexAttribLFormatNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_vertexAttribLPointer)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexAttribLPointerEXT)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexAttribP1ui)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUInt);
    void (*_vertexAttribP1uiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUInt const*);
    void (*_vertexAttribP2ui)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUInt);
    void (*_vertexAttribP2uiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUInt const*);
    void (*_vertexAttribP3ui)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUInt);
    void (*_vertexAttribP3uiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUInt const*);
    void (*_vertexAttribP4ui)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUInt);
    void (*_vertexAttribP4uiv)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUInt const*);
    void (*_vertexAttribParameteriAMD)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_vertexAttribPointer)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLSizei, void const*);
    void (*_vertexAttribPointerARB)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLSizei, void const*);
    void (*_vertexAttribPointerNV)(boom::OpenGLUInt, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexAttribs1dvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_vertexAttribs1fvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_vertexAttribs1hvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLHalfNV const*);
    void (*_vertexAttribs1svNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLShort const*);
    void (*_vertexAttribs2dvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_vertexAttribs2fvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_vertexAttribs2hvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLHalfNV const*);
    void (*_vertexAttribs2svNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLShort const*);
    void (*_vertexAttribs3dvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_vertexAttribs3fvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_vertexAttribs3hvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLHalfNV const*);
    void (*_vertexAttribs3svNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLShort const*);
    void (*_vertexAttribs4dvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_vertexAttribs4fvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_vertexAttribs4hvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLHalfNV const*);
    void (*_vertexAttribs4svNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLShort const*);
    void (*_vertexAttribs4ubvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUByte const*);
    void (*_vertexBindingDivisor)(boom::OpenGLUInt, boom::OpenGLUInt);
    void (*_vertexBlendARB)(boom::OpenGLInt);
    void (*_vertexBlendEnvfATI)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_vertexBlendEnviATI)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_vertexFormatNV)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_vertexP2ui)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_vertexP2uiv)(boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_vertexP3ui)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_vertexP3uiv)(boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_vertexP4ui)(boom::OpenGLEnum, boom::OpenGLUInt);
    void (*_vertexP4uiv)(boom::OpenGLEnum, boom::OpenGLUInt const*);
    void (*_vertexPointer)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexPointerEXT)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, void const*);
    void (*_vertexPointerListIBM)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_vertexPointervINTEL)(boom::OpenGLInt, boom::OpenGLEnum, void const**);
    void (*_vertexStream1dATI)(boom::OpenGLEnum, boom::OpenGLDouble);
    void (*_vertexStream1dvATI)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_vertexStream1fATI)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_vertexStream1fvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_vertexStream1iATI)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_vertexStream1ivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_vertexStream1sATI)(boom::OpenGLEnum, boom::OpenGLShort);
    void (*_vertexStream1svATI)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_vertexStream2dATI)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexStream2dvATI)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_vertexStream2fATI)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexStream2fvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_vertexStream2iATI)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexStream2ivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_vertexStream2sATI)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexStream2svATI)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_vertexStream3dATI)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexStream3dvATI)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_vertexStream3fATI)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexStream3fvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_vertexStream3iATI)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexStream3ivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_vertexStream3sATI)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexStream3svATI)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_vertexStream4dATI)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexStream4dvATI)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_vertexStream4fATI)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexStream4fvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_vertexStream4iATI)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexStream4ivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_vertexStream4sATI)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexStream4svATI)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_vertexWeightfEXT)(boom::OpenGLFloat);
    void (*_vertexWeightfvEXT)(boom::OpenGLFloat const*);
    void (*_vertexWeighthNV)(boom::OpenGLHalfNV);
    void (*_vertexWeighthvNV)(boom::OpenGLHalfNV const*);
    void (*_vertexWeightPointerEXT)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    boom::OpenGLEnum (*_videoCaptureNV)(boom::OpenGLUInt, boom::OpenGLUInt*, boom::OpenGLUInt64EXT*);
    void (*_videoCaptureStreamParameterdvNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_videoCaptureStreamParameterfvNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_videoCaptureStreamParameterivNV)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_viewport)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_viewportArrayv)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_viewportArrayvNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_viewportArrayvOES)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_viewportIndexedf)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_viewportIndexedfNV)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_viewportIndexedfOES)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_viewportIndexedfv)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_viewportIndexedfvNV)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_viewportIndexedfvOES)(boom::OpenGLUInt, boom::OpenGLFloat const*);
    void (*_viewportPositionWScaleNV)(boom::OpenGLUInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_viewportSwizzleNV)(boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_waitSemaphoreEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLUInt const*, boom::OpenGLUInt, boom::OpenGLUInt const*, boom::OpenGLEnum const*);
    void (*_waitSemaphoreui64NVX)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLUInt64 const*);
    void (*_waitSync)(boom::OpenGLSync, boom::OpenGLBitfield, boom::OpenGLUInt64);
    void (*_waitSyncAPPLE)(boom::OpenGLSync, boom::OpenGLBitfield, boom::OpenGLUInt64);
    void (*_waitVkSemaphoreNV)(boom::OpenGLUInt64);
    void (*_weightbvARB)(boom::OpenGLInt, boom::OpenGLByte const*);
    void (*_weightdvARB)(boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_weightfvARB)(boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_weightivARB)(boom::OpenGLInt, boom::OpenGLInt const*);
    void (*_weightPathsNV)(boom::OpenGLUInt, boom::OpenGLSizei, boom::OpenGLUInt const*, boom::OpenGLFloat const*);
    void (*_weightPointerARB)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_weightPointerOES)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_weightsvARB)(boom::OpenGLInt, boom::OpenGLShort const*);
    void (*_weightubvARB)(boom::OpenGLInt, boom::OpenGLUByte const*);
    void (*_weightuivARB)(boom::OpenGLInt, boom::OpenGLUInt const*);
    void (*_weightusvARB)(boom::OpenGLInt, boom::OpenGLUShort const*);
    void (*_windowPos2d)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos2dARB)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos2dMESA)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos2dv)(boom::OpenGLDouble const*);
    void (*_windowPos2dvARB)(boom::OpenGLDouble const*);
    void (*_windowPos2dvMESA)(boom::OpenGLDouble const*);
    void (*_windowPos2f)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos2fARB)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos2fMESA)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos2fv)(boom::OpenGLFloat const*);
    void (*_windowPos2fvARB)(boom::OpenGLFloat const*);
    void (*_windowPos2fvMESA)(boom::OpenGLFloat const*);
    void (*_windowPos2i)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos2iARB)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos2iMESA)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos2iv)(boom::OpenGLInt const*);
    void (*_windowPos2ivARB)(boom::OpenGLInt const*);
    void (*_windowPos2ivMESA)(boom::OpenGLInt const*);
    void (*_windowPos2s)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos2sARB)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos2sMESA)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos2sv)(boom::OpenGLShort const*);
    void (*_windowPos2svARB)(boom::OpenGLShort const*);
    void (*_windowPos2svMESA)(boom::OpenGLShort const*);
    void (*_windowPos3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos3dARB)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos3dMESA)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos3dv)(boom::OpenGLDouble const*);
    void (*_windowPos3dvARB)(boom::OpenGLDouble const*);
    void (*_windowPos3dvMESA)(boom::OpenGLDouble const*);
    void (*_windowPos3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos3fARB)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos3fMESA)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos3fv)(boom::OpenGLFloat const*);
    void (*_windowPos3fvARB)(boom::OpenGLFloat const*);
    void (*_windowPos3fvMESA)(boom::OpenGLFloat const*);
    void (*_windowPos3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos3iARB)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos3iMESA)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos3iv)(boom::OpenGLInt const*);
    void (*_windowPos3ivARB)(boom::OpenGLInt const*);
    void (*_windowPos3ivMESA)(boom::OpenGLInt const*);
    void (*_windowPos3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos3sARB)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos3sMESA)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos3sv)(boom::OpenGLShort const*);
    void (*_windowPos3svARB)(boom::OpenGLShort const*);
    void (*_windowPos3svMESA)(boom::OpenGLShort const*);
    void (*_windowPos4dMESA)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos4dvMESA)(boom::OpenGLDouble const*);
    void (*_windowPos4fMESA)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos4fvMESA)(boom::OpenGLFloat const*);
    void (*_windowPos4iMESA)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos4ivMESA)(boom::OpenGLInt const*);
    void (*_windowPos4sMESA)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos4svMESA)(boom::OpenGLShort const*);
    void (*_windowRectanglesEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_writeMaskEXT)(boom::OpenGLUInt, boom::OpenGLUInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    bool _accumLoaded;
    bool _accumxOESLoaded;
    bool _acquireKeyedMutexWin32EXTLoaded;
    bool _activeProgramEXTLoaded;
    bool _activeShaderProgramLoaded;
    bool _activeShaderProgramEXTLoaded;
    bool _activeStencilFaceEXTLoaded;
    bool _activeTextureLoaded;
    bool _activeTextureARBLoaded;
    bool _activeVaryingNVLoaded;
    bool _alphaFragmentOp1ATILoaded;
    bool _alphaFragmentOp2ATILoaded;
    bool _alphaFragmentOp3ATILoaded;
    bool _alphaFuncLoaded;
    bool _alphaFuncQCOMLoaded;
    bool _alphaFuncxLoaded;
    bool _alphaFuncxOESLoaded;
    bool _alphaToCoverageDitherControlNVLoaded;
    bool _applyFramebufferAttachmentCMAAINTELLoaded;
    bool _applyTextureEXTLoaded;
    bool _areProgramsResidentNVLoaded;
    bool _areTexturesResidentLoaded;
    bool _areTexturesResidentEXTLoaded;
    bool _arrayElementLoaded;
    bool _arrayElementEXTLoaded;
    bool _arrayObjectATILoaded;
    bool _asyncCopyBufferSubDataNVXLoaded;
    bool _asyncCopyImageSubDataNVXLoaded;
    bool _asyncMarkerSGIXLoaded;
    bool _attachObjectARBLoaded;
    bool _attachShaderLoaded;
    bool _beginLoaded;
    bool _beginConditionalRenderLoaded;
    bool _beginConditionalRenderNVLoaded;
    bool _beginConditionalRenderNVXLoaded;
    bool _beginFragmentShaderATILoaded;
    bool _beginOcclusionQueryNVLoaded;
    bool _beginPerfMonitorAMDLoaded;
    bool _beginPerfQueryINTELLoaded;
    bool _beginQueryLoaded;
    bool _beginQueryARBLoaded;
    bool _beginQueryEXTLoaded;
    bool _beginQueryIndexedLoaded;
    bool _beginTransformFeedbackLoaded;
    bool _beginTransformFeedbackEXTLoaded;
    bool _beginTransformFeedbackNVLoaded;
    bool _beginVertexShaderEXTLoaded;
    bool _beginVideoCaptureNVLoaded;
    bool _bindAttribLocationLoaded;
    bool _bindAttribLocationARBLoaded;
    bool _bindBufferLoaded;
    bool _bindBufferARBLoaded;
    bool _bindBufferBaseLoaded;
    bool _bindBufferBaseEXTLoaded;
    bool _bindBufferBaseNVLoaded;
    bool _bindBufferOffsetEXTLoaded;
    bool _bindBufferOffsetNVLoaded;
    bool _bindBufferRangeLoaded;
    bool _bindBufferRangeEXTLoaded;
    bool _bindBufferRangeNVLoaded;
    bool _bindBuffersBaseLoaded;
    bool _bindBuffersRangeLoaded;
    bool _bindFragDataLocationLoaded;
    bool _bindFragDataLocationEXTLoaded;
    bool _bindFragDataLocationIndexedLoaded;
    bool _bindFragDataLocationIndexedEXTLoaded;
    bool _bindFragmentShaderATILoaded;
    bool _bindFramebufferLoaded;
    bool _bindFramebufferEXTLoaded;
    bool _bindFramebufferOESLoaded;
    bool _bindImageTextureLoaded;
    bool _bindImageTextureEXTLoaded;
    bool _bindImageTexturesLoaded;
    bool _bindLightParameterEXTLoaded;
    bool _bindMaterialParameterEXTLoaded;
    bool _bindMultiTextureEXTLoaded;
    bool _bindParameterEXTLoaded;
    bool _bindProgramARBLoaded;
    bool _bindProgramNVLoaded;
    bool _bindProgramPipelineLoaded;
    bool _bindProgramPipelineEXTLoaded;
    bool _bindRenderbufferLoaded;
    bool _bindRenderbufferEXTLoaded;
    bool _bindRenderbufferOESLoaded;
    bool _bindSamplerLoaded;
    bool _bindSamplersLoaded;
    bool _bindShadingRateImageNVLoaded;
    bool _bindTexGenParameterEXTLoaded;
    bool _bindTextureLoaded;
    bool _bindTextureEXTLoaded;
    bool _bindTexturesLoaded;
    bool _bindTextureUnitLoaded;
    bool _bindTextureUnitParameterEXTLoaded;
    bool _bindTransformFeedbackLoaded;
    bool _bindTransformFeedbackNVLoaded;
    bool _bindVertexArrayLoaded;
    bool _bindVertexArrayAPPLELoaded;
    bool _bindVertexArrayOESLoaded;
    bool _bindVertexBufferLoaded;
    bool _bindVertexBuffersLoaded;
    bool _bindVertexShaderEXTLoaded;
    bool _bindVideoCaptureStreamBufferNVLoaded;
    bool _bindVideoCaptureStreamTextureNVLoaded;
    bool _binormal3bEXTLoaded;
    bool _binormal3bvEXTLoaded;
    bool _binormal3dEXTLoaded;
    bool _binormal3dvEXTLoaded;
    bool _binormal3fEXTLoaded;
    bool _binormal3fvEXTLoaded;
    bool _binormal3iEXTLoaded;
    bool _binormal3ivEXTLoaded;
    bool _binormal3sEXTLoaded;
    bool _binormal3svEXTLoaded;
    bool _binormalPointerEXTLoaded;
    bool _bitmapLoaded;
    bool _bitmapxOESLoaded;
    bool _blendBarrierLoaded;
    bool _blendBarrierKHRLoaded;
    bool _blendBarrierNVLoaded;
    bool _blendColorLoaded;
    bool _blendColorEXTLoaded;
    bool _blendColorxOESLoaded;
    bool _blendEquationLoaded;
    bool _blendEquationEXTLoaded;
    bool _blendEquationiLoaded;
    bool _blendEquationiARBLoaded;
    bool _blendEquationiEXTLoaded;
    bool _blendEquationIndexedAMDLoaded;
    bool _blendEquationiOESLoaded;
    bool _blendEquationOESLoaded;
    bool _blendEquationSeparateLoaded;
    bool _blendEquationSeparateEXTLoaded;
    bool _blendEquationSeparateiLoaded;
    bool _blendEquationSeparateiARBLoaded;
    bool _blendEquationSeparateiEXTLoaded;
    bool _blendEquationSeparateIndexedAMDLoaded;
    bool _blendEquationSeparateiOESLoaded;
    bool _blendEquationSeparateOESLoaded;
    bool _blendFuncLoaded;
    bool _blendFunciLoaded;
    bool _blendFunciARBLoaded;
    bool _blendFunciEXTLoaded;
    bool _blendFuncIndexedAMDLoaded;
    bool _blendFunciOESLoaded;
    bool _blendFuncSeparateLoaded;
    bool _blendFuncSeparateEXTLoaded;
    bool _blendFuncSeparateiLoaded;
    bool _blendFuncSeparateiARBLoaded;
    bool _blendFuncSeparateiEXTLoaded;
    bool _blendFuncSeparateIndexedAMDLoaded;
    bool _blendFuncSeparateINGRLoaded;
    bool _blendFuncSeparateiOESLoaded;
    bool _blendFuncSeparateOESLoaded;
    bool _blendParameteriNVLoaded;
    bool _blitFramebufferLoaded;
    bool _blitFramebufferANGLELoaded;
    bool _blitFramebufferEXTLoaded;
    bool _blitFramebufferNVLoaded;
    bool _blitNamedFramebufferLoaded;
    bool _bufferAddressRangeNVLoaded;
    bool _bufferAttachMemoryNVLoaded;
    bool _bufferDataLoaded;
    bool _bufferDataARBLoaded;
    bool _bufferPageCommitmentARBLoaded;
    bool _bufferPageCommitmentMemNVLoaded;
    bool _bufferParameteriAPPLELoaded;
    bool _bufferStorageLoaded;
    bool _bufferStorageEXTLoaded;
    bool _bufferStorageExternalEXTLoaded;
    bool _bufferStorageMemEXTLoaded;
    bool _bufferSubDataLoaded;
    bool _bufferSubDataARBLoaded;
    bool _callCommandListNVLoaded;
    bool _callListLoaded;
    bool _callListsLoaded;
    bool _checkFramebufferStatusLoaded;
    bool _checkFramebufferStatusEXTLoaded;
    bool _checkFramebufferStatusOESLoaded;
    bool _checkNamedFramebufferStatusLoaded;
    bool _checkNamedFramebufferStatusEXTLoaded;
    bool _clampColorLoaded;
    bool _clampColorARBLoaded;
    bool _clearLoaded;
    bool _clearAccumLoaded;
    bool _clearAccumxOESLoaded;
    bool _clearBufferDataLoaded;
    bool _clearBufferfiLoaded;
    bool _clearBufferfvLoaded;
    bool _clearBufferivLoaded;
    bool _clearBufferSubDataLoaded;
    bool _clearBufferuivLoaded;
    bool _clearColorLoaded;
    bool _clearColorIiEXTLoaded;
    bool _clearColorIuiEXTLoaded;
    bool _clearColorxLoaded;
    bool _clearColorxOESLoaded;
    bool _clearDepthLoaded;
    bool _clearDepthdNVLoaded;
    bool _clearDepthfLoaded;
    bool _clearDepthfOESLoaded;
    bool _clearDepthxLoaded;
    bool _clearDepthxOESLoaded;
    bool _clearIndexLoaded;
    bool _clearNamedBufferDataLoaded;
    bool _clearNamedBufferDataEXTLoaded;
    bool _clearNamedBufferSubDataLoaded;
    bool _clearNamedBufferSubDataEXTLoaded;
    bool _clearNamedFramebufferfiLoaded;
    bool _clearNamedFramebufferfvLoaded;
    bool _clearNamedFramebufferivLoaded;
    bool _clearNamedFramebufferuivLoaded;
    bool _clearPixelLocalStorageuiEXTLoaded;
    bool _clearStencilLoaded;
    bool _clearTexImageLoaded;
    bool _clearTexImageEXTLoaded;
    bool _clearTexSubImageLoaded;
    bool _clearTexSubImageEXTLoaded;
    bool _clientActiveTextureLoaded;
    bool _clientActiveTextureARBLoaded;
    bool _clientActiveVertexStreamATILoaded;
    bool _clientAttribDefaultEXTLoaded;
    bool _clientWaitSemaphoreui64NVXLoaded;
    bool _clientWaitSyncLoaded;
    bool _clientWaitSyncAPPLELoaded;
    bool _clipControlLoaded;
    bool _clipControlEXTLoaded;
    bool _clipPlaneLoaded;
    bool _clipPlanefLoaded;
    bool _clipPlanefIMGLoaded;
    bool _clipPlanefOESLoaded;
    bool _clipPlanexLoaded;
    bool _clipPlanexIMGLoaded;
    bool _clipPlanexOESLoaded;
    bool _color3bLoaded;
    bool _color3bvLoaded;
    bool _color3dLoaded;
    bool _color3dvLoaded;
    bool _color3fLoaded;
    bool _color3fvLoaded;
    bool _color3fVertex3fSUNLoaded;
    bool _color3fVertex3fvSUNLoaded;
    bool _color3hNVLoaded;
    bool _color3hvNVLoaded;
    bool _color3iLoaded;
    bool _color3ivLoaded;
    bool _color3sLoaded;
    bool _color3svLoaded;
    bool _color3ubLoaded;
    bool _color3ubvLoaded;
    bool _color3uiLoaded;
    bool _color3uivLoaded;
    bool _color3usLoaded;
    bool _color3usvLoaded;
    bool _color3xOESLoaded;
    bool _color3xvOESLoaded;
    bool _color4bLoaded;
    bool _color4bvLoaded;
    bool _color4dLoaded;
    bool _color4dvLoaded;
    bool _color4fLoaded;
    bool _color4fNormal3fVertex3fSUNLoaded;
    bool _color4fNormal3fVertex3fvSUNLoaded;
    bool _color4fvLoaded;
    bool _color4hNVLoaded;
    bool _color4hvNVLoaded;
    bool _color4iLoaded;
    bool _color4ivLoaded;
    bool _color4sLoaded;
    bool _color4svLoaded;
    bool _color4ubLoaded;
    bool _color4ubvLoaded;
    bool _color4ubVertex2fSUNLoaded;
    bool _color4ubVertex2fvSUNLoaded;
    bool _color4ubVertex3fSUNLoaded;
    bool _color4ubVertex3fvSUNLoaded;
    bool _color4uiLoaded;
    bool _color4uivLoaded;
    bool _color4usLoaded;
    bool _color4usvLoaded;
    bool _color4xLoaded;
    bool _color4xOESLoaded;
    bool _color4xvOESLoaded;
    bool _colorFormatNVLoaded;
    bool _colorFragmentOp1ATILoaded;
    bool _colorFragmentOp2ATILoaded;
    bool _colorFragmentOp3ATILoaded;
    bool _colorMaskLoaded;
    bool _colorMaskiLoaded;
    bool _colorMaskiEXTLoaded;
    bool _colorMaskIndexedEXTLoaded;
    bool _colorMaskiOESLoaded;
    bool _colorMaterialLoaded;
    bool _colorP3uiLoaded;
    bool _colorP3uivLoaded;
    bool _colorP4uiLoaded;
    bool _colorP4uivLoaded;
    bool _colorPointerLoaded;
    bool _colorPointerEXTLoaded;
    bool _colorPointerListIBMLoaded;
    bool _colorPointervINTELLoaded;
    bool _colorSubTableLoaded;
    bool _colorSubTableEXTLoaded;
    bool _colorTableLoaded;
    bool _colorTableEXTLoaded;
    bool _colorTableParameterfvLoaded;
    bool _colorTableParameterfvSGILoaded;
    bool _colorTableParameterivLoaded;
    bool _colorTableParameterivSGILoaded;
    bool _colorTableSGILoaded;
    bool _combinerInputNVLoaded;
    bool _combinerOutputNVLoaded;
    bool _combinerParameterfNVLoaded;
    bool _combinerParameterfvNVLoaded;
    bool _combinerParameteriNVLoaded;
    bool _combinerParameterivNVLoaded;
    bool _combinerStageParameterfvNVLoaded;
    bool _commandListSegmentsNVLoaded;
    bool _compileCommandListNVLoaded;
    bool _compileShaderLoaded;
    bool _compileShaderARBLoaded;
    bool _compileShaderIncludeARBLoaded;
    bool _compressedMultiTexImage1DEXTLoaded;
    bool _compressedMultiTexImage2DEXTLoaded;
    bool _compressedMultiTexImage3DEXTLoaded;
    bool _compressedMultiTexSubImage1DEXTLoaded;
    bool _compressedMultiTexSubImage2DEXTLoaded;
    bool _compressedMultiTexSubImage3DEXTLoaded;
    bool _compressedTexImage1DLoaded;
    bool _compressedTexImage1DARBLoaded;
    bool _compressedTexImage2DLoaded;
    bool _compressedTexImage2DARBLoaded;
    bool _compressedTexImage3DLoaded;
    bool _compressedTexImage3DARBLoaded;
    bool _compressedTexImage3DOESLoaded;
    bool _compressedTexSubImage1DLoaded;
    bool _compressedTexSubImage1DARBLoaded;
    bool _compressedTexSubImage2DLoaded;
    bool _compressedTexSubImage2DARBLoaded;
    bool _compressedTexSubImage3DLoaded;
    bool _compressedTexSubImage3DARBLoaded;
    bool _compressedTexSubImage3DOESLoaded;
    bool _compressedTextureImage1DEXTLoaded;
    bool _compressedTextureImage2DEXTLoaded;
    bool _compressedTextureImage3DEXTLoaded;
    bool _compressedTextureSubImage1DLoaded;
    bool _compressedTextureSubImage1DEXTLoaded;
    bool _compressedTextureSubImage2DLoaded;
    bool _compressedTextureSubImage2DEXTLoaded;
    bool _compressedTextureSubImage3DLoaded;
    bool _compressedTextureSubImage3DEXTLoaded;
    bool _conservativeRasterParameterfNVLoaded;
    bool _conservativeRasterParameteriNVLoaded;
    bool _convolutionFilter1DLoaded;
    bool _convolutionFilter1DEXTLoaded;
    bool _convolutionFilter2DLoaded;
    bool _convolutionFilter2DEXTLoaded;
    bool _convolutionParameterfLoaded;
    bool _convolutionParameterfEXTLoaded;
    bool _convolutionParameterfvLoaded;
    bool _convolutionParameterfvEXTLoaded;
    bool _convolutionParameteriLoaded;
    bool _convolutionParameteriEXTLoaded;
    bool _convolutionParameterivLoaded;
    bool _convolutionParameterivEXTLoaded;
    bool _convolutionParameterxOESLoaded;
    bool _convolutionParameterxvOESLoaded;
    bool _copyBufferSubDataLoaded;
    bool _copyBufferSubDataNVLoaded;
    bool _copyColorSubTableLoaded;
    bool _copyColorSubTableEXTLoaded;
    bool _copyColorTableLoaded;
    bool _copyColorTableSGILoaded;
    bool _copyConvolutionFilter1DLoaded;
    bool _copyConvolutionFilter1DEXTLoaded;
    bool _copyConvolutionFilter2DLoaded;
    bool _copyConvolutionFilter2DEXTLoaded;
    bool _copyImageSubDataLoaded;
    bool _copyImageSubDataEXTLoaded;
    bool _copyImageSubDataNVLoaded;
    bool _copyImageSubDataOESLoaded;
    bool _copyMultiTexImage1DEXTLoaded;
    bool _copyMultiTexImage2DEXTLoaded;
    bool _copyMultiTexSubImage1DEXTLoaded;
    bool _copyMultiTexSubImage2DEXTLoaded;
    bool _copyMultiTexSubImage3DEXTLoaded;
    bool _copyNamedBufferSubDataLoaded;
    bool _copyPathNVLoaded;
    bool _copyPixelsLoaded;
    bool _copyTexImage1DLoaded;
    bool _copyTexImage1DEXTLoaded;
    bool _copyTexImage2DLoaded;
    bool _copyTexImage2DEXTLoaded;
    bool _copyTexSubImage1DLoaded;
    bool _copyTexSubImage1DEXTLoaded;
    bool _copyTexSubImage2DLoaded;
    bool _copyTexSubImage2DEXTLoaded;
    bool _copyTexSubImage3DLoaded;
    bool _copyTexSubImage3DEXTLoaded;
    bool _copyTexSubImage3DOESLoaded;
    bool _copyTextureImage1DEXTLoaded;
    bool _copyTextureImage2DEXTLoaded;
    bool _copyTextureLevelsAPPLELoaded;
    bool _copyTextureSubImage1DLoaded;
    bool _copyTextureSubImage1DEXTLoaded;
    bool _copyTextureSubImage2DLoaded;
    bool _copyTextureSubImage2DEXTLoaded;
    bool _copyTextureSubImage3DLoaded;
    bool _copyTextureSubImage3DEXTLoaded;
    bool _coverageMaskNVLoaded;
    bool _coverageModulationNVLoaded;
    bool _coverageModulationTableNVLoaded;
    bool _coverageOperationNVLoaded;
    bool _coverFillPathInstancedNVLoaded;
    bool _coverFillPathNVLoaded;
    bool _coverStrokePathInstancedNVLoaded;
    bool _coverStrokePathNVLoaded;
    bool _createBuffersLoaded;
    bool _createCommandListsNVLoaded;
    bool _createFramebuffersLoaded;
    bool _createMemoryObjectsEXTLoaded;
    bool _createPerfQueryINTELLoaded;
    bool _createProgramLoaded;
    bool _createProgramObjectARBLoaded;
    bool _createProgramPipelinesLoaded;
    bool _createProgressFenceNVXLoaded;
    bool _createQueriesLoaded;
    bool _createRenderbuffersLoaded;
    bool _createSamplersLoaded;
    bool _createSemaphoresNVLoaded;
    bool _createShaderLoaded;
    bool _createShaderObjectARBLoaded;
    bool _createShaderProgramEXTLoaded;
    bool _createShaderProgramvLoaded;
    bool _createShaderProgramvEXTLoaded;
    bool _createStatesNVLoaded;
    bool _createSyncFromCLeventARBLoaded;
    bool _createTexturesLoaded;
    bool _createTransformFeedbacksLoaded;
    bool _createVertexArraysLoaded;
    bool _cullFaceLoaded;
    bool _cullParameterdvEXTLoaded;
    bool _cullParameterfvEXTLoaded;
    bool _currentPaletteMatrixARBLoaded;
    bool _currentPaletteMatrixOESLoaded;
    bool _debugMessageCallbackLoaded;
    bool _debugMessageCallbackAMDLoaded;
    bool _debugMessageCallbackARBLoaded;
    bool _debugMessageCallbackKHRLoaded;
    bool _debugMessageControlLoaded;
    bool _debugMessageControlARBLoaded;
    bool _debugMessageControlKHRLoaded;
    bool _debugMessageEnableAMDLoaded;
    bool _debugMessageInsertLoaded;
    bool _debugMessageInsertAMDLoaded;
    bool _debugMessageInsertARBLoaded;
    bool _debugMessageInsertKHRLoaded;
    bool _deformationMap3dSGIXLoaded;
    bool _deformationMap3fSGIXLoaded;
    bool _deformSGIXLoaded;
    bool _deleteAsyncMarkersSGIXLoaded;
    bool _deleteBuffersLoaded;
    bool _deleteBuffersARBLoaded;
    bool _deleteCommandListsNVLoaded;
    bool _deleteFencesAPPLELoaded;
    bool _deleteFencesNVLoaded;
    bool _deleteFragmentShaderATILoaded;
    bool _deleteFramebuffersLoaded;
    bool _deleteFramebuffersEXTLoaded;
    bool _deleteFramebuffersOESLoaded;
    bool _deleteListsLoaded;
    bool _deleteMemoryObjectsEXTLoaded;
    bool _deleteNamedStringARBLoaded;
    bool _deleteNamesAMDLoaded;
    bool _deleteObjectARBLoaded;
    bool _deleteOcclusionQueriesNVLoaded;
    bool _deletePathsNVLoaded;
    bool _deletePerfMonitorsAMDLoaded;
    bool _deletePerfQueryINTELLoaded;
    bool _deleteProgramLoaded;
    bool _deleteProgramPipelinesLoaded;
    bool _deleteProgramPipelinesEXTLoaded;
    bool _deleteProgramsARBLoaded;
    bool _deleteProgramsNVLoaded;
    bool _deleteQueriesLoaded;
    bool _deleteQueriesARBLoaded;
    bool _deleteQueriesEXTLoaded;
    bool _deleteQueryResourceTagNVLoaded;
    bool _deleteRenderbuffersLoaded;
    bool _deleteRenderbuffersEXTLoaded;
    bool _deleteRenderbuffersOESLoaded;
    bool _deleteSamplersLoaded;
    bool _deleteSemaphoresEXTLoaded;
    bool _deleteShaderLoaded;
    bool _deleteStatesNVLoaded;
    bool _deleteSyncLoaded;
    bool _deleteSyncAPPLELoaded;
    bool _deleteTexturesLoaded;
    bool _deleteTexturesEXTLoaded;
    bool _deleteTransformFeedbacksLoaded;
    bool _deleteTransformFeedbacksNVLoaded;
    bool _deleteVertexArraysLoaded;
    bool _deleteVertexArraysAPPLELoaded;
    bool _deleteVertexArraysOESLoaded;
    bool _deleteVertexShaderEXTLoaded;
    bool _depthBoundsdNVLoaded;
    bool _depthBoundsEXTLoaded;
    bool _depthFuncLoaded;
    bool _depthMaskLoaded;
    bool _depthRangeLoaded;
    bool _depthRangeArraydvNVLoaded;
    bool _depthRangeArrayfvNVLoaded;
    bool _depthRangeArrayfvOESLoaded;
    bool _depthRangeArrayvLoaded;
    bool _depthRangedNVLoaded;
    bool _depthRangefLoaded;
    bool _depthRangefOESLoaded;
    bool _depthRangeIndexedLoaded;
    bool _depthRangeIndexeddNVLoaded;
    bool _depthRangeIndexedfNVLoaded;
    bool _depthRangeIndexedfOESLoaded;
    bool _depthRangexLoaded;
    bool _depthRangexOESLoaded;
    bool _detachObjectARBLoaded;
    bool _detachShaderLoaded;
    bool _detailTexFuncSGISLoaded;
    bool _disableLoaded;
    bool _disableClientStateLoaded;
    bool _disableClientStateiEXTLoaded;
    bool _disableClientStateIndexedEXTLoaded;
    bool _disableDriverControlQCOMLoaded;
    bool _disableiLoaded;
    bool _disableiEXTLoaded;
    bool _disableIndexedEXTLoaded;
    bool _disableiNVLoaded;
    bool _disableiOESLoaded;
    bool _disableVariantClientStateEXTLoaded;
    bool _disableVertexArrayAttribLoaded;
    bool _disableVertexArrayAttribEXTLoaded;
    bool _disableVertexArrayEXTLoaded;
    bool _disableVertexAttribAPPLELoaded;
    bool _disableVertexAttribArrayLoaded;
    bool _disableVertexAttribArrayARBLoaded;
    bool _discardFramebufferEXTLoaded;
    bool _dispatchComputeLoaded;
    bool _dispatchComputeGroupSizeARBLoaded;
    bool _dispatchComputeIndirectLoaded;
    bool _drawArraysLoaded;
    bool _drawArraysEXTLoaded;
    bool _drawArraysIndirectLoaded;
    bool _drawArraysInstancedLoaded;
    bool _drawArraysInstancedANGLELoaded;
    bool _drawArraysInstancedARBLoaded;
    bool _drawArraysInstancedBaseInstanceLoaded;
    bool _drawArraysInstancedBaseInstanceEXTLoaded;
    bool _drawArraysInstancedEXTLoaded;
    bool _drawArraysInstancedNVLoaded;
    bool _drawBufferLoaded;
    bool _drawBuffersLoaded;
    bool _drawBuffersARBLoaded;
    bool _drawBuffersATILoaded;
    bool _drawBuffersEXTLoaded;
    bool _drawBuffersIndexedEXTLoaded;
    bool _drawBuffersNVLoaded;
    bool _drawCommandsAddressNVLoaded;
    bool _drawCommandsNVLoaded;
    bool _drawCommandsStatesAddressNVLoaded;
    bool _drawCommandsStatesNVLoaded;
    bool _drawElementArrayAPPLELoaded;
    bool _drawElementArrayATILoaded;
    bool _drawElementsLoaded;
    bool _drawElementsBaseVertexLoaded;
    bool _drawElementsBaseVertexEXTLoaded;
    bool _drawElementsBaseVertexOESLoaded;
    bool _drawElementsIndirectLoaded;
    bool _drawElementsInstancedLoaded;
    bool _drawElementsInstancedANGLELoaded;
    bool _drawElementsInstancedARBLoaded;
    bool _drawElementsInstancedBaseInstanceLoaded;
    bool _drawElementsInstancedBaseInstanceEXTLoaded;
    bool _drawElementsInstancedBaseVertexLoaded;
    bool _drawElementsInstancedBaseVertexBaseInstanceLoaded;
    bool _drawElementsInstancedBaseVertexBaseInstanceEXTLoaded;
    bool _drawElementsInstancedBaseVertexEXTLoaded;
    bool _drawElementsInstancedBaseVertexOESLoaded;
    bool _drawElementsInstancedEXTLoaded;
    bool _drawElementsInstancedNVLoaded;
    bool _drawMeshArraysSUNLoaded;
    bool _drawMeshTasksIndirectNVLoaded;
    bool _drawMeshTasksNVLoaded;
    bool _drawPixelsLoaded;
    bool _drawRangeElementArrayAPPLELoaded;
    bool _drawRangeElementArrayATILoaded;
    bool _drawRangeElementsLoaded;
    bool _drawRangeElementsBaseVertexLoaded;
    bool _drawRangeElementsBaseVertexEXTLoaded;
    bool _drawRangeElementsBaseVertexOESLoaded;
    bool _drawRangeElementsEXTLoaded;
    bool _drawTexfOESLoaded;
    bool _drawTexfvOESLoaded;
    bool _drawTexiOESLoaded;
    bool _drawTexivOESLoaded;
    bool _drawTexsOESLoaded;
    bool _drawTexsvOESLoaded;
    bool _drawTextureNVLoaded;
    bool _drawTexxOESLoaded;
    bool _drawTexxvOESLoaded;
    bool _drawTransformFeedbackLoaded;
    bool _drawTransformFeedbackEXTLoaded;
    bool _drawTransformFeedbackInstancedLoaded;
    bool _drawTransformFeedbackInstancedEXTLoaded;
    bool _drawTransformFeedbackNVLoaded;
    bool _drawTransformFeedbackStreamLoaded;
    bool _drawTransformFeedbackStreamInstancedLoaded;
    bool _drawVkImageNVLoaded;
    bool _edgeFlagLoaded;
    bool _edgeFlagFormatNVLoaded;
    bool _edgeFlagPointerLoaded;
    bool _edgeFlagPointerEXTLoaded;
    bool _edgeFlagPointerListIBMLoaded;
    bool _edgeFlagvLoaded;
    bool _eGLImageTargetRenderbufferStorageOESLoaded;
    bool _eGLImageTargetTexStorageEXTLoaded;
    bool _eGLImageTargetTexture2DOESLoaded;
    bool _eGLImageTargetTextureStorageEXTLoaded;
    bool _elementPointerAPPLELoaded;
    bool _elementPointerATILoaded;
    bool _enableLoaded;
    bool _enableClientStateLoaded;
    bool _enableClientStateiEXTLoaded;
    bool _enableClientStateIndexedEXTLoaded;
    bool _enableDriverControlQCOMLoaded;
    bool _enableiLoaded;
    bool _enableiEXTLoaded;
    bool _enableIndexedEXTLoaded;
    bool _enableiNVLoaded;
    bool _enableiOESLoaded;
    bool _enableVariantClientStateEXTLoaded;
    bool _enableVertexArrayAttribLoaded;
    bool _enableVertexArrayAttribEXTLoaded;
    bool _enableVertexArrayEXTLoaded;
    bool _enableVertexAttribAPPLELoaded;
    bool _enableVertexAttribArrayLoaded;
    bool _enableVertexAttribArrayARBLoaded;
    bool _endLoaded;
    bool _endConditionalRenderLoaded;
    bool _endConditionalRenderNVLoaded;
    bool _endConditionalRenderNVXLoaded;
    bool _endFragmentShaderATILoaded;
    bool _endListLoaded;
    bool _endOcclusionQueryNVLoaded;
    bool _endPerfMonitorAMDLoaded;
    bool _endPerfQueryINTELLoaded;
    bool _endQueryLoaded;
    bool _endQueryARBLoaded;
    bool _endQueryEXTLoaded;
    bool _endQueryIndexedLoaded;
    bool _endTilingQCOMLoaded;
    bool _endTransformFeedbackLoaded;
    bool _endTransformFeedbackEXTLoaded;
    bool _endTransformFeedbackNVLoaded;
    bool _endVertexShaderEXTLoaded;
    bool _endVideoCaptureNVLoaded;
    bool _evalCoord1dLoaded;
    bool _evalCoord1dvLoaded;
    bool _evalCoord1fLoaded;
    bool _evalCoord1fvLoaded;
    bool _evalCoord1xOESLoaded;
    bool _evalCoord1xvOESLoaded;
    bool _evalCoord2dLoaded;
    bool _evalCoord2dvLoaded;
    bool _evalCoord2fLoaded;
    bool _evalCoord2fvLoaded;
    bool _evalCoord2xOESLoaded;
    bool _evalCoord2xvOESLoaded;
    bool _evalMapsNVLoaded;
    bool _evalMesh1Loaded;
    bool _evalMesh2Loaded;
    bool _evalPoint1Loaded;
    bool _evalPoint2Loaded;
    bool _evaluateDepthValuesARBLoaded;
    bool _executeProgramNVLoaded;
    bool _extGetBufferPointervQCOMLoaded;
    bool _extGetBuffersQCOMLoaded;
    bool _extGetFramebuffersQCOMLoaded;
    bool _extGetProgramBinarySourceQCOMLoaded;
    bool _extGetProgramsQCOMLoaded;
    bool _extGetRenderbuffersQCOMLoaded;
    bool _extGetShadersQCOMLoaded;
    bool _extGetTexLevelParameterivQCOMLoaded;
    bool _extGetTexSubImageQCOMLoaded;
    bool _extGetTexturesQCOMLoaded;
    bool _extIsProgramBinaryQCOMLoaded;
    bool _extractComponentEXTLoaded;
    bool _extrapolateTex2DQCOMLoaded;
    bool _extTexObjectStateOverrideiQCOMLoaded;
    bool _feedbackBufferLoaded;
    bool _feedbackBufferxOESLoaded;
    bool _fenceSyncLoaded;
    bool _fenceSyncAPPLELoaded;
    bool _finalCombinerInputNVLoaded;
    bool _finishLoaded;
    bool _finishAsyncSGIXLoaded;
    bool _finishFenceAPPLELoaded;
    bool _finishFenceNVLoaded;
    bool _finishObjectAPPLELoaded;
    bool _finishTextureSUNXLoaded;
    bool _flushLoaded;
    bool _flushMappedBufferRangeLoaded;
    bool _flushMappedBufferRangeAPPLELoaded;
    bool _flushMappedBufferRangeEXTLoaded;
    bool _flushMappedNamedBufferRangeLoaded;
    bool _flushMappedNamedBufferRangeEXTLoaded;
    bool _flushPixelDataRangeNVLoaded;
    bool _flushRasterSGIXLoaded;
    bool _flushStaticDataIBMLoaded;
    bool _flushVertexArrayRangeAPPLELoaded;
    bool _flushVertexArrayRangeNVLoaded;
    bool _fogCoorddLoaded;
    bool _fogCoorddEXTLoaded;
    bool _fogCoorddvLoaded;
    bool _fogCoorddvEXTLoaded;
    bool _fogCoordfLoaded;
    bool _fogCoordfEXTLoaded;
    bool _fogCoordFormatNVLoaded;
    bool _fogCoordfvLoaded;
    bool _fogCoordfvEXTLoaded;
    bool _fogCoordhNVLoaded;
    bool _fogCoordhvNVLoaded;
    bool _fogCoordPointerLoaded;
    bool _fogCoordPointerEXTLoaded;
    bool _fogCoordPointerListIBMLoaded;
    bool _fogfLoaded;
    bool _fogFuncSGISLoaded;
    bool _fogfvLoaded;
    bool _fogiLoaded;
    bool _fogivLoaded;
    bool _fogxLoaded;
    bool _fogxOESLoaded;
    bool _fogxvLoaded;
    bool _fogxvOESLoaded;
    bool _fragmentColorMaterialSGIXLoaded;
    bool _fragmentCoverageColorNVLoaded;
    bool _fragmentLightfSGIXLoaded;
    bool _fragmentLightfvSGIXLoaded;
    bool _fragmentLightiSGIXLoaded;
    bool _fragmentLightivSGIXLoaded;
    bool _fragmentLightModelfSGIXLoaded;
    bool _fragmentLightModelfvSGIXLoaded;
    bool _fragmentLightModeliSGIXLoaded;
    bool _fragmentLightModelivSGIXLoaded;
    bool _fragmentMaterialfSGIXLoaded;
    bool _fragmentMaterialfvSGIXLoaded;
    bool _fragmentMaterialiSGIXLoaded;
    bool _fragmentMaterialivSGIXLoaded;
    bool _framebufferDrawBufferEXTLoaded;
    bool _framebufferDrawBuffersEXTLoaded;
    bool _framebufferFetchBarrierEXTLoaded;
    bool _framebufferFetchBarrierQCOMLoaded;
    bool _framebufferFoveationConfigQCOMLoaded;
    bool _framebufferFoveationParametersQCOMLoaded;
    bool _framebufferParameteriLoaded;
    bool _framebufferParameteriMESALoaded;
    bool _framebufferPixelLocalStorageSizeEXTLoaded;
    bool _framebufferReadBufferEXTLoaded;
    bool _framebufferRenderbufferLoaded;
    bool _framebufferRenderbufferEXTLoaded;
    bool _framebufferRenderbufferOESLoaded;
    bool _framebufferSampleLocationsfvARBLoaded;
    bool _framebufferSampleLocationsfvNVLoaded;
    bool _framebufferSamplePositionsfvAMDLoaded;
    bool _framebufferShadingRateEXTLoaded;
    bool _framebufferTextureLoaded;
    bool _framebufferTexture1DLoaded;
    bool _framebufferTexture1DEXTLoaded;
    bool _framebufferTexture2DLoaded;
    bool _framebufferTexture2DDownsampleIMGLoaded;
    bool _framebufferTexture2DEXTLoaded;
    bool _framebufferTexture2DMultisampleEXTLoaded;
    bool _framebufferTexture2DMultisampleIMGLoaded;
    bool _framebufferTexture2DOESLoaded;
    bool _framebufferTexture3DLoaded;
    bool _framebufferTexture3DEXTLoaded;
    bool _framebufferTexture3DOESLoaded;
    bool _framebufferTextureARBLoaded;
    bool _framebufferTextureEXTLoaded;
    bool _framebufferTextureFaceARBLoaded;
    bool _framebufferTextureFaceEXTLoaded;
    bool _framebufferTextureLayerLoaded;
    bool _framebufferTextureLayerARBLoaded;
    bool _framebufferTextureLayerDownsampleIMGLoaded;
    bool _framebufferTextureLayerEXTLoaded;
    bool _framebufferTextureMultisampleMultiviewOVRLoaded;
    bool _framebufferTextureMultiviewOVRLoaded;
    bool _framebufferTextureOESLoaded;
    bool _frameTerminatorGREMEDYLoaded;
    bool _frameZoomSGIXLoaded;
    bool _freeObjectBufferATILoaded;
    bool _frontFaceLoaded;
    bool _frustumLoaded;
    bool _frustumfLoaded;
    bool _frustumfOESLoaded;
    bool _frustumxLoaded;
    bool _frustumxOESLoaded;
    bool _genAsyncMarkersSGIXLoaded;
    bool _genBuffersLoaded;
    bool _genBuffersARBLoaded;
    bool _generateMipmapLoaded;
    bool _generateMipmapEXTLoaded;
    bool _generateMipmapOESLoaded;
    bool _generateMultiTexMipmapEXTLoaded;
    bool _generateTextureMipmapLoaded;
    bool _generateTextureMipmapEXTLoaded;
    bool _genFencesAPPLELoaded;
    bool _genFencesNVLoaded;
    bool _genFragmentShadersATILoaded;
    bool _genFramebuffersLoaded;
    bool _genFramebuffersEXTLoaded;
    bool _genFramebuffersOESLoaded;
    bool _genListsLoaded;
    bool _genNamesAMDLoaded;
    bool _genOcclusionQueriesNVLoaded;
    bool _genPathsNVLoaded;
    bool _genPerfMonitorsAMDLoaded;
    bool _genProgramPipelinesLoaded;
    bool _genProgramPipelinesEXTLoaded;
    bool _genProgramsARBLoaded;
    bool _genProgramsNVLoaded;
    bool _genQueriesLoaded;
    bool _genQueriesARBLoaded;
    bool _genQueriesEXTLoaded;
    bool _genQueryResourceTagNVLoaded;
    bool _genRenderbuffersLoaded;
    bool _genRenderbuffersEXTLoaded;
    bool _genRenderbuffersOESLoaded;
    bool _genSamplersLoaded;
    bool _genSemaphoresEXTLoaded;
    bool _genSymbolsEXTLoaded;
    bool _genTexturesLoaded;
    bool _genTexturesEXTLoaded;
    bool _genTransformFeedbacksLoaded;
    bool _genTransformFeedbacksNVLoaded;
    bool _genVertexArraysLoaded;
    bool _genVertexArraysAPPLELoaded;
    bool _genVertexArraysOESLoaded;
    bool _genVertexShadersEXTLoaded;
    bool _getActiveAtomicCounterBufferivLoaded;
    bool _getActiveAttribLoaded;
    bool _getActiveAttribARBLoaded;
    bool _getActiveSubroutineNameLoaded;
    bool _getActiveSubroutineUniformivLoaded;
    bool _getActiveSubroutineUniformNameLoaded;
    bool _getActiveUniformLoaded;
    bool _getActiveUniformARBLoaded;
    bool _getActiveUniformBlockivLoaded;
    bool _getActiveUniformBlockNameLoaded;
    bool _getActiveUniformNameLoaded;
    bool _getActiveUniformsivLoaded;
    bool _getActiveVaryingNVLoaded;
    bool _getArrayObjectfvATILoaded;
    bool _getArrayObjectivATILoaded;
    bool _getAttachedObjectsARBLoaded;
    bool _getAttachedShadersLoaded;
    bool _getAttribLocationLoaded;
    bool _getAttribLocationARBLoaded;
    bool _getBooleanIndexedvEXTLoaded;
    bool _getBooleani_vLoaded;
    bool _getBooleanvLoaded;
    bool _getBufferParameteri64vLoaded;
    bool _getBufferParameterivLoaded;
    bool _getBufferParameterivARBLoaded;
    bool _getBufferParameterui64vNVLoaded;
    bool _getBufferPointervLoaded;
    bool _getBufferPointervARBLoaded;
    bool _getBufferPointervOESLoaded;
    bool _getBufferSubDataLoaded;
    bool _getBufferSubDataARBLoaded;
    bool _getClipPlaneLoaded;
    bool _getClipPlanefLoaded;
    bool _getClipPlanefOESLoaded;
    bool _getClipPlanexLoaded;
    bool _getClipPlanexOESLoaded;
    bool _getColorTableLoaded;
    bool _getColorTableEXTLoaded;
    bool _getColorTableParameterfvLoaded;
    bool _getColorTableParameterfvEXTLoaded;
    bool _getColorTableParameterfvSGILoaded;
    bool _getColorTableParameterivLoaded;
    bool _getColorTableParameterivEXTLoaded;
    bool _getColorTableParameterivSGILoaded;
    bool _getColorTableSGILoaded;
    bool _getCombinerInputParameterfvNVLoaded;
    bool _getCombinerInputParameterivNVLoaded;
    bool _getCombinerOutputParameterfvNVLoaded;
    bool _getCombinerOutputParameterivNVLoaded;
    bool _getCombinerStageParameterfvNVLoaded;
    bool _getCommandHeaderNVLoaded;
    bool _getCompressedMultiTexImageEXTLoaded;
    bool _getCompressedTexImageLoaded;
    bool _getCompressedTexImageARBLoaded;
    bool _getCompressedTextureImageLoaded;
    bool _getCompressedTextureImageEXTLoaded;
    bool _getCompressedTextureSubImageLoaded;
    bool _getConvolutionFilterLoaded;
    bool _getConvolutionFilterEXTLoaded;
    bool _getConvolutionParameterfvLoaded;
    bool _getConvolutionParameterfvEXTLoaded;
    bool _getConvolutionParameterivLoaded;
    bool _getConvolutionParameterivEXTLoaded;
    bool _getConvolutionParameterxvOESLoaded;
    bool _getCoverageModulationTableNVLoaded;
    bool _getDebugMessageLogLoaded;
    bool _getDebugMessageLogAMDLoaded;
    bool _getDebugMessageLogARBLoaded;
    bool _getDebugMessageLogKHRLoaded;
    bool _getDetailTexFuncSGISLoaded;
    bool _getDoubleIndexedvEXTLoaded;
    bool _getDoublei_vLoaded;
    bool _getDoublei_vEXTLoaded;
    bool _getDoublevLoaded;
    bool _getDriverControlsQCOMLoaded;
    bool _getDriverControlStringQCOMLoaded;
    bool _getErrorLoaded;
    bool _getFenceivNVLoaded;
    bool _getFinalCombinerInputParameterfvNVLoaded;
    bool _getFinalCombinerInputParameterivNVLoaded;
    bool _getFirstPerfQueryIdINTELLoaded;
    bool _getFixedvLoaded;
    bool _getFixedvOESLoaded;
    bool _getFloatIndexedvEXTLoaded;
    bool _getFloati_vLoaded;
    bool _getFloati_vEXTLoaded;
    bool _getFloati_vNVLoaded;
    bool _getFloati_vOESLoaded;
    bool _getFloatvLoaded;
    bool _getFogFuncSGISLoaded;
    bool _getFragDataIndexLoaded;
    bool _getFragDataIndexEXTLoaded;
    bool _getFragDataLocationLoaded;
    bool _getFragDataLocationEXTLoaded;
    bool _getFragmentLightfvSGIXLoaded;
    bool _getFragmentLightivSGIXLoaded;
    bool _getFragmentMaterialfvSGIXLoaded;
    bool _getFragmentMaterialivSGIXLoaded;
    bool _getFragmentShadingRatesEXTLoaded;
    bool _getFramebufferAttachmentParameterivLoaded;
    bool _getFramebufferAttachmentParameterivEXTLoaded;
    bool _getFramebufferAttachmentParameterivOESLoaded;
    bool _getFramebufferParameterfvAMDLoaded;
    bool _getFramebufferParameterivLoaded;
    bool _getFramebufferParameterivEXTLoaded;
    bool _getFramebufferParameterivMESALoaded;
    bool _getFramebufferPixelLocalStorageSizeEXTLoaded;
    bool _getGraphicsResetStatusLoaded;
    bool _getGraphicsResetStatusARBLoaded;
    bool _getGraphicsResetStatusEXTLoaded;
    bool _getGraphicsResetStatusKHRLoaded;
    bool _getHandleARBLoaded;
    bool _getHistogramLoaded;
    bool _getHistogramEXTLoaded;
    bool _getHistogramParameterfvLoaded;
    bool _getHistogramParameterfvEXTLoaded;
    bool _getHistogramParameterivLoaded;
    bool _getHistogramParameterivEXTLoaded;
    bool _getHistogramParameterxvOESLoaded;
    bool _getImageHandleARBLoaded;
    bool _getImageHandleNVLoaded;
    bool _getImageTransformParameterfvHPLoaded;
    bool _getImageTransformParameterivHPLoaded;
    bool _getInfoLogARBLoaded;
    bool _getInstrumentsSGIXLoaded;
    bool _getInteger64i_vLoaded;
    bool _getInteger64vLoaded;
    bool _getInteger64vAPPLELoaded;
    bool _getInteger64vEXTLoaded;
    bool _getIntegerIndexedvEXTLoaded;
    bool _getIntegeri_vLoaded;
    bool _getIntegeri_vEXTLoaded;
    bool _getIntegerui64i_vNVLoaded;
    bool _getIntegerui64vNVLoaded;
    bool _getIntegervLoaded;
    bool _getInternalformati64vLoaded;
    bool _getInternalformativLoaded;
    bool _getInternalformatSampleivNVLoaded;
    bool _getInvariantBooleanvEXTLoaded;
    bool _getInvariantFloatvEXTLoaded;
    bool _getInvariantIntegervEXTLoaded;
    bool _getLightfvLoaded;
    bool _getLightivLoaded;
    bool _getLightxOESLoaded;
    bool _getLightxvLoaded;
    bool _getLightxvOESLoaded;
    bool _getListParameterfvSGIXLoaded;
    bool _getListParameterivSGIXLoaded;
    bool _getLocalConstantBooleanvEXTLoaded;
    bool _getLocalConstantFloatvEXTLoaded;
    bool _getLocalConstantIntegervEXTLoaded;
    bool _getMapAttribParameterfvNVLoaded;
    bool _getMapAttribParameterivNVLoaded;
    bool _getMapControlPointsNVLoaded;
    bool _getMapdvLoaded;
    bool _getMapfvLoaded;
    bool _getMapivLoaded;
    bool _getMapParameterfvNVLoaded;
    bool _getMapParameterivNVLoaded;
    bool _getMapxvOESLoaded;
    bool _getMaterialfvLoaded;
    bool _getMaterialivLoaded;
    bool _getMaterialxOESLoaded;
    bool _getMaterialxvLoaded;
    bool _getMaterialxvOESLoaded;
    bool _getMemoryObjectDetachedResourcesuivNVLoaded;
    bool _getMemoryObjectParameterivEXTLoaded;
    bool _getMinmaxLoaded;
    bool _getMinmaxEXTLoaded;
    bool _getMinmaxParameterfvLoaded;
    bool _getMinmaxParameterfvEXTLoaded;
    bool _getMinmaxParameterivLoaded;
    bool _getMinmaxParameterivEXTLoaded;
    bool _getMultisamplefvLoaded;
    bool _getMultisamplefvNVLoaded;
    bool _getMultiTexEnvfvEXTLoaded;
    bool _getMultiTexEnvivEXTLoaded;
    bool _getMultiTexGendvEXTLoaded;
    bool _getMultiTexGenfvEXTLoaded;
    bool _getMultiTexGenivEXTLoaded;
    bool _getMultiTexImageEXTLoaded;
    bool _getMultiTexLevelParameterfvEXTLoaded;
    bool _getMultiTexLevelParameterivEXTLoaded;
    bool _getMultiTexParameterfvEXTLoaded;
    bool _getMultiTexParameterIivEXTLoaded;
    bool _getMultiTexParameterIuivEXTLoaded;
    bool _getMultiTexParameterivEXTLoaded;
    bool _getNamedBufferParameteri64vLoaded;
    bool _getNamedBufferParameterivLoaded;
    bool _getNamedBufferParameterivEXTLoaded;
    bool _getNamedBufferParameterui64vNVLoaded;
    bool _getNamedBufferPointervLoaded;
    bool _getNamedBufferPointervEXTLoaded;
    bool _getNamedBufferSubDataLoaded;
    bool _getNamedBufferSubDataEXTLoaded;
    bool _getNamedFramebufferAttachmentParameterivLoaded;
    bool _getNamedFramebufferAttachmentParameterivEXTLoaded;
    bool _getNamedFramebufferParameterfvAMDLoaded;
    bool _getNamedFramebufferParameterivLoaded;
    bool _getNamedFramebufferParameterivEXTLoaded;
    bool _getNamedProgramivEXTLoaded;
    bool _getNamedProgramLocalParameterdvEXTLoaded;
    bool _getNamedProgramLocalParameterfvEXTLoaded;
    bool _getNamedProgramLocalParameterIivEXTLoaded;
    bool _getNamedProgramLocalParameterIuivEXTLoaded;
    bool _getNamedProgramStringEXTLoaded;
    bool _getNamedRenderbufferParameterivLoaded;
    bool _getNamedRenderbufferParameterivEXTLoaded;
    bool _getNamedStringARBLoaded;
    bool _getNamedStringivARBLoaded;
    bool _getnColorTableLoaded;
    bool _getnColorTableARBLoaded;
    bool _getnCompressedTexImageLoaded;
    bool _getnCompressedTexImageARBLoaded;
    bool _getnConvolutionFilterLoaded;
    bool _getnConvolutionFilterARBLoaded;
    bool _getNextPerfQueryIdINTELLoaded;
    bool _getnHistogramLoaded;
    bool _getnHistogramARBLoaded;
    bool _getnMapdvLoaded;
    bool _getnMapdvARBLoaded;
    bool _getnMapfvLoaded;
    bool _getnMapfvARBLoaded;
    bool _getnMapivLoaded;
    bool _getnMapivARBLoaded;
    bool _getnMinmaxLoaded;
    bool _getnMinmaxARBLoaded;
    bool _getnPixelMapfvLoaded;
    bool _getnPixelMapfvARBLoaded;
    bool _getnPixelMapuivLoaded;
    bool _getnPixelMapuivARBLoaded;
    bool _getnPixelMapusvLoaded;
    bool _getnPixelMapusvARBLoaded;
    bool _getnPolygonStippleLoaded;
    bool _getnPolygonStippleARBLoaded;
    bool _getnSeparableFilterLoaded;
    bool _getnSeparableFilterARBLoaded;
    bool _getnTexImageLoaded;
    bool _getnTexImageARBLoaded;
    bool _getnUniformdvLoaded;
    bool _getnUniformdvARBLoaded;
    bool _getnUniformfvLoaded;
    bool _getnUniformfvARBLoaded;
    bool _getnUniformfvEXTLoaded;
    bool _getnUniformfvKHRLoaded;
    bool _getnUniformi64vARBLoaded;
    bool _getnUniformivLoaded;
    bool _getnUniformivARBLoaded;
    bool _getnUniformivEXTLoaded;
    bool _getnUniformivKHRLoaded;
    bool _getnUniformui64vARBLoaded;
    bool _getnUniformuivLoaded;
    bool _getnUniformuivARBLoaded;
    bool _getnUniformuivKHRLoaded;
    bool _getObjectBufferfvATILoaded;
    bool _getObjectBufferivATILoaded;
    bool _getObjectLabelLoaded;
    bool _getObjectLabelEXTLoaded;
    bool _getObjectLabelKHRLoaded;
    bool _getObjectParameterfvARBLoaded;
    bool _getObjectParameterivAPPLELoaded;
    bool _getObjectParameterivARBLoaded;
    bool _getObjectPtrLabelLoaded;
    bool _getObjectPtrLabelKHRLoaded;
    bool _getOcclusionQueryivNVLoaded;
    bool _getOcclusionQueryuivNVLoaded;
    bool _getPathColorGenfvNVLoaded;
    bool _getPathColorGenivNVLoaded;
    bool _getPathCommandsNVLoaded;
    bool _getPathCoordsNVLoaded;
    bool _getPathDashArrayNVLoaded;
    bool _getPathLengthNVLoaded;
    bool _getPathMetricRangeNVLoaded;
    bool _getPathMetricsNVLoaded;
    bool _getPathParameterfvNVLoaded;
    bool _getPathParameterivNVLoaded;
    bool _getPathSpacingNVLoaded;
    bool _getPathTexGenfvNVLoaded;
    bool _getPathTexGenivNVLoaded;
    bool _getPerfCounterInfoINTELLoaded;
    bool _getPerfMonitorCounterDataAMDLoaded;
    bool _getPerfMonitorCounterInfoAMDLoaded;
    bool _getPerfMonitorCountersAMDLoaded;
    bool _getPerfMonitorCounterStringAMDLoaded;
    bool _getPerfMonitorGroupsAMDLoaded;
    bool _getPerfMonitorGroupStringAMDLoaded;
    bool _getPerfQueryDataINTELLoaded;
    bool _getPerfQueryIdByNameINTELLoaded;
    bool _getPerfQueryInfoINTELLoaded;
    bool _getPixelMapfvLoaded;
    bool _getPixelMapuivLoaded;
    bool _getPixelMapusvLoaded;
    bool _getPixelMapxvLoaded;
    bool _getPixelTexGenParameterfvSGISLoaded;
    bool _getPixelTexGenParameterivSGISLoaded;
    bool _getPixelTransformParameterfvEXTLoaded;
    bool _getPixelTransformParameterivEXTLoaded;
    bool _getPointerIndexedvEXTLoaded;
    bool _getPointeri_vEXTLoaded;
    bool _getPointervLoaded;
    bool _getPointervEXTLoaded;
    bool _getPointervKHRLoaded;
    bool _getPolygonStippleLoaded;
    bool _getProgramBinaryLoaded;
    bool _getProgramBinaryOESLoaded;
    bool _getProgramEnvParameterdvARBLoaded;
    bool _getProgramEnvParameterfvARBLoaded;
    bool _getProgramEnvParameterIivNVLoaded;
    bool _getProgramEnvParameterIuivNVLoaded;
    bool _getProgramInfoLogLoaded;
    bool _getProgramInterfaceivLoaded;
    bool _getProgramivLoaded;
    bool _getProgramivARBLoaded;
    bool _getProgramivNVLoaded;
    bool _getProgramLocalParameterdvARBLoaded;
    bool _getProgramLocalParameterfvARBLoaded;
    bool _getProgramLocalParameterIivNVLoaded;
    bool _getProgramLocalParameterIuivNVLoaded;
    bool _getProgramNamedParameterdvNVLoaded;
    bool _getProgramNamedParameterfvNVLoaded;
    bool _getProgramParameterdvNVLoaded;
    bool _getProgramParameterfvNVLoaded;
    bool _getProgramPipelineInfoLogLoaded;
    bool _getProgramPipelineInfoLogEXTLoaded;
    bool _getProgramPipelineivLoaded;
    bool _getProgramPipelineivEXTLoaded;
    bool _getProgramResourcefvNVLoaded;
    bool _getProgramResourceIndexLoaded;
    bool _getProgramResourceivLoaded;
    bool _getProgramResourceLocationLoaded;
    bool _getProgramResourceLocationIndexLoaded;
    bool _getProgramResourceLocationIndexEXTLoaded;
    bool _getProgramResourceNameLoaded;
    bool _getProgramStageivLoaded;
    bool _getProgramStringARBLoaded;
    bool _getProgramStringNVLoaded;
    bool _getProgramSubroutineParameteruivNVLoaded;
    bool _getQueryBufferObjecti64vLoaded;
    bool _getQueryBufferObjectivLoaded;
    bool _getQueryBufferObjectui64vLoaded;
    bool _getQueryBufferObjectuivLoaded;
    bool _getQueryIndexedivLoaded;
    bool _getQueryivLoaded;
    bool _getQueryivARBLoaded;
    bool _getQueryivEXTLoaded;
    bool _getQueryObjecti64vLoaded;
    bool _getQueryObjecti64vEXTLoaded;
    bool _getQueryObjectivLoaded;
    bool _getQueryObjectivARBLoaded;
    bool _getQueryObjectivEXTLoaded;
    bool _getQueryObjectui64vLoaded;
    bool _getQueryObjectui64vEXTLoaded;
    bool _getQueryObjectuivLoaded;
    bool _getQueryObjectuivARBLoaded;
    bool _getQueryObjectuivEXTLoaded;
    bool _getRenderbufferParameterivLoaded;
    bool _getRenderbufferParameterivEXTLoaded;
    bool _getRenderbufferParameterivOESLoaded;
    bool _getSamplerParameterfvLoaded;
    bool _getSamplerParameterIivLoaded;
    bool _getSamplerParameterIivEXTLoaded;
    bool _getSamplerParameterIivOESLoaded;
    bool _getSamplerParameterIuivLoaded;
    bool _getSamplerParameterIuivEXTLoaded;
    bool _getSamplerParameterIuivOESLoaded;
    bool _getSamplerParameterivLoaded;
    bool _getSemaphoreParameterivNVLoaded;
    bool _getSemaphoreParameterui64vEXTLoaded;
    bool _getSeparableFilterLoaded;
    bool _getSeparableFilterEXTLoaded;
    bool _getShaderInfoLogLoaded;
    bool _getShaderivLoaded;
    bool _getShaderPrecisionFormatLoaded;
    bool _getShaderSourceLoaded;
    bool _getShaderSourceARBLoaded;
    bool _getShadingRateImagePaletteNVLoaded;
    bool _getShadingRateSampleLocationivNVLoaded;
    bool _getSharpenTexFuncSGISLoaded;
    bool _getStageIndexNVLoaded;
    bool _getStringLoaded;
    bool _getStringiLoaded;
    bool _getSubroutineIndexLoaded;
    bool _getSubroutineUniformLocationLoaded;
    bool _getSyncivLoaded;
    bool _getSyncivAPPLELoaded;
    bool _getTexBumpParameterfvATILoaded;
    bool _getTexBumpParameterivATILoaded;
    bool _getTexEnvfvLoaded;
    bool _getTexEnvivLoaded;
    bool _getTexEnvxvLoaded;
    bool _getTexEnvxvOESLoaded;
    bool _getTexFilterFuncSGISLoaded;
    bool _getTexGendvLoaded;
    bool _getTexGenfvLoaded;
    bool _getTexGenfvOESLoaded;
    bool _getTexGenivLoaded;
    bool _getTexGenivOESLoaded;
    bool _getTexGenxvOESLoaded;
    bool _getTexImageLoaded;
    bool _getTexLevelParameterfvLoaded;
    bool _getTexLevelParameterivLoaded;
    bool _getTexLevelParameterxvOESLoaded;
    bool _getTexParameterfvLoaded;
    bool _getTexParameterIivLoaded;
    bool _getTexParameterIivEXTLoaded;
    bool _getTexParameterIivOESLoaded;
    bool _getTexParameterIuivLoaded;
    bool _getTexParameterIuivEXTLoaded;
    bool _getTexParameterIuivOESLoaded;
    bool _getTexParameterivLoaded;
    bool _getTexParameterPointervAPPLELoaded;
    bool _getTexParameterxvLoaded;
    bool _getTexParameterxvOESLoaded;
    bool _getTextureHandleARBLoaded;
    bool _getTextureHandleIMGLoaded;
    bool _getTextureHandleNVLoaded;
    bool _getTextureImageLoaded;
    bool _getTextureImageEXTLoaded;
    bool _getTextureLevelParameterfvLoaded;
    bool _getTextureLevelParameterfvEXTLoaded;
    bool _getTextureLevelParameterivLoaded;
    bool _getTextureLevelParameterivEXTLoaded;
    bool _getTextureParameterfvLoaded;
    bool _getTextureParameterfvEXTLoaded;
    bool _getTextureParameterIivLoaded;
    bool _getTextureParameterIivEXTLoaded;
    bool _getTextureParameterIuivLoaded;
    bool _getTextureParameterIuivEXTLoaded;
    bool _getTextureParameterivLoaded;
    bool _getTextureParameterivEXTLoaded;
    bool _getTextureSamplerHandleARBLoaded;
    bool _getTextureSamplerHandleIMGLoaded;
    bool _getTextureSamplerHandleNVLoaded;
    bool _getTextureSubImageLoaded;
    bool _getTrackMatrixivNVLoaded;
    bool _getTransformFeedbacki64_vLoaded;
    bool _getTransformFeedbackivLoaded;
    bool _getTransformFeedbacki_vLoaded;
    bool _getTransformFeedbackVaryingLoaded;
    bool _getTransformFeedbackVaryingEXTLoaded;
    bool _getTransformFeedbackVaryingNVLoaded;
    bool _getTranslatedShaderSourceANGLELoaded;
    bool _getUniformBlockIndexLoaded;
    bool _getUniformBufferSizeEXTLoaded;
    bool _getUniformdvLoaded;
    bool _getUniformfvLoaded;
    bool _getUniformfvARBLoaded;
    bool _getUniformi64vARBLoaded;
    bool _getUniformi64vNVLoaded;
    bool _getUniformIndicesLoaded;
    bool _getUniformivLoaded;
    bool _getUniformivARBLoaded;
    bool _getUniformLocationLoaded;
    bool _getUniformLocationARBLoaded;
    bool _getUniformOffsetEXTLoaded;
    bool _getUniformSubroutineuivLoaded;
    bool _getUniformui64vARBLoaded;
    bool _getUniformui64vNVLoaded;
    bool _getUniformuivLoaded;
    bool _getUniformuivEXTLoaded;
    bool _getUnsignedBytei_vEXTLoaded;
    bool _getUnsignedBytevEXTLoaded;
    bool _getVariantArrayObjectfvATILoaded;
    bool _getVariantArrayObjectivATILoaded;
    bool _getVariantBooleanvEXTLoaded;
    bool _getVariantFloatvEXTLoaded;
    bool _getVariantIntegervEXTLoaded;
    bool _getVariantPointervEXTLoaded;
    bool _getVaryingLocationNVLoaded;
    bool _getVertexArrayIndexed64ivLoaded;
    bool _getVertexArrayIndexedivLoaded;
    bool _getVertexArrayIntegeri_vEXTLoaded;
    bool _getVertexArrayIntegervEXTLoaded;
    bool _getVertexArrayivLoaded;
    bool _getVertexArrayPointeri_vEXTLoaded;
    bool _getVertexArrayPointervEXTLoaded;
    bool _getVertexAttribArrayObjectfvATILoaded;
    bool _getVertexAttribArrayObjectivATILoaded;
    bool _getVertexAttribdvLoaded;
    bool _getVertexAttribdvARBLoaded;
    bool _getVertexAttribdvNVLoaded;
    bool _getVertexAttribfvLoaded;
    bool _getVertexAttribfvARBLoaded;
    bool _getVertexAttribfvNVLoaded;
    bool _getVertexAttribIivLoaded;
    bool _getVertexAttribIivEXTLoaded;
    bool _getVertexAttribIuivLoaded;
    bool _getVertexAttribIuivEXTLoaded;
    bool _getVertexAttribivLoaded;
    bool _getVertexAttribivARBLoaded;
    bool _getVertexAttribivNVLoaded;
    bool _getVertexAttribLdvLoaded;
    bool _getVertexAttribLdvEXTLoaded;
    bool _getVertexAttribLi64vNVLoaded;
    bool _getVertexAttribLui64vARBLoaded;
    bool _getVertexAttribLui64vNVLoaded;
    bool _getVertexAttribPointervLoaded;
    bool _getVertexAttribPointervARBLoaded;
    bool _getVertexAttribPointervNVLoaded;
    bool _getVideoCaptureivNVLoaded;
    bool _getVideoCaptureStreamdvNVLoaded;
    bool _getVideoCaptureStreamfvNVLoaded;
    bool _getVideoCaptureStreamivNVLoaded;
    bool _getVideoi64vNVLoaded;
    bool _getVideoivNVLoaded;
    bool _getVideoui64vNVLoaded;
    bool _getVideouivNVLoaded;
    bool _getVkProcAddrNVLoaded;
    bool _globalAlphaFactorbSUNLoaded;
    bool _globalAlphaFactordSUNLoaded;
    bool _globalAlphaFactorfSUNLoaded;
    bool _globalAlphaFactoriSUNLoaded;
    bool _globalAlphaFactorsSUNLoaded;
    bool _globalAlphaFactorubSUNLoaded;
    bool _globalAlphaFactoruiSUNLoaded;
    bool _globalAlphaFactorusSUNLoaded;
    bool _hintLoaded;
    bool _hintPGILoaded;
    bool _histogramLoaded;
    bool _histogramEXTLoaded;
    bool _iglooInterfaceSGIXLoaded;
    bool _imageTransformParameterfHPLoaded;
    bool _imageTransformParameterfvHPLoaded;
    bool _imageTransformParameteriHPLoaded;
    bool _imageTransformParameterivHPLoaded;
    bool _importMemoryFdEXTLoaded;
    bool _importMemoryWin32HandleEXTLoaded;
    bool _importMemoryWin32NameEXTLoaded;
    bool _importSemaphoreFdEXTLoaded;
    bool _importSemaphoreWin32HandleEXTLoaded;
    bool _importSemaphoreWin32NameEXTLoaded;
    bool _importSyncEXTLoaded;
    bool _indexdLoaded;
    bool _indexdvLoaded;
    bool _indexfLoaded;
    bool _indexFormatNVLoaded;
    bool _indexFuncEXTLoaded;
    bool _indexfvLoaded;
    bool _indexiLoaded;
    bool _indexivLoaded;
    bool _indexMaskLoaded;
    bool _indexMaterialEXTLoaded;
    bool _indexPointerLoaded;
    bool _indexPointerEXTLoaded;
    bool _indexPointerListIBMLoaded;
    bool _indexsLoaded;
    bool _indexsvLoaded;
    bool _indexubLoaded;
    bool _indexubvLoaded;
    bool _indexxOESLoaded;
    bool _indexxvOESLoaded;
    bool _initNamesLoaded;
    bool _insertComponentEXTLoaded;
    bool _insertEventMarkerEXTLoaded;
    bool _instrumentsBufferSGIXLoaded;
    bool _interleavedArraysLoaded;
    bool _interpolatePathsNVLoaded;
    bool _invalidateBufferDataLoaded;
    bool _invalidateBufferSubDataLoaded;
    bool _invalidateFramebufferLoaded;
    bool _invalidateNamedFramebufferDataLoaded;
    bool _invalidateNamedFramebufferSubDataLoaded;
    bool _invalidateSubFramebufferLoaded;
    bool _invalidateTexImageLoaded;
    bool _invalidateTexSubImageLoaded;
    bool _isAsyncMarkerSGIXLoaded;
    bool _isBufferLoaded;
    bool _isBufferARBLoaded;
    bool _isBufferResidentNVLoaded;
    bool _isCommandListNVLoaded;
    bool _isEnabledLoaded;
    bool _isEnablediLoaded;
    bool _isEnablediEXTLoaded;
    bool _isEnabledIndexedEXTLoaded;
    bool _isEnablediNVLoaded;
    bool _isEnablediOESLoaded;
    bool _isFenceAPPLELoaded;
    bool _isFenceNVLoaded;
    bool _isFramebufferLoaded;
    bool _isFramebufferEXTLoaded;
    bool _isFramebufferOESLoaded;
    bool _isImageHandleResidentARBLoaded;
    bool _isImageHandleResidentNVLoaded;
    bool _isListLoaded;
    bool _isMemoryObjectEXTLoaded;
    bool _isNameAMDLoaded;
    bool _isNamedBufferResidentNVLoaded;
    bool _isNamedStringARBLoaded;
    bool _isObjectBufferATILoaded;
    bool _isOcclusionQueryNVLoaded;
    bool _isPathNVLoaded;
    bool _isPointInFillPathNVLoaded;
    bool _isPointInStrokePathNVLoaded;
    bool _isProgramLoaded;
    bool _isProgramARBLoaded;
    bool _isProgramNVLoaded;
    bool _isProgramPipelineLoaded;
    bool _isProgramPipelineEXTLoaded;
    bool _isQueryLoaded;
    bool _isQueryARBLoaded;
    bool _isQueryEXTLoaded;
    bool _isRenderbufferLoaded;
    bool _isRenderbufferEXTLoaded;
    bool _isRenderbufferOESLoaded;
    bool _isSamplerLoaded;
    bool _isSemaphoreEXTLoaded;
    bool _isShaderLoaded;
    bool _isStateNVLoaded;
    bool _isSyncLoaded;
    bool _isSyncAPPLELoaded;
    bool _isTextureLoaded;
    bool _isTextureEXTLoaded;
    bool _isTextureHandleResidentARBLoaded;
    bool _isTextureHandleResidentNVLoaded;
    bool _isTransformFeedbackLoaded;
    bool _isTransformFeedbackNVLoaded;
    bool _isVariantEnabledEXTLoaded;
    bool _isVertexArrayLoaded;
    bool _isVertexArrayAPPLELoaded;
    bool _isVertexArrayOESLoaded;
    bool _isVertexAttribEnabledAPPLELoaded;
    bool _labelObjectEXTLoaded;
    bool _lGPUCopyImageSubDataNVXLoaded;
    bool _lGPUInterlockNVXLoaded;
    bool _lGPUNamedBufferSubDataNVXLoaded;
    bool _lightEnviSGIXLoaded;
    bool _lightfLoaded;
    bool _lightfvLoaded;
    bool _lightiLoaded;
    bool _lightivLoaded;
    bool _lightModelfLoaded;
    bool _lightModelfvLoaded;
    bool _lightModeliLoaded;
    bool _lightModelivLoaded;
    bool _lightModelxLoaded;
    bool _lightModelxOESLoaded;
    bool _lightModelxvLoaded;
    bool _lightModelxvOESLoaded;
    bool _lightxLoaded;
    bool _lightxOESLoaded;
    bool _lightxvLoaded;
    bool _lightxvOESLoaded;
    bool _lineStippleLoaded;
    bool _lineWidthLoaded;
    bool _lineWidthxLoaded;
    bool _lineWidthxOESLoaded;
    bool _linkProgramLoaded;
    bool _linkProgramARBLoaded;
    bool _listBaseLoaded;
    bool _listDrawCommandsStatesClientNVLoaded;
    bool _listParameterfSGIXLoaded;
    bool _listParameterfvSGIXLoaded;
    bool _listParameteriSGIXLoaded;
    bool _listParameterivSGIXLoaded;
    bool _loadIdentityLoaded;
    bool _loadIdentityDeformationMapSGIXLoaded;
    bool _loadMatrixdLoaded;
    bool _loadMatrixfLoaded;
    bool _loadMatrixxLoaded;
    bool _loadMatrixxOESLoaded;
    bool _loadNameLoaded;
    bool _loadPaletteFromModelViewMatrixOESLoaded;
    bool _loadProgramNVLoaded;
    bool _loadTransposeMatrixdLoaded;
    bool _loadTransposeMatrixdARBLoaded;
    bool _loadTransposeMatrixfLoaded;
    bool _loadTransposeMatrixfARBLoaded;
    bool _loadTransposeMatrixxOESLoaded;
    bool _lockArraysEXTLoaded;
    bool _logicOpLoaded;
    bool _makeBufferNonResidentNVLoaded;
    bool _makeBufferResidentNVLoaded;
    bool _makeImageHandleNonResidentARBLoaded;
    bool _makeImageHandleNonResidentNVLoaded;
    bool _makeImageHandleResidentARBLoaded;
    bool _makeImageHandleResidentNVLoaded;
    bool _makeNamedBufferNonResidentNVLoaded;
    bool _makeNamedBufferResidentNVLoaded;
    bool _makeTextureHandleNonResidentARBLoaded;
    bool _makeTextureHandleNonResidentNVLoaded;
    bool _makeTextureHandleResidentARBLoaded;
    bool _makeTextureHandleResidentNVLoaded;
    bool _map1dLoaded;
    bool _map1fLoaded;
    bool _map1xOESLoaded;
    bool _map2dLoaded;
    bool _map2fLoaded;
    bool _map2xOESLoaded;
    bool _mapBufferLoaded;
    bool _mapBufferARBLoaded;
    bool _mapBufferOESLoaded;
    bool _mapBufferRangeLoaded;
    bool _mapBufferRangeEXTLoaded;
    bool _mapControlPointsNVLoaded;
    bool _mapGrid1dLoaded;
    bool _mapGrid1fLoaded;
    bool _mapGrid1xOESLoaded;
    bool _mapGrid2dLoaded;
    bool _mapGrid2fLoaded;
    bool _mapGrid2xOESLoaded;
    bool _mapNamedBufferLoaded;
    bool _mapNamedBufferEXTLoaded;
    bool _mapNamedBufferRangeLoaded;
    bool _mapNamedBufferRangeEXTLoaded;
    bool _mapObjectBufferATILoaded;
    bool _mapParameterfvNVLoaded;
    bool _mapParameterivNVLoaded;
    bool _mapTexture2DINTELLoaded;
    bool _mapVertexAttrib1dAPPLELoaded;
    bool _mapVertexAttrib1fAPPLELoaded;
    bool _mapVertexAttrib2dAPPLELoaded;
    bool _mapVertexAttrib2fAPPLELoaded;
    bool _materialfLoaded;
    bool _materialfvLoaded;
    bool _materialiLoaded;
    bool _materialivLoaded;
    bool _materialxLoaded;
    bool _materialxOESLoaded;
    bool _materialxvLoaded;
    bool _materialxvOESLoaded;
    bool _matrixFrustumEXTLoaded;
    bool _matrixIndexPointerARBLoaded;
    bool _matrixIndexPointerOESLoaded;
    bool _matrixIndexubvARBLoaded;
    bool _matrixIndexuivARBLoaded;
    bool _matrixIndexusvARBLoaded;
    bool _matrixLoad3x2fNVLoaded;
    bool _matrixLoad3x3fNVLoaded;
    bool _matrixLoaddEXTLoaded;
    bool _matrixLoadfEXTLoaded;
    bool _matrixLoadIdentityEXTLoaded;
    bool _matrixLoadTranspose3x3fNVLoaded;
    bool _matrixLoadTransposedEXTLoaded;
    bool _matrixLoadTransposefEXTLoaded;
    bool _matrixModeLoaded;
    bool _matrixMult3x2fNVLoaded;
    bool _matrixMult3x3fNVLoaded;
    bool _matrixMultdEXTLoaded;
    bool _matrixMultfEXTLoaded;
    bool _matrixMultTranspose3x3fNVLoaded;
    bool _matrixMultTransposedEXTLoaded;
    bool _matrixMultTransposefEXTLoaded;
    bool _matrixOrthoEXTLoaded;
    bool _matrixPopEXTLoaded;
    bool _matrixPushEXTLoaded;
    bool _matrixRotatedEXTLoaded;
    bool _matrixRotatefEXTLoaded;
    bool _matrixScaledEXTLoaded;
    bool _matrixScalefEXTLoaded;
    bool _matrixTranslatedEXTLoaded;
    bool _matrixTranslatefEXTLoaded;
    bool _maxShaderCompilerThreadsARBLoaded;
    bool _maxShaderCompilerThreadsKHRLoaded;
    bool _memoryBarrierLoaded;
    bool _memoryBarrierByRegionLoaded;
    bool _memoryBarrierEXTLoaded;
    bool _memoryObjectParameterivEXTLoaded;
    bool _minmaxLoaded;
    bool _minmaxEXTLoaded;
    bool _minSampleShadingLoaded;
    bool _minSampleShadingARBLoaded;
    bool _minSampleShadingOESLoaded;
    bool _multicastBarrierNVLoaded;
    bool _multicastBlitFramebufferNVLoaded;
    bool _multicastBufferSubDataNVLoaded;
    bool _multicastCopyBufferSubDataNVLoaded;
    bool _multicastCopyImageSubDataNVLoaded;
    bool _multicastFramebufferSampleLocationsfvNVLoaded;
    bool _multicastGetQueryObjecti64vNVLoaded;
    bool _multicastGetQueryObjectivNVLoaded;
    bool _multicastGetQueryObjectui64vNVLoaded;
    bool _multicastGetQueryObjectuivNVLoaded;
    bool _multicastScissorArrayvNVXLoaded;
    bool _multicastViewportArrayvNVXLoaded;
    bool _multicastViewportPositionWScaleNVXLoaded;
    bool _multicastWaitSyncNVLoaded;
    bool _multiDrawArraysLoaded;
    bool _multiDrawArraysEXTLoaded;
    bool _multiDrawArraysIndirectLoaded;
    bool _multiDrawArraysIndirectAMDLoaded;
    bool _multiDrawArraysIndirectBindlessCountNVLoaded;
    bool _multiDrawArraysIndirectBindlessNVLoaded;
    bool _multiDrawArraysIndirectCountLoaded;
    bool _multiDrawArraysIndirectCountARBLoaded;
    bool _multiDrawArraysIndirectEXTLoaded;
    bool _multiDrawElementArrayAPPLELoaded;
    bool _multiDrawElementsLoaded;
    bool _multiDrawElementsBaseVertexLoaded;
    bool _multiDrawElementsBaseVertexEXTLoaded;
    bool _multiDrawElementsEXTLoaded;
    bool _multiDrawElementsIndirectLoaded;
    bool _multiDrawElementsIndirectAMDLoaded;
    bool _multiDrawElementsIndirectBindlessCountNVLoaded;
    bool _multiDrawElementsIndirectBindlessNVLoaded;
    bool _multiDrawElementsIndirectCountLoaded;
    bool _multiDrawElementsIndirectCountARBLoaded;
    bool _multiDrawElementsIndirectEXTLoaded;
    bool _multiDrawMeshTasksIndirectCountNVLoaded;
    bool _multiDrawMeshTasksIndirectNVLoaded;
    bool _multiDrawRangeElementArrayAPPLELoaded;
    bool _multiModeDrawArraysIBMLoaded;
    bool _multiModeDrawElementsIBMLoaded;
    bool _multiTexBufferEXTLoaded;
    bool _multiTexCoord1bOESLoaded;
    bool _multiTexCoord1bvOESLoaded;
    bool _multiTexCoord1dLoaded;
    bool _multiTexCoord1dARBLoaded;
    bool _multiTexCoord1dvLoaded;
    bool _multiTexCoord1dvARBLoaded;
    bool _multiTexCoord1fLoaded;
    bool _multiTexCoord1fARBLoaded;
    bool _multiTexCoord1fvLoaded;
    bool _multiTexCoord1fvARBLoaded;
    bool _multiTexCoord1hNVLoaded;
    bool _multiTexCoord1hvNVLoaded;
    bool _multiTexCoord1iLoaded;
    bool _multiTexCoord1iARBLoaded;
    bool _multiTexCoord1ivLoaded;
    bool _multiTexCoord1ivARBLoaded;
    bool _multiTexCoord1sLoaded;
    bool _multiTexCoord1sARBLoaded;
    bool _multiTexCoord1svLoaded;
    bool _multiTexCoord1svARBLoaded;
    bool _multiTexCoord1xOESLoaded;
    bool _multiTexCoord1xvOESLoaded;
    bool _multiTexCoord2bOESLoaded;
    bool _multiTexCoord2bvOESLoaded;
    bool _multiTexCoord2dLoaded;
    bool _multiTexCoord2dARBLoaded;
    bool _multiTexCoord2dvLoaded;
    bool _multiTexCoord2dvARBLoaded;
    bool _multiTexCoord2fLoaded;
    bool _multiTexCoord2fARBLoaded;
    bool _multiTexCoord2fvLoaded;
    bool _multiTexCoord2fvARBLoaded;
    bool _multiTexCoord2hNVLoaded;
    bool _multiTexCoord2hvNVLoaded;
    bool _multiTexCoord2iLoaded;
    bool _multiTexCoord2iARBLoaded;
    bool _multiTexCoord2ivLoaded;
    bool _multiTexCoord2ivARBLoaded;
    bool _multiTexCoord2sLoaded;
    bool _multiTexCoord2sARBLoaded;
    bool _multiTexCoord2svLoaded;
    bool _multiTexCoord2svARBLoaded;
    bool _multiTexCoord2xOESLoaded;
    bool _multiTexCoord2xvOESLoaded;
    bool _multiTexCoord3bOESLoaded;
    bool _multiTexCoord3bvOESLoaded;
    bool _multiTexCoord3dLoaded;
    bool _multiTexCoord3dARBLoaded;
    bool _multiTexCoord3dvLoaded;
    bool _multiTexCoord3dvARBLoaded;
    bool _multiTexCoord3fLoaded;
    bool _multiTexCoord3fARBLoaded;
    bool _multiTexCoord3fvLoaded;
    bool _multiTexCoord3fvARBLoaded;
    bool _multiTexCoord3hNVLoaded;
    bool _multiTexCoord3hvNVLoaded;
    bool _multiTexCoord3iLoaded;
    bool _multiTexCoord3iARBLoaded;
    bool _multiTexCoord3ivLoaded;
    bool _multiTexCoord3ivARBLoaded;
    bool _multiTexCoord3sLoaded;
    bool _multiTexCoord3sARBLoaded;
    bool _multiTexCoord3svLoaded;
    bool _multiTexCoord3svARBLoaded;
    bool _multiTexCoord3xOESLoaded;
    bool _multiTexCoord3xvOESLoaded;
    bool _multiTexCoord4bOESLoaded;
    bool _multiTexCoord4bvOESLoaded;
    bool _multiTexCoord4dLoaded;
    bool _multiTexCoord4dARBLoaded;
    bool _multiTexCoord4dvLoaded;
    bool _multiTexCoord4dvARBLoaded;
    bool _multiTexCoord4fLoaded;
    bool _multiTexCoord4fARBLoaded;
    bool _multiTexCoord4fvLoaded;
    bool _multiTexCoord4fvARBLoaded;
    bool _multiTexCoord4hNVLoaded;
    bool _multiTexCoord4hvNVLoaded;
    bool _multiTexCoord4iLoaded;
    bool _multiTexCoord4iARBLoaded;
    bool _multiTexCoord4ivLoaded;
    bool _multiTexCoord4ivARBLoaded;
    bool _multiTexCoord4sLoaded;
    bool _multiTexCoord4sARBLoaded;
    bool _multiTexCoord4svLoaded;
    bool _multiTexCoord4svARBLoaded;
    bool _multiTexCoord4xLoaded;
    bool _multiTexCoord4xOESLoaded;
    bool _multiTexCoord4xvOESLoaded;
    bool _multiTexCoordP1uiLoaded;
    bool _multiTexCoordP1uivLoaded;
    bool _multiTexCoordP2uiLoaded;
    bool _multiTexCoordP2uivLoaded;
    bool _multiTexCoordP3uiLoaded;
    bool _multiTexCoordP3uivLoaded;
    bool _multiTexCoordP4uiLoaded;
    bool _multiTexCoordP4uivLoaded;
    bool _multiTexCoordPointerEXTLoaded;
    bool _multiTexEnvfEXTLoaded;
    bool _multiTexEnvfvEXTLoaded;
    bool _multiTexEnviEXTLoaded;
    bool _multiTexEnvivEXTLoaded;
    bool _multiTexGendEXTLoaded;
    bool _multiTexGendvEXTLoaded;
    bool _multiTexGenfEXTLoaded;
    bool _multiTexGenfvEXTLoaded;
    bool _multiTexGeniEXTLoaded;
    bool _multiTexGenivEXTLoaded;
    bool _multiTexImage1DEXTLoaded;
    bool _multiTexImage2DEXTLoaded;
    bool _multiTexImage3DEXTLoaded;
    bool _multiTexParameterfEXTLoaded;
    bool _multiTexParameterfvEXTLoaded;
    bool _multiTexParameteriEXTLoaded;
    bool _multiTexParameterIivEXTLoaded;
    bool _multiTexParameterIuivEXTLoaded;
    bool _multiTexParameterivEXTLoaded;
    bool _multiTexRenderbufferEXTLoaded;
    bool _multiTexSubImage1DEXTLoaded;
    bool _multiTexSubImage2DEXTLoaded;
    bool _multiTexSubImage3DEXTLoaded;
    bool _multMatrixdLoaded;
    bool _multMatrixfLoaded;
    bool _multMatrixxLoaded;
    bool _multMatrixxOESLoaded;
    bool _multTransposeMatrixdLoaded;
    bool _multTransposeMatrixdARBLoaded;
    bool _multTransposeMatrixfLoaded;
    bool _multTransposeMatrixfARBLoaded;
    bool _multTransposeMatrixxOESLoaded;
    bool _namedBufferAttachMemoryNVLoaded;
    bool _namedBufferDataLoaded;
    bool _namedBufferDataEXTLoaded;
    bool _namedBufferPageCommitmentARBLoaded;
    bool _namedBufferPageCommitmentEXTLoaded;
    bool _namedBufferPageCommitmentMemNVLoaded;
    bool _namedBufferStorageLoaded;
    bool _namedBufferStorageEXTLoaded;
    bool _namedBufferStorageExternalEXTLoaded;
    bool _namedBufferStorageMemEXTLoaded;
    bool _namedBufferSubDataLoaded;
    bool _namedBufferSubDataEXTLoaded;
    bool _namedCopyBufferSubDataEXTLoaded;
    bool _namedFramebufferDrawBufferLoaded;
    bool _namedFramebufferDrawBuffersLoaded;
    bool _namedFramebufferParameteriLoaded;
    bool _namedFramebufferParameteriEXTLoaded;
    bool _namedFramebufferReadBufferLoaded;
    bool _namedFramebufferRenderbufferLoaded;
    bool _namedFramebufferRenderbufferEXTLoaded;
    bool _namedFramebufferSampleLocationsfvARBLoaded;
    bool _namedFramebufferSampleLocationsfvNVLoaded;
    bool _namedFramebufferSamplePositionsfvAMDLoaded;
    bool _namedFramebufferTextureLoaded;
    bool _namedFramebufferTexture1DEXTLoaded;
    bool _namedFramebufferTexture2DEXTLoaded;
    bool _namedFramebufferTexture3DEXTLoaded;
    bool _namedFramebufferTextureEXTLoaded;
    bool _namedFramebufferTextureFaceEXTLoaded;
    bool _namedFramebufferTextureLayerLoaded;
    bool _namedFramebufferTextureLayerEXTLoaded;
    bool _namedProgramLocalParameter4dEXTLoaded;
    bool _namedProgramLocalParameter4dvEXTLoaded;
    bool _namedProgramLocalParameter4fEXTLoaded;
    bool _namedProgramLocalParameter4fvEXTLoaded;
    bool _namedProgramLocalParameterI4iEXTLoaded;
    bool _namedProgramLocalParameterI4ivEXTLoaded;
    bool _namedProgramLocalParameterI4uiEXTLoaded;
    bool _namedProgramLocalParameterI4uivEXTLoaded;
    bool _namedProgramLocalParameters4fvEXTLoaded;
    bool _namedProgramLocalParametersI4ivEXTLoaded;
    bool _namedProgramLocalParametersI4uivEXTLoaded;
    bool _namedProgramStringEXTLoaded;
    bool _namedRenderbufferStorageLoaded;
    bool _namedRenderbufferStorageEXTLoaded;
    bool _namedRenderbufferStorageMultisampleLoaded;
    bool _namedRenderbufferStorageMultisampleAdvancedAMDLoaded;
    bool _namedRenderbufferStorageMultisampleCoverageEXTLoaded;
    bool _namedRenderbufferStorageMultisampleEXTLoaded;
    bool _namedStringARBLoaded;
    bool _newListLoaded;
    bool _newObjectBufferATILoaded;
    bool _normal3bLoaded;
    bool _normal3bvLoaded;
    bool _normal3dLoaded;
    bool _normal3dvLoaded;
    bool _normal3fLoaded;
    bool _normal3fvLoaded;
    bool _normal3fVertex3fSUNLoaded;
    bool _normal3fVertex3fvSUNLoaded;
    bool _normal3hNVLoaded;
    bool _normal3hvNVLoaded;
    bool _normal3iLoaded;
    bool _normal3ivLoaded;
    bool _normal3sLoaded;
    bool _normal3svLoaded;
    bool _normal3xLoaded;
    bool _normal3xOESLoaded;
    bool _normal3xvOESLoaded;
    bool _normalFormatNVLoaded;
    bool _normalP3uiLoaded;
    bool _normalP3uivLoaded;
    bool _normalPointerLoaded;
    bool _normalPointerEXTLoaded;
    bool _normalPointerListIBMLoaded;
    bool _normalPointervINTELLoaded;
    bool _normalStream3bATILoaded;
    bool _normalStream3bvATILoaded;
    bool _normalStream3dATILoaded;
    bool _normalStream3dvATILoaded;
    bool _normalStream3fATILoaded;
    bool _normalStream3fvATILoaded;
    bool _normalStream3iATILoaded;
    bool _normalStream3ivATILoaded;
    bool _normalStream3sATILoaded;
    bool _normalStream3svATILoaded;
    bool _objectLabelLoaded;
    bool _objectLabelKHRLoaded;
    bool _objectPtrLabelLoaded;
    bool _objectPtrLabelKHRLoaded;
    bool _objectPurgeableAPPLELoaded;
    bool _objectUnpurgeableAPPLELoaded;
    bool _orthoLoaded;
    bool _orthofLoaded;
    bool _orthofOESLoaded;
    bool _orthoxLoaded;
    bool _orthoxOESLoaded;
    bool _passTexCoordATILoaded;
    bool _passThroughLoaded;
    bool _passThroughxOESLoaded;
    bool _patchParameterfvLoaded;
    bool _patchParameteriLoaded;
    bool _patchParameteriEXTLoaded;
    bool _patchParameteriOESLoaded;
    bool _pathColorGenNVLoaded;
    bool _pathCommandsNVLoaded;
    bool _pathCoordsNVLoaded;
    bool _pathCoverDepthFuncNVLoaded;
    bool _pathDashArrayNVLoaded;
    bool _pathFogGenNVLoaded;
    bool _pathGlyphIndexArrayNVLoaded;
    bool _pathGlyphIndexRangeNVLoaded;
    bool _pathGlyphRangeNVLoaded;
    bool _pathGlyphsNVLoaded;
    bool _pathMemoryGlyphIndexArrayNVLoaded;
    bool _pathParameterfNVLoaded;
    bool _pathParameterfvNVLoaded;
    bool _pathParameteriNVLoaded;
    bool _pathParameterivNVLoaded;
    bool _pathStencilDepthOffsetNVLoaded;
    bool _pathStencilFuncNVLoaded;
    bool _pathStringNVLoaded;
    bool _pathSubCommandsNVLoaded;
    bool _pathSubCoordsNVLoaded;
    bool _pathTexGenNVLoaded;
    bool _pauseTransformFeedbackLoaded;
    bool _pauseTransformFeedbackNVLoaded;
    bool _pixelDataRangeNVLoaded;
    bool _pixelMapfvLoaded;
    bool _pixelMapuivLoaded;
    bool _pixelMapusvLoaded;
    bool _pixelMapxLoaded;
    bool _pixelStorefLoaded;
    bool _pixelStoreiLoaded;
    bool _pixelStorexLoaded;
    bool _pixelTexGenParameterfSGISLoaded;
    bool _pixelTexGenParameterfvSGISLoaded;
    bool _pixelTexGenParameteriSGISLoaded;
    bool _pixelTexGenParameterivSGISLoaded;
    bool _pixelTexGenSGIXLoaded;
    bool _pixelTransferfLoaded;
    bool _pixelTransferiLoaded;
    bool _pixelTransferxOESLoaded;
    bool _pixelTransformParameterfEXTLoaded;
    bool _pixelTransformParameterfvEXTLoaded;
    bool _pixelTransformParameteriEXTLoaded;
    bool _pixelTransformParameterivEXTLoaded;
    bool _pixelZoomLoaded;
    bool _pixelZoomxOESLoaded;
    bool _pNTrianglesfATILoaded;
    bool _pNTrianglesiATILoaded;
    bool _pointAlongPathNVLoaded;
    bool _pointParameterfLoaded;
    bool _pointParameterfARBLoaded;
    bool _pointParameterfEXTLoaded;
    bool _pointParameterfSGISLoaded;
    bool _pointParameterfvLoaded;
    bool _pointParameterfvARBLoaded;
    bool _pointParameterfvEXTLoaded;
    bool _pointParameterfvSGISLoaded;
    bool _pointParameteriLoaded;
    bool _pointParameteriNVLoaded;
    bool _pointParameterivLoaded;
    bool _pointParameterivNVLoaded;
    bool _pointParameterxLoaded;
    bool _pointParameterxOESLoaded;
    bool _pointParameterxvLoaded;
    bool _pointParameterxvOESLoaded;
    bool _pointSizeLoaded;
    bool _pointSizePointerOESLoaded;
    bool _pointSizexLoaded;
    bool _pointSizexOESLoaded;
    bool _pollAsyncSGIXLoaded;
    bool _pollInstrumentsSGIXLoaded;
    bool _polygonModeLoaded;
    bool _polygonModeNVLoaded;
    bool _polygonOffsetLoaded;
    bool _polygonOffsetClampLoaded;
    bool _polygonOffsetClampEXTLoaded;
    bool _polygonOffsetEXTLoaded;
    bool _polygonOffsetxLoaded;
    bool _polygonOffsetxOESLoaded;
    bool _polygonStippleLoaded;
    bool _popAttribLoaded;
    bool _popClientAttribLoaded;
    bool _popDebugGroupLoaded;
    bool _popDebugGroupKHRLoaded;
    bool _popGroupMarkerEXTLoaded;
    bool _popMatrixLoaded;
    bool _popNameLoaded;
    bool _presentFrameDualFillNVLoaded;
    bool _presentFrameKeyedNVLoaded;
    bool _primitiveBoundingBoxLoaded;
    bool _primitiveBoundingBoxARBLoaded;
    bool _primitiveBoundingBoxEXTLoaded;
    bool _primitiveBoundingBoxOESLoaded;
    bool _primitiveRestartIndexLoaded;
    bool _primitiveRestartIndexNVLoaded;
    bool _primitiveRestartNVLoaded;
    bool _prioritizeTexturesLoaded;
    bool _prioritizeTexturesEXTLoaded;
    bool _prioritizeTexturesxOESLoaded;
    bool _programBinaryLoaded;
    bool _programBinaryOESLoaded;
    bool _programBufferParametersfvNVLoaded;
    bool _programBufferParametersIivNVLoaded;
    bool _programBufferParametersIuivNVLoaded;
    bool _programEnvParameter4dARBLoaded;
    bool _programEnvParameter4dvARBLoaded;
    bool _programEnvParameter4fARBLoaded;
    bool _programEnvParameter4fvARBLoaded;
    bool _programEnvParameterI4iNVLoaded;
    bool _programEnvParameterI4ivNVLoaded;
    bool _programEnvParameterI4uiNVLoaded;
    bool _programEnvParameterI4uivNVLoaded;
    bool _programEnvParameters4fvEXTLoaded;
    bool _programEnvParametersI4ivNVLoaded;
    bool _programEnvParametersI4uivNVLoaded;
    bool _programLocalParameter4dARBLoaded;
    bool _programLocalParameter4dvARBLoaded;
    bool _programLocalParameter4fARBLoaded;
    bool _programLocalParameter4fvARBLoaded;
    bool _programLocalParameterI4iNVLoaded;
    bool _programLocalParameterI4ivNVLoaded;
    bool _programLocalParameterI4uiNVLoaded;
    bool _programLocalParameterI4uivNVLoaded;
    bool _programLocalParameters4fvEXTLoaded;
    bool _programLocalParametersI4ivNVLoaded;
    bool _programLocalParametersI4uivNVLoaded;
    bool _programNamedParameter4dNVLoaded;
    bool _programNamedParameter4dvNVLoaded;
    bool _programNamedParameter4fNVLoaded;
    bool _programNamedParameter4fvNVLoaded;
    bool _programParameter4dNVLoaded;
    bool _programParameter4dvNVLoaded;
    bool _programParameter4fNVLoaded;
    bool _programParameter4fvNVLoaded;
    bool _programParameteriLoaded;
    bool _programParameteriARBLoaded;
    bool _programParameteriEXTLoaded;
    bool _programParameters4dvNVLoaded;
    bool _programParameters4fvNVLoaded;
    bool _programPathFragmentInputGenNVLoaded;
    bool _programStringARBLoaded;
    bool _programSubroutineParametersuivNVLoaded;
    bool _programUniform1dLoaded;
    bool _programUniform1dEXTLoaded;
    bool _programUniform1dvLoaded;
    bool _programUniform1dvEXTLoaded;
    bool _programUniform1fLoaded;
    bool _programUniform1fEXTLoaded;
    bool _programUniform1fvLoaded;
    bool _programUniform1fvEXTLoaded;
    bool _programUniform1iLoaded;
    bool _programUniform1i64ARBLoaded;
    bool _programUniform1i64NVLoaded;
    bool _programUniform1i64vARBLoaded;
    bool _programUniform1i64vNVLoaded;
    bool _programUniform1iEXTLoaded;
    bool _programUniform1ivLoaded;
    bool _programUniform1ivEXTLoaded;
    bool _programUniform1uiLoaded;
    bool _programUniform1ui64ARBLoaded;
    bool _programUniform1ui64NVLoaded;
    bool _programUniform1ui64vARBLoaded;
    bool _programUniform1ui64vNVLoaded;
    bool _programUniform1uiEXTLoaded;
    bool _programUniform1uivLoaded;
    bool _programUniform1uivEXTLoaded;
    bool _programUniform2dLoaded;
    bool _programUniform2dEXTLoaded;
    bool _programUniform2dvLoaded;
    bool _programUniform2dvEXTLoaded;
    bool _programUniform2fLoaded;
    bool _programUniform2fEXTLoaded;
    bool _programUniform2fvLoaded;
    bool _programUniform2fvEXTLoaded;
    bool _programUniform2iLoaded;
    bool _programUniform2i64ARBLoaded;
    bool _programUniform2i64NVLoaded;
    bool _programUniform2i64vARBLoaded;
    bool _programUniform2i64vNVLoaded;
    bool _programUniform2iEXTLoaded;
    bool _programUniform2ivLoaded;
    bool _programUniform2ivEXTLoaded;
    bool _programUniform2uiLoaded;
    bool _programUniform2ui64ARBLoaded;
    bool _programUniform2ui64NVLoaded;
    bool _programUniform2ui64vARBLoaded;
    bool _programUniform2ui64vNVLoaded;
    bool _programUniform2uiEXTLoaded;
    bool _programUniform2uivLoaded;
    bool _programUniform2uivEXTLoaded;
    bool _programUniform3dLoaded;
    bool _programUniform3dEXTLoaded;
    bool _programUniform3dvLoaded;
    bool _programUniform3dvEXTLoaded;
    bool _programUniform3fLoaded;
    bool _programUniform3fEXTLoaded;
    bool _programUniform3fvLoaded;
    bool _programUniform3fvEXTLoaded;
    bool _programUniform3iLoaded;
    bool _programUniform3i64ARBLoaded;
    bool _programUniform3i64NVLoaded;
    bool _programUniform3i64vARBLoaded;
    bool _programUniform3i64vNVLoaded;
    bool _programUniform3iEXTLoaded;
    bool _programUniform3ivLoaded;
    bool _programUniform3ivEXTLoaded;
    bool _programUniform3uiLoaded;
    bool _programUniform3ui64ARBLoaded;
    bool _programUniform3ui64NVLoaded;
    bool _programUniform3ui64vARBLoaded;
    bool _programUniform3ui64vNVLoaded;
    bool _programUniform3uiEXTLoaded;
    bool _programUniform3uivLoaded;
    bool _programUniform3uivEXTLoaded;
    bool _programUniform4dLoaded;
    bool _programUniform4dEXTLoaded;
    bool _programUniform4dvLoaded;
    bool _programUniform4dvEXTLoaded;
    bool _programUniform4fLoaded;
    bool _programUniform4fEXTLoaded;
    bool _programUniform4fvLoaded;
    bool _programUniform4fvEXTLoaded;
    bool _programUniform4iLoaded;
    bool _programUniform4i64ARBLoaded;
    bool _programUniform4i64NVLoaded;
    bool _programUniform4i64vARBLoaded;
    bool _programUniform4i64vNVLoaded;
    bool _programUniform4iEXTLoaded;
    bool _programUniform4ivLoaded;
    bool _programUniform4ivEXTLoaded;
    bool _programUniform4uiLoaded;
    bool _programUniform4ui64ARBLoaded;
    bool _programUniform4ui64NVLoaded;
    bool _programUniform4ui64vARBLoaded;
    bool _programUniform4ui64vNVLoaded;
    bool _programUniform4uiEXTLoaded;
    bool _programUniform4uivLoaded;
    bool _programUniform4uivEXTLoaded;
    bool _programUniformHandleui64ARBLoaded;
    bool _programUniformHandleui64IMGLoaded;
    bool _programUniformHandleui64NVLoaded;
    bool _programUniformHandleui64vARBLoaded;
    bool _programUniformHandleui64vIMGLoaded;
    bool _programUniformHandleui64vNVLoaded;
    bool _programUniformMatrix2dvLoaded;
    bool _programUniformMatrix2dvEXTLoaded;
    bool _programUniformMatrix2fvLoaded;
    bool _programUniformMatrix2fvEXTLoaded;
    bool _programUniformMatrix2x3dvLoaded;
    bool _programUniformMatrix2x3dvEXTLoaded;
    bool _programUniformMatrix2x3fvLoaded;
    bool _programUniformMatrix2x3fvEXTLoaded;
    bool _programUniformMatrix2x4dvLoaded;
    bool _programUniformMatrix2x4dvEXTLoaded;
    bool _programUniformMatrix2x4fvLoaded;
    bool _programUniformMatrix2x4fvEXTLoaded;
    bool _programUniformMatrix3dvLoaded;
    bool _programUniformMatrix3dvEXTLoaded;
    bool _programUniformMatrix3fvLoaded;
    bool _programUniformMatrix3fvEXTLoaded;
    bool _programUniformMatrix3x2dvLoaded;
    bool _programUniformMatrix3x2dvEXTLoaded;
    bool _programUniformMatrix3x2fvLoaded;
    bool _programUniformMatrix3x2fvEXTLoaded;
    bool _programUniformMatrix3x4dvLoaded;
    bool _programUniformMatrix3x4dvEXTLoaded;
    bool _programUniformMatrix3x4fvLoaded;
    bool _programUniformMatrix3x4fvEXTLoaded;
    bool _programUniformMatrix4dvLoaded;
    bool _programUniformMatrix4dvEXTLoaded;
    bool _programUniformMatrix4fvLoaded;
    bool _programUniformMatrix4fvEXTLoaded;
    bool _programUniformMatrix4x2dvLoaded;
    bool _programUniformMatrix4x2dvEXTLoaded;
    bool _programUniformMatrix4x2fvLoaded;
    bool _programUniformMatrix4x2fvEXTLoaded;
    bool _programUniformMatrix4x3dvLoaded;
    bool _programUniformMatrix4x3dvEXTLoaded;
    bool _programUniformMatrix4x3fvLoaded;
    bool _programUniformMatrix4x3fvEXTLoaded;
    bool _programUniformui64NVLoaded;
    bool _programUniformui64vNVLoaded;
    bool _programVertexLimitNVLoaded;
    bool _provokingVertexLoaded;
    bool _provokingVertexEXTLoaded;
    bool _pushAttribLoaded;
    bool _pushClientAttribLoaded;
    bool _pushClientAttribDefaultEXTLoaded;
    bool _pushDebugGroupLoaded;
    bool _pushDebugGroupKHRLoaded;
    bool _pushGroupMarkerEXTLoaded;
    bool _pushMatrixLoaded;
    bool _pushNameLoaded;
    bool _queryCounterLoaded;
    bool _queryCounterEXTLoaded;
    bool _queryMatrixxOESLoaded;
    bool _queryObjectParameteruiAMDLoaded;
    bool _queryResourceNVLoaded;
    bool _queryResourceTagNVLoaded;
    bool _rasterPos2dLoaded;
    bool _rasterPos2dvLoaded;
    bool _rasterPos2fLoaded;
    bool _rasterPos2fvLoaded;
    bool _rasterPos2iLoaded;
    bool _rasterPos2ivLoaded;
    bool _rasterPos2sLoaded;
    bool _rasterPos2svLoaded;
    bool _rasterPos2xOESLoaded;
    bool _rasterPos2xvOESLoaded;
    bool _rasterPos3dLoaded;
    bool _rasterPos3dvLoaded;
    bool _rasterPos3fLoaded;
    bool _rasterPos3fvLoaded;
    bool _rasterPos3iLoaded;
    bool _rasterPos3ivLoaded;
    bool _rasterPos3sLoaded;
    bool _rasterPos3svLoaded;
    bool _rasterPos3xOESLoaded;
    bool _rasterPos3xvOESLoaded;
    bool _rasterPos4dLoaded;
    bool _rasterPos4dvLoaded;
    bool _rasterPos4fLoaded;
    bool _rasterPos4fvLoaded;
    bool _rasterPos4iLoaded;
    bool _rasterPos4ivLoaded;
    bool _rasterPos4sLoaded;
    bool _rasterPos4svLoaded;
    bool _rasterPos4xOESLoaded;
    bool _rasterPos4xvOESLoaded;
    bool _rasterSamplesEXTLoaded;
    bool _readBufferLoaded;
    bool _readBufferIndexedEXTLoaded;
    bool _readBufferNVLoaded;
    bool _readInstrumentsSGIXLoaded;
    bool _readnPixelsLoaded;
    bool _readnPixelsARBLoaded;
    bool _readnPixelsEXTLoaded;
    bool _readnPixelsKHRLoaded;
    bool _readPixelsLoaded;
    bool _rectdLoaded;
    bool _rectdvLoaded;
    bool _rectfLoaded;
    bool _rectfvLoaded;
    bool _rectiLoaded;
    bool _rectivLoaded;
    bool _rectsLoaded;
    bool _rectsvLoaded;
    bool _rectxOESLoaded;
    bool _rectxvOESLoaded;
    bool _referencePlaneSGIXLoaded;
    bool _releaseKeyedMutexWin32EXTLoaded;
    bool _releaseShaderCompilerLoaded;
    bool _renderbufferStorageLoaded;
    bool _renderbufferStorageEXTLoaded;
    bool _renderbufferStorageMultisampleLoaded;
    bool _renderbufferStorageMultisampleAdvancedAMDLoaded;
    bool _renderbufferStorageMultisampleANGLELoaded;
    bool _renderbufferStorageMultisampleAPPLELoaded;
    bool _renderbufferStorageMultisampleCoverageNVLoaded;
    bool _renderbufferStorageMultisampleEXTLoaded;
    bool _renderbufferStorageMultisampleIMGLoaded;
    bool _renderbufferStorageMultisampleNVLoaded;
    bool _renderbufferStorageOESLoaded;
    bool _renderGpuMaskNVLoaded;
    bool _renderModeLoaded;
    bool _replacementCodePointerSUNLoaded;
    bool _replacementCodeubSUNLoaded;
    bool _replacementCodeubvSUNLoaded;
    bool _replacementCodeuiColor3fVertex3fSUNLoaded;
    bool _replacementCodeuiColor3fVertex3fvSUNLoaded;
    bool _replacementCodeuiColor4fNormal3fVertex3fSUNLoaded;
    bool _replacementCodeuiColor4fNormal3fVertex3fvSUNLoaded;
    bool _replacementCodeuiColor4ubVertex3fSUNLoaded;
    bool _replacementCodeuiColor4ubVertex3fvSUNLoaded;
    bool _replacementCodeuiNormal3fVertex3fSUNLoaded;
    bool _replacementCodeuiNormal3fVertex3fvSUNLoaded;
    bool _replacementCodeuiSUNLoaded;
    bool _replacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNLoaded;
    bool _replacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNLoaded;
    bool _replacementCodeuiTexCoord2fNormal3fVertex3fSUNLoaded;
    bool _replacementCodeuiTexCoord2fNormal3fVertex3fvSUNLoaded;
    bool _replacementCodeuiTexCoord2fVertex3fSUNLoaded;
    bool _replacementCodeuiTexCoord2fVertex3fvSUNLoaded;
    bool _replacementCodeuiVertex3fSUNLoaded;
    bool _replacementCodeuiVertex3fvSUNLoaded;
    bool _replacementCodeuivSUNLoaded;
    bool _replacementCodeusSUNLoaded;
    bool _replacementCodeusvSUNLoaded;
    bool _requestResidentProgramsNVLoaded;
    bool _resetHistogramLoaded;
    bool _resetHistogramEXTLoaded;
    bool _resetMemoryObjectParameterNVLoaded;
    bool _resetMinmaxLoaded;
    bool _resetMinmaxEXTLoaded;
    bool _resizeBuffersMESALoaded;
    bool _resolveDepthValuesNVLoaded;
    bool _resolveMultisampleFramebufferAPPLELoaded;
    bool _resumeTransformFeedbackLoaded;
    bool _resumeTransformFeedbackNVLoaded;
    bool _rotatedLoaded;
    bool _rotatefLoaded;
    bool _rotatexLoaded;
    bool _rotatexOESLoaded;
    bool _sampleCoverageLoaded;
    bool _sampleCoverageARBLoaded;
    bool _sampleCoveragexLoaded;
    bool _sampleCoveragexOESLoaded;
    bool _sampleMapATILoaded;
    bool _sampleMaskEXTLoaded;
    bool _sampleMaskiLoaded;
    bool _sampleMaskIndexedNVLoaded;
    bool _sampleMaskSGISLoaded;
    bool _samplePatternEXTLoaded;
    bool _samplePatternSGISLoaded;
    bool _samplerParameterfLoaded;
    bool _samplerParameterfvLoaded;
    bool _samplerParameteriLoaded;
    bool _samplerParameterIivLoaded;
    bool _samplerParameterIivEXTLoaded;
    bool _samplerParameterIivOESLoaded;
    bool _samplerParameterIuivLoaded;
    bool _samplerParameterIuivEXTLoaded;
    bool _samplerParameterIuivOESLoaded;
    bool _samplerParameterivLoaded;
    bool _scaledLoaded;
    bool _scalefLoaded;
    bool _scalexLoaded;
    bool _scalexOESLoaded;
    bool _scissorLoaded;
    bool _scissorArrayvLoaded;
    bool _scissorArrayvNVLoaded;
    bool _scissorArrayvOESLoaded;
    bool _scissorExclusiveArrayvNVLoaded;
    bool _scissorExclusiveNVLoaded;
    bool _scissorIndexedLoaded;
    bool _scissorIndexedNVLoaded;
    bool _scissorIndexedOESLoaded;
    bool _scissorIndexedvLoaded;
    bool _scissorIndexedvNVLoaded;
    bool _scissorIndexedvOESLoaded;
    bool _secondaryColor3bLoaded;
    bool _secondaryColor3bEXTLoaded;
    bool _secondaryColor3bvLoaded;
    bool _secondaryColor3bvEXTLoaded;
    bool _secondaryColor3dLoaded;
    bool _secondaryColor3dEXTLoaded;
    bool _secondaryColor3dvLoaded;
    bool _secondaryColor3dvEXTLoaded;
    bool _secondaryColor3fLoaded;
    bool _secondaryColor3fEXTLoaded;
    bool _secondaryColor3fvLoaded;
    bool _secondaryColor3fvEXTLoaded;
    bool _secondaryColor3hNVLoaded;
    bool _secondaryColor3hvNVLoaded;
    bool _secondaryColor3iLoaded;
    bool _secondaryColor3iEXTLoaded;
    bool _secondaryColor3ivLoaded;
    bool _secondaryColor3ivEXTLoaded;
    bool _secondaryColor3sLoaded;
    bool _secondaryColor3sEXTLoaded;
    bool _secondaryColor3svLoaded;
    bool _secondaryColor3svEXTLoaded;
    bool _secondaryColor3ubLoaded;
    bool _secondaryColor3ubEXTLoaded;
    bool _secondaryColor3ubvLoaded;
    bool _secondaryColor3ubvEXTLoaded;
    bool _secondaryColor3uiLoaded;
    bool _secondaryColor3uiEXTLoaded;
    bool _secondaryColor3uivLoaded;
    bool _secondaryColor3uivEXTLoaded;
    bool _secondaryColor3usLoaded;
    bool _secondaryColor3usEXTLoaded;
    bool _secondaryColor3usvLoaded;
    bool _secondaryColor3usvEXTLoaded;
    bool _secondaryColorFormatNVLoaded;
    bool _secondaryColorP3uiLoaded;
    bool _secondaryColorP3uivLoaded;
    bool _secondaryColorPointerLoaded;
    bool _secondaryColorPointerEXTLoaded;
    bool _secondaryColorPointerListIBMLoaded;
    bool _selectBufferLoaded;
    bool _selectPerfMonitorCountersAMDLoaded;
    bool _semaphoreParameterivNVLoaded;
    bool _semaphoreParameterui64vEXTLoaded;
    bool _separableFilter2DLoaded;
    bool _separableFilter2DEXTLoaded;
    bool _setFenceAPPLELoaded;
    bool _setFenceNVLoaded;
    bool _setFragmentShaderConstantATILoaded;
    bool _setInvariantEXTLoaded;
    bool _setLocalConstantEXTLoaded;
    bool _setMultisamplefvAMDLoaded;
    bool _shadeModelLoaded;
    bool _shaderBinaryLoaded;
    bool _shaderOp1EXTLoaded;
    bool _shaderOp2EXTLoaded;
    bool _shaderOp3EXTLoaded;
    bool _shaderSourceLoaded;
    bool _shaderSourceARBLoaded;
    bool _shaderStorageBlockBindingLoaded;
    bool _shadingRateCombinerOpsEXTLoaded;
    bool _shadingRateEXTLoaded;
    bool _shadingRateImageBarrierNVLoaded;
    bool _shadingRateImagePaletteNVLoaded;
    bool _shadingRateQCOMLoaded;
    bool _shadingRateSampleOrderCustomNVLoaded;
    bool _shadingRateSampleOrderNVLoaded;
    bool _sharpenTexFuncSGISLoaded;
    bool _signalSemaphoreEXTLoaded;
    bool _signalSemaphoreui64NVXLoaded;
    bool _signalVkFenceNVLoaded;
    bool _signalVkSemaphoreNVLoaded;
    bool _specializeShaderLoaded;
    bool _specializeShaderARBLoaded;
    bool _spriteParameterfSGIXLoaded;
    bool _spriteParameterfvSGIXLoaded;
    bool _spriteParameteriSGIXLoaded;
    bool _spriteParameterivSGIXLoaded;
    bool _startInstrumentsSGIXLoaded;
    bool _startTilingQCOMLoaded;
    bool _stateCaptureNVLoaded;
    bool _stencilClearTagEXTLoaded;
    bool _stencilFillPathInstancedNVLoaded;
    bool _stencilFillPathNVLoaded;
    bool _stencilFuncLoaded;
    bool _stencilFuncSeparateLoaded;
    bool _stencilFuncSeparateATILoaded;
    bool _stencilMaskLoaded;
    bool _stencilMaskSeparateLoaded;
    bool _stencilOpLoaded;
    bool _stencilOpSeparateLoaded;
    bool _stencilOpSeparateATILoaded;
    bool _stencilOpValueAMDLoaded;
    bool _stencilStrokePathInstancedNVLoaded;
    bool _stencilStrokePathNVLoaded;
    bool _stencilThenCoverFillPathInstancedNVLoaded;
    bool _stencilThenCoverFillPathNVLoaded;
    bool _stencilThenCoverStrokePathInstancedNVLoaded;
    bool _stencilThenCoverStrokePathNVLoaded;
    bool _stopInstrumentsSGIXLoaded;
    bool _stringMarkerGREMEDYLoaded;
    bool _subpixelPrecisionBiasNVLoaded;
    bool _swizzleEXTLoaded;
    bool _syncTextureINTELLoaded;
    bool _tagSampleBufferSGIXLoaded;
    bool _tangent3bEXTLoaded;
    bool _tangent3bvEXTLoaded;
    bool _tangent3dEXTLoaded;
    bool _tangent3dvEXTLoaded;
    bool _tangent3fEXTLoaded;
    bool _tangent3fvEXTLoaded;
    bool _tangent3iEXTLoaded;
    bool _tangent3ivEXTLoaded;
    bool _tangent3sEXTLoaded;
    bool _tangent3svEXTLoaded;
    bool _tangentPointerEXTLoaded;
    bool _tbufferMask3DFXLoaded;
    bool _tessellationFactorAMDLoaded;
    bool _tessellationModeAMDLoaded;
    bool _testFenceAPPLELoaded;
    bool _testFenceNVLoaded;
    bool _testObjectAPPLELoaded;
    bool _texAttachMemoryNVLoaded;
    bool _texBufferLoaded;
    bool _texBufferARBLoaded;
    bool _texBufferEXTLoaded;
    bool _texBufferOESLoaded;
    bool _texBufferRangeLoaded;
    bool _texBufferRangeEXTLoaded;
    bool _texBufferRangeOESLoaded;
    bool _texBumpParameterfvATILoaded;
    bool _texBumpParameterivATILoaded;
    bool _texCoord1bOESLoaded;
    bool _texCoord1bvOESLoaded;
    bool _texCoord1dLoaded;
    bool _texCoord1dvLoaded;
    bool _texCoord1fLoaded;
    bool _texCoord1fvLoaded;
    bool _texCoord1hNVLoaded;
    bool _texCoord1hvNVLoaded;
    bool _texCoord1iLoaded;
    bool _texCoord1ivLoaded;
    bool _texCoord1sLoaded;
    bool _texCoord1svLoaded;
    bool _texCoord1xOESLoaded;
    bool _texCoord1xvOESLoaded;
    bool _texCoord2bOESLoaded;
    bool _texCoord2bvOESLoaded;
    bool _texCoord2dLoaded;
    bool _texCoord2dvLoaded;
    bool _texCoord2fLoaded;
    bool _texCoord2fColor3fVertex3fSUNLoaded;
    bool _texCoord2fColor3fVertex3fvSUNLoaded;
    bool _texCoord2fColor4fNormal3fVertex3fSUNLoaded;
    bool _texCoord2fColor4fNormal3fVertex3fvSUNLoaded;
    bool _texCoord2fColor4ubVertex3fSUNLoaded;
    bool _texCoord2fColor4ubVertex3fvSUNLoaded;
    bool _texCoord2fNormal3fVertex3fSUNLoaded;
    bool _texCoord2fNormal3fVertex3fvSUNLoaded;
    bool _texCoord2fvLoaded;
    bool _texCoord2fVertex3fSUNLoaded;
    bool _texCoord2fVertex3fvSUNLoaded;
    bool _texCoord2hNVLoaded;
    bool _texCoord2hvNVLoaded;
    bool _texCoord2iLoaded;
    bool _texCoord2ivLoaded;
    bool _texCoord2sLoaded;
    bool _texCoord2svLoaded;
    bool _texCoord2xOESLoaded;
    bool _texCoord2xvOESLoaded;
    bool _texCoord3bOESLoaded;
    bool _texCoord3bvOESLoaded;
    bool _texCoord3dLoaded;
    bool _texCoord3dvLoaded;
    bool _texCoord3fLoaded;
    bool _texCoord3fvLoaded;
    bool _texCoord3hNVLoaded;
    bool _texCoord3hvNVLoaded;
    bool _texCoord3iLoaded;
    bool _texCoord3ivLoaded;
    bool _texCoord3sLoaded;
    bool _texCoord3svLoaded;
    bool _texCoord3xOESLoaded;
    bool _texCoord3xvOESLoaded;
    bool _texCoord4bOESLoaded;
    bool _texCoord4bvOESLoaded;
    bool _texCoord4dLoaded;
    bool _texCoord4dvLoaded;
    bool _texCoord4fLoaded;
    bool _texCoord4fColor4fNormal3fVertex4fSUNLoaded;
    bool _texCoord4fColor4fNormal3fVertex4fvSUNLoaded;
    bool _texCoord4fvLoaded;
    bool _texCoord4fVertex4fSUNLoaded;
    bool _texCoord4fVertex4fvSUNLoaded;
    bool _texCoord4hNVLoaded;
    bool _texCoord4hvNVLoaded;
    bool _texCoord4iLoaded;
    bool _texCoord4ivLoaded;
    bool _texCoord4sLoaded;
    bool _texCoord4svLoaded;
    bool _texCoord4xOESLoaded;
    bool _texCoord4xvOESLoaded;
    bool _texCoordFormatNVLoaded;
    bool _texCoordP1uiLoaded;
    bool _texCoordP1uivLoaded;
    bool _texCoordP2uiLoaded;
    bool _texCoordP2uivLoaded;
    bool _texCoordP3uiLoaded;
    bool _texCoordP3uivLoaded;
    bool _texCoordP4uiLoaded;
    bool _texCoordP4uivLoaded;
    bool _texCoordPointerLoaded;
    bool _texCoordPointerEXTLoaded;
    bool _texCoordPointerListIBMLoaded;
    bool _texCoordPointervINTELLoaded;
    bool _texEnvfLoaded;
    bool _texEnvfvLoaded;
    bool _texEnviLoaded;
    bool _texEnvivLoaded;
    bool _texEnvxLoaded;
    bool _texEnvxOESLoaded;
    bool _texEnvxvLoaded;
    bool _texEnvxvOESLoaded;
    bool _texEstimateMotionQCOMLoaded;
    bool _texEstimateMotionRegionsQCOMLoaded;
    bool _texFilterFuncSGISLoaded;
    bool _texGendLoaded;
    bool _texGendvLoaded;
    bool _texGenfLoaded;
    bool _texGenfOESLoaded;
    bool _texGenfvLoaded;
    bool _texGenfvOESLoaded;
    bool _texGeniLoaded;
    bool _texGeniOESLoaded;
    bool _texGenivLoaded;
    bool _texGenivOESLoaded;
    bool _texGenxOESLoaded;
    bool _texGenxvOESLoaded;
    bool _texImage1DLoaded;
    bool _texImage2DLoaded;
    bool _texImage2DMultisampleLoaded;
    bool _texImage2DMultisampleCoverageNVLoaded;
    bool _texImage3DLoaded;
    bool _texImage3DEXTLoaded;
    bool _texImage3DMultisampleLoaded;
    bool _texImage3DMultisampleCoverageNVLoaded;
    bool _texImage3DOESLoaded;
    bool _texImage4DSGISLoaded;
    bool _texPageCommitmentARBLoaded;
    bool _texPageCommitmentEXTLoaded;
    bool _texPageCommitmentMemNVLoaded;
    bool _texParameterfLoaded;
    bool _texParameterfvLoaded;
    bool _texParameteriLoaded;
    bool _texParameterIivLoaded;
    bool _texParameterIivEXTLoaded;
    bool _texParameterIivOESLoaded;
    bool _texParameterIuivLoaded;
    bool _texParameterIuivEXTLoaded;
    bool _texParameterIuivOESLoaded;
    bool _texParameterivLoaded;
    bool _texParameterxLoaded;
    bool _texParameterxOESLoaded;
    bool _texParameterxvLoaded;
    bool _texParameterxvOESLoaded;
    bool _texRenderbufferNVLoaded;
    bool _texStorage1DLoaded;
    bool _texStorage1DEXTLoaded;
    bool _texStorage2DLoaded;
    bool _texStorage2DEXTLoaded;
    bool _texStorage2DMultisampleLoaded;
    bool _texStorage3DLoaded;
    bool _texStorage3DEXTLoaded;
    bool _texStorage3DMultisampleLoaded;
    bool _texStorage3DMultisampleOESLoaded;
    bool _texStorageAttribs2DEXTLoaded;
    bool _texStorageAttribs3DEXTLoaded;
    bool _texStorageMem1DEXTLoaded;
    bool _texStorageMem2DEXTLoaded;
    bool _texStorageMem2DMultisampleEXTLoaded;
    bool _texStorageMem3DEXTLoaded;
    bool _texStorageMem3DMultisampleEXTLoaded;
    bool _texStorageSparseAMDLoaded;
    bool _texSubImage1DLoaded;
    bool _texSubImage1DEXTLoaded;
    bool _texSubImage2DLoaded;
    bool _texSubImage2DEXTLoaded;
    bool _texSubImage3DLoaded;
    bool _texSubImage3DEXTLoaded;
    bool _texSubImage3DOESLoaded;
    bool _texSubImage4DSGISLoaded;
    bool _textureAttachMemoryNVLoaded;
    bool _textureBarrierLoaded;
    bool _textureBarrierNVLoaded;
    bool _textureBufferLoaded;
    bool _textureBufferEXTLoaded;
    bool _textureBufferRangeLoaded;
    bool _textureBufferRangeEXTLoaded;
    bool _textureColorMaskSGISLoaded;
    bool _textureFoveationParametersQCOMLoaded;
    bool _textureImage1DEXTLoaded;
    bool _textureImage2DEXTLoaded;
    bool _textureImage2DMultisampleCoverageNVLoaded;
    bool _textureImage2DMultisampleNVLoaded;
    bool _textureImage3DEXTLoaded;
    bool _textureImage3DMultisampleCoverageNVLoaded;
    bool _textureImage3DMultisampleNVLoaded;
    bool _textureLightEXTLoaded;
    bool _textureMaterialEXTLoaded;
    bool _textureNormalEXTLoaded;
    bool _texturePageCommitmentEXTLoaded;
    bool _texturePageCommitmentMemNVLoaded;
    bool _textureParameterfLoaded;
    bool _textureParameterfEXTLoaded;
    bool _textureParameterfvLoaded;
    bool _textureParameterfvEXTLoaded;
    bool _textureParameteriLoaded;
    bool _textureParameteriEXTLoaded;
    bool _textureParameterIivLoaded;
    bool _textureParameterIivEXTLoaded;
    bool _textureParameterIuivLoaded;
    bool _textureParameterIuivEXTLoaded;
    bool _textureParameterivLoaded;
    bool _textureParameterivEXTLoaded;
    bool _textureRangeAPPLELoaded;
    bool _textureRenderbufferEXTLoaded;
    bool _textureStorage1DLoaded;
    bool _textureStorage1DEXTLoaded;
    bool _textureStorage2DLoaded;
    bool _textureStorage2DEXTLoaded;
    bool _textureStorage2DMultisampleLoaded;
    bool _textureStorage2DMultisampleEXTLoaded;
    bool _textureStorage3DLoaded;
    bool _textureStorage3DEXTLoaded;
    bool _textureStorage3DMultisampleLoaded;
    bool _textureStorage3DMultisampleEXTLoaded;
    bool _textureStorageMem1DEXTLoaded;
    bool _textureStorageMem2DEXTLoaded;
    bool _textureStorageMem2DMultisampleEXTLoaded;
    bool _textureStorageMem3DEXTLoaded;
    bool _textureStorageMem3DMultisampleEXTLoaded;
    bool _textureStorageSparseAMDLoaded;
    bool _textureSubImage1DLoaded;
    bool _textureSubImage1DEXTLoaded;
    bool _textureSubImage2DLoaded;
    bool _textureSubImage2DEXTLoaded;
    bool _textureSubImage3DLoaded;
    bool _textureSubImage3DEXTLoaded;
    bool _textureViewLoaded;
    bool _textureViewEXTLoaded;
    bool _textureViewOESLoaded;
    bool _trackMatrixNVLoaded;
    bool _transformFeedbackAttribsNVLoaded;
    bool _transformFeedbackBufferBaseLoaded;
    bool _transformFeedbackBufferRangeLoaded;
    bool _transformFeedbackStreamAttribsNVLoaded;
    bool _transformFeedbackVaryingsLoaded;
    bool _transformFeedbackVaryingsEXTLoaded;
    bool _transformFeedbackVaryingsNVLoaded;
    bool _transformPathNVLoaded;
    bool _translatedLoaded;
    bool _translatefLoaded;
    bool _translatexLoaded;
    bool _translatexOESLoaded;
    bool _uniform1dLoaded;
    bool _uniform1dvLoaded;
    bool _uniform1fLoaded;
    bool _uniform1fARBLoaded;
    bool _uniform1fvLoaded;
    bool _uniform1fvARBLoaded;
    bool _uniform1iLoaded;
    bool _uniform1i64ARBLoaded;
    bool _uniform1i64NVLoaded;
    bool _uniform1i64vARBLoaded;
    bool _uniform1i64vNVLoaded;
    bool _uniform1iARBLoaded;
    bool _uniform1ivLoaded;
    bool _uniform1ivARBLoaded;
    bool _uniform1uiLoaded;
    bool _uniform1ui64ARBLoaded;
    bool _uniform1ui64NVLoaded;
    bool _uniform1ui64vARBLoaded;
    bool _uniform1ui64vNVLoaded;
    bool _uniform1uiEXTLoaded;
    bool _uniform1uivLoaded;
    bool _uniform1uivEXTLoaded;
    bool _uniform2dLoaded;
    bool _uniform2dvLoaded;
    bool _uniform2fLoaded;
    bool _uniform2fARBLoaded;
    bool _uniform2fvLoaded;
    bool _uniform2fvARBLoaded;
    bool _uniform2iLoaded;
    bool _uniform2i64ARBLoaded;
    bool _uniform2i64NVLoaded;
    bool _uniform2i64vARBLoaded;
    bool _uniform2i64vNVLoaded;
    bool _uniform2iARBLoaded;
    bool _uniform2ivLoaded;
    bool _uniform2ivARBLoaded;
    bool _uniform2uiLoaded;
    bool _uniform2ui64ARBLoaded;
    bool _uniform2ui64NVLoaded;
    bool _uniform2ui64vARBLoaded;
    bool _uniform2ui64vNVLoaded;
    bool _uniform2uiEXTLoaded;
    bool _uniform2uivLoaded;
    bool _uniform2uivEXTLoaded;
    bool _uniform3dLoaded;
    bool _uniform3dvLoaded;
    bool _uniform3fLoaded;
    bool _uniform3fARBLoaded;
    bool _uniform3fvLoaded;
    bool _uniform3fvARBLoaded;
    bool _uniform3iLoaded;
    bool _uniform3i64ARBLoaded;
    bool _uniform3i64NVLoaded;
    bool _uniform3i64vARBLoaded;
    bool _uniform3i64vNVLoaded;
    bool _uniform3iARBLoaded;
    bool _uniform3ivLoaded;
    bool _uniform3ivARBLoaded;
    bool _uniform3uiLoaded;
    bool _uniform3ui64ARBLoaded;
    bool _uniform3ui64NVLoaded;
    bool _uniform3ui64vARBLoaded;
    bool _uniform3ui64vNVLoaded;
    bool _uniform3uiEXTLoaded;
    bool _uniform3uivLoaded;
    bool _uniform3uivEXTLoaded;
    bool _uniform4dLoaded;
    bool _uniform4dvLoaded;
    bool _uniform4fLoaded;
    bool _uniform4fARBLoaded;
    bool _uniform4fvLoaded;
    bool _uniform4fvARBLoaded;
    bool _uniform4iLoaded;
    bool _uniform4i64ARBLoaded;
    bool _uniform4i64NVLoaded;
    bool _uniform4i64vARBLoaded;
    bool _uniform4i64vNVLoaded;
    bool _uniform4iARBLoaded;
    bool _uniform4ivLoaded;
    bool _uniform4ivARBLoaded;
    bool _uniform4uiLoaded;
    bool _uniform4ui64ARBLoaded;
    bool _uniform4ui64NVLoaded;
    bool _uniform4ui64vARBLoaded;
    bool _uniform4ui64vNVLoaded;
    bool _uniform4uiEXTLoaded;
    bool _uniform4uivLoaded;
    bool _uniform4uivEXTLoaded;
    bool _uniformBlockBindingLoaded;
    bool _uniformBufferEXTLoaded;
    bool _uniformHandleui64ARBLoaded;
    bool _uniformHandleui64IMGLoaded;
    bool _uniformHandleui64NVLoaded;
    bool _uniformHandleui64vARBLoaded;
    bool _uniformHandleui64vIMGLoaded;
    bool _uniformHandleui64vNVLoaded;
    bool _uniformMatrix2dvLoaded;
    bool _uniformMatrix2fvLoaded;
    bool _uniformMatrix2fvARBLoaded;
    bool _uniformMatrix2x3dvLoaded;
    bool _uniformMatrix2x3fvLoaded;
    bool _uniformMatrix2x3fvNVLoaded;
    bool _uniformMatrix2x4dvLoaded;
    bool _uniformMatrix2x4fvLoaded;
    bool _uniformMatrix2x4fvNVLoaded;
    bool _uniformMatrix3dvLoaded;
    bool _uniformMatrix3fvLoaded;
    bool _uniformMatrix3fvARBLoaded;
    bool _uniformMatrix3x2dvLoaded;
    bool _uniformMatrix3x2fvLoaded;
    bool _uniformMatrix3x2fvNVLoaded;
    bool _uniformMatrix3x4dvLoaded;
    bool _uniformMatrix3x4fvLoaded;
    bool _uniformMatrix3x4fvNVLoaded;
    bool _uniformMatrix4dvLoaded;
    bool _uniformMatrix4fvLoaded;
    bool _uniformMatrix4fvARBLoaded;
    bool _uniformMatrix4x2dvLoaded;
    bool _uniformMatrix4x2fvLoaded;
    bool _uniformMatrix4x2fvNVLoaded;
    bool _uniformMatrix4x3dvLoaded;
    bool _uniformMatrix4x3fvLoaded;
    bool _uniformMatrix4x3fvNVLoaded;
    bool _uniformSubroutinesuivLoaded;
    bool _uniformui64NVLoaded;
    bool _uniformui64vNVLoaded;
    bool _unlockArraysEXTLoaded;
    bool _unmapBufferLoaded;
    bool _unmapBufferARBLoaded;
    bool _unmapBufferOESLoaded;
    bool _unmapNamedBufferLoaded;
    bool _unmapNamedBufferEXTLoaded;
    bool _unmapObjectBufferATILoaded;
    bool _unmapTexture2DINTELLoaded;
    bool _updateObjectBufferATILoaded;
    bool _uploadGpuMaskNVXLoaded;
    bool _useProgramLoaded;
    bool _useProgramObjectARBLoaded;
    bool _useProgramStagesLoaded;
    bool _useProgramStagesEXTLoaded;
    bool _useShaderProgramEXTLoaded;
    bool _validateProgramLoaded;
    bool _validateProgramARBLoaded;
    bool _validateProgramPipelineLoaded;
    bool _validateProgramPipelineEXTLoaded;
    bool _variantArrayObjectATILoaded;
    bool _variantbvEXTLoaded;
    bool _variantdvEXTLoaded;
    bool _variantfvEXTLoaded;
    bool _variantivEXTLoaded;
    bool _variantPointerEXTLoaded;
    bool _variantsvEXTLoaded;
    bool _variantubvEXTLoaded;
    bool _variantuivEXTLoaded;
    bool _variantusvEXTLoaded;
    bool _vDPAUFiniNVLoaded;
    bool _vDPAUGetSurfaceivNVLoaded;
    bool _vDPAUInitNVLoaded;
    bool _vDPAUIsSurfaceNVLoaded;
    bool _vDPAUMapSurfacesNVLoaded;
    bool _vDPAURegisterOutputSurfaceNVLoaded;
    bool _vDPAURegisterVideoSurfaceNVLoaded;
    bool _vDPAURegisterVideoSurfaceWithPictureStructureNVLoaded;
    bool _vDPAUSurfaceAccessNVLoaded;
    bool _vDPAUUnmapSurfacesNVLoaded;
    bool _vDPAUUnregisterSurfaceNVLoaded;
    bool _vertex2bOESLoaded;
    bool _vertex2bvOESLoaded;
    bool _vertex2dLoaded;
    bool _vertex2dvLoaded;
    bool _vertex2fLoaded;
    bool _vertex2fvLoaded;
    bool _vertex2hNVLoaded;
    bool _vertex2hvNVLoaded;
    bool _vertex2iLoaded;
    bool _vertex2ivLoaded;
    bool _vertex2sLoaded;
    bool _vertex2svLoaded;
    bool _vertex2xOESLoaded;
    bool _vertex2xvOESLoaded;
    bool _vertex3bOESLoaded;
    bool _vertex3bvOESLoaded;
    bool _vertex3dLoaded;
    bool _vertex3dvLoaded;
    bool _vertex3fLoaded;
    bool _vertex3fvLoaded;
    bool _vertex3hNVLoaded;
    bool _vertex3hvNVLoaded;
    bool _vertex3iLoaded;
    bool _vertex3ivLoaded;
    bool _vertex3sLoaded;
    bool _vertex3svLoaded;
    bool _vertex3xOESLoaded;
    bool _vertex3xvOESLoaded;
    bool _vertex4bOESLoaded;
    bool _vertex4bvOESLoaded;
    bool _vertex4dLoaded;
    bool _vertex4dvLoaded;
    bool _vertex4fLoaded;
    bool _vertex4fvLoaded;
    bool _vertex4hNVLoaded;
    bool _vertex4hvNVLoaded;
    bool _vertex4iLoaded;
    bool _vertex4ivLoaded;
    bool _vertex4sLoaded;
    bool _vertex4svLoaded;
    bool _vertex4xOESLoaded;
    bool _vertex4xvOESLoaded;
    bool _vertexArrayAttribBindingLoaded;
    bool _vertexArrayAttribFormatLoaded;
    bool _vertexArrayAttribIFormatLoaded;
    bool _vertexArrayAttribLFormatLoaded;
    bool _vertexArrayBindingDivisorLoaded;
    bool _vertexArrayBindVertexBufferEXTLoaded;
    bool _vertexArrayColorOffsetEXTLoaded;
    bool _vertexArrayEdgeFlagOffsetEXTLoaded;
    bool _vertexArrayElementBufferLoaded;
    bool _vertexArrayFogCoordOffsetEXTLoaded;
    bool _vertexArrayIndexOffsetEXTLoaded;
    bool _vertexArrayMultiTexCoordOffsetEXTLoaded;
    bool _vertexArrayNormalOffsetEXTLoaded;
    bool _vertexArrayParameteriAPPLELoaded;
    bool _vertexArrayRangeAPPLELoaded;
    bool _vertexArrayRangeNVLoaded;
    bool _vertexArraySecondaryColorOffsetEXTLoaded;
    bool _vertexArrayTexCoordOffsetEXTLoaded;
    bool _vertexArrayVertexAttribBindingEXTLoaded;
    bool _vertexArrayVertexAttribDivisorEXTLoaded;
    bool _vertexArrayVertexAttribFormatEXTLoaded;
    bool _vertexArrayVertexAttribIFormatEXTLoaded;
    bool _vertexArrayVertexAttribIOffsetEXTLoaded;
    bool _vertexArrayVertexAttribLFormatEXTLoaded;
    bool _vertexArrayVertexAttribLOffsetEXTLoaded;
    bool _vertexArrayVertexAttribOffsetEXTLoaded;
    bool _vertexArrayVertexBindingDivisorEXTLoaded;
    bool _vertexArrayVertexBufferLoaded;
    bool _vertexArrayVertexBuffersLoaded;
    bool _vertexArrayVertexOffsetEXTLoaded;
    bool _vertexAttrib1dLoaded;
    bool _vertexAttrib1dARBLoaded;
    bool _vertexAttrib1dNVLoaded;
    bool _vertexAttrib1dvLoaded;
    bool _vertexAttrib1dvARBLoaded;
    bool _vertexAttrib1dvNVLoaded;
    bool _vertexAttrib1fLoaded;
    bool _vertexAttrib1fARBLoaded;
    bool _vertexAttrib1fNVLoaded;
    bool _vertexAttrib1fvLoaded;
    bool _vertexAttrib1fvARBLoaded;
    bool _vertexAttrib1fvNVLoaded;
    bool _vertexAttrib1hNVLoaded;
    bool _vertexAttrib1hvNVLoaded;
    bool _vertexAttrib1sLoaded;
    bool _vertexAttrib1sARBLoaded;
    bool _vertexAttrib1sNVLoaded;
    bool _vertexAttrib1svLoaded;
    bool _vertexAttrib1svARBLoaded;
    bool _vertexAttrib1svNVLoaded;
    bool _vertexAttrib2dLoaded;
    bool _vertexAttrib2dARBLoaded;
    bool _vertexAttrib2dNVLoaded;
    bool _vertexAttrib2dvLoaded;
    bool _vertexAttrib2dvARBLoaded;
    bool _vertexAttrib2dvNVLoaded;
    bool _vertexAttrib2fLoaded;
    bool _vertexAttrib2fARBLoaded;
    bool _vertexAttrib2fNVLoaded;
    bool _vertexAttrib2fvLoaded;
    bool _vertexAttrib2fvARBLoaded;
    bool _vertexAttrib2fvNVLoaded;
    bool _vertexAttrib2hNVLoaded;
    bool _vertexAttrib2hvNVLoaded;
    bool _vertexAttrib2sLoaded;
    bool _vertexAttrib2sARBLoaded;
    bool _vertexAttrib2sNVLoaded;
    bool _vertexAttrib2svLoaded;
    bool _vertexAttrib2svARBLoaded;
    bool _vertexAttrib2svNVLoaded;
    bool _vertexAttrib3dLoaded;
    bool _vertexAttrib3dARBLoaded;
    bool _vertexAttrib3dNVLoaded;
    bool _vertexAttrib3dvLoaded;
    bool _vertexAttrib3dvARBLoaded;
    bool _vertexAttrib3dvNVLoaded;
    bool _vertexAttrib3fLoaded;
    bool _vertexAttrib3fARBLoaded;
    bool _vertexAttrib3fNVLoaded;
    bool _vertexAttrib3fvLoaded;
    bool _vertexAttrib3fvARBLoaded;
    bool _vertexAttrib3fvNVLoaded;
    bool _vertexAttrib3hNVLoaded;
    bool _vertexAttrib3hvNVLoaded;
    bool _vertexAttrib3sLoaded;
    bool _vertexAttrib3sARBLoaded;
    bool _vertexAttrib3sNVLoaded;
    bool _vertexAttrib3svLoaded;
    bool _vertexAttrib3svARBLoaded;
    bool _vertexAttrib3svNVLoaded;
    bool _vertexAttrib4bvLoaded;
    bool _vertexAttrib4bvARBLoaded;
    bool _vertexAttrib4dLoaded;
    bool _vertexAttrib4dARBLoaded;
    bool _vertexAttrib4dNVLoaded;
    bool _vertexAttrib4dvLoaded;
    bool _vertexAttrib4dvARBLoaded;
    bool _vertexAttrib4dvNVLoaded;
    bool _vertexAttrib4fLoaded;
    bool _vertexAttrib4fARBLoaded;
    bool _vertexAttrib4fNVLoaded;
    bool _vertexAttrib4fvLoaded;
    bool _vertexAttrib4fvARBLoaded;
    bool _vertexAttrib4fvNVLoaded;
    bool _vertexAttrib4hNVLoaded;
    bool _vertexAttrib4hvNVLoaded;
    bool _vertexAttrib4ivLoaded;
    bool _vertexAttrib4ivARBLoaded;
    bool _vertexAttrib4NbvLoaded;
    bool _vertexAttrib4NbvARBLoaded;
    bool _vertexAttrib4NivLoaded;
    bool _vertexAttrib4NivARBLoaded;
    bool _vertexAttrib4NsvLoaded;
    bool _vertexAttrib4NsvARBLoaded;
    bool _vertexAttrib4NubLoaded;
    bool _vertexAttrib4NubARBLoaded;
    bool _vertexAttrib4NubvLoaded;
    bool _vertexAttrib4NubvARBLoaded;
    bool _vertexAttrib4NuivLoaded;
    bool _vertexAttrib4NuivARBLoaded;
    bool _vertexAttrib4NusvLoaded;
    bool _vertexAttrib4NusvARBLoaded;
    bool _vertexAttrib4sLoaded;
    bool _vertexAttrib4sARBLoaded;
    bool _vertexAttrib4sNVLoaded;
    bool _vertexAttrib4svLoaded;
    bool _vertexAttrib4svARBLoaded;
    bool _vertexAttrib4svNVLoaded;
    bool _vertexAttrib4ubNVLoaded;
    bool _vertexAttrib4ubvLoaded;
    bool _vertexAttrib4ubvARBLoaded;
    bool _vertexAttrib4ubvNVLoaded;
    bool _vertexAttrib4uivLoaded;
    bool _vertexAttrib4uivARBLoaded;
    bool _vertexAttrib4usvLoaded;
    bool _vertexAttrib4usvARBLoaded;
    bool _vertexAttribArrayObjectATILoaded;
    bool _vertexAttribBindingLoaded;
    bool _vertexAttribDivisorLoaded;
    bool _vertexAttribDivisorANGLELoaded;
    bool _vertexAttribDivisorARBLoaded;
    bool _vertexAttribDivisorEXTLoaded;
    bool _vertexAttribDivisorNVLoaded;
    bool _vertexAttribFormatLoaded;
    bool _vertexAttribFormatNVLoaded;
    bool _vertexAttribI1iLoaded;
    bool _vertexAttribI1iEXTLoaded;
    bool _vertexAttribI1ivLoaded;
    bool _vertexAttribI1ivEXTLoaded;
    bool _vertexAttribI1uiLoaded;
    bool _vertexAttribI1uiEXTLoaded;
    bool _vertexAttribI1uivLoaded;
    bool _vertexAttribI1uivEXTLoaded;
    bool _vertexAttribI2iLoaded;
    bool _vertexAttribI2iEXTLoaded;
    bool _vertexAttribI2ivLoaded;
    bool _vertexAttribI2ivEXTLoaded;
    bool _vertexAttribI2uiLoaded;
    bool _vertexAttribI2uiEXTLoaded;
    bool _vertexAttribI2uivLoaded;
    bool _vertexAttribI2uivEXTLoaded;
    bool _vertexAttribI3iLoaded;
    bool _vertexAttribI3iEXTLoaded;
    bool _vertexAttribI3ivLoaded;
    bool _vertexAttribI3ivEXTLoaded;
    bool _vertexAttribI3uiLoaded;
    bool _vertexAttribI3uiEXTLoaded;
    bool _vertexAttribI3uivLoaded;
    bool _vertexAttribI3uivEXTLoaded;
    bool _vertexAttribI4bvLoaded;
    bool _vertexAttribI4bvEXTLoaded;
    bool _vertexAttribI4iLoaded;
    bool _vertexAttribI4iEXTLoaded;
    bool _vertexAttribI4ivLoaded;
    bool _vertexAttribI4ivEXTLoaded;
    bool _vertexAttribI4svLoaded;
    bool _vertexAttribI4svEXTLoaded;
    bool _vertexAttribI4ubvLoaded;
    bool _vertexAttribI4ubvEXTLoaded;
    bool _vertexAttribI4uiLoaded;
    bool _vertexAttribI4uiEXTLoaded;
    bool _vertexAttribI4uivLoaded;
    bool _vertexAttribI4uivEXTLoaded;
    bool _vertexAttribI4usvLoaded;
    bool _vertexAttribI4usvEXTLoaded;
    bool _vertexAttribIFormatLoaded;
    bool _vertexAttribIFormatNVLoaded;
    bool _vertexAttribIPointerLoaded;
    bool _vertexAttribIPointerEXTLoaded;
    bool _vertexAttribL1dLoaded;
    bool _vertexAttribL1dEXTLoaded;
    bool _vertexAttribL1dvLoaded;
    bool _vertexAttribL1dvEXTLoaded;
    bool _vertexAttribL1i64NVLoaded;
    bool _vertexAttribL1i64vNVLoaded;
    bool _vertexAttribL1ui64ARBLoaded;
    bool _vertexAttribL1ui64NVLoaded;
    bool _vertexAttribL1ui64vARBLoaded;
    bool _vertexAttribL1ui64vNVLoaded;
    bool _vertexAttribL2dLoaded;
    bool _vertexAttribL2dEXTLoaded;
    bool _vertexAttribL2dvLoaded;
    bool _vertexAttribL2dvEXTLoaded;
    bool _vertexAttribL2i64NVLoaded;
    bool _vertexAttribL2i64vNVLoaded;
    bool _vertexAttribL2ui64NVLoaded;
    bool _vertexAttribL2ui64vNVLoaded;
    bool _vertexAttribL3dLoaded;
    bool _vertexAttribL3dEXTLoaded;
    bool _vertexAttribL3dvLoaded;
    bool _vertexAttribL3dvEXTLoaded;
    bool _vertexAttribL3i64NVLoaded;
    bool _vertexAttribL3i64vNVLoaded;
    bool _vertexAttribL3ui64NVLoaded;
    bool _vertexAttribL3ui64vNVLoaded;
    bool _vertexAttribL4dLoaded;
    bool _vertexAttribL4dEXTLoaded;
    bool _vertexAttribL4dvLoaded;
    bool _vertexAttribL4dvEXTLoaded;
    bool _vertexAttribL4i64NVLoaded;
    bool _vertexAttribL4i64vNVLoaded;
    bool _vertexAttribL4ui64NVLoaded;
    bool _vertexAttribL4ui64vNVLoaded;
    bool _vertexAttribLFormatLoaded;
    bool _vertexAttribLFormatNVLoaded;
    bool _vertexAttribLPointerLoaded;
    bool _vertexAttribLPointerEXTLoaded;
    bool _vertexAttribP1uiLoaded;
    bool _vertexAttribP1uivLoaded;
    bool _vertexAttribP2uiLoaded;
    bool _vertexAttribP2uivLoaded;
    bool _vertexAttribP3uiLoaded;
    bool _vertexAttribP3uivLoaded;
    bool _vertexAttribP4uiLoaded;
    bool _vertexAttribP4uivLoaded;
    bool _vertexAttribParameteriAMDLoaded;
    bool _vertexAttribPointerLoaded;
    bool _vertexAttribPointerARBLoaded;
    bool _vertexAttribPointerNVLoaded;
    bool _vertexAttribs1dvNVLoaded;
    bool _vertexAttribs1fvNVLoaded;
    bool _vertexAttribs1hvNVLoaded;
    bool _vertexAttribs1svNVLoaded;
    bool _vertexAttribs2dvNVLoaded;
    bool _vertexAttribs2fvNVLoaded;
    bool _vertexAttribs2hvNVLoaded;
    bool _vertexAttribs2svNVLoaded;
    bool _vertexAttribs3dvNVLoaded;
    bool _vertexAttribs3fvNVLoaded;
    bool _vertexAttribs3hvNVLoaded;
    bool _vertexAttribs3svNVLoaded;
    bool _vertexAttribs4dvNVLoaded;
    bool _vertexAttribs4fvNVLoaded;
    bool _vertexAttribs4hvNVLoaded;
    bool _vertexAttribs4svNVLoaded;
    bool _vertexAttribs4ubvNVLoaded;
    bool _vertexBindingDivisorLoaded;
    bool _vertexBlendARBLoaded;
    bool _vertexBlendEnvfATILoaded;
    bool _vertexBlendEnviATILoaded;
    bool _vertexFormatNVLoaded;
    bool _vertexP2uiLoaded;
    bool _vertexP2uivLoaded;
    bool _vertexP3uiLoaded;
    bool _vertexP3uivLoaded;
    bool _vertexP4uiLoaded;
    bool _vertexP4uivLoaded;
    bool _vertexPointerLoaded;
    bool _vertexPointerEXTLoaded;
    bool _vertexPointerListIBMLoaded;
    bool _vertexPointervINTELLoaded;
    bool _vertexStream1dATILoaded;
    bool _vertexStream1dvATILoaded;
    bool _vertexStream1fATILoaded;
    bool _vertexStream1fvATILoaded;
    bool _vertexStream1iATILoaded;
    bool _vertexStream1ivATILoaded;
    bool _vertexStream1sATILoaded;
    bool _vertexStream1svATILoaded;
    bool _vertexStream2dATILoaded;
    bool _vertexStream2dvATILoaded;
    bool _vertexStream2fATILoaded;
    bool _vertexStream2fvATILoaded;
    bool _vertexStream2iATILoaded;
    bool _vertexStream2ivATILoaded;
    bool _vertexStream2sATILoaded;
    bool _vertexStream2svATILoaded;
    bool _vertexStream3dATILoaded;
    bool _vertexStream3dvATILoaded;
    bool _vertexStream3fATILoaded;
    bool _vertexStream3fvATILoaded;
    bool _vertexStream3iATILoaded;
    bool _vertexStream3ivATILoaded;
    bool _vertexStream3sATILoaded;
    bool _vertexStream3svATILoaded;
    bool _vertexStream4dATILoaded;
    bool _vertexStream4dvATILoaded;
    bool _vertexStream4fATILoaded;
    bool _vertexStream4fvATILoaded;
    bool _vertexStream4iATILoaded;
    bool _vertexStream4ivATILoaded;
    bool _vertexStream4sATILoaded;
    bool _vertexStream4svATILoaded;
    bool _vertexWeightfEXTLoaded;
    bool _vertexWeightfvEXTLoaded;
    bool _vertexWeighthNVLoaded;
    bool _vertexWeighthvNVLoaded;
    bool _vertexWeightPointerEXTLoaded;
    bool _videoCaptureNVLoaded;
    bool _videoCaptureStreamParameterdvNVLoaded;
    bool _videoCaptureStreamParameterfvNVLoaded;
    bool _videoCaptureStreamParameterivNVLoaded;
    bool _viewportLoaded;
    bool _viewportArrayvLoaded;
    bool _viewportArrayvNVLoaded;
    bool _viewportArrayvOESLoaded;
    bool _viewportIndexedfLoaded;
    bool _viewportIndexedfNVLoaded;
    bool _viewportIndexedfOESLoaded;
    bool _viewportIndexedfvLoaded;
    bool _viewportIndexedfvNVLoaded;
    bool _viewportIndexedfvOESLoaded;
    bool _viewportPositionWScaleNVLoaded;
    bool _viewportSwizzleNVLoaded;
    bool _waitSemaphoreEXTLoaded;
    bool _waitSemaphoreui64NVXLoaded;
    bool _waitSyncLoaded;
    bool _waitSyncAPPLELoaded;
    bool _waitVkSemaphoreNVLoaded;
    bool _weightbvARBLoaded;
    bool _weightdvARBLoaded;
    bool _weightfvARBLoaded;
    bool _weightivARBLoaded;
    bool _weightPathsNVLoaded;
    bool _weightPointerARBLoaded;
    bool _weightPointerOESLoaded;
    bool _weightsvARBLoaded;
    bool _weightubvARBLoaded;
    bool _weightuivARBLoaded;
    bool _weightusvARBLoaded;
    bool _windowPos2dLoaded;
    bool _windowPos2dARBLoaded;
    bool _windowPos2dMESALoaded;
    bool _windowPos2dvLoaded;
    bool _windowPos2dvARBLoaded;
    bool _windowPos2dvMESALoaded;
    bool _windowPos2fLoaded;
    bool _windowPos2fARBLoaded;
    bool _windowPos2fMESALoaded;
    bool _windowPos2fvLoaded;
    bool _windowPos2fvARBLoaded;
    bool _windowPos2fvMESALoaded;
    bool _windowPos2iLoaded;
    bool _windowPos2iARBLoaded;
    bool _windowPos2iMESALoaded;
    bool _windowPos2ivLoaded;
    bool _windowPos2ivARBLoaded;
    bool _windowPos2ivMESALoaded;
    bool _windowPos2sLoaded;
    bool _windowPos2sARBLoaded;
    bool _windowPos2sMESALoaded;
    bool _windowPos2svLoaded;
    bool _windowPos2svARBLoaded;
    bool _windowPos2svMESALoaded;
    bool _windowPos3dLoaded;
    bool _windowPos3dARBLoaded;
    bool _windowPos3dMESALoaded;
    bool _windowPos3dvLoaded;
    bool _windowPos3dvARBLoaded;
    bool _windowPos3dvMESALoaded;
    bool _windowPos3fLoaded;
    bool _windowPos3fARBLoaded;
    bool _windowPos3fMESALoaded;
    bool _windowPos3fvLoaded;
    bool _windowPos3fvARBLoaded;
    bool _windowPos3fvMESALoaded;
    bool _windowPos3iLoaded;
    bool _windowPos3iARBLoaded;
    bool _windowPos3iMESALoaded;
    bool _windowPos3ivLoaded;
    bool _windowPos3ivARBLoaded;
    bool _windowPos3ivMESALoaded;
    bool _windowPos3sLoaded;
    bool _windowPos3sARBLoaded;
    bool _windowPos3sMESALoaded;
    bool _windowPos3svLoaded;
    bool _windowPos3svARBLoaded;
    bool _windowPos3svMESALoaded;
    bool _windowPos4dMESALoaded;
    bool _windowPos4dvMESALoaded;
    bool _windowPos4fMESALoaded;
    bool _windowPos4fvMESALoaded;
    bool _windowPos4iMESALoaded;
    bool _windowPos4ivMESALoaded;
    bool _windowPos4sMESALoaded;
    bool _windowPos4svMESALoaded;
    bool _windowRectanglesEXTLoaded;
    bool _writeMaskEXTLoaded;
    boom::OpenGLVersion _version;
    std::vector<boom::OpenGLExtension> _supports;
    boom::__OpenGLImpl* _impl;
    std::vector<std::string> _extensions() const;
    std::string _versionName() const;
    void* _getProcAddress(char const*);
    void _current() const;
    void _bootstrap_CompatibilityProfile_32();
    void _bootstrap_CompatibilityProfile_33();
    void _bootstrap_CompatibilityProfile_40();
    void _bootstrap_CompatibilityProfile_41();
    void _bootstrap_CompatibilityProfile_42();
    void _bootstrap_CompatibilityProfile_43();
    void _bootstrap_CompatibilityProfile_44();
    void _bootstrap_CompatibilityProfile_45();
    void _bootstrap_CompatibilityProfile_46();
    void _bootstrap_CoreProfile_32();
    void _bootstrap_CoreProfile_33();
    void _bootstrap_CoreProfile_40();
    void _bootstrap_CoreProfile_41();
    void _bootstrap_CoreProfile_42();
    void _bootstrap_CoreProfile_43();
    void _bootstrap_CoreProfile_44();
    void _bootstrap_CoreProfile_45();
    void _bootstrap_CoreProfile_46();
    void _bootstrap_ES_10();
    void _bootstrap_ES_20();
    void _bootstrap_ES_30();
    void _bootstrap_ES_31();
    void _bootstrap_ES_32();
    void _bootstrap_Extensions();
    void _implInit(boom::OpenGLOptions const&);
    void _implDone();
    void _implSwap() const;
    void _implCurrent() const;
    void* _implGetProcAddress(char const*);
};

auto constexpr kOpenGL1passExt = 0x80A1;
auto constexpr kOpenGL1passSgis = 0x80A1;
auto constexpr kOpenGL2Bytes = 0x1407;
auto constexpr kOpenGL2BytesNv = 0x1407;
auto constexpr kOpenGL2d = 0x0600;
auto constexpr kOpenGL2pass0Ext = 0x80A2;
auto constexpr kOpenGL2pass0Sgis = 0x80A2;
auto constexpr kOpenGL2pass1Ext = 0x80A3;
auto constexpr kOpenGL2pass1Sgis = 0x80A3;
auto constexpr kOpenGL2xBitAti = 0x00000001;
auto constexpr kOpenGL3Bytes = 0x1408;
auto constexpr kOpenGL3BytesNv = 0x1408;
auto constexpr kOpenGL3d = 0x0601;
auto constexpr kOpenGL3dColor = 0x0602;
auto constexpr kOpenGL3dColorTexture = 0x0603;
auto constexpr kOpenGL3dcXAmd = 0x87F9;
auto constexpr kOpenGL3dcXyAmd = 0x87FA;
auto constexpr kOpenGL422AverageExt = 0x80CE;
auto constexpr kOpenGL422Ext = 0x80CC;
auto constexpr kOpenGL422RevAverageExt = 0x80CF;
auto constexpr kOpenGL422RevExt = 0x80CD;
auto constexpr kOpenGL4Bytes = 0x1409;
auto constexpr kOpenGL4BytesNv = 0x1409;
auto constexpr kOpenGL4dColorTexture = 0x0604;
auto constexpr kOpenGL4pass0Ext = 0x80A4;
auto constexpr kOpenGL4pass0Sgis = 0x80A4;
auto constexpr kOpenGL4pass1Ext = 0x80A5;
auto constexpr kOpenGL4pass1Sgis = 0x80A5;
auto constexpr kOpenGL4pass2Ext = 0x80A6;
auto constexpr kOpenGL4pass2Sgis = 0x80A6;
auto constexpr kOpenGL4pass3Ext = 0x80A7;
auto constexpr kOpenGL4pass3Sgis = 0x80A7;
auto constexpr kOpenGL4xBitAti = 0x00000002;
auto constexpr kOpenGL8xBitAti = 0x00000004;
auto constexpr kOpenGLAbgrExt = 0x8000;
auto constexpr kOpenGLAccum = 0x0100;
auto constexpr kOpenGLAccumAdjacentPairsNv = 0x90AD;
auto constexpr kOpenGLAccumAlphaBits = 0x0D5B;
auto constexpr kOpenGLAccumBlueBits = 0x0D5A;
auto constexpr kOpenGLAccumBufferBit = 0x00000200;
auto constexpr kOpenGLAccumClearValue = 0x0B80;
auto constexpr kOpenGLAccumGreenBits = 0x0D59;
auto constexpr kOpenGLAccumRedBits = 0x0D58;
auto constexpr kOpenGLActiveAtomicCounterBuffers = 0x92D9;
auto constexpr kOpenGLActiveAttributeMaxLength = 0x8B8A;
auto constexpr kOpenGLActiveAttributes = 0x8B89;
auto constexpr kOpenGLActiveProgram = 0x8259;
auto constexpr kOpenGLActiveProgramExt = 0x8B8D;
auto constexpr kOpenGLActiveProgramExtEs = 0x8259;
auto constexpr kOpenGLActiveResources = 0x92F5;
auto constexpr kOpenGLActiveStencilFaceExt = 0x8911;
auto constexpr kOpenGLActiveSubroutineMaxLength = 0x8E48;
auto constexpr kOpenGLActiveSubroutineUniformLocations = 0x8E47;
auto constexpr kOpenGLActiveSubroutineUniformMaxLength = 0x8E49;
auto constexpr kOpenGLActiveSubroutineUniforms = 0x8DE6;
auto constexpr kOpenGLActiveSubroutines = 0x8DE5;
auto constexpr kOpenGLActiveTexture = 0x84E0;
auto constexpr kOpenGLActiveTextureArb = 0x84E0;
auto constexpr kOpenGLActiveUniformBlockMaxNameLength = 0x8A35;
auto constexpr kOpenGLActiveUniformBlocks = 0x8A36;
auto constexpr kOpenGLActiveUniformMaxLength = 0x8B87;
auto constexpr kOpenGLActiveUniforms = 0x8B86;
auto constexpr kOpenGLActiveVariables = 0x9305;
auto constexpr kOpenGLActiveVaryingMaxLengthNv = 0x8C82;
auto constexpr kOpenGLActiveVaryingsNv = 0x8C81;
auto constexpr kOpenGLActiveVertexUnitsArb = 0x86A5;
auto constexpr kOpenGLAdd = 0x0104;
auto constexpr kOpenGLAddAti = 0x8963;
auto constexpr kOpenGLAddBlendImg = 0x8C09;
auto constexpr kOpenGLAddSigned = 0x8574;
auto constexpr kOpenGLAddSignedArb = 0x8574;
auto constexpr kOpenGLAddSignedExt = 0x8574;
auto constexpr kOpenGLAdjacentPairsNv = 0x90AE;
auto constexpr kOpenGLAffine2dNv = 0x9092;
auto constexpr kOpenGLAffine3dNv = 0x9094;
auto constexpr kOpenGLAliasedLineWidthRange = 0x846E;
auto constexpr kOpenGLAliasedPointSizeRange = 0x846D;
auto constexpr kOpenGLAllAttribBits = 0xFFFFFFFF;
auto constexpr kOpenGLAllBarrierBits = 0xFFFFFFFF;
auto constexpr kOpenGLAllBarrierBitsExt = 0xFFFFFFFF;
auto constexpr kOpenGLAllCompletedNv = 0x84F2;
auto constexpr kOpenGLAllPixelsAmd = 0xFFFFFFFF;
auto constexpr kOpenGLAllShaderBits = 0xFFFFFFFF;
auto constexpr kOpenGLAllShaderBitsExt = 0xFFFFFFFF;
auto constexpr kOpenGLAllStaticDataIbm = 103060;
auto constexpr kOpenGLAllowDrawFrgHintPgi = 0x1A210;
auto constexpr kOpenGLAllowDrawMemHintPgi = 0x1A211;
auto constexpr kOpenGLAllowDrawObjHintPgi = 0x1A20E;
auto constexpr kOpenGLAllowDrawWinHintPgi = 0x1A20F;
auto constexpr kOpenGLAlpha = 0x1906;
auto constexpr kOpenGLAlpha12 = 0x803D;
auto constexpr kOpenGLAlpha12Ext = 0x803D;
auto constexpr kOpenGLAlpha16 = 0x803E;
auto constexpr kOpenGLAlpha16Ext = 0x803E;
auto constexpr kOpenGLAlpha16Snorm = 0x9018;
auto constexpr kOpenGLAlpha16fArb = 0x881C;
auto constexpr kOpenGLAlpha16fExt = 0x881C;
auto constexpr kOpenGLAlpha16iExt = 0x8D8A;
auto constexpr kOpenGLAlpha16uiExt = 0x8D78;
auto constexpr kOpenGLAlpha32fArb = 0x8816;
auto constexpr kOpenGLAlpha32fExt = 0x8816;
auto constexpr kOpenGLAlpha32iExt = 0x8D84;
auto constexpr kOpenGLAlpha32uiExt = 0x8D72;
auto constexpr kOpenGLAlpha4 = 0x803B;
auto constexpr kOpenGLAlpha4Ext = 0x803B;
auto constexpr kOpenGLAlpha8 = 0x803C;
auto constexpr kOpenGLAlpha8Ext = 0x803C;
auto constexpr kOpenGLAlpha8Oes = 0x803C;
auto constexpr kOpenGLAlpha8Snorm = 0x9014;
auto constexpr kOpenGLAlpha8iExt = 0x8D90;
auto constexpr kOpenGLAlpha8uiExt = 0x8D7E;
auto constexpr kOpenGLAlphaBias = 0x0D1D;
auto constexpr kOpenGLAlphaBits = 0x0D55;
auto constexpr kOpenGLAlphaFloat16Apple = 0x881C;
auto constexpr kOpenGLAlphaFloat16Ati = 0x881C;
auto constexpr kOpenGLAlphaFloat32Apple = 0x8816;
auto constexpr kOpenGLAlphaFloat32Ati = 0x8816;
auto constexpr kOpenGLAlphaInteger = 0x8D97;
auto constexpr kOpenGLAlphaIntegerExt = 0x8D97;
auto constexpr kOpenGLAlphaMaxClampIngr = 0x8567;
auto constexpr kOpenGLAlphaMaxSgix = 0x8321;
auto constexpr kOpenGLAlphaMinClampIngr = 0x8563;
auto constexpr kOpenGLAlphaMinSgix = 0x8320;
auto constexpr kOpenGLAlphaRefCommandNv = 0x000F;
auto constexpr kOpenGLAlphaScale = 0x0D1C;
auto constexpr kOpenGLAlphaSnorm = 0x9010;
auto constexpr kOpenGLAlphaTest = 0x0BC0;
auto constexpr kOpenGLAlphaTestFunc = 0x0BC1;
auto constexpr kOpenGLAlphaTestFuncQcom = 0x0BC1;
auto constexpr kOpenGLAlphaTestQcom = 0x0BC0;
auto constexpr kOpenGLAlphaTestRef = 0x0BC2;
auto constexpr kOpenGLAlphaTestRefQcom = 0x0BC2;
auto constexpr kOpenGLAlphaToCoverageDitherDefaultNv = 0x934D;
auto constexpr kOpenGLAlphaToCoverageDitherDisableNv = 0x934F;
auto constexpr kOpenGLAlphaToCoverageDitherEnableNv = 0x934E;
auto constexpr kOpenGLAlphaToCoverageDitherModeNv = 0x92BF;
auto constexpr kOpenGLAlreadySignaled = 0x911A;
auto constexpr kOpenGLAlreadySignaledApple = 0x911A;
auto constexpr kOpenGLAlways = 0x0207;
auto constexpr kOpenGLAlwaysFastHintPgi = 0x1A20C;
auto constexpr kOpenGLAlwaysSoftHintPgi = 0x1A20D;
auto constexpr kOpenGLAmbient = 0x1200;
auto constexpr kOpenGLAmbientAndDiffuse = 0x1602;
auto constexpr kOpenGLAnd = 0x1501;
auto constexpr kOpenGLAndInverted = 0x1504;
auto constexpr kOpenGLAndReverse = 0x1502;
auto constexpr kOpenGLAnySamplesPassed = 0x8C2F;
auto constexpr kOpenGLAnySamplesPassedConservative = 0x8D6A;
auto constexpr kOpenGLAnySamplesPassedConservativeExt = 0x8D6A;
auto constexpr kOpenGLAnySamplesPassedExt = 0x8C2F;
auto constexpr kOpenGLArcToNv = 0xFE;
auto constexpr kOpenGLArrayBuffer = 0x8892;
auto constexpr kOpenGLArrayBufferArb = 0x8892;
auto constexpr kOpenGLArrayBufferBinding = 0x8894;
auto constexpr kOpenGLArrayBufferBindingArb = 0x8894;
auto constexpr kOpenGLArrayElementLockCountExt = 0x81A9;
auto constexpr kOpenGLArrayElementLockFirstExt = 0x81A8;
auto constexpr kOpenGLArrayObjectBufferAti = 0x8766;
auto constexpr kOpenGLArrayObjectOffsetAti = 0x8767;
auto constexpr kOpenGLArraySize = 0x92FB;
auto constexpr kOpenGLArrayStride = 0x92FE;
auto constexpr kOpenGLAsyncDrawPixelsSgix = 0x835D;
auto constexpr kOpenGLAsyncHistogramSgix = 0x832C;
auto constexpr kOpenGLAsyncMarkerSgix = 0x8329;
auto constexpr kOpenGLAsyncReadPixelsSgix = 0x835E;
auto constexpr kOpenGLAsyncTexImageSgix = 0x835C;
auto constexpr kOpenGLAtcRgbAmd = 0x8C92;
auto constexpr kOpenGLAtcRgbaExplicitAlphaAmd = 0x8C93;
auto constexpr kOpenGLAtcRgbaInterpolatedAlphaAmd = 0x87EE;
auto constexpr kOpenGLAtomicCounterBarrierBit = 0x00001000;
auto constexpr kOpenGLAtomicCounterBarrierBitExt = 0x00001000;
auto constexpr kOpenGLAtomicCounterBuffer = 0x92C0;
auto constexpr kOpenGLAtomicCounterBufferActiveAtomicCounterIndices = 0x92C6;
auto constexpr kOpenGLAtomicCounterBufferActiveAtomicCounters = 0x92C5;
auto constexpr kOpenGLAtomicCounterBufferBinding = 0x92C1;
auto constexpr kOpenGLAtomicCounterBufferDataSize = 0x92C4;
auto constexpr kOpenGLAtomicCounterBufferIndex = 0x9301;
auto constexpr kOpenGLAtomicCounterBufferReferencedByComputeShader = 0x90ED;
auto constexpr kOpenGLAtomicCounterBufferReferencedByFragmentShader = 0x92CB;
auto constexpr kOpenGLAtomicCounterBufferReferencedByGeometryShader = 0x92CA;
auto constexpr kOpenGLAtomicCounterBufferReferencedByMeshShaderNv = 0x959E;
auto constexpr kOpenGLAtomicCounterBufferReferencedByTaskShaderNv = 0x959F;
auto constexpr kOpenGLAtomicCounterBufferReferencedByTessControlShader = 0x92C8;
auto constexpr kOpenGLAtomicCounterBufferReferencedByTessEvaluationShader = 0x92C9;
auto constexpr kOpenGLAtomicCounterBufferReferencedByVertexShader = 0x92C7;
auto constexpr kOpenGLAtomicCounterBufferSize = 0x92C3;
auto constexpr kOpenGLAtomicCounterBufferStart = 0x92C2;
auto constexpr kOpenGLAttachedMemoryObjectNv = 0x95A4;
auto constexpr kOpenGLAttachedMemoryOffsetNv = 0x95A5;
auto constexpr kOpenGLAttachedShaders = 0x8B85;
auto constexpr kOpenGLAttenuationExt = 0x834D;
auto constexpr kOpenGLAttribArrayPointerNv = 0x8645;
auto constexpr kOpenGLAttribArraySizeNv = 0x8623;
auto constexpr kOpenGLAttribArrayStrideNv = 0x8624;
auto constexpr kOpenGLAttribArrayTypeNv = 0x8625;
auto constexpr kOpenGLAttribStackDepth = 0x0BB0;
auto constexpr kOpenGLAttributeAddressCommandNv = 0x0009;
auto constexpr kOpenGLAutoGenerateMipmap = 0x8295;
auto constexpr kOpenGLAutoNormal = 0x0D80;
auto constexpr kOpenGLAux0 = 0x0409;
auto constexpr kOpenGLAux1 = 0x040A;
auto constexpr kOpenGLAux2 = 0x040B;
auto constexpr kOpenGLAux3 = 0x040C;
auto constexpr kOpenGLAuxBuffers = 0x0C00;
auto constexpr kOpenGLAuxDepthStencilApple = 0x8A14;
auto constexpr kOpenGLAverageExt = 0x8335;
auto constexpr kOpenGLAverageHp = 0x8160;
auto constexpr kOpenGLBack = 0x0405;
auto constexpr kOpenGLBackLeft = 0x0402;
auto constexpr kOpenGLBackNormalsHintPgi = 0x1A223;
auto constexpr kOpenGLBackPrimaryColorNv = 0x8C77;
auto constexpr kOpenGLBackRight = 0x0403;
auto constexpr kOpenGLBackSecondaryColorNv = 0x8C78;
auto constexpr kOpenGLBevelNv = 0x90A6;
auto constexpr kOpenGLBgr = 0x80E0;
auto constexpr kOpenGLBgrExt = 0x80E0;
auto constexpr kOpenGLBgrInteger = 0x8D9A;
auto constexpr kOpenGLBgrIntegerExt = 0x8D9A;
auto constexpr kOpenGLBgra = 0x80E1;
auto constexpr kOpenGLBgra8Ext = 0x93A1;
auto constexpr kOpenGLBgraExt = 0x80E1;
auto constexpr kOpenGLBgraImg = 0x80E1;
auto constexpr kOpenGLBgraInteger = 0x8D9B;
auto constexpr kOpenGLBgraIntegerExt = 0x8D9B;
auto constexpr kOpenGLBiasBitAti = 0x00000008;
auto constexpr kOpenGLBiasByNegativeOneHalfNv = 0x8541;
auto constexpr kOpenGLBinningControlHintQcom = 0x8FB0;
auto constexpr kOpenGLBinormalArrayExt = 0x843A;
auto constexpr kOpenGLBinormalArrayPointerExt = 0x8443;
auto constexpr kOpenGLBinormalArrayStrideExt = 0x8441;
auto constexpr kOpenGLBinormalArrayTypeExt = 0x8440;
auto constexpr kOpenGLBitmap = 0x1A00;
auto constexpr kOpenGLBitmapToken = 0x0704;
auto constexpr kOpenGLBlackholeRenderIntel = 0x83FC;
auto constexpr kOpenGLBlend = 0x0BE2;
auto constexpr kOpenGLBlendAdvancedCoherentKhr = 0x9285;
auto constexpr kOpenGLBlendAdvancedCoherentNv = 0x9285;
auto constexpr kOpenGLBlendColor = 0x8005;
auto constexpr kOpenGLBlendColorCommandNv = 0x000B;
auto constexpr kOpenGLBlendColorExt = 0x8005;
auto constexpr kOpenGLBlendDst = 0x0BE0;
auto constexpr kOpenGLBlendDstAlpha = 0x80CA;
auto constexpr kOpenGLBlendDstAlphaExt = 0x80CA;
auto constexpr kOpenGLBlendDstAlphaOes = 0x80CA;
auto constexpr kOpenGLBlendDstRgb = 0x80C8;
auto constexpr kOpenGLBlendDstRgbExt = 0x80C8;
auto constexpr kOpenGLBlendDstRgbOes = 0x80C8;
auto constexpr kOpenGLBlendEquation = 0x8009;
auto constexpr kOpenGLBlendEquationAlpha = 0x883D;
auto constexpr kOpenGLBlendEquationAlphaExt = 0x883D;
auto constexpr kOpenGLBlendEquationAlphaOes = 0x883D;
auto constexpr kOpenGLBlendEquationExt = 0x8009;
auto constexpr kOpenGLBlendEquationOes = 0x8009;
auto constexpr kOpenGLBlendEquationRgb = 0x8009;
auto constexpr kOpenGLBlendEquationRgbExt = 0x8009;
auto constexpr kOpenGLBlendEquationRgbOes = 0x8009;
auto constexpr kOpenGLBlendOverlapNv = 0x9281;
auto constexpr kOpenGLBlendPremultipliedSrcNv = 0x9280;
auto constexpr kOpenGLBlendSrc = 0x0BE1;
auto constexpr kOpenGLBlendSrcAlpha = 0x80CB;
auto constexpr kOpenGLBlendSrcAlphaExt = 0x80CB;
auto constexpr kOpenGLBlendSrcAlphaOes = 0x80CB;
auto constexpr kOpenGLBlendSrcRgb = 0x80C9;
auto constexpr kOpenGLBlendSrcRgbExt = 0x80C9;
auto constexpr kOpenGLBlendSrcRgbOes = 0x80C9;
auto constexpr kOpenGLBlockIndex = 0x92FD;
auto constexpr kOpenGLBlue = 0x1905;
auto constexpr kOpenGLBlueBias = 0x0D1B;
auto constexpr kOpenGLBlueBitAti = 0x00000004;
auto constexpr kOpenGLBlueBits = 0x0D54;
auto constexpr kOpenGLBlueInteger = 0x8D96;
auto constexpr kOpenGLBlueIntegerExt = 0x8D96;
auto constexpr kOpenGLBlueMaxClampIngr = 0x8566;
auto constexpr kOpenGLBlueMinClampIngr = 0x8562;
auto constexpr kOpenGLBlueNv = 0x1905;
auto constexpr kOpenGLBlueScale = 0x0D1A;
auto constexpr kOpenGLBoldBitNv = 0x01;
auto constexpr kOpenGLBool = 0x8B56;
auto constexpr kOpenGLBoolArb = 0x8B56;
auto constexpr kOpenGLBoolVec2 = 0x8B57;
auto constexpr kOpenGLBoolVec2Arb = 0x8B57;
auto constexpr kOpenGLBoolVec3 = 0x8B58;
auto constexpr kOpenGLBoolVec3Arb = 0x8B58;
auto constexpr kOpenGLBoolVec4 = 0x8B59;
auto constexpr kOpenGLBoolVec4Arb = 0x8B59;
auto constexpr kOpenGLBoundingBoxNv = 0x908D;
auto constexpr kOpenGLBoundingBoxOfBoundingBoxesNv = 0x909C;
auto constexpr kOpenGLBrowserDefaultWebgl = 0x9244;
auto constexpr kOpenGLBuffer = 0x82E0;
auto constexpr kOpenGLBufferAccess = 0x88BB;
auto constexpr kOpenGLBufferAccessArb = 0x88BB;
auto constexpr kOpenGLBufferAccessFlags = 0x911F;
auto constexpr kOpenGLBufferAccessOes = 0x88BB;
auto constexpr kOpenGLBufferBinding = 0x9302;
auto constexpr kOpenGLBufferDataSize = 0x9303;
auto constexpr kOpenGLBufferFlushingUnmapApple = 0x8A13;
auto constexpr kOpenGLBufferGpuAddressNv = 0x8F1D;
auto constexpr kOpenGLBufferImmutableStorage = 0x821F;
auto constexpr kOpenGLBufferImmutableStorageExt = 0x821F;
auto constexpr kOpenGLBufferKhr = 0x82E0;
auto constexpr kOpenGLBufferMapLength = 0x9120;
auto constexpr kOpenGLBufferMapOffset = 0x9121;
auto constexpr kOpenGLBufferMapPointer = 0x88BD;
auto constexpr kOpenGLBufferMapPointerArb = 0x88BD;
auto constexpr kOpenGLBufferMapPointerOes = 0x88BD;
auto constexpr kOpenGLBufferMapped = 0x88BC;
auto constexpr kOpenGLBufferMappedArb = 0x88BC;
auto constexpr kOpenGLBufferMappedOes = 0x88BC;
auto constexpr kOpenGLBufferObjectApple = 0x85B3;
auto constexpr kOpenGLBufferObjectExt = 0x9151;
auto constexpr kOpenGLBufferSerializedModifyApple = 0x8A12;
auto constexpr kOpenGLBufferSize = 0x8764;
auto constexpr kOpenGLBufferSizeArb = 0x8764;
auto constexpr kOpenGLBufferStorageFlags = 0x8220;
auto constexpr kOpenGLBufferStorageFlagsExt = 0x8220;
auto constexpr kOpenGLBufferUpdateBarrierBit = 0x00000200;
auto constexpr kOpenGLBufferUpdateBarrierBitExt = 0x00000200;
auto constexpr kOpenGLBufferUsage = 0x8765;
auto constexpr kOpenGLBufferUsageArb = 0x8765;
auto constexpr kOpenGLBufferVariable = 0x92E5;
auto constexpr kOpenGLBumpEnvmapAti = 0x877B;
auto constexpr kOpenGLBumpNumTexUnitsAti = 0x8777;
auto constexpr kOpenGLBumpRotMatrixAti = 0x8775;
auto constexpr kOpenGLBumpRotMatrixSizeAti = 0x8776;
auto constexpr kOpenGLBumpTargetAti = 0x877C;
auto constexpr kOpenGLBumpTexUnitsAti = 0x8778;
auto constexpr kOpenGLByte = 0x1400;
auto constexpr kOpenGLC3fV3f = 0x2A24;
auto constexpr kOpenGLC4fN3fV3f = 0x2A26;
auto constexpr kOpenGLC4ubV2f = 0x2A22;
auto constexpr kOpenGLC4ubV3f = 0x2A23;
auto constexpr kOpenGLCalligraphicFragmentSgix = 0x8183;
auto constexpr kOpenGLCaveatSupport = 0x82B8;
auto constexpr kOpenGLCcw = 0x0901;
auto constexpr kOpenGLCircularCcwArcToNv = 0xF8;
auto constexpr kOpenGLCircularCwArcToNv = 0xFA;
auto constexpr kOpenGLCircularTangentArcToNv = 0xFC;
auto constexpr kOpenGLClamp = 0x2900;
auto constexpr kOpenGLClampFragmentColor = 0x891B;
auto constexpr kOpenGLClampFragmentColorArb = 0x891B;
auto constexpr kOpenGLClampReadColor = 0x891C;
auto constexpr kOpenGLClampReadColorArb = 0x891C;
auto constexpr kOpenGLClampToBorder = 0x812D;
auto constexpr kOpenGLClampToBorderArb = 0x812D;
auto constexpr kOpenGLClampToBorderExt = 0x812D;
auto constexpr kOpenGLClampToBorderNv = 0x812D;
auto constexpr kOpenGLClampToBorderOes = 0x812D;
auto constexpr kOpenGLClampToBorderSgis = 0x812D;
auto constexpr kOpenGLClampToEdge = 0x812F;
auto constexpr kOpenGLClampToEdgeSgis = 0x812F;
auto constexpr kOpenGLClampVertexColor = 0x891A;
auto constexpr kOpenGLClampVertexColorArb = 0x891A;
auto constexpr kOpenGLClear = 0x1500;
auto constexpr kOpenGLClearBuffer = 0x82B4;
auto constexpr kOpenGLClearTexture = 0x9365;
auto constexpr kOpenGLClientActiveTexture = 0x84E1;
auto constexpr kOpenGLClientActiveTextureArb = 0x84E1;
auto constexpr kOpenGLClientAllAttribBits = 0xFFFFFFFF;
auto constexpr kOpenGLClientAttribStackDepth = 0x0BB1;
auto constexpr kOpenGLClientMappedBufferBarrierBit = 0x00004000;
auto constexpr kOpenGLClientMappedBufferBarrierBitExt = 0x00004000;
auto constexpr kOpenGLClientPixelStoreBit = 0x00000001;
auto constexpr kOpenGLClientStorageBit = 0x0200;
auto constexpr kOpenGLClientStorageBitExt = 0x0200;
auto constexpr kOpenGLClientVertexArrayBit = 0x00000002;
auto constexpr kOpenGLClipDepthMode = 0x935D;
auto constexpr kOpenGLClipDepthModeExt = 0x935D;
auto constexpr kOpenGLClipDistance0 = 0x3000;
auto constexpr kOpenGLClipDistance0Apple = 0x3000;
auto constexpr kOpenGLClipDistance0Ext = 0x3000;
auto constexpr kOpenGLClipDistance1 = 0x3001;
auto constexpr kOpenGLClipDistance1Apple = 0x3001;
auto constexpr kOpenGLClipDistance1Ext = 0x3001;
auto constexpr kOpenGLClipDistance2 = 0x3002;
auto constexpr kOpenGLClipDistance2Apple = 0x3002;
auto constexpr kOpenGLClipDistance2Ext = 0x3002;
auto constexpr kOpenGLClipDistance3 = 0x3003;
auto constexpr kOpenGLClipDistance3Apple = 0x3003;
auto constexpr kOpenGLClipDistance3Ext = 0x3003;
auto constexpr kOpenGLClipDistance4 = 0x3004;
auto constexpr kOpenGLClipDistance4Apple = 0x3004;
auto constexpr kOpenGLClipDistance4Ext = 0x3004;
auto constexpr kOpenGLClipDistance5 = 0x3005;
auto constexpr kOpenGLClipDistance5Apple = 0x3005;
auto constexpr kOpenGLClipDistance5Ext = 0x3005;
auto constexpr kOpenGLClipDistance6 = 0x3006;
auto constexpr kOpenGLClipDistance6Apple = 0x3006;
auto constexpr kOpenGLClipDistance6Ext = 0x3006;
auto constexpr kOpenGLClipDistance7 = 0x3007;
auto constexpr kOpenGLClipDistance7Apple = 0x3007;
auto constexpr kOpenGLClipDistance7Ext = 0x3007;
auto constexpr kOpenGLClipDistanceNv = 0x8C7A;
auto constexpr kOpenGLClipFarHintPgi = 0x1A221;
auto constexpr kOpenGLClipNearHintPgi = 0x1A220;
auto constexpr kOpenGLClipOrigin = 0x935C;
auto constexpr kOpenGLClipOriginExt = 0x935C;
auto constexpr kOpenGLClipPlane0 = 0x3000;
auto constexpr kOpenGLClipPlane0Img = 0x3000;
auto constexpr kOpenGLClipPlane1 = 0x3001;
auto constexpr kOpenGLClipPlane1Img = 0x3001;
auto constexpr kOpenGLClipPlane2 = 0x3002;
auto constexpr kOpenGLClipPlane2Img = 0x3002;
auto constexpr kOpenGLClipPlane3 = 0x3003;
auto constexpr kOpenGLClipPlane3Img = 0x3003;
auto constexpr kOpenGLClipPlane4 = 0x3004;
auto constexpr kOpenGLClipPlane4Img = 0x3004;
auto constexpr kOpenGLClipPlane5 = 0x3005;
auto constexpr kOpenGLClipPlane5Img = 0x3005;
auto constexpr kOpenGLClipVolumeClippingHintExt = 0x80F0;
auto constexpr kOpenGLClippingInputPrimitives = 0x82F6;
auto constexpr kOpenGLClippingInputPrimitivesArb = 0x82F6;
auto constexpr kOpenGLClippingOutputPrimitives = 0x82F7;
auto constexpr kOpenGLClippingOutputPrimitivesArb = 0x82F7;
auto constexpr kOpenGLClosePathNv = 0x00;
auto constexpr kOpenGLCmykExt = 0x800C;
auto constexpr kOpenGLCmykaExt = 0x800D;
auto constexpr kOpenGLCnd0Ati = 0x896B;
auto constexpr kOpenGLCndAti = 0x896A;
auto constexpr kOpenGLCoeff = 0x0A00;
auto constexpr kOpenGLColor = 0x1800;
auto constexpr kOpenGLColor3BitPgi = 0x00010000;
auto constexpr kOpenGLColor4BitPgi = 0x00020000;
auto constexpr kOpenGLColorAlphaPairingAti = 0x8975;
auto constexpr kOpenGLColorArray = 0x8076;
auto constexpr kOpenGLColorArrayAddressNv = 0x8F23;
auto constexpr kOpenGLColorArrayBufferBinding = 0x8898;
auto constexpr kOpenGLColorArrayBufferBindingArb = 0x8898;
auto constexpr kOpenGLColorArrayCountExt = 0x8084;
auto constexpr kOpenGLColorArrayExt = 0x8076;
auto constexpr kOpenGLColorArrayLengthNv = 0x8F2D;
auto constexpr kOpenGLColorArrayListIbm = 103072;
auto constexpr kOpenGLColorArrayListStrideIbm = 103082;
auto constexpr kOpenGLColorArrayParallelPointersIntel = 0x83F7;
auto constexpr kOpenGLColorArrayPointer = 0x8090;
auto constexpr kOpenGLColorArrayPointerExt = 0x8090;
auto constexpr kOpenGLColorArraySize = 0x8081;
auto constexpr kOpenGLColorArraySizeExt = 0x8081;
auto constexpr kOpenGLColorArrayStride = 0x8083;
auto constexpr kOpenGLColorArrayStrideExt = 0x8083;
auto constexpr kOpenGLColorArrayType = 0x8082;
auto constexpr kOpenGLColorArrayTypeExt = 0x8082;
auto constexpr kOpenGLColorAttachment0 = 0x8CE0;
auto constexpr kOpenGLColorAttachment0Ext = 0x8CE0;
auto constexpr kOpenGLColorAttachment0Nv = 0x8CE0;
auto constexpr kOpenGLColorAttachment0Oes = 0x8CE0;
auto constexpr kOpenGLColorAttachment1 = 0x8CE1;
auto constexpr kOpenGLColorAttachment10 = 0x8CEA;
auto constexpr kOpenGLColorAttachment10Ext = 0x8CEA;
auto constexpr kOpenGLColorAttachment10Nv = 0x8CEA;
auto constexpr kOpenGLColorAttachment11 = 0x8CEB;
auto constexpr kOpenGLColorAttachment11Ext = 0x8CEB;
auto constexpr kOpenGLColorAttachment11Nv = 0x8CEB;
auto constexpr kOpenGLColorAttachment12 = 0x8CEC;
auto constexpr kOpenGLColorAttachment12Ext = 0x8CEC;
auto constexpr kOpenGLColorAttachment12Nv = 0x8CEC;
auto constexpr kOpenGLColorAttachment13 = 0x8CED;
auto constexpr kOpenGLColorAttachment13Ext = 0x8CED;
auto constexpr kOpenGLColorAttachment13Nv = 0x8CED;
auto constexpr kOpenGLColorAttachment14 = 0x8CEE;
auto constexpr kOpenGLColorAttachment14Ext = 0x8CEE;
auto constexpr kOpenGLColorAttachment14Nv = 0x8CEE;
auto constexpr kOpenGLColorAttachment15 = 0x8CEF;
auto constexpr kOpenGLColorAttachment15Ext = 0x8CEF;
auto constexpr kOpenGLColorAttachment15Nv = 0x8CEF;
auto constexpr kOpenGLColorAttachment16 = 0x8CF0;
auto constexpr kOpenGLColorAttachment17 = 0x8CF1;
auto constexpr kOpenGLColorAttachment18 = 0x8CF2;
auto constexpr kOpenGLColorAttachment19 = 0x8CF3;
auto constexpr kOpenGLColorAttachment1Ext = 0x8CE1;
auto constexpr kOpenGLColorAttachment1Nv = 0x8CE1;
auto constexpr kOpenGLColorAttachment2 = 0x8CE2;
auto constexpr kOpenGLColorAttachment20 = 0x8CF4;
auto constexpr kOpenGLColorAttachment21 = 0x8CF5;
auto constexpr kOpenGLColorAttachment22 = 0x8CF6;
auto constexpr kOpenGLColorAttachment23 = 0x8CF7;
auto constexpr kOpenGLColorAttachment24 = 0x8CF8;
auto constexpr kOpenGLColorAttachment25 = 0x8CF9;
auto constexpr kOpenGLColorAttachment26 = 0x8CFA;
auto constexpr kOpenGLColorAttachment27 = 0x8CFB;
auto constexpr kOpenGLColorAttachment28 = 0x8CFC;
auto constexpr kOpenGLColorAttachment29 = 0x8CFD;
auto constexpr kOpenGLColorAttachment2Ext = 0x8CE2;
auto constexpr kOpenGLColorAttachment2Nv = 0x8CE2;
auto constexpr kOpenGLColorAttachment3 = 0x8CE3;
auto constexpr kOpenGLColorAttachment30 = 0x8CFE;
auto constexpr kOpenGLColorAttachment31 = 0x8CFF;
auto constexpr kOpenGLColorAttachment3Ext = 0x8CE3;
auto constexpr kOpenGLColorAttachment3Nv = 0x8CE3;
auto constexpr kOpenGLColorAttachment4 = 0x8CE4;
auto constexpr kOpenGLColorAttachment4Ext = 0x8CE4;
auto constexpr kOpenGLColorAttachment4Nv = 0x8CE4;
auto constexpr kOpenGLColorAttachment5 = 0x8CE5;
auto constexpr kOpenGLColorAttachment5Ext = 0x8CE5;
auto constexpr kOpenGLColorAttachment5Nv = 0x8CE5;
auto constexpr kOpenGLColorAttachment6 = 0x8CE6;
auto constexpr kOpenGLColorAttachment6Ext = 0x8CE6;
auto constexpr kOpenGLColorAttachment6Nv = 0x8CE6;
auto constexpr kOpenGLColorAttachment7 = 0x8CE7;
auto constexpr kOpenGLColorAttachment7Ext = 0x8CE7;
auto constexpr kOpenGLColorAttachment7Nv = 0x8CE7;
auto constexpr kOpenGLColorAttachment8 = 0x8CE8;
auto constexpr kOpenGLColorAttachment8Ext = 0x8CE8;
auto constexpr kOpenGLColorAttachment8Nv = 0x8CE8;
auto constexpr kOpenGLColorAttachment9 = 0x8CE9;
auto constexpr kOpenGLColorAttachment9Ext = 0x8CE9;
auto constexpr kOpenGLColorAttachment9Nv = 0x8CE9;
auto constexpr kOpenGLColorAttachmentExt = 0x90F0;
auto constexpr kOpenGLColorBufferBit = 0x00004000;
auto constexpr kOpenGLColorBufferBit0Qcom = 0x00000001;
auto constexpr kOpenGLColorBufferBit1Qcom = 0x00000002;
auto constexpr kOpenGLColorBufferBit2Qcom = 0x00000004;
auto constexpr kOpenGLColorBufferBit3Qcom = 0x00000008;
auto constexpr kOpenGLColorBufferBit4Qcom = 0x00000010;
auto constexpr kOpenGLColorBufferBit5Qcom = 0x00000020;
auto constexpr kOpenGLColorBufferBit6Qcom = 0x00000040;
auto constexpr kOpenGLColorBufferBit7Qcom = 0x00000080;
auto constexpr kOpenGLColorClearUnclampedValueAti = 0x8835;
auto constexpr kOpenGLColorClearValue = 0x0C22;
auto constexpr kOpenGLColorComponents = 0x8283;
auto constexpr kOpenGLColorEncoding = 0x8296;
auto constexpr kOpenGLColorExt = 0x1800;
auto constexpr kOpenGLColorFloatApple = 0x8A0F;
auto constexpr kOpenGLColorIndex = 0x1900;
auto constexpr kOpenGLColorIndex12Ext = 0x80E6;
auto constexpr kOpenGLColorIndex16Ext = 0x80E7;
auto constexpr kOpenGLColorIndex1Ext = 0x80E2;
auto constexpr kOpenGLColorIndex2Ext = 0x80E3;
auto constexpr kOpenGLColorIndex4Ext = 0x80E4;
auto constexpr kOpenGLColorIndex8Ext = 0x80E5;
auto constexpr kOpenGLColorIndexes = 0x1603;
auto constexpr kOpenGLColorLogicOp = 0x0BF2;
auto constexpr kOpenGLColorMaterial = 0x0B57;
auto constexpr kOpenGLColorMaterialFace = 0x0B55;
auto constexpr kOpenGLColorMaterialParameter = 0x0B56;
auto constexpr kOpenGLColorMatrix = 0x80B1;
auto constexpr kOpenGLColorMatrixSgi = 0x80B1;
auto constexpr kOpenGLColorMatrixStackDepth = 0x80B2;
auto constexpr kOpenGLColorMatrixStackDepthSgi = 0x80B2;
auto constexpr kOpenGLColorRenderable = 0x8286;
auto constexpr kOpenGLColorSamplesNv = 0x8E20;
auto constexpr kOpenGLColorSum = 0x8458;
auto constexpr kOpenGLColorSumArb = 0x8458;
auto constexpr kOpenGLColorSumClampNv = 0x854F;
auto constexpr kOpenGLColorSumExt = 0x8458;
auto constexpr kOpenGLColorTable = 0x80D0;
auto constexpr kOpenGLColorTableAlphaSize = 0x80DD;
auto constexpr kOpenGLColorTableAlphaSizeSgi = 0x80DD;
auto constexpr kOpenGLColorTableBias = 0x80D7;
auto constexpr kOpenGLColorTableBiasSgi = 0x80D7;
auto constexpr kOpenGLColorTableBlueSize = 0x80DC;
auto constexpr kOpenGLColorTableBlueSizeSgi = 0x80DC;
auto constexpr kOpenGLColorTableFormat = 0x80D8;
auto constexpr kOpenGLColorTableFormatSgi = 0x80D8;
auto constexpr kOpenGLColorTableGreenSize = 0x80DB;
auto constexpr kOpenGLColorTableGreenSizeSgi = 0x80DB;
auto constexpr kOpenGLColorTableIntensitySize = 0x80DF;
auto constexpr kOpenGLColorTableIntensitySizeSgi = 0x80DF;
auto constexpr kOpenGLColorTableLuminanceSize = 0x80DE;
auto constexpr kOpenGLColorTableLuminanceSizeSgi = 0x80DE;
auto constexpr kOpenGLColorTableRedSize = 0x80DA;
auto constexpr kOpenGLColorTableRedSizeSgi = 0x80DA;
auto constexpr kOpenGLColorTableScale = 0x80D6;
auto constexpr kOpenGLColorTableScaleSgi = 0x80D6;
auto constexpr kOpenGLColorTableSgi = 0x80D0;
auto constexpr kOpenGLColorTableWidth = 0x80D9;
auto constexpr kOpenGLColorTableWidthSgi = 0x80D9;
auto constexpr kOpenGLColorWritemask = 0x0C23;
auto constexpr kOpenGLColorburn = 0x929A;
auto constexpr kOpenGLColorburnKhr = 0x929A;
auto constexpr kOpenGLColorburnNv = 0x929A;
auto constexpr kOpenGLColordodge = 0x9299;
auto constexpr kOpenGLColordodgeKhr = 0x9299;
auto constexpr kOpenGLColordodgeNv = 0x9299;
auto constexpr kOpenGLCombine = 0x8570;
auto constexpr kOpenGLCombine4Nv = 0x8503;
auto constexpr kOpenGLCombineAlpha = 0x8572;
auto constexpr kOpenGLCombineAlphaArb = 0x8572;
auto constexpr kOpenGLCombineAlphaExt = 0x8572;
auto constexpr kOpenGLCombineArb = 0x8570;
auto constexpr kOpenGLCombineExt = 0x8570;
auto constexpr kOpenGLCombineRgb = 0x8571;
auto constexpr kOpenGLCombineRgbArb = 0x8571;
auto constexpr kOpenGLCombineRgbExt = 0x8571;
auto constexpr kOpenGLCombiner0Nv = 0x8550;
auto constexpr kOpenGLCombiner1Nv = 0x8551;
auto constexpr kOpenGLCombiner2Nv = 0x8552;
auto constexpr kOpenGLCombiner3Nv = 0x8553;
auto constexpr kOpenGLCombiner4Nv = 0x8554;
auto constexpr kOpenGLCombiner5Nv = 0x8555;
auto constexpr kOpenGLCombiner6Nv = 0x8556;
auto constexpr kOpenGLCombiner7Nv = 0x8557;
auto constexpr kOpenGLCombinerAbDotProductNv = 0x8545;
auto constexpr kOpenGLCombinerAbOutputNv = 0x854A;
auto constexpr kOpenGLCombinerBiasNv = 0x8549;
auto constexpr kOpenGLCombinerCdDotProductNv = 0x8546;
auto constexpr kOpenGLCombinerCdOutputNv = 0x854B;
auto constexpr kOpenGLCombinerComponentUsageNv = 0x8544;
auto constexpr kOpenGLCombinerInputNv = 0x8542;
auto constexpr kOpenGLCombinerMappingNv = 0x8543;
auto constexpr kOpenGLCombinerMuxSumNv = 0x8547;
auto constexpr kOpenGLCombinerScaleNv = 0x8548;
auto constexpr kOpenGLCombinerSumOutputNv = 0x854C;
auto constexpr kOpenGLCommandBarrierBit = 0x00000040;
auto constexpr kOpenGLCommandBarrierBitExt = 0x00000040;
auto constexpr kOpenGLCompBitAti = 0x00000002;
auto constexpr kOpenGLCompareRToTexture = 0x884E;
auto constexpr kOpenGLCompareRToTextureArb = 0x884E;
auto constexpr kOpenGLCompareRefDepthToTextureExt = 0x884E;
auto constexpr kOpenGLCompareRefToTexture = 0x884E;
auto constexpr kOpenGLCompareRefToTextureExt = 0x884E;
auto constexpr kOpenGLCompatibleSubroutines = 0x8E4B;
auto constexpr kOpenGLCompile = 0x1300;
auto constexpr kOpenGLCompileAndExecute = 0x1301;
auto constexpr kOpenGLCompileStatus = 0x8B81;
auto constexpr kOpenGLCompletionStatusArb = 0x91B1;
auto constexpr kOpenGLCompletionStatusKhr = 0x91B1;
auto constexpr kOpenGLCompressedAlpha = 0x84E9;
auto constexpr kOpenGLCompressedAlphaArb = 0x84E9;
auto constexpr kOpenGLCompressedIntensity = 0x84EC;
auto constexpr kOpenGLCompressedIntensityArb = 0x84EC;
auto constexpr kOpenGLCompressedLuminance = 0x84EA;
auto constexpr kOpenGLCompressedLuminanceAlpha = 0x84EB;
auto constexpr kOpenGLCompressedLuminanceAlpha3dcAti = 0x8837;
auto constexpr kOpenGLCompressedLuminanceAlphaArb = 0x84EB;
auto constexpr kOpenGLCompressedLuminanceAlphaLatc2Ext = 0x8C72;
auto constexpr kOpenGLCompressedLuminanceArb = 0x84EA;
auto constexpr kOpenGLCompressedLuminanceLatc1Ext = 0x8C70;
auto constexpr kOpenGLCompressedR11Eac = 0x9270;
auto constexpr kOpenGLCompressedR11EacOes = 0x9270;
auto constexpr kOpenGLCompressedRed = 0x8225;
auto constexpr kOpenGLCompressedRedGreenRgtc2Ext = 0x8DBD;
auto constexpr kOpenGLCompressedRedRgtc1 = 0x8DBB;
auto constexpr kOpenGLCompressedRedRgtc1Ext = 0x8DBB;
auto constexpr kOpenGLCompressedRg = 0x8226;
auto constexpr kOpenGLCompressedRg11Eac = 0x9272;
auto constexpr kOpenGLCompressedRg11EacOes = 0x9272;
auto constexpr kOpenGLCompressedRgRgtc2 = 0x8DBD;
auto constexpr kOpenGLCompressedRgb = 0x84ED;
auto constexpr kOpenGLCompressedRgb8Etc2 = 0x9274;
auto constexpr kOpenGLCompressedRgb8Etc2Oes = 0x9274;
auto constexpr kOpenGLCompressedRgb8PunchthroughAlpha1Etc2 = 0x9276;
auto constexpr kOpenGLCompressedRgb8PunchthroughAlpha1Etc2Oes = 0x9276;
auto constexpr kOpenGLCompressedRgbArb = 0x84ED;
auto constexpr kOpenGLCompressedRgbBptcSignedFloat = 0x8E8E;
auto constexpr kOpenGLCompressedRgbBptcSignedFloatArb = 0x8E8E;
auto constexpr kOpenGLCompressedRgbBptcSignedFloatExt = 0x8E8E;
auto constexpr kOpenGLCompressedRgbBptcUnsignedFloat = 0x8E8F;
auto constexpr kOpenGLCompressedRgbBptcUnsignedFloatArb = 0x8E8F;
auto constexpr kOpenGLCompressedRgbBptcUnsignedFloatExt = 0x8E8F;
auto constexpr kOpenGLCompressedRgbFxt13dfx = 0x86B0;
auto constexpr kOpenGLCompressedRgbPvrtc2bppv1Img = 0x8C01;
auto constexpr kOpenGLCompressedRgbPvrtc4bppv1Img = 0x8C00;
auto constexpr kOpenGLCompressedRgbS3tcDxt1Ext = 0x83F0;
auto constexpr kOpenGLCompressedRgba = 0x84EE;
auto constexpr kOpenGLCompressedRgba8Etc2Eac = 0x9278;
auto constexpr kOpenGLCompressedRgba8Etc2EacOes = 0x9278;
auto constexpr kOpenGLCompressedRgbaArb = 0x84EE;
auto constexpr kOpenGLCompressedRgbaAstc10x10 = 0x93BB;
auto constexpr kOpenGLCompressedRgbaAstc10x10Khr = 0x93BB;
auto constexpr kOpenGLCompressedRgbaAstc10x5 = 0x93B8;
auto constexpr kOpenGLCompressedRgbaAstc10x5Khr = 0x93B8;
auto constexpr kOpenGLCompressedRgbaAstc10x6 = 0x93B9;
auto constexpr kOpenGLCompressedRgbaAstc10x6Khr = 0x93B9;
auto constexpr kOpenGLCompressedRgbaAstc10x8 = 0x93BA;
auto constexpr kOpenGLCompressedRgbaAstc10x8Khr = 0x93BA;
auto constexpr kOpenGLCompressedRgbaAstc12x10 = 0x93BC;
auto constexpr kOpenGLCompressedRgbaAstc12x10Khr = 0x93BC;
auto constexpr kOpenGLCompressedRgbaAstc12x12 = 0x93BD;
auto constexpr kOpenGLCompressedRgbaAstc12x12Khr = 0x93BD;
auto constexpr kOpenGLCompressedRgbaAstc3x3x3Oes = 0x93C0;
auto constexpr kOpenGLCompressedRgbaAstc4x3x3Oes = 0x93C1;
auto constexpr kOpenGLCompressedRgbaAstc4x4 = 0x93B0;
auto constexpr kOpenGLCompressedRgbaAstc4x4Khr = 0x93B0;
auto constexpr kOpenGLCompressedRgbaAstc4x4x3Oes = 0x93C2;
auto constexpr kOpenGLCompressedRgbaAstc4x4x4Oes = 0x93C3;
auto constexpr kOpenGLCompressedRgbaAstc5x4 = 0x93B1;
auto constexpr kOpenGLCompressedRgbaAstc5x4Khr = 0x93B1;
auto constexpr kOpenGLCompressedRgbaAstc5x4x4Oes = 0x93C4;
auto constexpr kOpenGLCompressedRgbaAstc5x5 = 0x93B2;
auto constexpr kOpenGLCompressedRgbaAstc5x5Khr = 0x93B2;
auto constexpr kOpenGLCompressedRgbaAstc5x5x4Oes = 0x93C5;
auto constexpr kOpenGLCompressedRgbaAstc5x5x5Oes = 0x93C6;
auto constexpr kOpenGLCompressedRgbaAstc6x5 = 0x93B3;
auto constexpr kOpenGLCompressedRgbaAstc6x5Khr = 0x93B3;
auto constexpr kOpenGLCompressedRgbaAstc6x5x5Oes = 0x93C7;
auto constexpr kOpenGLCompressedRgbaAstc6x6 = 0x93B4;
auto constexpr kOpenGLCompressedRgbaAstc6x6Khr = 0x93B4;
auto constexpr kOpenGLCompressedRgbaAstc6x6x5Oes = 0x93C8;
auto constexpr kOpenGLCompressedRgbaAstc6x6x6Oes = 0x93C9;
auto constexpr kOpenGLCompressedRgbaAstc8x5 = 0x93B5;
auto constexpr kOpenGLCompressedRgbaAstc8x5Khr = 0x93B5;
auto constexpr kOpenGLCompressedRgbaAstc8x6 = 0x93B6;
auto constexpr kOpenGLCompressedRgbaAstc8x6Khr = 0x93B6;
auto constexpr kOpenGLCompressedRgbaAstc8x8 = 0x93B7;
auto constexpr kOpenGLCompressedRgbaAstc8x8Khr = 0x93B7;
auto constexpr kOpenGLCompressedRgbaBptcUnorm = 0x8E8C;
auto constexpr kOpenGLCompressedRgbaBptcUnormArb = 0x8E8C;
auto constexpr kOpenGLCompressedRgbaBptcUnormExt = 0x8E8C;
auto constexpr kOpenGLCompressedRgbaFxt13dfx = 0x86B1;
auto constexpr kOpenGLCompressedRgbaPvrtc2bppv1Img = 0x8C03;
auto constexpr kOpenGLCompressedRgbaPvrtc2bppv2Img = 0x9137;
auto constexpr kOpenGLCompressedRgbaPvrtc4bppv1Img = 0x8C02;
auto constexpr kOpenGLCompressedRgbaPvrtc4bppv2Img = 0x9138;
auto constexpr kOpenGLCompressedRgbaS3tcDxt1Ext = 0x83F1;
auto constexpr kOpenGLCompressedRgbaS3tcDxt3Angle = 0x83F2;
auto constexpr kOpenGLCompressedRgbaS3tcDxt3Ext = 0x83F2;
auto constexpr kOpenGLCompressedRgbaS3tcDxt5Angle = 0x83F3;
auto constexpr kOpenGLCompressedRgbaS3tcDxt5Ext = 0x83F3;
auto constexpr kOpenGLCompressedSignedLuminanceAlphaLatc2Ext = 0x8C73;
auto constexpr kOpenGLCompressedSignedLuminanceLatc1Ext = 0x8C71;
auto constexpr kOpenGLCompressedSignedR11Eac = 0x9271;
auto constexpr kOpenGLCompressedSignedR11EacOes = 0x9271;
auto constexpr kOpenGLCompressedSignedRedGreenRgtc2Ext = 0x8DBE;
auto constexpr kOpenGLCompressedSignedRedRgtc1 = 0x8DBC;
auto constexpr kOpenGLCompressedSignedRedRgtc1Ext = 0x8DBC;
auto constexpr kOpenGLCompressedSignedRg11Eac = 0x9273;
auto constexpr kOpenGLCompressedSignedRg11EacOes = 0x9273;
auto constexpr kOpenGLCompressedSignedRgRgtc2 = 0x8DBE;
auto constexpr kOpenGLCompressedSluminance = 0x8C4A;
auto constexpr kOpenGLCompressedSluminanceAlpha = 0x8C4B;
auto constexpr kOpenGLCompressedSluminanceAlphaExt = 0x8C4B;
auto constexpr kOpenGLCompressedSluminanceExt = 0x8C4A;
auto constexpr kOpenGLCompressedSrgb = 0x8C48;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc10x10 = 0x93DB;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc10x10Khr = 0x93DB;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc10x5 = 0x93D8;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc10x5Khr = 0x93D8;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc10x6 = 0x93D9;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc10x6Khr = 0x93D9;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc10x8 = 0x93DA;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc10x8Khr = 0x93DA;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc12x10 = 0x93DC;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc12x10Khr = 0x93DC;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc12x12 = 0x93DD;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc12x12Khr = 0x93DD;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc3x3x3Oes = 0x93E0;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc4x3x3Oes = 0x93E1;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc4x4 = 0x93D0;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc4x4Khr = 0x93D0;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc4x4x3Oes = 0x93E2;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc4x4x4Oes = 0x93E3;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc5x4 = 0x93D1;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc5x4Khr = 0x93D1;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc5x4x4Oes = 0x93E4;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc5x5 = 0x93D2;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc5x5Khr = 0x93D2;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc5x5x4Oes = 0x93E5;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc5x5x5Oes = 0x93E6;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc6x5 = 0x93D3;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc6x5Khr = 0x93D3;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc6x5x5Oes = 0x93E7;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc6x6 = 0x93D4;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc6x6Khr = 0x93D4;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc6x6x5Oes = 0x93E8;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc6x6x6Oes = 0x93E9;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc8x5 = 0x93D5;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc8x5Khr = 0x93D5;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc8x6 = 0x93D6;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc8x6Khr = 0x93D6;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc8x8 = 0x93D7;
auto constexpr kOpenGLCompressedSrgb8Alpha8Astc8x8Khr = 0x93D7;
auto constexpr kOpenGLCompressedSrgb8Alpha8Etc2Eac = 0x9279;
auto constexpr kOpenGLCompressedSrgb8Alpha8Etc2EacOes = 0x9279;
auto constexpr kOpenGLCompressedSrgb8Etc2 = 0x9275;
auto constexpr kOpenGLCompressedSrgb8Etc2Oes = 0x9275;
auto constexpr kOpenGLCompressedSrgb8PunchthroughAlpha1Etc2 = 0x9277;
auto constexpr kOpenGLCompressedSrgb8PunchthroughAlpha1Etc2Oes = 0x9277;
auto constexpr kOpenGLCompressedSrgbAlpha = 0x8C49;
auto constexpr kOpenGLCompressedSrgbAlphaBptcUnorm = 0x8E8D;
auto constexpr kOpenGLCompressedSrgbAlphaBptcUnormArb = 0x8E8D;
auto constexpr kOpenGLCompressedSrgbAlphaBptcUnormExt = 0x8E8D;
auto constexpr kOpenGLCompressedSrgbAlphaExt = 0x8C49;
auto constexpr kOpenGLCompressedSrgbAlphaPvrtc2bppv1Ext = 0x8A56;
auto constexpr kOpenGLCompressedSrgbAlphaPvrtc2bppv2Img = 0x93F0;
auto constexpr kOpenGLCompressedSrgbAlphaPvrtc4bppv1Ext = 0x8A57;
auto constexpr kOpenGLCompressedSrgbAlphaPvrtc4bppv2Img = 0x93F1;
auto constexpr kOpenGLCompressedSrgbAlphaS3tcDxt1Ext = 0x8C4D;
auto constexpr kOpenGLCompressedSrgbAlphaS3tcDxt1Nv = 0x8C4D;
auto constexpr kOpenGLCompressedSrgbAlphaS3tcDxt3Ext = 0x8C4E;
auto constexpr kOpenGLCompressedSrgbAlphaS3tcDxt3Nv = 0x8C4E;
auto constexpr kOpenGLCompressedSrgbAlphaS3tcDxt5Ext = 0x8C4F;
auto constexpr kOpenGLCompressedSrgbAlphaS3tcDxt5Nv = 0x8C4F;
auto constexpr kOpenGLCompressedSrgbExt = 0x8C48;
auto constexpr kOpenGLCompressedSrgbPvrtc2bppv1Ext = 0x8A54;
auto constexpr kOpenGLCompressedSrgbPvrtc4bppv1Ext = 0x8A55;
auto constexpr kOpenGLCompressedSrgbS3tcDxt1Ext = 0x8C4C;
auto constexpr kOpenGLCompressedSrgbS3tcDxt1Nv = 0x8C4C;
auto constexpr kOpenGLCompressedTextureFormats = 0x86A3;
auto constexpr kOpenGLCompressedTextureFormatsArb = 0x86A3;
auto constexpr kOpenGLComputeProgramNv = 0x90FB;
auto constexpr kOpenGLComputeProgramParameterBufferNv = 0x90FC;
auto constexpr kOpenGLComputeShader = 0x91B9;
auto constexpr kOpenGLComputeShaderBit = 0x00000020;
auto constexpr kOpenGLComputeShaderInvocations = 0x82F5;
auto constexpr kOpenGLComputeShaderInvocationsArb = 0x82F5;
auto constexpr kOpenGLComputeSubroutine = 0x92ED;
auto constexpr kOpenGLComputeSubroutineUniform = 0x92F3;
auto constexpr kOpenGLComputeTexture = 0x82A0;
auto constexpr kOpenGLComputeWorkGroupSize = 0x8267;
auto constexpr kOpenGLCon0Ati = 0x8941;
auto constexpr kOpenGLCon10Ati = 0x894B;
auto constexpr kOpenGLCon11Ati = 0x894C;
auto constexpr kOpenGLCon12Ati = 0x894D;
auto constexpr kOpenGLCon13Ati = 0x894E;
auto constexpr kOpenGLCon14Ati = 0x894F;
auto constexpr kOpenGLCon15Ati = 0x8950;
auto constexpr kOpenGLCon16Ati = 0x8951;
auto constexpr kOpenGLCon17Ati = 0x8952;
auto constexpr kOpenGLCon18Ati = 0x8953;
auto constexpr kOpenGLCon19Ati = 0x8954;
auto constexpr kOpenGLCon1Ati = 0x8942;
auto constexpr kOpenGLCon20Ati = 0x8955;
auto constexpr kOpenGLCon21Ati = 0x8956;
auto constexpr kOpenGLCon22Ati = 0x8957;
auto constexpr kOpenGLCon23Ati = 0x8958;
auto constexpr kOpenGLCon24Ati = 0x8959;
auto constexpr kOpenGLCon25Ati = 0x895A;
auto constexpr kOpenGLCon26Ati = 0x895B;
auto constexpr kOpenGLCon27Ati = 0x895C;
auto constexpr kOpenGLCon28Ati = 0x895D;
auto constexpr kOpenGLCon29Ati = 0x895E;
auto constexpr kOpenGLCon2Ati = 0x8943;
auto constexpr kOpenGLCon30Ati = 0x895F;
auto constexpr kOpenGLCon31Ati = 0x8960;
auto constexpr kOpenGLCon3Ati = 0x8944;
auto constexpr kOpenGLCon4Ati = 0x8945;
auto constexpr kOpenGLCon5Ati = 0x8946;
auto constexpr kOpenGLCon6Ati = 0x8947;
auto constexpr kOpenGLCon7Ati = 0x8948;
auto constexpr kOpenGLCon8Ati = 0x8949;
auto constexpr kOpenGLCon9Ati = 0x894A;
auto constexpr kOpenGLConditionSatisfied = 0x911C;
auto constexpr kOpenGLConditionSatisfiedApple = 0x911C;
auto constexpr kOpenGLConformantNv = 0x9374;
auto constexpr kOpenGLConicCurveToNv = 0x1A;
auto constexpr kOpenGLConjointNv = 0x9284;
auto constexpr kOpenGLConservativeRasterDilateGranularityNv = 0x937B;
auto constexpr kOpenGLConservativeRasterDilateNv = 0x9379;
auto constexpr kOpenGLConservativeRasterDilateRangeNv = 0x937A;
auto constexpr kOpenGLConservativeRasterModeNv = 0x954D;
auto constexpr kOpenGLConservativeRasterModePostSnapNv = 0x954E;
auto constexpr kOpenGLConservativeRasterModePreSnapNv = 0x9550;
auto constexpr kOpenGLConservativeRasterModePreSnapTrianglesNv = 0x954F;
auto constexpr kOpenGLConservativeRasterizationIntel = 0x83FE;
auto constexpr kOpenGLConservativeRasterizationNv = 0x9346;
auto constexpr kOpenGLConserveMemoryHintPgi = 0x1A1FD;
auto constexpr kOpenGLConstEyeNv = 0x86E5;
auto constexpr kOpenGLConstant = 0x8576;
auto constexpr kOpenGLConstantAlpha = 0x8003;
auto constexpr kOpenGLConstantAlphaExt = 0x8003;
auto constexpr kOpenGLConstantArb = 0x8576;
auto constexpr kOpenGLConstantAttenuation = 0x1207;
auto constexpr kOpenGLConstantBorder = 0x8151;
auto constexpr kOpenGLConstantBorderHp = 0x8151;
auto constexpr kOpenGLConstantColor = 0x8001;
auto constexpr kOpenGLConstantColor0Nv = 0x852A;
auto constexpr kOpenGLConstantColor1Nv = 0x852B;
auto constexpr kOpenGLConstantColorExt = 0x8001;
auto constexpr kOpenGLConstantExt = 0x8576;
auto constexpr kOpenGLConstantNv = 0x8576;
auto constexpr kOpenGLContextCompatibilityProfileBit = 0x00000002;
auto constexpr kOpenGLContextCoreProfileBit = 0x00000001;
auto constexpr kOpenGLContextFlagDebugBit = 0x00000002;
auto constexpr kOpenGLContextFlagDebugBitKhr = 0x00000002;
auto constexpr kOpenGLContextFlagForwardCompatibleBit = 0x00000001;
auto constexpr kOpenGLContextFlagNoErrorBit = 0x00000008;
auto constexpr kOpenGLContextFlagNoErrorBitKhr = 0x00000008;
auto constexpr kOpenGLContextFlagProtectedContentBitExt = 0x00000010;
auto constexpr kOpenGLContextFlagRobustAccessBit = 0x00000004;
auto constexpr kOpenGLContextFlagRobustAccessBitArb = 0x00000004;
auto constexpr kOpenGLContextFlags = 0x821E;
auto constexpr kOpenGLContextLost = 0x0507;
auto constexpr kOpenGLContextLostKhr = 0x0507;
auto constexpr kOpenGLContextLostWebgl = 0x9242;
auto constexpr kOpenGLContextProfileMask = 0x9126;
auto constexpr kOpenGLContextReleaseBehavior = 0x82FB;
auto constexpr kOpenGLContextReleaseBehaviorFlush = 0x82FC;
auto constexpr kOpenGLContextReleaseBehaviorFlushKhr = 0x82FC;
auto constexpr kOpenGLContextReleaseBehaviorKhr = 0x82FB;
auto constexpr kOpenGLContextRobustAccess = 0x90F3;
auto constexpr kOpenGLContextRobustAccessExt = 0x90F3;
auto constexpr kOpenGLContextRobustAccessKhr = 0x90F3;
auto constexpr kOpenGLContinuousAmd = 0x9007;
auto constexpr kOpenGLContrastNv = 0x92A1;
auto constexpr kOpenGLConvexHullNv = 0x908B;
auto constexpr kOpenGLConvolution1d = 0x8010;
auto constexpr kOpenGLConvolution1dExt = 0x8010;
auto constexpr kOpenGLConvolution2d = 0x8011;
auto constexpr kOpenGLConvolution2dExt = 0x8011;
auto constexpr kOpenGLConvolutionBorderColor = 0x8154;
auto constexpr kOpenGLConvolutionBorderColorHp = 0x8154;
auto constexpr kOpenGLConvolutionBorderMode = 0x8013;
auto constexpr kOpenGLConvolutionBorderModeExt = 0x8013;
auto constexpr kOpenGLConvolutionFilterBias = 0x8015;
auto constexpr kOpenGLConvolutionFilterBiasExt = 0x8015;
auto constexpr kOpenGLConvolutionFilterScale = 0x8014;
auto constexpr kOpenGLConvolutionFilterScaleExt = 0x8014;
auto constexpr kOpenGLConvolutionFormat = 0x8017;
auto constexpr kOpenGLConvolutionFormatExt = 0x8017;
auto constexpr kOpenGLConvolutionHeight = 0x8019;
auto constexpr kOpenGLConvolutionHeightExt = 0x8019;
auto constexpr kOpenGLConvolutionHintSgix = 0x8316;
auto constexpr kOpenGLConvolutionWidth = 0x8018;
auto constexpr kOpenGLConvolutionWidthExt = 0x8018;
auto constexpr kOpenGLCoordReplace = 0x8862;
auto constexpr kOpenGLCoordReplaceArb = 0x8862;
auto constexpr kOpenGLCoordReplaceNv = 0x8862;
auto constexpr kOpenGLCoordReplaceOes = 0x8862;
auto constexpr kOpenGLCopy = 0x1503;
auto constexpr kOpenGLCopyInverted = 0x150C;
auto constexpr kOpenGLCopyPixelToken = 0x0706;
auto constexpr kOpenGLCopyReadBuffer = 0x8F36;
auto constexpr kOpenGLCopyReadBufferBinding = 0x8F36;
auto constexpr kOpenGLCopyReadBufferNv = 0x8F36;
auto constexpr kOpenGLCopyWriteBuffer = 0x8F37;
auto constexpr kOpenGLCopyWriteBufferBinding = 0x8F37;
auto constexpr kOpenGLCopyWriteBufferNv = 0x8F37;
auto constexpr kOpenGLCountDownNv = 0x9089;
auto constexpr kOpenGLCountUpNv = 0x9088;
auto constexpr kOpenGLCounterRangeAmd = 0x8BC1;
auto constexpr kOpenGLCounterTypeAmd = 0x8BC0;
auto constexpr kOpenGLCoverageAllFragmentsNv = 0x8ED5;
auto constexpr kOpenGLCoverageAttachmentNv = 0x8ED2;
auto constexpr kOpenGLCoverageAutomaticNv = 0x8ED7;
auto constexpr kOpenGLCoverageBufferBitNv = 0x00008000;
auto constexpr kOpenGLCoverageBuffersNv = 0x8ED3;
auto constexpr kOpenGLCoverageComponent4Nv = 0x8ED1;
auto constexpr kOpenGLCoverageComponentNv = 0x8ED0;
auto constexpr kOpenGLCoverageEdgeFragmentsNv = 0x8ED6;
auto constexpr kOpenGLCoverageModulationNv = 0x9332;
auto constexpr kOpenGLCoverageModulationTableNv = 0x9331;
auto constexpr kOpenGLCoverageModulationTableSizeNv = 0x9333;
auto constexpr kOpenGLCoverageSamplesNv = 0x8ED4;
auto constexpr kOpenGLCpuOptimizedQcom = 0x8FB1;
auto constexpr kOpenGLCubicCurveToNv = 0x0C;
auto constexpr kOpenGLCubicExt = 0x8334;
auto constexpr kOpenGLCubicHp = 0x815F;
auto constexpr kOpenGLCubicImg = 0x9139;
auto constexpr kOpenGLCubicMipmapLinearImg = 0x913B;
auto constexpr kOpenGLCubicMipmapNearestImg = 0x913A;
auto constexpr kOpenGLCullFace = 0x0B44;
auto constexpr kOpenGLCullFaceMode = 0x0B45;
auto constexpr kOpenGLCullFragmentNv = 0x86E7;
auto constexpr kOpenGLCullModesNv = 0x86E0;
auto constexpr kOpenGLCullVertexExt = 0x81AA;
auto constexpr kOpenGLCullVertexEyePositionExt = 0x81AB;
auto constexpr kOpenGLCullVertexIbm = 103050;
auto constexpr kOpenGLCullVertexObjectPositionExt = 0x81AC;
auto constexpr kOpenGLCurrentAttribNv = 0x8626;
auto constexpr kOpenGLCurrentBinormalExt = 0x843C;
auto constexpr kOpenGLCurrentBit = 0x00000001;
auto constexpr kOpenGLCurrentColor = 0x0B00;
auto constexpr kOpenGLCurrentFogCoord = 0x8453;
auto constexpr kOpenGLCurrentFogCoordinate = 0x8453;
auto constexpr kOpenGLCurrentFogCoordinateExt = 0x8453;
auto constexpr kOpenGLCurrentIndex = 0x0B01;
auto constexpr kOpenGLCurrentMatrixArb = 0x8641;
auto constexpr kOpenGLCurrentMatrixIndexArb = 0x8845;
auto constexpr kOpenGLCurrentMatrixNv = 0x8641;
auto constexpr kOpenGLCurrentMatrixStackDepthArb = 0x8640;
auto constexpr kOpenGLCurrentMatrixStackDepthNv = 0x8640;
auto constexpr kOpenGLCurrentNormal = 0x0B02;
auto constexpr kOpenGLCurrentOcclusionQueryIdNv = 0x8865;
auto constexpr kOpenGLCurrentPaletteMatrixArb = 0x8843;
auto constexpr kOpenGLCurrentPaletteMatrixOes = 0x8843;
auto constexpr kOpenGLCurrentProgram = 0x8B8D;
auto constexpr kOpenGLCurrentQuery = 0x8865;
auto constexpr kOpenGLCurrentQueryArb = 0x8865;
auto constexpr kOpenGLCurrentQueryExt = 0x8865;
auto constexpr kOpenGLCurrentRasterColor = 0x0B04;
auto constexpr kOpenGLCurrentRasterDistance = 0x0B09;
auto constexpr kOpenGLCurrentRasterIndex = 0x0B05;
auto constexpr kOpenGLCurrentRasterNormalSgix = 0x8406;
auto constexpr kOpenGLCurrentRasterPosition = 0x0B07;
auto constexpr kOpenGLCurrentRasterPositionValid = 0x0B08;
auto constexpr kOpenGLCurrentRasterSecondaryColor = 0x845F;
auto constexpr kOpenGLCurrentRasterTextureCoords = 0x0B06;
auto constexpr kOpenGLCurrentSecondaryColor = 0x8459;
auto constexpr kOpenGLCurrentSecondaryColorExt = 0x8459;
auto constexpr kOpenGLCurrentTangentExt = 0x843B;
auto constexpr kOpenGLCurrentTextureCoords = 0x0B03;
auto constexpr kOpenGLCurrentTimeNv = 0x8E28;
auto constexpr kOpenGLCurrentVertexAttrib = 0x8626;
auto constexpr kOpenGLCurrentVertexAttribArb = 0x8626;
auto constexpr kOpenGLCurrentVertexExt = 0x87E2;
auto constexpr kOpenGLCurrentVertexWeightExt = 0x850B;
auto constexpr kOpenGLCurrentWeightArb = 0x86A8;
auto constexpr kOpenGLCw = 0x0900;
auto constexpr kOpenGLD3d12FenceValueExt = 0x9595;
auto constexpr kOpenGLDarken = 0x9297;
auto constexpr kOpenGLDarkenKhr = 0x9297;
auto constexpr kOpenGLDarkenNv = 0x9297;
auto constexpr kOpenGLDataBufferAmd = 0x9151;
auto constexpr kOpenGLDebugAssertMesa = 0x875B;
auto constexpr kOpenGLDebugCallbackFunction = 0x8244;
auto constexpr kOpenGLDebugCallbackFunctionArb = 0x8244;
auto constexpr kOpenGLDebugCallbackFunctionKhr = 0x8244;
auto constexpr kOpenGLDebugCallbackUserParam = 0x8245;
auto constexpr kOpenGLDebugCallbackUserParamArb = 0x8245;
auto constexpr kOpenGLDebugCallbackUserParamKhr = 0x8245;
auto constexpr kOpenGLDebugCategoryApiErrorAmd = 0x9149;
auto constexpr kOpenGLDebugCategoryApplicationAmd = 0x914F;
auto constexpr kOpenGLDebugCategoryDeprecationAmd = 0x914B;
auto constexpr kOpenGLDebugCategoryOtherAmd = 0x9150;
auto constexpr kOpenGLDebugCategoryPerformanceAmd = 0x914D;
auto constexpr kOpenGLDebugCategoryShaderCompilerAmd = 0x914E;
auto constexpr kOpenGLDebugCategoryUndefinedBehaviorAmd = 0x914C;
auto constexpr kOpenGLDebugCategoryWindowSystemAmd = 0x914A;
auto constexpr kOpenGLDebugGroupStackDepth = 0x826D;
auto constexpr kOpenGLDebugGroupStackDepthKhr = 0x826D;
auto constexpr kOpenGLDebugLoggedMessages = 0x9145;
auto constexpr kOpenGLDebugLoggedMessagesAmd = 0x9145;
auto constexpr kOpenGLDebugLoggedMessagesArb = 0x9145;
auto constexpr kOpenGLDebugLoggedMessagesKhr = 0x9145;
auto constexpr kOpenGLDebugNextLoggedMessageLength = 0x8243;
auto constexpr kOpenGLDebugNextLoggedMessageLengthArb = 0x8243;
auto constexpr kOpenGLDebugNextLoggedMessageLengthKhr = 0x8243;
auto constexpr kOpenGLDebugObjectMesa = 0x8759;
auto constexpr kOpenGLDebugOutput = 0x92E0;
auto constexpr kOpenGLDebugOutputKhr = 0x92E0;
auto constexpr kOpenGLDebugOutputSynchronous = 0x8242;
auto constexpr kOpenGLDebugOutputSynchronousArb = 0x8242;
auto constexpr kOpenGLDebugOutputSynchronousKhr = 0x8242;
auto constexpr kOpenGLDebugPrintMesa = 0x875A;
auto constexpr kOpenGLDebugSeverityHigh = 0x9146;
auto constexpr kOpenGLDebugSeverityHighAmd = 0x9146;
auto constexpr kOpenGLDebugSeverityHighArb = 0x9146;
auto constexpr kOpenGLDebugSeverityHighKhr = 0x9146;
auto constexpr kOpenGLDebugSeverityLow = 0x9148;
auto constexpr kOpenGLDebugSeverityLowAmd = 0x9148;
auto constexpr kOpenGLDebugSeverityLowArb = 0x9148;
auto constexpr kOpenGLDebugSeverityLowKhr = 0x9148;
auto constexpr kOpenGLDebugSeverityMedium = 0x9147;
auto constexpr kOpenGLDebugSeverityMediumAmd = 0x9147;
auto constexpr kOpenGLDebugSeverityMediumArb = 0x9147;
auto constexpr kOpenGLDebugSeverityMediumKhr = 0x9147;
auto constexpr kOpenGLDebugSeverityNotification = 0x826B;
auto constexpr kOpenGLDebugSeverityNotificationKhr = 0x826B;
auto constexpr kOpenGLDebugSourceApi = 0x8246;
auto constexpr kOpenGLDebugSourceApiArb = 0x8246;
auto constexpr kOpenGLDebugSourceApiKhr = 0x8246;
auto constexpr kOpenGLDebugSourceApplication = 0x824A;
auto constexpr kOpenGLDebugSourceApplicationArb = 0x824A;
auto constexpr kOpenGLDebugSourceApplicationKhr = 0x824A;
auto constexpr kOpenGLDebugSourceOther = 0x824B;
auto constexpr kOpenGLDebugSourceOtherArb = 0x824B;
auto constexpr kOpenGLDebugSourceOtherKhr = 0x824B;
auto constexpr kOpenGLDebugSourceShaderCompiler = 0x8248;
auto constexpr kOpenGLDebugSourceShaderCompilerArb = 0x8248;
auto constexpr kOpenGLDebugSourceShaderCompilerKhr = 0x8248;
auto constexpr kOpenGLDebugSourceThirdParty = 0x8249;
auto constexpr kOpenGLDebugSourceThirdPartyArb = 0x8249;
auto constexpr kOpenGLDebugSourceThirdPartyKhr = 0x8249;
auto constexpr kOpenGLDebugSourceWindowSystem = 0x8247;
auto constexpr kOpenGLDebugSourceWindowSystemArb = 0x8247;
auto constexpr kOpenGLDebugSourceWindowSystemKhr = 0x8247;
auto constexpr kOpenGLDebugTypeDeprecatedBehavior = 0x824D;
auto constexpr kOpenGLDebugTypeDeprecatedBehaviorArb = 0x824D;
auto constexpr kOpenGLDebugTypeDeprecatedBehaviorKhr = 0x824D;
auto constexpr kOpenGLDebugTypeError = 0x824C;
auto constexpr kOpenGLDebugTypeErrorArb = 0x824C;
auto constexpr kOpenGLDebugTypeErrorKhr = 0x824C;
auto constexpr kOpenGLDebugTypeMarker = 0x8268;
auto constexpr kOpenGLDebugTypeMarkerKhr = 0x8268;
auto constexpr kOpenGLDebugTypeOther = 0x8251;
auto constexpr kOpenGLDebugTypeOtherArb = 0x8251;
auto constexpr kOpenGLDebugTypeOtherKhr = 0x8251;
auto constexpr kOpenGLDebugTypePerformance = 0x8250;
auto constexpr kOpenGLDebugTypePerformanceArb = 0x8250;
auto constexpr kOpenGLDebugTypePerformanceKhr = 0x8250;
auto constexpr kOpenGLDebugTypePopGroup = 0x826A;
auto constexpr kOpenGLDebugTypePopGroupKhr = 0x826A;
auto constexpr kOpenGLDebugTypePortability = 0x824F;
auto constexpr kOpenGLDebugTypePortabilityArb = 0x824F;
auto constexpr kOpenGLDebugTypePortabilityKhr = 0x824F;
auto constexpr kOpenGLDebugTypePushGroup = 0x8269;
auto constexpr kOpenGLDebugTypePushGroupKhr = 0x8269;
auto constexpr kOpenGLDebugTypeUndefinedBehavior = 0x824E;
auto constexpr kOpenGLDebugTypeUndefinedBehaviorArb = 0x824E;
auto constexpr kOpenGLDebugTypeUndefinedBehaviorKhr = 0x824E;
auto constexpr kOpenGLDecal = 0x2101;
auto constexpr kOpenGLDecodeExt = 0x8A49;
auto constexpr kOpenGLDecr = 0x1E03;
auto constexpr kOpenGLDecrWrap = 0x8508;
auto constexpr kOpenGLDecrWrapExt = 0x8508;
auto constexpr kOpenGLDecrWrapOes = 0x8508;
auto constexpr kOpenGLDedicatedMemoryObjectExt = 0x9581;
auto constexpr kOpenGLDeformationsMaskSgix = 0x8196;
auto constexpr kOpenGLDeleteStatus = 0x8B80;
auto constexpr kOpenGLDependentArTexture2dNv = 0x86E9;
auto constexpr kOpenGLDependentGbTexture2dNv = 0x86EA;
auto constexpr kOpenGLDependentHiloTexture2dNv = 0x8858;
auto constexpr kOpenGLDependentRgbTexture3dNv = 0x8859;
auto constexpr kOpenGLDependentRgbTextureCubeMapNv = 0x885A;
auto constexpr kOpenGLDepth = 0x1801;
auto constexpr kOpenGLDepth24Stencil8 = 0x88F0;
auto constexpr kOpenGLDepth24Stencil8Ext = 0x88F0;
auto constexpr kOpenGLDepth24Stencil8Oes = 0x88F0;
auto constexpr kOpenGLDepth32fStencil8 = 0x8CAD;
auto constexpr kOpenGLDepth32fStencil8Nv = 0x8DAC;
auto constexpr kOpenGLDepthAttachment = 0x8D00;
auto constexpr kOpenGLDepthAttachmentExt = 0x8D00;
auto constexpr kOpenGLDepthAttachmentOes = 0x8D00;
auto constexpr kOpenGLDepthBias = 0x0D1F;
auto constexpr kOpenGLDepthBits = 0x0D56;
auto constexpr kOpenGLDepthBoundsExt = 0x8891;
auto constexpr kOpenGLDepthBoundsTestExt = 0x8890;
auto constexpr kOpenGLDepthBufferBit = 0x00000100;
auto constexpr kOpenGLDepthBufferBit0Qcom = 0x00000100;
auto constexpr kOpenGLDepthBufferBit1Qcom = 0x00000200;
auto constexpr kOpenGLDepthBufferBit2Qcom = 0x00000400;
auto constexpr kOpenGLDepthBufferBit3Qcom = 0x00000800;
auto constexpr kOpenGLDepthBufferBit4Qcom = 0x00001000;
auto constexpr kOpenGLDepthBufferBit5Qcom = 0x00002000;
auto constexpr kOpenGLDepthBufferBit6Qcom = 0x00004000;
auto constexpr kOpenGLDepthBufferBit7Qcom = 0x00008000;
auto constexpr kOpenGLDepthBufferFloatModeNv = 0x8DAF;
auto constexpr kOpenGLDepthClamp = 0x864F;
auto constexpr kOpenGLDepthClampExt = 0x864F;
auto constexpr kOpenGLDepthClampFarAmd = 0x901F;
auto constexpr kOpenGLDepthClampNearAmd = 0x901E;
auto constexpr kOpenGLDepthClampNv = 0x864F;
auto constexpr kOpenGLDepthClearValue = 0x0B73;
auto constexpr kOpenGLDepthComponent = 0x1902;
auto constexpr kOpenGLDepthComponent16 = 0x81A5;
auto constexpr kOpenGLDepthComponent16Arb = 0x81A5;
auto constexpr kOpenGLDepthComponent16NonlinearNv = 0x8E2C;
auto constexpr kOpenGLDepthComponent16Oes = 0x81A5;
auto constexpr kOpenGLDepthComponent16Sgix = 0x81A5;
auto constexpr kOpenGLDepthComponent24 = 0x81A6;
auto constexpr kOpenGLDepthComponent24Arb = 0x81A6;
auto constexpr kOpenGLDepthComponent24Oes = 0x81A6;
auto constexpr kOpenGLDepthComponent24Sgix = 0x81A6;
auto constexpr kOpenGLDepthComponent32 = 0x81A7;
auto constexpr kOpenGLDepthComponent32Arb = 0x81A7;
auto constexpr kOpenGLDepthComponent32Oes = 0x81A7;
auto constexpr kOpenGLDepthComponent32Sgix = 0x81A7;
auto constexpr kOpenGLDepthComponent32f = 0x8CAC;
auto constexpr kOpenGLDepthComponent32fNv = 0x8DAB;
auto constexpr kOpenGLDepthComponents = 0x8284;
auto constexpr kOpenGLDepthExt = 0x1801;
auto constexpr kOpenGLDepthFunc = 0x0B74;
auto constexpr kOpenGLDepthPassInstrumentCountersSgix = 0x8311;
auto constexpr kOpenGLDepthPassInstrumentMaxSgix = 0x8312;
auto constexpr kOpenGLDepthPassInstrumentSgix = 0x8310;
auto constexpr kOpenGLDepthRange = 0x0B70;
auto constexpr kOpenGLDepthRenderable = 0x8287;
auto constexpr kOpenGLDepthSamplesNv = 0x932D;
auto constexpr kOpenGLDepthScale = 0x0D1E;
auto constexpr kOpenGLDepthStencil = 0x84F9;
auto constexpr kOpenGLDepthStencilAttachment = 0x821A;
auto constexpr kOpenGLDepthStencilExt = 0x84F9;
auto constexpr kOpenGLDepthStencilMesa = 0x8750;
auto constexpr kOpenGLDepthStencilNv = 0x84F9;
auto constexpr kOpenGLDepthStencilOes = 0x84F9;
auto constexpr kOpenGLDepthStencilTextureMode = 0x90EA;
auto constexpr kOpenGLDepthStencilToBgraNv = 0x886F;
auto constexpr kOpenGLDepthStencilToRgbaNv = 0x886E;
auto constexpr kOpenGLDepthTest = 0x0B71;
auto constexpr kOpenGLDepthTextureMode = 0x884B;
auto constexpr kOpenGLDepthTextureModeArb = 0x884B;
auto constexpr kOpenGLDepthWritemask = 0x0B72;
auto constexpr kOpenGLDetachedBuffersNv = 0x95AB;
auto constexpr kOpenGLDetachedMemoryIncarnationNv = 0x95A9;
auto constexpr kOpenGLDetachedTexturesNv = 0x95AA;
auto constexpr kOpenGLDetailTexture2dBindingSgis = 0x8096;
auto constexpr kOpenGLDetailTexture2dSgis = 0x8095;
auto constexpr kOpenGLDetailTextureFuncPointsSgis = 0x809C;
auto constexpr kOpenGLDetailTextureLevelSgis = 0x809A;
auto constexpr kOpenGLDetailTextureModeSgis = 0x809B;
auto constexpr kOpenGLDeviceLuidExt = 0x9599;
auto constexpr kOpenGLDeviceNodeMaskExt = 0x959A;
auto constexpr kOpenGLDeviceUuidExt = 0x9597;
auto constexpr kOpenGLDifference = 0x929E;
auto constexpr kOpenGLDifferenceKhr = 0x929E;
auto constexpr kOpenGLDifferenceNv = 0x929E;
auto constexpr kOpenGLDiffuse = 0x1201;
auto constexpr kOpenGLDiscardAti = 0x8763;
auto constexpr kOpenGLDiscardNv = 0x8530;
auto constexpr kOpenGLDiscreteAmd = 0x9006;
auto constexpr kOpenGLDisjointNv = 0x9283;
auto constexpr kOpenGLDispatchIndirectBuffer = 0x90EE;
auto constexpr kOpenGLDispatchIndirectBufferBinding = 0x90EF;
auto constexpr kOpenGLDisplayList = 0x82E7;
auto constexpr kOpenGLDistanceAttenuationExt = 0x8129;
auto constexpr kOpenGLDistanceAttenuationSgis = 0x8129;
auto constexpr kOpenGLDither = 0x0BD0;
auto constexpr kOpenGLDmpProgramBinaryDmp = 0x9253;
auto constexpr kOpenGLDomain = 0x0A02;
auto constexpr kOpenGLDontCare = 0x1100;
auto constexpr kOpenGLDot2AddAti = 0x896C;
auto constexpr kOpenGLDot3Ati = 0x8966;
auto constexpr kOpenGLDot3Rgb = 0x86AE;
auto constexpr kOpenGLDot3RgbArb = 0x86AE;
auto constexpr kOpenGLDot3RgbExt = 0x8740;
auto constexpr kOpenGLDot3Rgba = 0x86AF;
auto constexpr kOpenGLDot3RgbaArb = 0x86AF;
auto constexpr kOpenGLDot3RgbaExt = 0x8741;
auto constexpr kOpenGLDot3RgbaImg = 0x86AF;
auto constexpr kOpenGLDot4Ati = 0x8967;
auto constexpr kOpenGLDotProductAffineDepthReplaceNv = 0x885D;
auto constexpr kOpenGLDotProductConstEyeReflectCubeMapNv = 0x86F3;
auto constexpr kOpenGLDotProductDepthReplaceNv = 0x86ED;
auto constexpr kOpenGLDotProductDiffuseCubeMapNv = 0x86F1;
auto constexpr kOpenGLDotProductNv = 0x86EC;
auto constexpr kOpenGLDotProductPassThroughNv = 0x885B;
auto constexpr kOpenGLDotProductReflectCubeMapNv = 0x86F2;
auto constexpr kOpenGLDotProductTexture1dNv = 0x885C;
auto constexpr kOpenGLDotProductTexture2dNv = 0x86EE;
auto constexpr kOpenGLDotProductTexture3dNv = 0x86EF;
auto constexpr kOpenGLDotProductTextureCubeMapNv = 0x86F0;
auto constexpr kOpenGLDotProductTextureRectangleNv = 0x864E;
auto constexpr kOpenGLDouble = 0x140A;
auto constexpr kOpenGLDoubleExt = 0x140A;
auto constexpr kOpenGLDoubleMat2 = 0x8F46;
auto constexpr kOpenGLDoubleMat2Ext = 0x8F46;
auto constexpr kOpenGLDoubleMat2x3 = 0x8F49;
auto constexpr kOpenGLDoubleMat2x3Ext = 0x8F49;
auto constexpr kOpenGLDoubleMat2x4 = 0x8F4A;
auto constexpr kOpenGLDoubleMat2x4Ext = 0x8F4A;
auto constexpr kOpenGLDoubleMat3 = 0x8F47;
auto constexpr kOpenGLDoubleMat3Ext = 0x8F47;
auto constexpr kOpenGLDoubleMat3x2 = 0x8F4B;
auto constexpr kOpenGLDoubleMat3x2Ext = 0x8F4B;
auto constexpr kOpenGLDoubleMat3x4 = 0x8F4C;
auto constexpr kOpenGLDoubleMat3x4Ext = 0x8F4C;
auto constexpr kOpenGLDoubleMat4 = 0x8F48;
auto constexpr kOpenGLDoubleMat4Ext = 0x8F48;
auto constexpr kOpenGLDoubleMat4x2 = 0x8F4D;
auto constexpr kOpenGLDoubleMat4x2Ext = 0x8F4D;
auto constexpr kOpenGLDoubleMat4x3 = 0x8F4E;
auto constexpr kOpenGLDoubleMat4x3Ext = 0x8F4E;
auto constexpr kOpenGLDoubleVec2 = 0x8FFC;
auto constexpr kOpenGLDoubleVec2Ext = 0x8FFC;
auto constexpr kOpenGLDoubleVec3 = 0x8FFD;
auto constexpr kOpenGLDoubleVec3Ext = 0x8FFD;
auto constexpr kOpenGLDoubleVec4 = 0x8FFE;
auto constexpr kOpenGLDoubleVec4Ext = 0x8FFE;
auto constexpr kOpenGLDoublebuffer = 0x0C32;
auto constexpr kOpenGLDownsampleScalesImg = 0x913E;
auto constexpr kOpenGLDrawArraysCommandNv = 0x0003;
auto constexpr kOpenGLDrawArraysInstancedCommandNv = 0x0007;
auto constexpr kOpenGLDrawArraysStripCommandNv = 0x0005;
auto constexpr kOpenGLDrawBuffer = 0x0C01;
auto constexpr kOpenGLDrawBuffer0 = 0x8825;
auto constexpr kOpenGLDrawBuffer0Arb = 0x8825;
auto constexpr kOpenGLDrawBuffer0Ati = 0x8825;
auto constexpr kOpenGLDrawBuffer0Ext = 0x8825;
auto constexpr kOpenGLDrawBuffer0Nv = 0x8825;
auto constexpr kOpenGLDrawBuffer1 = 0x8826;
auto constexpr kOpenGLDrawBuffer10 = 0x882F;
auto constexpr kOpenGLDrawBuffer10Arb = 0x882F;
auto constexpr kOpenGLDrawBuffer10Ati = 0x882F;
auto constexpr kOpenGLDrawBuffer10Ext = 0x882F;
auto constexpr kOpenGLDrawBuffer10Nv = 0x882F;
auto constexpr kOpenGLDrawBuffer11 = 0x8830;
auto constexpr kOpenGLDrawBuffer11Arb = 0x8830;
auto constexpr kOpenGLDrawBuffer11Ati = 0x8830;
auto constexpr kOpenGLDrawBuffer11Ext = 0x8830;
auto constexpr kOpenGLDrawBuffer11Nv = 0x8830;
auto constexpr kOpenGLDrawBuffer12 = 0x8831;
auto constexpr kOpenGLDrawBuffer12Arb = 0x8831;
auto constexpr kOpenGLDrawBuffer12Ati = 0x8831;
auto constexpr kOpenGLDrawBuffer12Ext = 0x8831;
auto constexpr kOpenGLDrawBuffer12Nv = 0x8831;
auto constexpr kOpenGLDrawBuffer13 = 0x8832;
auto constexpr kOpenGLDrawBuffer13Arb = 0x8832;
auto constexpr kOpenGLDrawBuffer13Ati = 0x8832;
auto constexpr kOpenGLDrawBuffer13Ext = 0x8832;
auto constexpr kOpenGLDrawBuffer13Nv = 0x8832;
auto constexpr kOpenGLDrawBuffer14 = 0x8833;
auto constexpr kOpenGLDrawBuffer14Arb = 0x8833;
auto constexpr kOpenGLDrawBuffer14Ati = 0x8833;
auto constexpr kOpenGLDrawBuffer14Ext = 0x8833;
auto constexpr kOpenGLDrawBuffer14Nv = 0x8833;
auto constexpr kOpenGLDrawBuffer15 = 0x8834;
auto constexpr kOpenGLDrawBuffer15Arb = 0x8834;
auto constexpr kOpenGLDrawBuffer15Ati = 0x8834;
auto constexpr kOpenGLDrawBuffer15Ext = 0x8834;
auto constexpr kOpenGLDrawBuffer15Nv = 0x8834;
auto constexpr kOpenGLDrawBuffer1Arb = 0x8826;
auto constexpr kOpenGLDrawBuffer1Ati = 0x8826;
auto constexpr kOpenGLDrawBuffer1Ext = 0x8826;
auto constexpr kOpenGLDrawBuffer1Nv = 0x8826;
auto constexpr kOpenGLDrawBuffer2 = 0x8827;
auto constexpr kOpenGLDrawBuffer2Arb = 0x8827;
auto constexpr kOpenGLDrawBuffer2Ati = 0x8827;
auto constexpr kOpenGLDrawBuffer2Ext = 0x8827;
auto constexpr kOpenGLDrawBuffer2Nv = 0x8827;
auto constexpr kOpenGLDrawBuffer3 = 0x8828;
auto constexpr kOpenGLDrawBuffer3Arb = 0x8828;
auto constexpr kOpenGLDrawBuffer3Ati = 0x8828;
auto constexpr kOpenGLDrawBuffer3Ext = 0x8828;
auto constexpr kOpenGLDrawBuffer3Nv = 0x8828;
auto constexpr kOpenGLDrawBuffer4 = 0x8829;
auto constexpr kOpenGLDrawBuffer4Arb = 0x8829;
auto constexpr kOpenGLDrawBuffer4Ati = 0x8829;
auto constexpr kOpenGLDrawBuffer4Ext = 0x8829;
auto constexpr kOpenGLDrawBuffer4Nv = 0x8829;
auto constexpr kOpenGLDrawBuffer5 = 0x882A;
auto constexpr kOpenGLDrawBuffer5Arb = 0x882A;
auto constexpr kOpenGLDrawBuffer5Ati = 0x882A;
auto constexpr kOpenGLDrawBuffer5Ext = 0x882A;
auto constexpr kOpenGLDrawBuffer5Nv = 0x882A;
auto constexpr kOpenGLDrawBuffer6 = 0x882B;
auto constexpr kOpenGLDrawBuffer6Arb = 0x882B;
auto constexpr kOpenGLDrawBuffer6Ati = 0x882B;
auto constexpr kOpenGLDrawBuffer6Ext = 0x882B;
auto constexpr kOpenGLDrawBuffer6Nv = 0x882B;
auto constexpr kOpenGLDrawBuffer7 = 0x882C;
auto constexpr kOpenGLDrawBuffer7Arb = 0x882C;
auto constexpr kOpenGLDrawBuffer7Ati = 0x882C;
auto constexpr kOpenGLDrawBuffer7Ext = 0x882C;
auto constexpr kOpenGLDrawBuffer7Nv = 0x882C;
auto constexpr kOpenGLDrawBuffer8 = 0x882D;
auto constexpr kOpenGLDrawBuffer8Arb = 0x882D;
auto constexpr kOpenGLDrawBuffer8Ati = 0x882D;
auto constexpr kOpenGLDrawBuffer8Ext = 0x882D;
auto constexpr kOpenGLDrawBuffer8Nv = 0x882D;
auto constexpr kOpenGLDrawBuffer9 = 0x882E;
auto constexpr kOpenGLDrawBuffer9Arb = 0x882E;
auto constexpr kOpenGLDrawBuffer9Ati = 0x882E;
auto constexpr kOpenGLDrawBuffer9Ext = 0x882E;
auto constexpr kOpenGLDrawBuffer9Nv = 0x882E;
auto constexpr kOpenGLDrawBufferExt = 0x0C01;
auto constexpr kOpenGLDrawElementsCommandNv = 0x0002;
auto constexpr kOpenGLDrawElementsInstancedCommandNv = 0x0006;
auto constexpr kOpenGLDrawElementsStripCommandNv = 0x0004;
auto constexpr kOpenGLDrawFramebuffer = 0x8CA9;
auto constexpr kOpenGLDrawFramebufferAngle = 0x8CA9;
auto constexpr kOpenGLDrawFramebufferApple = 0x8CA9;
auto constexpr kOpenGLDrawFramebufferBinding = 0x8CA6;
auto constexpr kOpenGLDrawFramebufferBindingAngle = 0x8CA6;
auto constexpr kOpenGLDrawFramebufferBindingApple = 0x8CA6;
auto constexpr kOpenGLDrawFramebufferBindingExt = 0x8CA6;
auto constexpr kOpenGLDrawFramebufferBindingNv = 0x8CA6;
auto constexpr kOpenGLDrawFramebufferExt = 0x8CA9;
auto constexpr kOpenGLDrawFramebufferNv = 0x8CA9;
auto constexpr kOpenGLDrawIndirectAddressNv = 0x8F41;
auto constexpr kOpenGLDrawIndirectBuffer = 0x8F3F;
auto constexpr kOpenGLDrawIndirectBufferBinding = 0x8F43;
auto constexpr kOpenGLDrawIndirectLengthNv = 0x8F42;
auto constexpr kOpenGLDrawIndirectUnifiedNv = 0x8F40;
auto constexpr kOpenGLDrawPixelToken = 0x0705;
auto constexpr kOpenGLDrawPixelsApple = 0x8A0A;
auto constexpr kOpenGLDriverUuidExt = 0x9598;
auto constexpr kOpenGLDsBiasNv = 0x8716;
auto constexpr kOpenGLDsScaleNv = 0x8710;
auto constexpr kOpenGLDsdt8Mag8Intensity8Nv = 0x870B;
auto constexpr kOpenGLDsdt8Mag8Nv = 0x870A;
auto constexpr kOpenGLDsdt8Nv = 0x8709;
auto constexpr kOpenGLDsdtMagIntensityNv = 0x86DC;
auto constexpr kOpenGLDsdtMagNv = 0x86F6;
auto constexpr kOpenGLDsdtMagVibNv = 0x86F7;
auto constexpr kOpenGLDsdtNv = 0x86F5;
auto constexpr kOpenGLDstAlpha = 0x0304;
auto constexpr kOpenGLDstAtopNv = 0x928F;
auto constexpr kOpenGLDstColor = 0x0306;
auto constexpr kOpenGLDstInNv = 0x928B;
auto constexpr kOpenGLDstNv = 0x9287;
auto constexpr kOpenGLDstOutNv = 0x928D;
auto constexpr kOpenGLDstOverNv = 0x9289;
auto constexpr kOpenGLDtBiasNv = 0x8717;
auto constexpr kOpenGLDtScaleNv = 0x8711;
auto constexpr kOpenGLDu8dv8Ati = 0x877A;
auto constexpr kOpenGLDualAlpha12Sgis = 0x8112;
auto constexpr kOpenGLDualAlpha16Sgis = 0x8113;
auto constexpr kOpenGLDualAlpha4Sgis = 0x8110;
auto constexpr kOpenGLDualAlpha8Sgis = 0x8111;
auto constexpr kOpenGLDualIntensity12Sgis = 0x811A;
auto constexpr kOpenGLDualIntensity16Sgis = 0x811B;
auto constexpr kOpenGLDualIntensity4Sgis = 0x8118;
auto constexpr kOpenGLDualIntensity8Sgis = 0x8119;
auto constexpr kOpenGLDualLuminance12Sgis = 0x8116;
auto constexpr kOpenGLDualLuminance16Sgis = 0x8117;
auto constexpr kOpenGLDualLuminance4Sgis = 0x8114;
auto constexpr kOpenGLDualLuminance8Sgis = 0x8115;
auto constexpr kOpenGLDualLuminanceAlpha4Sgis = 0x811C;
auto constexpr kOpenGLDualLuminanceAlpha8Sgis = 0x811D;
auto constexpr kOpenGLDualTextureSelectSgis = 0x8124;
auto constexpr kOpenGLDudvAti = 0x8779;
auto constexpr kOpenGLDupFirstCubicCurveToNv = 0xF2;
auto constexpr kOpenGLDupLastCubicCurveToNv = 0xF4;
auto constexpr kOpenGLDynamicAti = 0x8761;
auto constexpr kOpenGLDynamicCopy = 0x88EA;
auto constexpr kOpenGLDynamicCopyArb = 0x88EA;
auto constexpr kOpenGLDynamicDraw = 0x88E8;
auto constexpr kOpenGLDynamicDrawArb = 0x88E8;
auto constexpr kOpenGLDynamicRead = 0x88E9;
auto constexpr kOpenGLDynamicReadArb = 0x88E9;
auto constexpr kOpenGLDynamicStorageBit = 0x0100;
auto constexpr kOpenGLDynamicStorageBitExt = 0x0100;
auto constexpr kOpenGLETimesFNv = 0x8531;
auto constexpr kOpenGLEdgeFlag = 0x0B43;
auto constexpr kOpenGLEdgeFlagArray = 0x8079;
auto constexpr kOpenGLEdgeFlagArrayAddressNv = 0x8F26;
auto constexpr kOpenGLEdgeFlagArrayBufferBinding = 0x889B;
auto constexpr kOpenGLEdgeFlagArrayBufferBindingArb = 0x889B;
auto constexpr kOpenGLEdgeFlagArrayCountExt = 0x808D;
auto constexpr kOpenGLEdgeFlagArrayExt = 0x8079;
auto constexpr kOpenGLEdgeFlagArrayLengthNv = 0x8F30;
auto constexpr kOpenGLEdgeFlagArrayListIbm = 103075;
auto constexpr kOpenGLEdgeFlagArrayListStrideIbm = 103085;
auto constexpr kOpenGLEdgeFlagArrayPointer = 0x8093;
auto constexpr kOpenGLEdgeFlagArrayPointerExt = 0x8093;
auto constexpr kOpenGLEdgeFlagArrayStride = 0x808C;
auto constexpr kOpenGLEdgeFlagArrayStrideExt = 0x808C;
auto constexpr kOpenGLEdgeflagBitPgi = 0x00040000;
auto constexpr kOpenGLEffectiveRasterSamplesExt = 0x932C;
auto constexpr kOpenGLEighthBitAti = 0x00000020;
auto constexpr kOpenGLElementAddressCommandNv = 0x0008;
auto constexpr kOpenGLElementArrayAddressNv = 0x8F29;
auto constexpr kOpenGLElementArrayApple = 0x8A0C;
auto constexpr kOpenGLElementArrayAti = 0x8768;
auto constexpr kOpenGLElementArrayBarrierBit = 0x00000002;
auto constexpr kOpenGLElementArrayBarrierBitExt = 0x00000002;
auto constexpr kOpenGLElementArrayBuffer = 0x8893;
auto constexpr kOpenGLElementArrayBufferArb = 0x8893;
auto constexpr kOpenGLElementArrayBufferBinding = 0x8895;
auto constexpr kOpenGLElementArrayBufferBindingArb = 0x8895;
auto constexpr kOpenGLElementArrayLengthNv = 0x8F33;
auto constexpr kOpenGLElementArrayPointerApple = 0x8A0E;
auto constexpr kOpenGLElementArrayPointerAti = 0x876A;
auto constexpr kOpenGLElementArrayTypeApple = 0x8A0D;
auto constexpr kOpenGLElementArrayTypeAti = 0x8769;
auto constexpr kOpenGLElementArrayUnifiedNv = 0x8F1F;
auto constexpr kOpenGLEmbossConstantNv = 0x855E;
auto constexpr kOpenGLEmbossLightNv = 0x855D;
auto constexpr kOpenGLEmbossMapNv = 0x855F;
auto constexpr kOpenGLEmission = 0x1600;
auto constexpr kOpenGLEnableBit = 0x00002000;
auto constexpr kOpenGLEqual = 0x0202;
auto constexpr kOpenGLEquiv = 0x1509;
auto constexpr kOpenGLEtc1Rgb8Oes = 0x8D64;
auto constexpr kOpenGLEtc1Srgb8Nv = 0x88EE;
auto constexpr kOpenGLEval2dNv = 0x86C0;
auto constexpr kOpenGLEvalBit = 0x00010000;
auto constexpr kOpenGLEvalFractionalTessellationNv = 0x86C5;
auto constexpr kOpenGLEvalTriangular2dNv = 0x86C1;
auto constexpr kOpenGLEvalVertexAttrib0Nv = 0x86C6;
auto constexpr kOpenGLEvalVertexAttrib10Nv = 0x86D0;
auto constexpr kOpenGLEvalVertexAttrib11Nv = 0x86D1;
auto constexpr kOpenGLEvalVertexAttrib12Nv = 0x86D2;
auto constexpr kOpenGLEvalVertexAttrib13Nv = 0x86D3;
auto constexpr kOpenGLEvalVertexAttrib14Nv = 0x86D4;
auto constexpr kOpenGLEvalVertexAttrib15Nv = 0x86D5;
auto constexpr kOpenGLEvalVertexAttrib1Nv = 0x86C7;
auto constexpr kOpenGLEvalVertexAttrib2Nv = 0x86C8;
auto constexpr kOpenGLEvalVertexAttrib3Nv = 0x86C9;
auto constexpr kOpenGLEvalVertexAttrib4Nv = 0x86CA;
auto constexpr kOpenGLEvalVertexAttrib5Nv = 0x86CB;
auto constexpr kOpenGLEvalVertexAttrib6Nv = 0x86CC;
auto constexpr kOpenGLEvalVertexAttrib7Nv = 0x86CD;
auto constexpr kOpenGLEvalVertexAttrib8Nv = 0x86CE;
auto constexpr kOpenGLEvalVertexAttrib9Nv = 0x86CF;
auto constexpr kOpenGLExclusion = 0x92A0;
auto constexpr kOpenGLExclusionKhr = 0x92A0;
auto constexpr kOpenGLExclusionNv = 0x92A0;
auto constexpr kOpenGLExclusiveExt = 0x8F11;
auto constexpr kOpenGLExp = 0x0800;
auto constexpr kOpenGLExp2 = 0x0801;
auto constexpr kOpenGLExpandNegateNv = 0x8539;
auto constexpr kOpenGLExpandNormalNv = 0x8538;
auto constexpr kOpenGLExtensions = 0x1F03;
auto constexpr kOpenGLExternalStorageBitNvx = 0x2000;
auto constexpr kOpenGLExternalVirtualMemoryBufferAmd = 0x9160;
auto constexpr kOpenGLEyeDistanceToLineSgis = 0x81F2;
auto constexpr kOpenGLEyeDistanceToPointSgis = 0x81F0;
auto constexpr kOpenGLEyeLineSgis = 0x81F6;
auto constexpr kOpenGLEyeLinear = 0x2400;
auto constexpr kOpenGLEyeLinearNv = 0x2400;
auto constexpr kOpenGLEyePlane = 0x2502;
auto constexpr kOpenGLEyePlaneAbsoluteNv = 0x855C;
auto constexpr kOpenGLEyePointSgis = 0x81F4;
auto constexpr kOpenGLEyeRadialNv = 0x855B;
auto constexpr kOpenGLFactorAlphaModulateImg = 0x8C07;
auto constexpr kOpenGLFactorMaxAmd = 0x901D;
auto constexpr kOpenGLFactorMinAmd = 0x901C;
auto constexpr kOpenGLFailureNv = 0x9030;
auto constexpr kOpenGLFalse = 0;
auto constexpr kOpenGLFastest = 0x1101;
auto constexpr kOpenGLFeedback = 0x1C01;
auto constexpr kOpenGLFeedbackBufferPointer = 0x0DF0;
auto constexpr kOpenGLFeedbackBufferSize = 0x0DF1;
auto constexpr kOpenGLFeedbackBufferType = 0x0DF2;
auto constexpr kOpenGLFenceApple = 0x8A0B;
auto constexpr kOpenGLFenceConditionNv = 0x84F4;
auto constexpr kOpenGLFenceStatusNv = 0x84F3;
auto constexpr kOpenGLFetchPerSampleArm = 0x8F65;
auto constexpr kOpenGLFieldLowerNv = 0x9023;
auto constexpr kOpenGLFieldUpperNv = 0x9022;
auto constexpr kOpenGLFieldsNv = 0x8E27;
auto constexpr kOpenGLFileNameNv = 0x9074;
auto constexpr kOpenGLFill = 0x1B02;
auto constexpr kOpenGLFillNv = 0x1B02;
auto constexpr kOpenGLFillRectangleNv = 0x933C;
auto constexpr kOpenGLFilter = 0x829A;
auto constexpr kOpenGLFilter4Sgis = 0x8146;
auto constexpr kOpenGLFirstToRestNv = 0x90AF;
auto constexpr kOpenGLFirstVertexConvention = 0x8E4D;
auto constexpr kOpenGLFirstVertexConventionExt = 0x8E4D;
auto constexpr kOpenGLFirstVertexConventionOes = 0x8E4D;
auto constexpr kOpenGLFixed = 0x140C;
auto constexpr kOpenGLFixedOes = 0x140C;
auto constexpr kOpenGLFixedOnly = 0x891D;
auto constexpr kOpenGLFixedOnlyArb = 0x891D;
auto constexpr kOpenGLFlat = 0x1D00;
auto constexpr kOpenGLFloat = 0x1406;
auto constexpr kOpenGLFloat16Mat2Amd = 0x91C5;
auto constexpr kOpenGLFloat16Mat2x3Amd = 0x91C8;
auto constexpr kOpenGLFloat16Mat2x4Amd = 0x91C9;
auto constexpr kOpenGLFloat16Mat3Amd = 0x91C6;
auto constexpr kOpenGLFloat16Mat3x2Amd = 0x91CA;
auto constexpr kOpenGLFloat16Mat3x4Amd = 0x91CB;
auto constexpr kOpenGLFloat16Mat4Amd = 0x91C7;
auto constexpr kOpenGLFloat16Mat4x2Amd = 0x91CC;
auto constexpr kOpenGLFloat16Mat4x3Amd = 0x91CD;
auto constexpr kOpenGLFloat16Nv = 0x8FF8;
auto constexpr kOpenGLFloat16Vec2Nv = 0x8FF9;
auto constexpr kOpenGLFloat16Vec3Nv = 0x8FFA;
auto constexpr kOpenGLFloat16Vec4Nv = 0x8FFB;
auto constexpr kOpenGLFloat32UnsignedInt248Rev = 0x8DAD;
auto constexpr kOpenGLFloat32UnsignedInt248RevNv = 0x8DAD;
auto constexpr kOpenGLFloatClearColorValueNv = 0x888D;
auto constexpr kOpenGLFloatMat2 = 0x8B5A;
auto constexpr kOpenGLFloatMat2Arb = 0x8B5A;
auto constexpr kOpenGLFloatMat2x3 = 0x8B65;
auto constexpr kOpenGLFloatMat2x3Nv = 0x8B65;
auto constexpr kOpenGLFloatMat2x4 = 0x8B66;
auto constexpr kOpenGLFloatMat2x4Nv = 0x8B66;
auto constexpr kOpenGLFloatMat3 = 0x8B5B;
auto constexpr kOpenGLFloatMat3Arb = 0x8B5B;
auto constexpr kOpenGLFloatMat3x2 = 0x8B67;
auto constexpr kOpenGLFloatMat3x2Nv = 0x8B67;
auto constexpr kOpenGLFloatMat3x4 = 0x8B68;
auto constexpr kOpenGLFloatMat3x4Nv = 0x8B68;
auto constexpr kOpenGLFloatMat4 = 0x8B5C;
auto constexpr kOpenGLFloatMat4Arb = 0x8B5C;
auto constexpr kOpenGLFloatMat4x2 = 0x8B69;
auto constexpr kOpenGLFloatMat4x2Nv = 0x8B69;
auto constexpr kOpenGLFloatMat4x3 = 0x8B6A;
auto constexpr kOpenGLFloatMat4x3Nv = 0x8B6A;
auto constexpr kOpenGLFloatR16Nv = 0x8884;
auto constexpr kOpenGLFloatR32Nv = 0x8885;
auto constexpr kOpenGLFloatRNv = 0x8880;
auto constexpr kOpenGLFloatRg16Nv = 0x8886;
auto constexpr kOpenGLFloatRg32Nv = 0x8887;
auto constexpr kOpenGLFloatRgNv = 0x8881;
auto constexpr kOpenGLFloatRgb16Nv = 0x8888;
auto constexpr kOpenGLFloatRgb32Nv = 0x8889;
auto constexpr kOpenGLFloatRgbNv = 0x8882;
auto constexpr kOpenGLFloatRgba16Nv = 0x888A;
auto constexpr kOpenGLFloatRgba32Nv = 0x888B;
auto constexpr kOpenGLFloatRgbaModeNv = 0x888E;
auto constexpr kOpenGLFloatRgbaNv = 0x8883;
auto constexpr kOpenGLFloatVec2 = 0x8B50;
auto constexpr kOpenGLFloatVec2Arb = 0x8B50;
auto constexpr kOpenGLFloatVec3 = 0x8B51;
auto constexpr kOpenGLFloatVec3Arb = 0x8B51;
auto constexpr kOpenGLFloatVec4 = 0x8B52;
auto constexpr kOpenGLFloatVec4Arb = 0x8B52;
auto constexpr kOpenGLFog = 0x0B60;
auto constexpr kOpenGLFogBit = 0x00000080;
auto constexpr kOpenGLFogColor = 0x0B66;
auto constexpr kOpenGLFogCoord = 0x8451;
auto constexpr kOpenGLFogCoordArray = 0x8457;
auto constexpr kOpenGLFogCoordArrayAddressNv = 0x8F28;
auto constexpr kOpenGLFogCoordArrayBufferBinding = 0x889D;
auto constexpr kOpenGLFogCoordArrayLengthNv = 0x8F32;
auto constexpr kOpenGLFogCoordArrayPointer = 0x8456;
auto constexpr kOpenGLFogCoordArrayStride = 0x8455;
auto constexpr kOpenGLFogCoordArrayType = 0x8454;
auto constexpr kOpenGLFogCoordSrc = 0x8450;
auto constexpr kOpenGLFogCoordinate = 0x8451;
auto constexpr kOpenGLFogCoordinateArray = 0x8457;
auto constexpr kOpenGLFogCoordinateArrayBufferBinding = 0x889D;
auto constexpr kOpenGLFogCoordinateArrayBufferBindingArb = 0x889D;
auto constexpr kOpenGLFogCoordinateArrayExt = 0x8457;
auto constexpr kOpenGLFogCoordinateArrayListIbm = 103076;
auto constexpr kOpenGLFogCoordinateArrayListStrideIbm = 103086;
auto constexpr kOpenGLFogCoordinateArrayPointer = 0x8456;
auto constexpr kOpenGLFogCoordinateArrayPointerExt = 0x8456;
auto constexpr kOpenGLFogCoordinateArrayStride = 0x8455;
auto constexpr kOpenGLFogCoordinateArrayStrideExt = 0x8455;
auto constexpr kOpenGLFogCoordinateArrayType = 0x8454;
auto constexpr kOpenGLFogCoordinateArrayTypeExt = 0x8454;
auto constexpr kOpenGLFogCoordinateExt = 0x8451;
auto constexpr kOpenGLFogCoordinateSource = 0x8450;
auto constexpr kOpenGLFogCoordinateSourceExt = 0x8450;
auto constexpr kOpenGLFogDensity = 0x0B62;
auto constexpr kOpenGLFogDistanceModeNv = 0x855A;
auto constexpr kOpenGLFogEnd = 0x0B64;
auto constexpr kOpenGLFogFuncPointsSgis = 0x812B;
auto constexpr kOpenGLFogFuncSgis = 0x812A;
auto constexpr kOpenGLFogHint = 0x0C54;
auto constexpr kOpenGLFogIndex = 0x0B61;
auto constexpr kOpenGLFogMode = 0x0B65;
auto constexpr kOpenGLFogOffsetSgix = 0x8198;
auto constexpr kOpenGLFogOffsetValueSgix = 0x8199;
auto constexpr kOpenGLFogSpecularTextureWin = 0x80EC;
auto constexpr kOpenGLFogStart = 0x0B63;
auto constexpr kOpenGLFontAscenderBitNv = 0x00200000;
auto constexpr kOpenGLFontDescenderBitNv = 0x00400000;
auto constexpr kOpenGLFontGlyphsAvailableNv = 0x9368;
auto constexpr kOpenGLFontHasKerningBitNv = 0x10000000;
auto constexpr kOpenGLFontHeightBitNv = 0x00800000;
auto constexpr kOpenGLFontMaxAdvanceHeightBitNv = 0x02000000;
auto constexpr kOpenGLFontMaxAdvanceWidthBitNv = 0x01000000;
auto constexpr kOpenGLFontNumGlyphIndicesBitNv = 0x20000000;
auto constexpr kOpenGLFontTargetUnavailableNv = 0x9369;
auto constexpr kOpenGLFontUnavailableNv = 0x936A;
auto constexpr kOpenGLFontUnderlinePositionBitNv = 0x04000000;
auto constexpr kOpenGLFontUnderlineThicknessBitNv = 0x08000000;
auto constexpr kOpenGLFontUnintelligibleNv = 0x936B;
auto constexpr kOpenGLFontUnitsPerEmBitNv = 0x00100000;
auto constexpr kOpenGLFontXMaxBoundsBitNv = 0x00040000;
auto constexpr kOpenGLFontXMinBoundsBitNv = 0x00010000;
auto constexpr kOpenGLFontYMaxBoundsBitNv = 0x00080000;
auto constexpr kOpenGLFontYMinBoundsBitNv = 0x00020000;
auto constexpr kOpenGLForceBlueToOneNv = 0x8860;
auto constexpr kOpenGLFormatSubsample244244Oml = 0x8983;
auto constexpr kOpenGLFormatSubsample2424Oml = 0x8982;
auto constexpr kOpenGLFoveationEnableBitQcom = 0x00000001;
auto constexpr kOpenGLFoveationScaledBinMethodBitQcom = 0x00000002;
auto constexpr kOpenGLFoveationSubsampledLayoutMethodBitQcom = 0x00000004;
auto constexpr kOpenGLFractionalEven = 0x8E7C;
auto constexpr kOpenGLFractionalEvenExt = 0x8E7C;
auto constexpr kOpenGLFractionalEvenOes = 0x8E7C;
auto constexpr kOpenGLFractionalOdd = 0x8E7B;
auto constexpr kOpenGLFractionalOddExt = 0x8E7B;
auto constexpr kOpenGLFractionalOddOes = 0x8E7B;
auto constexpr kOpenGLFragmentAlphaModulateImg = 0x8C08;
auto constexpr kOpenGLFragmentColorExt = 0x834C;
auto constexpr kOpenGLFragmentColorMaterialFaceSgix = 0x8402;
auto constexpr kOpenGLFragmentColorMaterialParameterSgix = 0x8403;
auto constexpr kOpenGLFragmentColorMaterialSgix = 0x8401;
auto constexpr kOpenGLFragmentCoverageColorNv = 0x92DE;
auto constexpr kOpenGLFragmentCoverageToColorNv = 0x92DD;
auto constexpr kOpenGLFragmentDepth = 0x8452;
auto constexpr kOpenGLFragmentDepthExt = 0x8452;
auto constexpr kOpenGLFragmentInputNv = 0x936D;
auto constexpr kOpenGLFragmentInterpolationOffsetBits = 0x8E5D;
auto constexpr kOpenGLFragmentInterpolationOffsetBitsOes = 0x8E5D;
auto constexpr kOpenGLFragmentLight0Sgix = 0x840C;
auto constexpr kOpenGLFragmentLight1Sgix = 0x840D;
auto constexpr kOpenGLFragmentLight2Sgix = 0x840E;
auto constexpr kOpenGLFragmentLight3Sgix = 0x840F;
auto constexpr kOpenGLFragmentLight4Sgix = 0x8410;
auto constexpr kOpenGLFragmentLight5Sgix = 0x8411;
auto constexpr kOpenGLFragmentLight6Sgix = 0x8412;
auto constexpr kOpenGLFragmentLight7Sgix = 0x8413;
auto constexpr kOpenGLFragmentLightModelAmbientSgix = 0x840A;
auto constexpr kOpenGLFragmentLightModelLocalViewerSgix = 0x8408;
auto constexpr kOpenGLFragmentLightModelNormalInterpolationSgix = 0x840B;
auto constexpr kOpenGLFragmentLightModelTwoSideSgix = 0x8409;
auto constexpr kOpenGLFragmentLightingSgix = 0x8400;
auto constexpr kOpenGLFragmentMaterialExt = 0x8349;
auto constexpr kOpenGLFragmentNormalExt = 0x834A;
auto constexpr kOpenGLFragmentProgramArb = 0x8804;
auto constexpr kOpenGLFragmentProgramBindingNv = 0x8873;
auto constexpr kOpenGLFragmentProgramCallbackDataMesa = 0x8BB3;
auto constexpr kOpenGLFragmentProgramCallbackFuncMesa = 0x8BB2;
auto constexpr kOpenGLFragmentProgramCallbackMesa = 0x8BB1;
auto constexpr kOpenGLFragmentProgramInterpolationOffsetBitsNv = 0x8E5D;
auto constexpr kOpenGLFragmentProgramNv = 0x8870;
auto constexpr kOpenGLFragmentProgramParameterBufferNv = 0x8DA4;
auto constexpr kOpenGLFragmentProgramPositionMesa = 0x8BB0;
auto constexpr kOpenGLFragmentShader = 0x8B30;
auto constexpr kOpenGLFragmentShaderArb = 0x8B30;
auto constexpr kOpenGLFragmentShaderAti = 0x8920;
auto constexpr kOpenGLFragmentShaderBit = 0x00000002;
auto constexpr kOpenGLFragmentShaderBitExt = 0x00000002;
auto constexpr kOpenGLFragmentShaderDerivativeHint = 0x8B8B;
auto constexpr kOpenGLFragmentShaderDerivativeHintArb = 0x8B8B;
auto constexpr kOpenGLFragmentShaderDerivativeHintOes = 0x8B8B;
auto constexpr kOpenGLFragmentShaderDiscardsSamplesExt = 0x8A52;
auto constexpr kOpenGLFragmentShaderFramebufferFetchMrtArm = 0x8F66;
auto constexpr kOpenGLFragmentShaderInvocations = 0x82F4;
auto constexpr kOpenGLFragmentShaderInvocationsArb = 0x82F4;
auto constexpr kOpenGLFragmentShadingRateAttachmentWithDefaultFramebufferSupportedExt = 0x96DF;
auto constexpr kOpenGLFragmentShadingRateCombinerOpKeepExt = 0x96D2;
auto constexpr kOpenGLFragmentShadingRateCombinerOpMaxExt = 0x96D5;
auto constexpr kOpenGLFragmentShadingRateCombinerOpMinExt = 0x96D4;
auto constexpr kOpenGLFragmentShadingRateCombinerOpMulExt = 0x96D6;
auto constexpr kOpenGLFragmentShadingRateCombinerOpReplaceExt = 0x96D3;
auto constexpr kOpenGLFragmentShadingRateNonTrivialCombinersSupportedExt = 0x8F6F;
auto constexpr kOpenGLFragmentShadingRateWithSampleMaskSupportedExt = 0x96DE;
auto constexpr kOpenGLFragmentShadingRateWithShaderDepthStencilWritesSupportedExt = 0x96DD;
auto constexpr kOpenGLFragmentSubroutine = 0x92EC;
auto constexpr kOpenGLFragmentSubroutineUniform = 0x92F2;
auto constexpr kOpenGLFragmentTexture = 0x829F;
auto constexpr kOpenGLFragmentsInstrumentCountersSgix = 0x8314;
auto constexpr kOpenGLFragmentsInstrumentMaxSgix = 0x8315;
auto constexpr kOpenGLFragmentsInstrumentSgix = 0x8313;
auto constexpr kOpenGLFrameNv = 0x8E26;
auto constexpr kOpenGLFramebuffer = 0x8D40;
auto constexpr kOpenGLFramebufferAttachmentAlphaSize = 0x8215;
auto constexpr kOpenGLFramebufferAttachmentAngle = 0x93A3;
auto constexpr kOpenGLFramebufferAttachmentBlueSize = 0x8214;
auto constexpr kOpenGLFramebufferAttachmentColorEncoding = 0x8210;
auto constexpr kOpenGLFramebufferAttachmentColorEncodingExt = 0x8210;
auto constexpr kOpenGLFramebufferAttachmentComponentType = 0x8211;
auto constexpr kOpenGLFramebufferAttachmentComponentTypeExt = 0x8211;
auto constexpr kOpenGLFramebufferAttachmentDepthSize = 0x8216;
auto constexpr kOpenGLFramebufferAttachmentGreenSize = 0x8213;
auto constexpr kOpenGLFramebufferAttachmentLayered = 0x8DA7;
auto constexpr kOpenGLFramebufferAttachmentLayeredArb = 0x8DA7;
auto constexpr kOpenGLFramebufferAttachmentLayeredExt = 0x8DA7;
auto constexpr kOpenGLFramebufferAttachmentLayeredOes = 0x8DA7;
auto constexpr kOpenGLFramebufferAttachmentObjectName = 0x8CD1;
auto constexpr kOpenGLFramebufferAttachmentObjectNameExt = 0x8CD1;
auto constexpr kOpenGLFramebufferAttachmentObjectNameOes = 0x8CD1;
auto constexpr kOpenGLFramebufferAttachmentObjectType = 0x8CD0;
auto constexpr kOpenGLFramebufferAttachmentObjectTypeExt = 0x8CD0;
auto constexpr kOpenGLFramebufferAttachmentObjectTypeOes = 0x8CD0;
auto constexpr kOpenGLFramebufferAttachmentRedSize = 0x8212;
auto constexpr kOpenGLFramebufferAttachmentStencilSize = 0x8217;
auto constexpr kOpenGLFramebufferAttachmentTexture3dZoffsetExt = 0x8CD4;
auto constexpr kOpenGLFramebufferAttachmentTexture3dZoffsetOes = 0x8CD4;
auto constexpr kOpenGLFramebufferAttachmentTextureBaseViewIndexOvr = 0x9632;
auto constexpr kOpenGLFramebufferAttachmentTextureCubeMapFace = 0x8CD3;
auto constexpr kOpenGLFramebufferAttachmentTextureCubeMapFaceExt = 0x8CD3;
auto constexpr kOpenGLFramebufferAttachmentTextureCubeMapFaceOes = 0x8CD3;
auto constexpr kOpenGLFramebufferAttachmentTextureLayer = 0x8CD4;
auto constexpr kOpenGLFramebufferAttachmentTextureLayerExt = 0x8CD4;
auto constexpr kOpenGLFramebufferAttachmentTextureLevel = 0x8CD2;
auto constexpr kOpenGLFramebufferAttachmentTextureLevelExt = 0x8CD2;
auto constexpr kOpenGLFramebufferAttachmentTextureLevelOes = 0x8CD2;
auto constexpr kOpenGLFramebufferAttachmentTextureNumViewsOvr = 0x9630;
auto constexpr kOpenGLFramebufferAttachmentTextureSamplesExt = 0x8D6C;
auto constexpr kOpenGLFramebufferAttachmentTextureScaleImg = 0x913F;
auto constexpr kOpenGLFramebufferBarrierBit = 0x00000400;
auto constexpr kOpenGLFramebufferBarrierBitExt = 0x00000400;
auto constexpr kOpenGLFramebufferBinding = 0x8CA6;
auto constexpr kOpenGLFramebufferBindingAngle = 0x8CA6;
auto constexpr kOpenGLFramebufferBindingExt = 0x8CA6;
auto constexpr kOpenGLFramebufferBindingOes = 0x8CA6;
auto constexpr kOpenGLFramebufferBlend = 0x828B;
auto constexpr kOpenGLFramebufferComplete = 0x8CD5;
auto constexpr kOpenGLFramebufferCompleteExt = 0x8CD5;
auto constexpr kOpenGLFramebufferCompleteOes = 0x8CD5;
auto constexpr kOpenGLFramebufferDefault = 0x8218;
auto constexpr kOpenGLFramebufferDefaultFixedSampleLocations = 0x9314;
auto constexpr kOpenGLFramebufferDefaultHeight = 0x9311;
auto constexpr kOpenGLFramebufferDefaultLayers = 0x9312;
auto constexpr kOpenGLFramebufferDefaultLayersExt = 0x9312;
auto constexpr kOpenGLFramebufferDefaultLayersOes = 0x9312;
auto constexpr kOpenGLFramebufferDefaultSamples = 0x9313;
auto constexpr kOpenGLFramebufferDefaultWidth = 0x9310;
auto constexpr kOpenGLFramebufferExt = 0x8D40;
auto constexpr kOpenGLFramebufferFetchNoncoherentQcom = 0x96A2;
auto constexpr kOpenGLFramebufferFlipXMesa = 0x8BBC;
auto constexpr kOpenGLFramebufferFlipYMesa = 0x8BBB;
auto constexpr kOpenGLFramebufferIncompleteAttachment = 0x8CD6;
auto constexpr kOpenGLFramebufferIncompleteAttachmentExt = 0x8CD6;
auto constexpr kOpenGLFramebufferIncompleteAttachmentOes = 0x8CD6;
auto constexpr kOpenGLFramebufferIncompleteDimensions = 0x8CD9;
auto constexpr kOpenGLFramebufferIncompleteDimensionsExt = 0x8CD9;
auto constexpr kOpenGLFramebufferIncompleteDimensionsOes = 0x8CD9;
auto constexpr kOpenGLFramebufferIncompleteDrawBuffer = 0x8CDB;
auto constexpr kOpenGLFramebufferIncompleteDrawBufferExt = 0x8CDB;
auto constexpr kOpenGLFramebufferIncompleteDrawBufferOes = 0x8CDB;
auto constexpr kOpenGLFramebufferIncompleteFormatsExt = 0x8CDA;
auto constexpr kOpenGLFramebufferIncompleteFormatsOes = 0x8CDA;
auto constexpr kOpenGLFramebufferIncompleteFoveationQcom = 0x8BFF;
auto constexpr kOpenGLFramebufferIncompleteInsufficientShaderCombinedLocalStorageExt = 0x9652;
auto constexpr kOpenGLFramebufferIncompleteLayerCountArb = 0x8DA9;
auto constexpr kOpenGLFramebufferIncompleteLayerCountExt = 0x8DA9;
auto constexpr kOpenGLFramebufferIncompleteLayerTargets = 0x8DA8;
auto constexpr kOpenGLFramebufferIncompleteLayerTargetsArb = 0x8DA8;
auto constexpr kOpenGLFramebufferIncompleteLayerTargetsExt = 0x8DA8;
auto constexpr kOpenGLFramebufferIncompleteLayerTargetsOes = 0x8DA8;
auto constexpr kOpenGLFramebufferIncompleteMissingAttachment = 0x8CD7;
auto constexpr kOpenGLFramebufferIncompleteMissingAttachmentExt = 0x8CD7;
auto constexpr kOpenGLFramebufferIncompleteMissingAttachmentOes = 0x8CD7;
auto constexpr kOpenGLFramebufferIncompleteMultisample = 0x8D56;
auto constexpr kOpenGLFramebufferIncompleteMultisampleAndDownsampleImg = 0x913C;
auto constexpr kOpenGLFramebufferIncompleteMultisampleAngle = 0x8D56;
auto constexpr kOpenGLFramebufferIncompleteMultisampleApple = 0x8D56;
auto constexpr kOpenGLFramebufferIncompleteMultisampleExt = 0x8D56;
auto constexpr kOpenGLFramebufferIncompleteMultisampleImg = 0x9134;
auto constexpr kOpenGLFramebufferIncompleteMultisampleNv = 0x8D56;
auto constexpr kOpenGLFramebufferIncompleteReadBuffer = 0x8CDC;
auto constexpr kOpenGLFramebufferIncompleteReadBufferExt = 0x8CDC;
auto constexpr kOpenGLFramebufferIncompleteReadBufferOes = 0x8CDC;
auto constexpr kOpenGLFramebufferIncompleteViewTargetsOvr = 0x9633;
auto constexpr kOpenGLFramebufferOes = 0x8D40;
auto constexpr kOpenGLFramebufferProgrammableSampleLocationsArb = 0x9342;
auto constexpr kOpenGLFramebufferProgrammableSampleLocationsNv = 0x9342;
auto constexpr kOpenGLFramebufferRenderable = 0x8289;
auto constexpr kOpenGLFramebufferRenderableLayered = 0x828A;
auto constexpr kOpenGLFramebufferSampleLocationPixelGridArb = 0x9343;
auto constexpr kOpenGLFramebufferSampleLocationPixelGridNv = 0x9343;
auto constexpr kOpenGLFramebufferSrgb = 0x8DB9;
auto constexpr kOpenGLFramebufferSrgbCapableExt = 0x8DBA;
auto constexpr kOpenGLFramebufferSrgbExt = 0x8DB9;
auto constexpr kOpenGLFramebufferSwapXyMesa = 0x8BBD;
auto constexpr kOpenGLFramebufferUndefined = 0x8219;
auto constexpr kOpenGLFramebufferUndefinedOes = 0x8219;
auto constexpr kOpenGLFramebufferUnsupported = 0x8CDD;
auto constexpr kOpenGLFramebufferUnsupportedExt = 0x8CDD;
auto constexpr kOpenGLFramebufferUnsupportedOes = 0x8CDD;
auto constexpr kOpenGLFramezoomFactorSgix = 0x818C;
auto constexpr kOpenGLFramezoomSgix = 0x818B;
auto constexpr kOpenGLFront = 0x0404;
auto constexpr kOpenGLFrontAndBack = 0x0408;
auto constexpr kOpenGLFrontFace = 0x0B46;
auto constexpr kOpenGLFrontFaceCommandNv = 0x0012;
auto constexpr kOpenGLFrontLeft = 0x0400;
auto constexpr kOpenGLFrontRight = 0x0401;
auto constexpr kOpenGLFullRangeExt = 0x87E1;
auto constexpr kOpenGLFullStippleHintPgi = 0x1A219;
auto constexpr kOpenGLFullSupport = 0x82B7;
auto constexpr kOpenGLFuncAdd = 0x8006;
auto constexpr kOpenGLFuncAddExt = 0x8006;
auto constexpr kOpenGLFuncAddOes = 0x8006;
auto constexpr kOpenGLFuncReverseSubtract = 0x800B;
auto constexpr kOpenGLFuncReverseSubtractExt = 0x800B;
auto constexpr kOpenGLFuncReverseSubtractOes = 0x800B;
auto constexpr kOpenGLFuncSubtract = 0x800A;
auto constexpr kOpenGLFuncSubtractExt = 0x800A;
auto constexpr kOpenGLFuncSubtractOes = 0x800A;
auto constexpr kOpenGLGccsoShaderBinaryFj = 0x9260;
auto constexpr kOpenGLGenerateMipmap = 0x8191;
auto constexpr kOpenGLGenerateMipmapHint = 0x8192;
auto constexpr kOpenGLGenerateMipmapHintSgis = 0x8192;
auto constexpr kOpenGLGenerateMipmapSgis = 0x8191;
auto constexpr kOpenGLGenericAttribNv = 0x8C7D;
auto constexpr kOpenGLGeometryDeformationBitSgix = 0x00000002;
auto constexpr kOpenGLGeometryDeformationSgix = 0x8194;
auto constexpr kOpenGLGeometryInputType = 0x8917;
auto constexpr kOpenGLGeometryInputTypeArb = 0x8DDB;
auto constexpr kOpenGLGeometryInputTypeExt = 0x8DDB;
auto constexpr kOpenGLGeometryLinkedInputTypeExt = 0x8917;
auto constexpr kOpenGLGeometryLinkedInputTypeOes = 0x8917;
auto constexpr kOpenGLGeometryLinkedOutputTypeExt = 0x8918;
auto constexpr kOpenGLGeometryLinkedOutputTypeOes = 0x8918;
auto constexpr kOpenGLGeometryLinkedVerticesOutExt = 0x8916;
auto constexpr kOpenGLGeometryLinkedVerticesOutOes = 0x8916;
auto constexpr kOpenGLGeometryOutputType = 0x8918;
auto constexpr kOpenGLGeometryOutputTypeArb = 0x8DDC;
auto constexpr kOpenGLGeometryOutputTypeExt = 0x8DDC;
auto constexpr kOpenGLGeometryProgramNv = 0x8C26;
auto constexpr kOpenGLGeometryProgramParameterBufferNv = 0x8DA3;
auto constexpr kOpenGLGeometryShader = 0x8DD9;
auto constexpr kOpenGLGeometryShaderArb = 0x8DD9;
auto constexpr kOpenGLGeometryShaderBit = 0x00000004;
auto constexpr kOpenGLGeometryShaderBitExt = 0x00000004;
auto constexpr kOpenGLGeometryShaderBitOes = 0x00000004;
auto constexpr kOpenGLGeometryShaderExt = 0x8DD9;
auto constexpr kOpenGLGeometryShaderInvocations = 0x887F;
auto constexpr kOpenGLGeometryShaderInvocationsExt = 0x887F;
auto constexpr kOpenGLGeometryShaderInvocationsOes = 0x887F;
auto constexpr kOpenGLGeometryShaderOes = 0x8DD9;
auto constexpr kOpenGLGeometryShaderPrimitivesEmitted = 0x82F3;
auto constexpr kOpenGLGeometryShaderPrimitivesEmittedArb = 0x82F3;
auto constexpr kOpenGLGeometrySubroutine = 0x92EB;
auto constexpr kOpenGLGeometrySubroutineUniform = 0x92F1;
auto constexpr kOpenGLGeometryTexture = 0x829E;
auto constexpr kOpenGLGeometryVerticesOut = 0x8916;
auto constexpr kOpenGLGeometryVerticesOutArb = 0x8DDA;
auto constexpr kOpenGLGeometryVerticesOutExt = 0x8DDA;
auto constexpr kOpenGLGequal = 0x0206;
auto constexpr kOpenGLGetTextureImageFormat = 0x8291;
auto constexpr kOpenGLGetTextureImageType = 0x8292;
auto constexpr kOpenGLGlobalAlphaFactorSun = 0x81DA;
auto constexpr kOpenGLGlobalAlphaSun = 0x81D9;
auto constexpr kOpenGLGlyphHasKerningBitNv = 0x100;
auto constexpr kOpenGLGlyphHeightBitNv = 0x02;
auto constexpr kOpenGLGlyphHorizontalBearingAdvanceBitNv = 0x10;
auto constexpr kOpenGLGlyphHorizontalBearingXBitNv = 0x04;
auto constexpr kOpenGLGlyphHorizontalBearingYBitNv = 0x08;
auto constexpr kOpenGLGlyphVerticalBearingAdvanceBitNv = 0x80;
auto constexpr kOpenGLGlyphVerticalBearingXBitNv = 0x20;
auto constexpr kOpenGLGlyphVerticalBearingYBitNv = 0x40;
auto constexpr kOpenGLGlyphWidthBitNv = 0x01;
auto constexpr kOpenGLGpuAddressNv = 0x8F34;
auto constexpr kOpenGLGpuDisjointExt = 0x8FBB;
auto constexpr kOpenGLGpuMemoryInfoCurrentAvailableVidmemNvx = 0x9049;
auto constexpr kOpenGLGpuMemoryInfoDedicatedVidmemNvx = 0x9047;
auto constexpr kOpenGLGpuMemoryInfoEvictedMemoryNvx = 0x904B;
auto constexpr kOpenGLGpuMemoryInfoEvictionCountNvx = 0x904A;
auto constexpr kOpenGLGpuMemoryInfoTotalAvailableMemoryNvx = 0x9048;
auto constexpr kOpenGLGpuOptimizedQcom = 0x8FB2;
auto constexpr kOpenGLGreater = 0x0204;
auto constexpr kOpenGLGreen = 0x1904;
auto constexpr kOpenGLGreenBias = 0x0D19;
auto constexpr kOpenGLGreenBitAti = 0x00000002;
auto constexpr kOpenGLGreenBits = 0x0D53;
auto constexpr kOpenGLGreenInteger = 0x8D95;
auto constexpr kOpenGLGreenIntegerExt = 0x8D95;
auto constexpr kOpenGLGreenMaxClampIngr = 0x8565;
auto constexpr kOpenGLGreenMinClampIngr = 0x8561;
auto constexpr kOpenGLGreenNv = 0x1904;
auto constexpr kOpenGLGreenScale = 0x0D18;
auto constexpr kOpenGLGsProgramBinaryMtk = 0x9641;
auto constexpr kOpenGLGsShaderBinaryMtk = 0x9640;
auto constexpr kOpenGLGuiltyContextReset = 0x8253;
auto constexpr kOpenGLGuiltyContextResetArb = 0x8253;
auto constexpr kOpenGLGuiltyContextResetExt = 0x8253;
auto constexpr kOpenGLGuiltyContextResetKhr = 0x8253;
auto constexpr kOpenGLHalfApple = 0x140B;
auto constexpr kOpenGLHalfBiasNegateNv = 0x853B;
auto constexpr kOpenGLHalfBiasNormalNv = 0x853A;
auto constexpr kOpenGLHalfBitAti = 0x00000008;
auto constexpr kOpenGLHalfFloat = 0x140B;
auto constexpr kOpenGLHalfFloatArb = 0x140B;
auto constexpr kOpenGLHalfFloatNv = 0x140B;
auto constexpr kOpenGLHalfFloatOes = 0x8D61;
auto constexpr kOpenGLHandleTypeD3d11ImageExt = 0x958B;
auto constexpr kOpenGLHandleTypeD3d11ImageKmtExt = 0x958C;
auto constexpr kOpenGLHandleTypeD3d12FenceExt = 0x9594;
auto constexpr kOpenGLHandleTypeD3d12ResourceExt = 0x958A;
auto constexpr kOpenGLHandleTypeD3d12TilepoolExt = 0x9589;
auto constexpr kOpenGLHandleTypeOpaqueFdExt = 0x9586;
auto constexpr kOpenGLHandleTypeOpaqueWin32Ext = 0x9587;
auto constexpr kOpenGLHandleTypeOpaqueWin32KmtExt = 0x9588;
auto constexpr kOpenGLHardlight = 0x929B;
auto constexpr kOpenGLHardlightKhr = 0x929B;
auto constexpr kOpenGLHardlightNv = 0x929B;
auto constexpr kOpenGLHardmixNv = 0x92A9;
auto constexpr kOpenGLHiBiasNv = 0x8714;
auto constexpr kOpenGLHiScaleNv = 0x870E;
auto constexpr kOpenGLHighFloat = 0x8DF2;
auto constexpr kOpenGLHighInt = 0x8DF5;
auto constexpr kOpenGLHilo16Nv = 0x86F8;
auto constexpr kOpenGLHilo8Nv = 0x885E;
auto constexpr kOpenGLHiloNv = 0x86F4;
auto constexpr kOpenGLHintBit = 0x00008000;
auto constexpr kOpenGLHistogram = 0x8024;
auto constexpr kOpenGLHistogramAlphaSize = 0x802B;
auto constexpr kOpenGLHistogramAlphaSizeExt = 0x802B;
auto constexpr kOpenGLHistogramBlueSize = 0x802A;
auto constexpr kOpenGLHistogramBlueSizeExt = 0x802A;
auto constexpr kOpenGLHistogramExt = 0x8024;
auto constexpr kOpenGLHistogramFormat = 0x8027;
auto constexpr kOpenGLHistogramFormatExt = 0x8027;
auto constexpr kOpenGLHistogramGreenSize = 0x8029;
auto constexpr kOpenGLHistogramGreenSizeExt = 0x8029;
auto constexpr kOpenGLHistogramLuminanceSize = 0x802C;
auto constexpr kOpenGLHistogramLuminanceSizeExt = 0x802C;
auto constexpr kOpenGLHistogramRedSize = 0x8028;
auto constexpr kOpenGLHistogramRedSizeExt = 0x8028;
auto constexpr kOpenGLHistogramSink = 0x802D;
auto constexpr kOpenGLHistogramSinkExt = 0x802D;
auto constexpr kOpenGLHistogramWidth = 0x8026;
auto constexpr kOpenGLHistogramWidthExt = 0x8026;
auto constexpr kOpenGLHorizontalLineToNv = 0x06;
auto constexpr kOpenGLHslColor = 0x92AF;
auto constexpr kOpenGLHslColorKhr = 0x92AF;
auto constexpr kOpenGLHslColorNv = 0x92AF;
auto constexpr kOpenGLHslHue = 0x92AD;
auto constexpr kOpenGLHslHueKhr = 0x92AD;
auto constexpr kOpenGLHslHueNv = 0x92AD;
auto constexpr kOpenGLHslLuminosity = 0x92B0;
auto constexpr kOpenGLHslLuminosityKhr = 0x92B0;
auto constexpr kOpenGLHslLuminosityNv = 0x92B0;
auto constexpr kOpenGLHslSaturation = 0x92AE;
auto constexpr kOpenGLHslSaturationKhr = 0x92AE;
auto constexpr kOpenGLHslSaturationNv = 0x92AE;
auto constexpr kOpenGLIdentityNv = 0x862A;
auto constexpr kOpenGLIgnoreBorderHp = 0x8150;
auto constexpr kOpenGLImage1d = 0x904C;
auto constexpr kOpenGLImage1dArray = 0x9052;
auto constexpr kOpenGLImage1dArrayExt = 0x9052;
auto constexpr kOpenGLImage1dExt = 0x904C;
auto constexpr kOpenGLImage2d = 0x904D;
auto constexpr kOpenGLImage2dArray = 0x9053;
auto constexpr kOpenGLImage2dArrayExt = 0x9053;
auto constexpr kOpenGLImage2dExt = 0x904D;
auto constexpr kOpenGLImage2dMultisample = 0x9055;
auto constexpr kOpenGLImage2dMultisampleArray = 0x9056;
auto constexpr kOpenGLImage2dMultisampleArrayExt = 0x9056;
auto constexpr kOpenGLImage2dMultisampleExt = 0x9055;
auto constexpr kOpenGLImage2dRect = 0x904F;
auto constexpr kOpenGLImage2dRectExt = 0x904F;
auto constexpr kOpenGLImage3d = 0x904E;
auto constexpr kOpenGLImage3dExt = 0x904E;
auto constexpr kOpenGLImageBindingAccess = 0x8F3E;
auto constexpr kOpenGLImageBindingAccessExt = 0x8F3E;
auto constexpr kOpenGLImageBindingFormat = 0x906E;
auto constexpr kOpenGLImageBindingFormatExt = 0x906E;
auto constexpr kOpenGLImageBindingLayer = 0x8F3D;
auto constexpr kOpenGLImageBindingLayerExt = 0x8F3D;
auto constexpr kOpenGLImageBindingLayered = 0x8F3C;
auto constexpr kOpenGLImageBindingLayeredExt = 0x8F3C;
auto constexpr kOpenGLImageBindingLevel = 0x8F3B;
auto constexpr kOpenGLImageBindingLevelExt = 0x8F3B;
auto constexpr kOpenGLImageBindingName = 0x8F3A;
auto constexpr kOpenGLImageBindingNameExt = 0x8F3A;
auto constexpr kOpenGLImageBuffer = 0x9051;
auto constexpr kOpenGLImageBufferExt = 0x9051;
auto constexpr kOpenGLImageBufferOes = 0x9051;
auto constexpr kOpenGLImageClass1010102 = 0x82C3;
auto constexpr kOpenGLImageClass111110 = 0x82C2;
auto constexpr kOpenGLImageClass1X16 = 0x82BE;
auto constexpr kOpenGLImageClass1X32 = 0x82BB;
auto constexpr kOpenGLImageClass1X8 = 0x82C1;
auto constexpr kOpenGLImageClass2X16 = 0x82BD;
auto constexpr kOpenGLImageClass2X32 = 0x82BA;
auto constexpr kOpenGLImageClass2X8 = 0x82C0;
auto constexpr kOpenGLImageClass4X16 = 0x82BC;
auto constexpr kOpenGLImageClass4X32 = 0x82B9;
auto constexpr kOpenGLImageClass4X8 = 0x82BF;
auto constexpr kOpenGLImageCompatibilityClass = 0x82A8;
auto constexpr kOpenGLImageCube = 0x9050;
auto constexpr kOpenGLImageCubeExt = 0x9050;
auto constexpr kOpenGLImageCubeMapArray = 0x9054;
auto constexpr kOpenGLImageCubeMapArrayExt = 0x9054;
auto constexpr kOpenGLImageCubeMapArrayOes = 0x9054;
auto constexpr kOpenGLImageCubicWeightHp = 0x815E;
auto constexpr kOpenGLImageFormatCompatibilityByClass = 0x90C9;
auto constexpr kOpenGLImageFormatCompatibilityBySize = 0x90C8;
auto constexpr kOpenGLImageFormatCompatibilityType = 0x90C7;
auto constexpr kOpenGLImageMagFilterHp = 0x815C;
auto constexpr kOpenGLImageMinFilterHp = 0x815D;
auto constexpr kOpenGLImagePixelFormat = 0x82A9;
auto constexpr kOpenGLImagePixelType = 0x82AA;
auto constexpr kOpenGLImageRotateAngleHp = 0x8159;
auto constexpr kOpenGLImageRotateOriginXHp = 0x815A;
auto constexpr kOpenGLImageRotateOriginYHp = 0x815B;
auto constexpr kOpenGLImageScaleXHp = 0x8155;
auto constexpr kOpenGLImageScaleYHp = 0x8156;
auto constexpr kOpenGLImageTexelSize = 0x82A7;
auto constexpr kOpenGLImageTransform2dHp = 0x8161;
auto constexpr kOpenGLImageTranslateXHp = 0x8157;
auto constexpr kOpenGLImageTranslateYHp = 0x8158;
auto constexpr kOpenGLImplementationColorReadFormat = 0x8B9B;
auto constexpr kOpenGLImplementationColorReadFormatOes = 0x8B9B;
auto constexpr kOpenGLImplementationColorReadType = 0x8B9A;
auto constexpr kOpenGLImplementationColorReadTypeOes = 0x8B9A;
auto constexpr kOpenGLInclusiveExt = 0x8F10;
auto constexpr kOpenGLIncr = 0x1E02;
auto constexpr kOpenGLIncrWrap = 0x8507;
auto constexpr kOpenGLIncrWrapExt = 0x8507;
auto constexpr kOpenGLIncrWrapOes = 0x8507;
auto constexpr kOpenGLIndex = 0x8222;
auto constexpr kOpenGLIndexArray = 0x8077;
auto constexpr kOpenGLIndexArrayAddressNv = 0x8F24;
auto constexpr kOpenGLIndexArrayBufferBinding = 0x8899;
auto constexpr kOpenGLIndexArrayBufferBindingArb = 0x8899;
auto constexpr kOpenGLIndexArrayCountExt = 0x8087;
auto constexpr kOpenGLIndexArrayExt = 0x8077;
auto constexpr kOpenGLIndexArrayLengthNv = 0x8F2E;
auto constexpr kOpenGLIndexArrayListIbm = 103073;
auto constexpr kOpenGLIndexArrayListStrideIbm = 103083;
auto constexpr kOpenGLIndexArrayPointer = 0x8091;
auto constexpr kOpenGLIndexArrayPointerExt = 0x8091;
auto constexpr kOpenGLIndexArrayStride = 0x8086;
auto constexpr kOpenGLIndexArrayStrideExt = 0x8086;
auto constexpr kOpenGLIndexArrayType = 0x8085;
auto constexpr kOpenGLIndexArrayTypeExt = 0x8085;
auto constexpr kOpenGLIndexBitPgi = 0x00080000;
auto constexpr kOpenGLIndexBits = 0x0D51;
auto constexpr kOpenGLIndexClearValue = 0x0C20;
auto constexpr kOpenGLIndexLogicOp = 0x0BF1;
auto constexpr kOpenGLIndexMaterialExt = 0x81B8;
auto constexpr kOpenGLIndexMaterialFaceExt = 0x81BA;
auto constexpr kOpenGLIndexMaterialParameterExt = 0x81B9;
auto constexpr kOpenGLIndexMode = 0x0C30;
auto constexpr kOpenGLIndexOffset = 0x0D13;
auto constexpr kOpenGLIndexShift = 0x0D12;
auto constexpr kOpenGLIndexTestExt = 0x81B5;
auto constexpr kOpenGLIndexTestFuncExt = 0x81B6;
auto constexpr kOpenGLIndexTestRefExt = 0x81B7;
auto constexpr kOpenGLIndexWritemask = 0x0C21;
auto constexpr kOpenGLInfoLogLength = 0x8B84;
auto constexpr kOpenGLInnocentContextReset = 0x8254;
auto constexpr kOpenGLInnocentContextResetArb = 0x8254;
auto constexpr kOpenGLInnocentContextResetExt = 0x8254;
auto constexpr kOpenGLInnocentContextResetKhr = 0x8254;
auto constexpr kOpenGLInstrumentBufferPointerSgix = 0x8180;
auto constexpr kOpenGLInstrumentMeasurementsSgix = 0x8181;
auto constexpr kOpenGLInt = 0x1404;
auto constexpr kOpenGLInt16Nv = 0x8FE4;
auto constexpr kOpenGLInt16Vec2Nv = 0x8FE5;
auto constexpr kOpenGLInt16Vec3Nv = 0x8FE6;
auto constexpr kOpenGLInt16Vec4Nv = 0x8FE7;
auto constexpr kOpenGLInt64Arb = 0x140E;
auto constexpr kOpenGLInt64Nv = 0x140E;
auto constexpr kOpenGLInt64Vec2Arb = 0x8FE9;
auto constexpr kOpenGLInt64Vec2Nv = 0x8FE9;
auto constexpr kOpenGLInt64Vec3Arb = 0x8FEA;
auto constexpr kOpenGLInt64Vec3Nv = 0x8FEA;
auto constexpr kOpenGLInt64Vec4Arb = 0x8FEB;
auto constexpr kOpenGLInt64Vec4Nv = 0x8FEB;
auto constexpr kOpenGLInt8Nv = 0x8FE0;
auto constexpr kOpenGLInt8Vec2Nv = 0x8FE1;
auto constexpr kOpenGLInt8Vec3Nv = 0x8FE2;
auto constexpr kOpenGLInt8Vec4Nv = 0x8FE3;
auto constexpr kOpenGLInt1010102Oes = 0x8DF7;
auto constexpr kOpenGLInt2101010Rev = 0x8D9F;
auto constexpr kOpenGLIntImage1d = 0x9057;
auto constexpr kOpenGLIntImage1dArray = 0x905D;
auto constexpr kOpenGLIntImage1dArrayExt = 0x905D;
auto constexpr kOpenGLIntImage1dExt = 0x9057;
auto constexpr kOpenGLIntImage2d = 0x9058;
auto constexpr kOpenGLIntImage2dArray = 0x905E;
auto constexpr kOpenGLIntImage2dArrayExt = 0x905E;
auto constexpr kOpenGLIntImage2dExt = 0x9058;
auto constexpr kOpenGLIntImage2dMultisample = 0x9060;
auto constexpr kOpenGLIntImage2dMultisampleArray = 0x9061;
auto constexpr kOpenGLIntImage2dMultisampleArrayExt = 0x9061;
auto constexpr kOpenGLIntImage2dMultisampleExt = 0x9060;
auto constexpr kOpenGLIntImage2dRect = 0x905A;
auto constexpr kOpenGLIntImage2dRectExt = 0x905A;
auto constexpr kOpenGLIntImage3d = 0x9059;
auto constexpr kOpenGLIntImage3dExt = 0x9059;
auto constexpr kOpenGLIntImageBuffer = 0x905C;
auto constexpr kOpenGLIntImageBufferExt = 0x905C;
auto constexpr kOpenGLIntImageBufferOes = 0x905C;
auto constexpr kOpenGLIntImageCube = 0x905B;
auto constexpr kOpenGLIntImageCubeExt = 0x905B;
auto constexpr kOpenGLIntImageCubeMapArray = 0x905F;
auto constexpr kOpenGLIntImageCubeMapArrayExt = 0x905F;
auto constexpr kOpenGLIntImageCubeMapArrayOes = 0x905F;
auto constexpr kOpenGLIntSampler1d = 0x8DC9;
auto constexpr kOpenGLIntSampler1dArray = 0x8DCE;
auto constexpr kOpenGLIntSampler1dArrayExt = 0x8DCE;
auto constexpr kOpenGLIntSampler1dExt = 0x8DC9;
auto constexpr kOpenGLIntSampler2d = 0x8DCA;
auto constexpr kOpenGLIntSampler2dArray = 0x8DCF;
auto constexpr kOpenGLIntSampler2dArrayExt = 0x8DCF;
auto constexpr kOpenGLIntSampler2dExt = 0x8DCA;
auto constexpr kOpenGLIntSampler2dMultisample = 0x9109;
auto constexpr kOpenGLIntSampler2dMultisampleArray = 0x910C;
auto constexpr kOpenGLIntSampler2dMultisampleArrayOes = 0x910C;
auto constexpr kOpenGLIntSampler2dRect = 0x8DCD;
auto constexpr kOpenGLIntSampler2dRectExt = 0x8DCD;
auto constexpr kOpenGLIntSampler3d = 0x8DCB;
auto constexpr kOpenGLIntSampler3dExt = 0x8DCB;
auto constexpr kOpenGLIntSamplerBuffer = 0x8DD0;
auto constexpr kOpenGLIntSamplerBufferAmd = 0x9002;
auto constexpr kOpenGLIntSamplerBufferExt = 0x8DD0;
auto constexpr kOpenGLIntSamplerBufferOes = 0x8DD0;
auto constexpr kOpenGLIntSamplerCube = 0x8DCC;
auto constexpr kOpenGLIntSamplerCubeExt = 0x8DCC;
auto constexpr kOpenGLIntSamplerCubeMapArray = 0x900E;
auto constexpr kOpenGLIntSamplerCubeMapArrayArb = 0x900E;
auto constexpr kOpenGLIntSamplerCubeMapArrayExt = 0x900E;
auto constexpr kOpenGLIntSamplerCubeMapArrayOes = 0x900E;
auto constexpr kOpenGLIntSamplerRenderbufferNv = 0x8E57;
auto constexpr kOpenGLIntVec2 = 0x8B53;
auto constexpr kOpenGLIntVec2Arb = 0x8B53;
auto constexpr kOpenGLIntVec3 = 0x8B54;
auto constexpr kOpenGLIntVec3Arb = 0x8B54;
auto constexpr kOpenGLIntVec4 = 0x8B55;
auto constexpr kOpenGLIntVec4Arb = 0x8B55;
auto constexpr kOpenGLIntensity = 0x8049;
auto constexpr kOpenGLIntensity12 = 0x804C;
auto constexpr kOpenGLIntensity12Ext = 0x804C;
auto constexpr kOpenGLIntensity16 = 0x804D;
auto constexpr kOpenGLIntensity16Ext = 0x804D;
auto constexpr kOpenGLIntensity16Snorm = 0x901B;
auto constexpr kOpenGLIntensity16fArb = 0x881D;
auto constexpr kOpenGLIntensity16iExt = 0x8D8B;
auto constexpr kOpenGLIntensity16uiExt = 0x8D79;
auto constexpr kOpenGLIntensity32fArb = 0x8817;
auto constexpr kOpenGLIntensity32iExt = 0x8D85;
auto constexpr kOpenGLIntensity32uiExt = 0x8D73;
auto constexpr kOpenGLIntensity4 = 0x804A;
auto constexpr kOpenGLIntensity4Ext = 0x804A;
auto constexpr kOpenGLIntensity8 = 0x804B;
auto constexpr kOpenGLIntensity8Ext = 0x804B;
auto constexpr kOpenGLIntensity8Snorm = 0x9017;
auto constexpr kOpenGLIntensity8iExt = 0x8D91;
auto constexpr kOpenGLIntensity8uiExt = 0x8D7F;
auto constexpr kOpenGLIntensityExt = 0x8049;
auto constexpr kOpenGLIntensityFloat16Apple = 0x881D;
auto constexpr kOpenGLIntensityFloat16Ati = 0x881D;
auto constexpr kOpenGLIntensityFloat32Apple = 0x8817;
auto constexpr kOpenGLIntensityFloat32Ati = 0x8817;
auto constexpr kOpenGLIntensitySnorm = 0x9013;
auto constexpr kOpenGLInterlaceOml = 0x8980;
auto constexpr kOpenGLInterlaceReadIngr = 0x8568;
auto constexpr kOpenGLInterlaceReadOml = 0x8981;
auto constexpr kOpenGLInterlaceSgix = 0x8094;
auto constexpr kOpenGLInterleavedAttribs = 0x8C8C;
auto constexpr kOpenGLInterleavedAttribsExt = 0x8C8C;
auto constexpr kOpenGLInterleavedAttribsNv = 0x8C8C;
auto constexpr kOpenGLInternalformatAlphaSize = 0x8274;
auto constexpr kOpenGLInternalformatAlphaType = 0x827B;
auto constexpr kOpenGLInternalformatBlueSize = 0x8273;
auto constexpr kOpenGLInternalformatBlueType = 0x827A;
auto constexpr kOpenGLInternalformatDepthSize = 0x8275;
auto constexpr kOpenGLInternalformatDepthType = 0x827C;
auto constexpr kOpenGLInternalformatGreenSize = 0x8272;
auto constexpr kOpenGLInternalformatGreenType = 0x8279;
auto constexpr kOpenGLInternalformatPreferred = 0x8270;
auto constexpr kOpenGLInternalformatRedSize = 0x8271;
auto constexpr kOpenGLInternalformatRedType = 0x8278;
auto constexpr kOpenGLInternalformatSharedSize = 0x8277;
auto constexpr kOpenGLInternalformatStencilSize = 0x8276;
auto constexpr kOpenGLInternalformatStencilType = 0x827D;
auto constexpr kOpenGLInternalformatSupported = 0x826F;
auto constexpr kOpenGLInterpolate = 0x8575;
auto constexpr kOpenGLInterpolateArb = 0x8575;
auto constexpr kOpenGLInterpolateExt = 0x8575;
auto constexpr kOpenGLInvalidEnum = 0x0500;
auto constexpr kOpenGLInvalidFramebufferOperation = 0x0506;
auto constexpr kOpenGLInvalidFramebufferOperationExt = 0x0506;
auto constexpr kOpenGLInvalidFramebufferOperationOes = 0x0506;
auto constexpr kOpenGLInvalidIndex = 0xFFFFFFFF;
auto constexpr kOpenGLInvalidOperation = 0x0502;
auto constexpr kOpenGLInvalidValue = 0x0501;
auto constexpr kOpenGLInvariantDatatypeExt = 0x87EB;
auto constexpr kOpenGLInvariantExt = 0x87C2;
auto constexpr kOpenGLInvariantValueExt = 0x87EA;
auto constexpr kOpenGLInverseNv = 0x862B;
auto constexpr kOpenGLInverseTransposeNv = 0x862D;
auto constexpr kOpenGLInvert = 0x150A;
auto constexpr kOpenGLInvertOvgNv = 0x92B4;
auto constexpr kOpenGLInvertRgbNv = 0x92A3;
auto constexpr kOpenGLInvertedScreenWRend = 0x8491;
auto constexpr kOpenGLIrInstrument1Sgix = 0x817F;
auto constexpr kOpenGLIsPerPatch = 0x92E7;
auto constexpr kOpenGLIsPerPatchExt = 0x92E7;
auto constexpr kOpenGLIsPerPatchOes = 0x92E7;
auto constexpr kOpenGLIsRowMajor = 0x9300;
auto constexpr kOpenGLIsolines = 0x8E7A;
auto constexpr kOpenGLIsolinesExt = 0x8E7A;
auto constexpr kOpenGLIsolinesOes = 0x8E7A;
auto constexpr kOpenGLItalicBitNv = 0x02;
auto constexpr kOpenGLIuiN3fV2fExt = 0x81AF;
auto constexpr kOpenGLIuiN3fV3fExt = 0x81B0;
auto constexpr kOpenGLIuiV2fExt = 0x81AD;
auto constexpr kOpenGLIuiV3fExt = 0x81AE;
auto constexpr kOpenGLKeep = 0x1E00;
auto constexpr kOpenGLLargeCcwArcToNv = 0x16;
auto constexpr kOpenGLLargeCwArcToNv = 0x18;
auto constexpr kOpenGLLastVertexConvention = 0x8E4E;
auto constexpr kOpenGLLastVertexConventionExt = 0x8E4E;
auto constexpr kOpenGLLastVertexConventionOes = 0x8E4E;
auto constexpr kOpenGLLastVideoCaptureStatusNv = 0x9027;
auto constexpr kOpenGLLayerNv = 0x8DAA;
auto constexpr kOpenGLLayerProvokingVertex = 0x825E;
auto constexpr kOpenGLLayerProvokingVertexExt = 0x825E;
auto constexpr kOpenGLLayerProvokingVertexOes = 0x825E;
auto constexpr kOpenGLLayoutColorAttachmentExt = 0x958E;
auto constexpr kOpenGLLayoutDefaultIntel = 0;
auto constexpr kOpenGLLayoutDepthAttachmentStencilReadOnlyExt = 0x9531;
auto constexpr kOpenGLLayoutDepthReadOnlyStencilAttachmentExt = 0x9530;
auto constexpr kOpenGLLayoutDepthStencilAttachmentExt = 0x958F;
auto constexpr kOpenGLLayoutDepthStencilReadOnlyExt = 0x9590;
auto constexpr kOpenGLLayoutGeneralExt = 0x958D;
auto constexpr kOpenGLLayoutLinearCpuCachedIntel = 2;
auto constexpr kOpenGLLayoutLinearIntel = 1;
auto constexpr kOpenGLLayoutShaderReadOnlyExt = 0x9591;
auto constexpr kOpenGLLayoutTransferDstExt = 0x9593;
auto constexpr kOpenGLLayoutTransferSrcExt = 0x9592;
auto constexpr kOpenGLLeft = 0x0406;
auto constexpr kOpenGLLequal = 0x0203;
auto constexpr kOpenGLLerpAti = 0x8969;
auto constexpr kOpenGLLess = 0x0201;
auto constexpr kOpenGLLgpuSeparateStorageBitNvx = 0x0800;
auto constexpr kOpenGLLight0 = 0x4000;
auto constexpr kOpenGLLight1 = 0x4001;
auto constexpr kOpenGLLight2 = 0x4002;
auto constexpr kOpenGLLight3 = 0x4003;
auto constexpr kOpenGLLight4 = 0x4004;
auto constexpr kOpenGLLight5 = 0x4005;
auto constexpr kOpenGLLight6 = 0x4006;
auto constexpr kOpenGLLight7 = 0x4007;
auto constexpr kOpenGLLightEnvModeSgix = 0x8407;
auto constexpr kOpenGLLightModelAmbient = 0x0B53;
auto constexpr kOpenGLLightModelColorControl = 0x81F8;
auto constexpr kOpenGLLightModelColorControlExt = 0x81F8;
auto constexpr kOpenGLLightModelLocalViewer = 0x0B51;
auto constexpr kOpenGLLightModelSpecularVectorApple = 0x85B0;
auto constexpr kOpenGLLightModelTwoSide = 0x0B52;
auto constexpr kOpenGLLighten = 0x9298;
auto constexpr kOpenGLLightenKhr = 0x9298;
auto constexpr kOpenGLLightenNv = 0x9298;
auto constexpr kOpenGLLighting = 0x0B50;
auto constexpr kOpenGLLightingBit = 0x00000040;
auto constexpr kOpenGLLine = 0x1B01;
auto constexpr kOpenGLLineBit = 0x00000004;
auto constexpr kOpenGLLineLoop = 0x0002;
auto constexpr kOpenGLLineNv = 0x1B01;
auto constexpr kOpenGLLineQualityHintSgix = 0x835B;
auto constexpr kOpenGLLineResetToken = 0x0707;
auto constexpr kOpenGLLineSmooth = 0x0B20;
auto constexpr kOpenGLLineSmoothHint = 0x0C52;
auto constexpr kOpenGLLineStipple = 0x0B24;
auto constexpr kOpenGLLineStipplePattern = 0x0B25;
auto constexpr kOpenGLLineStippleRepeat = 0x0B26;
auto constexpr kOpenGLLineStrip = 0x0003;
auto constexpr kOpenGLLineStripAdjacency = 0x000B;
auto constexpr kOpenGLLineStripAdjacencyArb = 0x000B;
auto constexpr kOpenGLLineStripAdjacencyExt = 0x000B;
auto constexpr kOpenGLLineStripAdjacencyOes = 0x000B;
auto constexpr kOpenGLLineToNv = 0x04;
auto constexpr kOpenGLLineToken = 0x0702;
auto constexpr kOpenGLLineWidth = 0x0B21;
auto constexpr kOpenGLLineWidthCommandNv = 0x000D;
auto constexpr kOpenGLLineWidthGranularity = 0x0B23;
auto constexpr kOpenGLLineWidthRange = 0x0B22;
auto constexpr kOpenGLLinear = 0x2601;
auto constexpr kOpenGLLinearAttenuation = 0x1208;
auto constexpr kOpenGLLinearClipmapLinearSgix = 0x8170;
auto constexpr kOpenGLLinearClipmapNearestSgix = 0x844F;
auto constexpr kOpenGLLinearDetailAlphaSgis = 0x8098;
auto constexpr kOpenGLLinearDetailColorSgis = 0x8099;
auto constexpr kOpenGLLinearDetailSgis = 0x8097;
auto constexpr kOpenGLLinearMipmapLinear = 0x2703;
auto constexpr kOpenGLLinearMipmapNearest = 0x2701;
auto constexpr kOpenGLLinearSharpenAlphaSgis = 0x80AE;
auto constexpr kOpenGLLinearSharpenColorSgis = 0x80AF;
auto constexpr kOpenGLLinearSharpenSgis = 0x80AD;
auto constexpr kOpenGLLinearTilingExt = 0x9585;
auto constexpr kOpenGLLinearburnNv = 0x92A5;
auto constexpr kOpenGLLineardodgeNv = 0x92A4;
auto constexpr kOpenGLLinearlightNv = 0x92A7;
auto constexpr kOpenGLLines = 0x0001;
auto constexpr kOpenGLLinesAdjacency = 0x000A;
auto constexpr kOpenGLLinesAdjacencyArb = 0x000A;
auto constexpr kOpenGLLinesAdjacencyExt = 0x000A;
auto constexpr kOpenGLLinesAdjacencyOes = 0x000A;
auto constexpr kOpenGLLinkStatus = 0x8B82;
auto constexpr kOpenGLListBase = 0x0B32;
auto constexpr kOpenGLListBit = 0x00020000;
auto constexpr kOpenGLListIndex = 0x0B33;
auto constexpr kOpenGLListMode = 0x0B30;
auto constexpr kOpenGLListPrioritySgix = 0x8182;
auto constexpr kOpenGLLoBiasNv = 0x8715;
auto constexpr kOpenGLLoScaleNv = 0x870F;
auto constexpr kOpenGLLoad = 0x0101;
auto constexpr kOpenGLLocalConstantDatatypeExt = 0x87ED;
auto constexpr kOpenGLLocalConstantExt = 0x87C3;
auto constexpr kOpenGLLocalConstantValueExt = 0x87EC;
auto constexpr kOpenGLLocalExt = 0x87C4;
auto constexpr kOpenGLLocation = 0x930E;
auto constexpr kOpenGLLocationComponent = 0x934A;
auto constexpr kOpenGLLocationIndex = 0x930F;
auto constexpr kOpenGLLocationIndexExt = 0x930F;
auto constexpr kOpenGLLogicOp = 0x0BF1;
auto constexpr kOpenGLLogicOpMode = 0x0BF0;
auto constexpr kOpenGLLoseContextOnReset = 0x8252;
auto constexpr kOpenGLLoseContextOnResetArb = 0x8252;
auto constexpr kOpenGLLoseContextOnResetExt = 0x8252;
auto constexpr kOpenGLLoseContextOnResetKhr = 0x8252;
auto constexpr kOpenGLLowFloat = 0x8DF0;
auto constexpr kOpenGLLowInt = 0x8DF3;
auto constexpr kOpenGLLowerLeft = 0x8CA1;
auto constexpr kOpenGLLowerLeftExt = 0x8CA1;
auto constexpr kOpenGLLuidSizeExt = 8;
auto constexpr kOpenGLLuminance = 0x1909;
auto constexpr kOpenGLLuminance12 = 0x8041;
auto constexpr kOpenGLLuminance12Alpha12 = 0x8047;
auto constexpr kOpenGLLuminance12Alpha12Ext = 0x8047;
auto constexpr kOpenGLLuminance12Alpha4 = 0x8046;
auto constexpr kOpenGLLuminance12Alpha4Ext = 0x8046;
auto constexpr kOpenGLLuminance12Ext = 0x8041;
auto constexpr kOpenGLLuminance16 = 0x8042;
auto constexpr kOpenGLLuminance16Alpha16 = 0x8048;
auto constexpr kOpenGLLuminance16Alpha16Ext = 0x8048;
auto constexpr kOpenGLLuminance16Alpha16Snorm = 0x901A;
auto constexpr kOpenGLLuminance16Ext = 0x8042;
auto constexpr kOpenGLLuminance16Snorm = 0x9019;
auto constexpr kOpenGLLuminance16fArb = 0x881E;
auto constexpr kOpenGLLuminance16fExt = 0x881E;
auto constexpr kOpenGLLuminance16iExt = 0x8D8C;
auto constexpr kOpenGLLuminance16uiExt = 0x8D7A;
auto constexpr kOpenGLLuminance32fArb = 0x8818;
auto constexpr kOpenGLLuminance32fExt = 0x8818;
auto constexpr kOpenGLLuminance32iExt = 0x8D86;
auto constexpr kOpenGLLuminance32uiExt = 0x8D74;
auto constexpr kOpenGLLuminance4 = 0x803F;
auto constexpr kOpenGLLuminance4Alpha4 = 0x8043;
auto constexpr kOpenGLLuminance4Alpha4Ext = 0x8043;
auto constexpr kOpenGLLuminance4Alpha4Oes = 0x8043;
auto constexpr kOpenGLLuminance4Ext = 0x803F;
auto constexpr kOpenGLLuminance6Alpha2 = 0x8044;
auto constexpr kOpenGLLuminance6Alpha2Ext = 0x8044;
auto constexpr kOpenGLLuminance8 = 0x8040;
auto constexpr kOpenGLLuminance8Alpha8 = 0x8045;
auto constexpr kOpenGLLuminance8Alpha8Ext = 0x8045;
auto constexpr kOpenGLLuminance8Alpha8Oes = 0x8045;
auto constexpr kOpenGLLuminance8Alpha8Snorm = 0x9016;
auto constexpr kOpenGLLuminance8Ext = 0x8040;
auto constexpr kOpenGLLuminance8Oes = 0x8040;
auto constexpr kOpenGLLuminance8Snorm = 0x9015;
auto constexpr kOpenGLLuminance8iExt = 0x8D92;
auto constexpr kOpenGLLuminance8uiExt = 0x8D80;
auto constexpr kOpenGLLuminanceAlpha = 0x190A;
auto constexpr kOpenGLLuminanceAlpha16fArb = 0x881F;
auto constexpr kOpenGLLuminanceAlpha16fExt = 0x881F;
auto constexpr kOpenGLLuminanceAlpha16iExt = 0x8D8D;
auto constexpr kOpenGLLuminanceAlpha16uiExt = 0x8D7B;
auto constexpr kOpenGLLuminanceAlpha32fArb = 0x8819;
auto constexpr kOpenGLLuminanceAlpha32fExt = 0x8819;
auto constexpr kOpenGLLuminanceAlpha32iExt = 0x8D87;
auto constexpr kOpenGLLuminanceAlpha32uiExt = 0x8D75;
auto constexpr kOpenGLLuminanceAlpha8iExt = 0x8D93;
auto constexpr kOpenGLLuminanceAlpha8uiExt = 0x8D81;
auto constexpr kOpenGLLuminanceAlphaFloat16Apple = 0x881F;
auto constexpr kOpenGLLuminanceAlphaFloat16Ati = 0x881F;
auto constexpr kOpenGLLuminanceAlphaFloat32Apple = 0x8819;
auto constexpr kOpenGLLuminanceAlphaFloat32Ati = 0x8819;
auto constexpr kOpenGLLuminanceAlphaIntegerExt = 0x8D9D;
auto constexpr kOpenGLLuminanceAlphaSnorm = 0x9012;
auto constexpr kOpenGLLuminanceFloat16Apple = 0x881E;
auto constexpr kOpenGLLuminanceFloat16Ati = 0x881E;
auto constexpr kOpenGLLuminanceFloat32Apple = 0x8818;
auto constexpr kOpenGLLuminanceFloat32Ati = 0x8818;
auto constexpr kOpenGLLuminanceIntegerExt = 0x8D9C;
auto constexpr kOpenGLLuminanceSnorm = 0x9011;
auto constexpr kOpenGLMadAti = 0x8968;
auto constexpr kOpenGLMagnitudeBiasNv = 0x8718;
auto constexpr kOpenGLMagnitudeScaleNv = 0x8712;
auto constexpr kOpenGLMajorVersion = 0x821B;
auto constexpr kOpenGLMaliProgramBinaryArm = 0x8F61;
auto constexpr kOpenGLMaliShaderBinaryArm = 0x8F60;
auto constexpr kOpenGLManualGenerateMipmap = 0x8294;
auto constexpr kOpenGLMap1BinormalExt = 0x8446;
auto constexpr kOpenGLMap1Color4 = 0x0D90;
auto constexpr kOpenGLMap1GridDomain = 0x0DD0;
auto constexpr kOpenGLMap1GridSegments = 0x0DD1;
auto constexpr kOpenGLMap1Index = 0x0D91;
auto constexpr kOpenGLMap1Normal = 0x0D92;
auto constexpr kOpenGLMap1TangentExt = 0x8444;
auto constexpr kOpenGLMap1TextureCoord1 = 0x0D93;
auto constexpr kOpenGLMap1TextureCoord2 = 0x0D94;
auto constexpr kOpenGLMap1TextureCoord3 = 0x0D95;
auto constexpr kOpenGLMap1TextureCoord4 = 0x0D96;
auto constexpr kOpenGLMap1Vertex3 = 0x0D97;
auto constexpr kOpenGLMap1Vertex4 = 0x0D98;
auto constexpr kOpenGLMap1VertexAttrib04Nv = 0x8660;
auto constexpr kOpenGLMap1VertexAttrib104Nv = 0x866A;
auto constexpr kOpenGLMap1VertexAttrib114Nv = 0x866B;
auto constexpr kOpenGLMap1VertexAttrib124Nv = 0x866C;
auto constexpr kOpenGLMap1VertexAttrib134Nv = 0x866D;
auto constexpr kOpenGLMap1VertexAttrib144Nv = 0x866E;
auto constexpr kOpenGLMap1VertexAttrib154Nv = 0x866F;
auto constexpr kOpenGLMap1VertexAttrib14Nv = 0x8661;
auto constexpr kOpenGLMap1VertexAttrib24Nv = 0x8662;
auto constexpr kOpenGLMap1VertexAttrib34Nv = 0x8663;
auto constexpr kOpenGLMap1VertexAttrib44Nv = 0x8664;
auto constexpr kOpenGLMap1VertexAttrib54Nv = 0x8665;
auto constexpr kOpenGLMap1VertexAttrib64Nv = 0x8666;
auto constexpr kOpenGLMap1VertexAttrib74Nv = 0x8667;
auto constexpr kOpenGLMap1VertexAttrib84Nv = 0x8668;
auto constexpr kOpenGLMap1VertexAttrib94Nv = 0x8669;
auto constexpr kOpenGLMap2BinormalExt = 0x8447;
auto constexpr kOpenGLMap2Color4 = 0x0DB0;
auto constexpr kOpenGLMap2GridDomain = 0x0DD2;
auto constexpr kOpenGLMap2GridSegments = 0x0DD3;
auto constexpr kOpenGLMap2Index = 0x0DB1;
auto constexpr kOpenGLMap2Normal = 0x0DB2;
auto constexpr kOpenGLMap2TangentExt = 0x8445;
auto constexpr kOpenGLMap2TextureCoord1 = 0x0DB3;
auto constexpr kOpenGLMap2TextureCoord2 = 0x0DB4;
auto constexpr kOpenGLMap2TextureCoord3 = 0x0DB5;
auto constexpr kOpenGLMap2TextureCoord4 = 0x0DB6;
auto constexpr kOpenGLMap2Vertex3 = 0x0DB7;
auto constexpr kOpenGLMap2Vertex4 = 0x0DB8;
auto constexpr kOpenGLMap2VertexAttrib04Nv = 0x8670;
auto constexpr kOpenGLMap2VertexAttrib104Nv = 0x867A;
auto constexpr kOpenGLMap2VertexAttrib114Nv = 0x867B;
auto constexpr kOpenGLMap2VertexAttrib124Nv = 0x867C;
auto constexpr kOpenGLMap2VertexAttrib134Nv = 0x867D;
auto constexpr kOpenGLMap2VertexAttrib144Nv = 0x867E;
auto constexpr kOpenGLMap2VertexAttrib154Nv = 0x867F;
auto constexpr kOpenGLMap2VertexAttrib14Nv = 0x8671;
auto constexpr kOpenGLMap2VertexAttrib24Nv = 0x8672;
auto constexpr kOpenGLMap2VertexAttrib34Nv = 0x8673;
auto constexpr kOpenGLMap2VertexAttrib44Nv = 0x8674;
auto constexpr kOpenGLMap2VertexAttrib54Nv = 0x8675;
auto constexpr kOpenGLMap2VertexAttrib64Nv = 0x8676;
auto constexpr kOpenGLMap2VertexAttrib74Nv = 0x8677;
auto constexpr kOpenGLMap2VertexAttrib84Nv = 0x8678;
auto constexpr kOpenGLMap2VertexAttrib94Nv = 0x8679;
auto constexpr kOpenGLMapAttribUOrderNv = 0x86C3;
auto constexpr kOpenGLMapAttribVOrderNv = 0x86C4;
auto constexpr kOpenGLMapCoherentBit = 0x0080;
auto constexpr kOpenGLMapCoherentBitExt = 0x0080;
auto constexpr kOpenGLMapColor = 0x0D10;
auto constexpr kOpenGLMapFlushExplicitBit = 0x0010;
auto constexpr kOpenGLMapFlushExplicitBitExt = 0x0010;
auto constexpr kOpenGLMapInvalidateBufferBit = 0x0008;
auto constexpr kOpenGLMapInvalidateBufferBitExt = 0x0008;
auto constexpr kOpenGLMapInvalidateRangeBit = 0x0004;
auto constexpr kOpenGLMapInvalidateRangeBitExt = 0x0004;
auto constexpr kOpenGLMapPersistentBit = 0x0040;
auto constexpr kOpenGLMapPersistentBitExt = 0x0040;
auto constexpr kOpenGLMapReadBit = 0x0001;
auto constexpr kOpenGLMapReadBitExt = 0x0001;
auto constexpr kOpenGLMapStencil = 0x0D11;
auto constexpr kOpenGLMapTessellationNv = 0x86C2;
auto constexpr kOpenGLMapUnsynchronizedBit = 0x0020;
auto constexpr kOpenGLMapUnsynchronizedBitExt = 0x0020;
auto constexpr kOpenGLMapWriteBit = 0x0002;
auto constexpr kOpenGLMapWriteBitExt = 0x0002;
auto constexpr kOpenGLMatAmbientAndDiffuseBitPgi = 0x00200000;
auto constexpr kOpenGLMatAmbientBitPgi = 0x00100000;
auto constexpr kOpenGLMatColorIndexesBitPgi = 0x01000000;
auto constexpr kOpenGLMatDiffuseBitPgi = 0x00400000;
auto constexpr kOpenGLMatEmissionBitPgi = 0x00800000;
auto constexpr kOpenGLMatShininessBitPgi = 0x02000000;
auto constexpr kOpenGLMatSpecularBitPgi = 0x04000000;
auto constexpr kOpenGLMaterialSideHintPgi = 0x1A22C;
auto constexpr kOpenGLMatrix0Arb = 0x88C0;
auto constexpr kOpenGLMatrix0Nv = 0x8630;
auto constexpr kOpenGLMatrix10Arb = 0x88CA;
auto constexpr kOpenGLMatrix11Arb = 0x88CB;
auto constexpr kOpenGLMatrix12Arb = 0x88CC;
auto constexpr kOpenGLMatrix13Arb = 0x88CD;
auto constexpr kOpenGLMatrix14Arb = 0x88CE;
auto constexpr kOpenGLMatrix15Arb = 0x88CF;
auto constexpr kOpenGLMatrix16Arb = 0x88D0;
auto constexpr kOpenGLMatrix17Arb = 0x88D1;
auto constexpr kOpenGLMatrix18Arb = 0x88D2;
auto constexpr kOpenGLMatrix19Arb = 0x88D3;
auto constexpr kOpenGLMatrix1Arb = 0x88C1;
auto constexpr kOpenGLMatrix1Nv = 0x8631;
auto constexpr kOpenGLMatrix20Arb = 0x88D4;
auto constexpr kOpenGLMatrix21Arb = 0x88D5;
auto constexpr kOpenGLMatrix22Arb = 0x88D6;
auto constexpr kOpenGLMatrix23Arb = 0x88D7;
auto constexpr kOpenGLMatrix24Arb = 0x88D8;
auto constexpr kOpenGLMatrix25Arb = 0x88D9;
auto constexpr kOpenGLMatrix26Arb = 0x88DA;
auto constexpr kOpenGLMatrix27Arb = 0x88DB;
auto constexpr kOpenGLMatrix28Arb = 0x88DC;
auto constexpr kOpenGLMatrix29Arb = 0x88DD;
auto constexpr kOpenGLMatrix2Arb = 0x88C2;
auto constexpr kOpenGLMatrix2Nv = 0x8632;
auto constexpr kOpenGLMatrix30Arb = 0x88DE;
auto constexpr kOpenGLMatrix31Arb = 0x88DF;
auto constexpr kOpenGLMatrix3Arb = 0x88C3;
auto constexpr kOpenGLMatrix3Nv = 0x8633;
auto constexpr kOpenGLMatrix4Arb = 0x88C4;
auto constexpr kOpenGLMatrix4Nv = 0x8634;
auto constexpr kOpenGLMatrix5Arb = 0x88C5;
auto constexpr kOpenGLMatrix5Nv = 0x8635;
auto constexpr kOpenGLMatrix6Arb = 0x88C6;
auto constexpr kOpenGLMatrix6Nv = 0x8636;
auto constexpr kOpenGLMatrix7Arb = 0x88C7;
auto constexpr kOpenGLMatrix7Nv = 0x8637;
auto constexpr kOpenGLMatrix8Arb = 0x88C8;
auto constexpr kOpenGLMatrix9Arb = 0x88C9;
auto constexpr kOpenGLMatrixExt = 0x87C0;
auto constexpr kOpenGLMatrixIndexArrayArb = 0x8844;
auto constexpr kOpenGLMatrixIndexArrayBufferBindingOes = 0x8B9E;
auto constexpr kOpenGLMatrixIndexArrayOes = 0x8844;
auto constexpr kOpenGLMatrixIndexArrayPointerArb = 0x8849;
auto constexpr kOpenGLMatrixIndexArrayPointerOes = 0x8849;
auto constexpr kOpenGLMatrixIndexArraySizeArb = 0x8846;
auto constexpr kOpenGLMatrixIndexArraySizeOes = 0x8846;
auto constexpr kOpenGLMatrixIndexArrayStrideArb = 0x8848;
auto constexpr kOpenGLMatrixIndexArrayStrideOes = 0x8848;
auto constexpr kOpenGLMatrixIndexArrayTypeArb = 0x8847;
auto constexpr kOpenGLMatrixIndexArrayTypeOes = 0x8847;
auto constexpr kOpenGLMatrixMode = 0x0BA0;
auto constexpr kOpenGLMatrixPaletteArb = 0x8840;
auto constexpr kOpenGLMatrixPaletteOes = 0x8840;
auto constexpr kOpenGLMatrixStride = 0x92FF;
auto constexpr kOpenGLMax = 0x8008;
auto constexpr kOpenGLMax3dTextureSize = 0x8073;
auto constexpr kOpenGLMax3dTextureSizeExt = 0x8073;
auto constexpr kOpenGLMax3dTextureSizeOes = 0x8073;
auto constexpr kOpenGLMax4dTextureSizeSgis = 0x8138;
auto constexpr kOpenGLMaxActiveLightsSgix = 0x8405;
auto constexpr kOpenGLMaxArrayTextureLayers = 0x88FF;
auto constexpr kOpenGLMaxArrayTextureLayersExt = 0x88FF;
auto constexpr kOpenGLMaxAsyncDrawPixelsSgix = 0x8360;
auto constexpr kOpenGLMaxAsyncHistogramSgix = 0x832D;
auto constexpr kOpenGLMaxAsyncReadPixelsSgix = 0x8361;
auto constexpr kOpenGLMaxAsyncTexImageSgix = 0x835F;
auto constexpr kOpenGLMaxAtomicCounterBufferBindings = 0x92DC;
auto constexpr kOpenGLMaxAtomicCounterBufferSize = 0x92D8;
auto constexpr kOpenGLMaxAttribStackDepth = 0x0D35;
auto constexpr kOpenGLMaxBindableUniformSizeExt = 0x8DED;
auto constexpr kOpenGLMaxClientAttribStackDepth = 0x0D3B;
auto constexpr kOpenGLMaxClipDistances = 0x0D32;
auto constexpr kOpenGLMaxClipDistancesApple = 0x0D32;
auto constexpr kOpenGLMaxClipDistancesExt = 0x0D32;
auto constexpr kOpenGLMaxClipPlanes = 0x0D32;
auto constexpr kOpenGLMaxClipPlanesImg = 0x0D32;
auto constexpr kOpenGLMaxClipmapDepthSgix = 0x8177;
auto constexpr kOpenGLMaxClipmapVirtualDepthSgix = 0x8178;
auto constexpr kOpenGLMaxCoarseFragmentSamplesNv = 0x955F;
auto constexpr kOpenGLMaxColorAttachments = 0x8CDF;
auto constexpr kOpenGLMaxColorAttachmentsExt = 0x8CDF;
auto constexpr kOpenGLMaxColorAttachmentsNv = 0x8CDF;
auto constexpr kOpenGLMaxColorFramebufferSamplesAmd = 0x91B3;
auto constexpr kOpenGLMaxColorFramebufferStorageSamplesAmd = 0x91B4;
auto constexpr kOpenGLMaxColorMatrixStackDepth = 0x80B3;
auto constexpr kOpenGLMaxColorMatrixStackDepthSgi = 0x80B3;
auto constexpr kOpenGLMaxColorTextureSamples = 0x910E;
auto constexpr kOpenGLMaxCombinedAtomicCounterBuffers = 0x92D1;
auto constexpr kOpenGLMaxCombinedAtomicCounters = 0x92D7;
auto constexpr kOpenGLMaxCombinedClipAndCullDistances = 0x82FA;
auto constexpr kOpenGLMaxCombinedClipAndCullDistancesExt = 0x82FA;
auto constexpr kOpenGLMaxCombinedComputeUniformComponents = 0x8266;
auto constexpr kOpenGLMaxCombinedDimensions = 0x8282;
auto constexpr kOpenGLMaxCombinedFragmentUniformComponents = 0x8A33;
auto constexpr kOpenGLMaxCombinedGeometryUniformComponents = 0x8A32;
auto constexpr kOpenGLMaxCombinedGeometryUniformComponentsExt = 0x8A32;
auto constexpr kOpenGLMaxCombinedGeometryUniformComponentsOes = 0x8A32;
auto constexpr kOpenGLMaxCombinedImageUniforms = 0x90CF;
auto constexpr kOpenGLMaxCombinedImageUnitsAndFragmentOutputs = 0x8F39;
auto constexpr kOpenGLMaxCombinedImageUnitsAndFragmentOutputsExt = 0x8F39;
auto constexpr kOpenGLMaxCombinedMeshUniformComponentsNv = 0x8E67;
auto constexpr kOpenGLMaxCombinedShaderOutputResources = 0x8F39;
auto constexpr kOpenGLMaxCombinedShaderStorageBlocks = 0x90DC;
auto constexpr kOpenGLMaxCombinedTaskUniformComponentsNv = 0x8E6F;
auto constexpr kOpenGLMaxCombinedTessControlUniformComponents = 0x8E1E;
auto constexpr kOpenGLMaxCombinedTessControlUniformComponentsExt = 0x8E1E;
auto constexpr kOpenGLMaxCombinedTessControlUniformComponentsOes = 0x8E1E;
auto constexpr kOpenGLMaxCombinedTessEvaluationUniformComponents = 0x8E1F;
auto constexpr kOpenGLMaxCombinedTessEvaluationUniformComponentsExt = 0x8E1F;
auto constexpr kOpenGLMaxCombinedTessEvaluationUniformComponentsOes = 0x8E1F;
auto constexpr kOpenGLMaxCombinedTextureImageUnits = 0x8B4D;
auto constexpr kOpenGLMaxCombinedTextureImageUnitsArb = 0x8B4D;
auto constexpr kOpenGLMaxCombinedUniformBlocks = 0x8A2E;
auto constexpr kOpenGLMaxCombinedVertexUniformComponents = 0x8A31;
auto constexpr kOpenGLMaxComputeAtomicCounterBuffers = 0x8264;
auto constexpr kOpenGLMaxComputeAtomicCounters = 0x8265;
auto constexpr kOpenGLMaxComputeFixedGroupInvocationsArb = 0x90EB;
auto constexpr kOpenGLMaxComputeFixedGroupSizeArb = 0x91BF;
auto constexpr kOpenGLMaxComputeImageUniforms = 0x91BD;
auto constexpr kOpenGLMaxComputeShaderStorageBlocks = 0x90DB;
auto constexpr kOpenGLMaxComputeSharedMemorySize = 0x8262;
auto constexpr kOpenGLMaxComputeTextureImageUnits = 0x91BC;
auto constexpr kOpenGLMaxComputeUniformBlocks = 0x91BB;
auto constexpr kOpenGLMaxComputeUniformComponents = 0x8263;
auto constexpr kOpenGLMaxComputeVariableGroupInvocationsArb = 0x9344;
auto constexpr kOpenGLMaxComputeVariableGroupSizeArb = 0x9345;
auto constexpr kOpenGLMaxComputeWorkGroupCount = 0x91BE;
auto constexpr kOpenGLMaxComputeWorkGroupInvocations = 0x90EB;
auto constexpr kOpenGLMaxComputeWorkGroupSize = 0x91BF;
auto constexpr kOpenGLMaxConvolutionHeight = 0x801B;
auto constexpr kOpenGLMaxConvolutionHeightExt = 0x801B;
auto constexpr kOpenGLMaxConvolutionWidth = 0x801A;
auto constexpr kOpenGLMaxConvolutionWidthExt = 0x801A;
auto constexpr kOpenGLMaxCubeMapTextureSize = 0x851C;
auto constexpr kOpenGLMaxCubeMapTextureSizeArb = 0x851C;
auto constexpr kOpenGLMaxCubeMapTextureSizeExt = 0x851C;
auto constexpr kOpenGLMaxCubeMapTextureSizeOes = 0x851C;
auto constexpr kOpenGLMaxCullDistances = 0x82F9;
auto constexpr kOpenGLMaxCullDistancesExt = 0x82F9;
auto constexpr kOpenGLMaxDebugGroupStackDepth = 0x826C;
auto constexpr kOpenGLMaxDebugGroupStackDepthKhr = 0x826C;
auto constexpr kOpenGLMaxDebugLoggedMessages = 0x9144;
auto constexpr kOpenGLMaxDebugLoggedMessagesAmd = 0x9144;
auto constexpr kOpenGLMaxDebugLoggedMessagesArb = 0x9144;
auto constexpr kOpenGLMaxDebugLoggedMessagesKhr = 0x9144;
auto constexpr kOpenGLMaxDebugMessageLength = 0x9143;
auto constexpr kOpenGLMaxDebugMessageLengthAmd = 0x9143;
auto constexpr kOpenGLMaxDebugMessageLengthArb = 0x9143;
auto constexpr kOpenGLMaxDebugMessageLengthKhr = 0x9143;
auto constexpr kOpenGLMaxDeep3dTextureDepthNv = 0x90D1;
auto constexpr kOpenGLMaxDeep3dTextureWidthHeightNv = 0x90D0;
auto constexpr kOpenGLMaxDeformationOrderSgix = 0x8197;
auto constexpr kOpenGLMaxDepth = 0x8280;
auto constexpr kOpenGLMaxDepthStencilFramebufferSamplesAmd = 0x91B5;
auto constexpr kOpenGLMaxDepthTextureSamples = 0x910F;
auto constexpr kOpenGLMaxDetachedBuffersNv = 0x95AD;
auto constexpr kOpenGLMaxDetachedTexturesNv = 0x95AC;
auto constexpr kOpenGLMaxDrawBuffers = 0x8824;
auto constexpr kOpenGLMaxDrawBuffersArb = 0x8824;
auto constexpr kOpenGLMaxDrawBuffersAti = 0x8824;
auto constexpr kOpenGLMaxDrawBuffersExt = 0x8824;
auto constexpr kOpenGLMaxDrawBuffersNv = 0x8824;
auto constexpr kOpenGLMaxDrawMeshTasksCountNv = 0x953D;
auto constexpr kOpenGLMaxDualSourceDrawBuffers = 0x88FC;
auto constexpr kOpenGLMaxDualSourceDrawBuffersExt = 0x88FC;
auto constexpr kOpenGLMaxElementIndex = 0x8D6B;
auto constexpr kOpenGLMaxElementsIndices = 0x80E9;
auto constexpr kOpenGLMaxElementsIndicesExt = 0x80E9;
auto constexpr kOpenGLMaxElementsVertices = 0x80E8;
auto constexpr kOpenGLMaxElementsVerticesExt = 0x80E8;
auto constexpr kOpenGLMaxEvalOrder = 0x0D30;
auto constexpr kOpenGLMaxExt = 0x8008;
auto constexpr kOpenGLMaxFogFuncPointsSgis = 0x812C;
auto constexpr kOpenGLMaxFragmentAtomicCounterBuffers = 0x92D0;
auto constexpr kOpenGLMaxFragmentAtomicCounters = 0x92D6;
auto constexpr kOpenGLMaxFragmentBindableUniformsExt = 0x8DE3;
auto constexpr kOpenGLMaxFragmentImageUniforms = 0x90CE;
auto constexpr kOpenGLMaxFragmentInputComponents = 0x9125;
auto constexpr kOpenGLMaxFragmentInterpolationOffset = 0x8E5C;
auto constexpr kOpenGLMaxFragmentInterpolationOffsetNv = 0x8E5C;
auto constexpr kOpenGLMaxFragmentInterpolationOffsetOes = 0x8E5C;
auto constexpr kOpenGLMaxFragmentLightsSgix = 0x8404;
auto constexpr kOpenGLMaxFragmentProgramLocalParametersNv = 0x8868;
auto constexpr kOpenGLMaxFragmentShaderStorageBlocks = 0x90DA;
auto constexpr kOpenGLMaxFragmentShadingRateAttachmentLayersExt = 0x96DC;
auto constexpr kOpenGLMaxFragmentShadingRateAttachmentTexelAspectRatioExt = 0x96DB;
auto constexpr kOpenGLMaxFragmentShadingRateAttachmentTexelHeightExt = 0x96DA;
auto constexpr kOpenGLMaxFragmentShadingRateAttachmentTexelWidthExt = 0x96D8;
auto constexpr kOpenGLMaxFragmentUniformBlocks = 0x8A2D;
auto constexpr kOpenGLMaxFragmentUniformComponents = 0x8B49;
auto constexpr kOpenGLMaxFragmentUniformComponentsArb = 0x8B49;
auto constexpr kOpenGLMaxFragmentUniformVectors = 0x8DFD;
auto constexpr kOpenGLMaxFramebufferHeight = 0x9316;
auto constexpr kOpenGLMaxFramebufferLayers = 0x9317;
auto constexpr kOpenGLMaxFramebufferLayersExt = 0x9317;
auto constexpr kOpenGLMaxFramebufferLayersOes = 0x9317;
auto constexpr kOpenGLMaxFramebufferSamples = 0x9318;
auto constexpr kOpenGLMaxFramebufferWidth = 0x9315;
auto constexpr kOpenGLMaxFramezoomFactorSgix = 0x818D;
auto constexpr kOpenGLMaxGeneralCombinersNv = 0x854D;
auto constexpr kOpenGLMaxGeometryAtomicCounterBuffers = 0x92CF;
auto constexpr kOpenGLMaxGeometryAtomicCounterBuffersExt = 0x92CF;
auto constexpr kOpenGLMaxGeometryAtomicCounterBuffersOes = 0x92CF;
auto constexpr kOpenGLMaxGeometryAtomicCounters = 0x92D5;
auto constexpr kOpenGLMaxGeometryAtomicCountersExt = 0x92D5;
auto constexpr kOpenGLMaxGeometryAtomicCountersOes = 0x92D5;
auto constexpr kOpenGLMaxGeometryBindableUniformsExt = 0x8DE4;
auto constexpr kOpenGLMaxGeometryImageUniforms = 0x90CD;
auto constexpr kOpenGLMaxGeometryImageUniformsExt = 0x90CD;
auto constexpr kOpenGLMaxGeometryImageUniformsOes = 0x90CD;
auto constexpr kOpenGLMaxGeometryInputComponents = 0x9123;
auto constexpr kOpenGLMaxGeometryInputComponentsExt = 0x9123;
auto constexpr kOpenGLMaxGeometryInputComponentsOes = 0x9123;
auto constexpr kOpenGLMaxGeometryOutputComponents = 0x9124;
auto constexpr kOpenGLMaxGeometryOutputComponentsExt = 0x9124;
auto constexpr kOpenGLMaxGeometryOutputComponentsOes = 0x9124;
auto constexpr kOpenGLMaxGeometryOutputVertices = 0x8DE0;
auto constexpr kOpenGLMaxGeometryOutputVerticesArb = 0x8DE0;
auto constexpr kOpenGLMaxGeometryOutputVerticesExt = 0x8DE0;
auto constexpr kOpenGLMaxGeometryOutputVerticesOes = 0x8DE0;
auto constexpr kOpenGLMaxGeometryProgramInvocationsNv = 0x8E5A;
auto constexpr kOpenGLMaxGeometryShaderInvocations = 0x8E5A;
auto constexpr kOpenGLMaxGeometryShaderInvocationsExt = 0x8E5A;
auto constexpr kOpenGLMaxGeometryShaderInvocationsOes = 0x8E5A;
auto constexpr kOpenGLMaxGeometryShaderStorageBlocks = 0x90D7;
auto constexpr kOpenGLMaxGeometryShaderStorageBlocksExt = 0x90D7;
auto constexpr kOpenGLMaxGeometryShaderStorageBlocksOes = 0x90D7;
auto constexpr kOpenGLMaxGeometryTextureImageUnits = 0x8C29;
auto constexpr kOpenGLMaxGeometryTextureImageUnitsArb = 0x8C29;
auto constexpr kOpenGLMaxGeometryTextureImageUnitsExt = 0x8C29;
auto constexpr kOpenGLMaxGeometryTextureImageUnitsOes = 0x8C29;
auto constexpr kOpenGLMaxGeometryTotalOutputComponents = 0x8DE1;
auto constexpr kOpenGLMaxGeometryTotalOutputComponentsArb = 0x8DE1;
auto constexpr kOpenGLMaxGeometryTotalOutputComponentsExt = 0x8DE1;
auto constexpr kOpenGLMaxGeometryTotalOutputComponentsOes = 0x8DE1;
auto constexpr kOpenGLMaxGeometryUniformBlocks = 0x8A2C;
auto constexpr kOpenGLMaxGeometryUniformBlocksExt = 0x8A2C;
auto constexpr kOpenGLMaxGeometryUniformBlocksOes = 0x8A2C;
auto constexpr kOpenGLMaxGeometryUniformComponents = 0x8DDF;
auto constexpr kOpenGLMaxGeometryUniformComponentsArb = 0x8DDF;
auto constexpr kOpenGLMaxGeometryUniformComponentsExt = 0x8DDF;
auto constexpr kOpenGLMaxGeometryUniformComponentsOes = 0x8DDF;
auto constexpr kOpenGLMaxGeometryVaryingComponentsArb = 0x8DDD;
auto constexpr kOpenGLMaxGeometryVaryingComponentsExt = 0x8DDD;
auto constexpr kOpenGLMaxHeight = 0x827F;
auto constexpr kOpenGLMaxImageSamples = 0x906D;
auto constexpr kOpenGLMaxImageSamplesExt = 0x906D;
auto constexpr kOpenGLMaxImageUnits = 0x8F38;
auto constexpr kOpenGLMaxImageUnitsExt = 0x8F38;
auto constexpr kOpenGLMaxIntegerSamples = 0x9110;
auto constexpr kOpenGLMaxLabelLength = 0x82E8;
auto constexpr kOpenGLMaxLabelLengthKhr = 0x82E8;
auto constexpr kOpenGLMaxLayers = 0x8281;
auto constexpr kOpenGLMaxLgpuGpusNvx = 0x92BA;
auto constexpr kOpenGLMaxLights = 0x0D31;
auto constexpr kOpenGLMaxListNesting = 0x0B31;
auto constexpr kOpenGLMaxMapTessellationNv = 0x86D6;
auto constexpr kOpenGLMaxMatrixPaletteStackDepthArb = 0x8841;
auto constexpr kOpenGLMaxMeshAtomicCounterBuffersNv = 0x8E64;
auto constexpr kOpenGLMaxMeshAtomicCountersNv = 0x8E65;
auto constexpr kOpenGLMaxMeshImageUniformsNv = 0x8E62;
auto constexpr kOpenGLMaxMeshOutputPrimitivesNv = 0x9539;
auto constexpr kOpenGLMaxMeshOutputVerticesNv = 0x9538;
auto constexpr kOpenGLMaxMeshShaderStorageBlocksNv = 0x8E66;
auto constexpr kOpenGLMaxMeshTextureImageUnitsNv = 0x8E61;
auto constexpr kOpenGLMaxMeshTotalMemorySizeNv = 0x9536;
auto constexpr kOpenGLMaxMeshUniformBlocksNv = 0x8E60;
auto constexpr kOpenGLMaxMeshUniformComponentsNv = 0x8E63;
auto constexpr kOpenGLMaxMeshViewsNv = 0x9557;
auto constexpr kOpenGLMaxMeshWorkGroupInvocationsNv = 0x95A2;
auto constexpr kOpenGLMaxMeshWorkGroupSizeNv = 0x953B;
auto constexpr kOpenGLMaxModelviewStackDepth = 0x0D36;
auto constexpr kOpenGLMaxMultisampleCoverageModesNv = 0x8E11;
auto constexpr kOpenGLMaxMultiviewBuffersExt = 0x90F2;
auto constexpr kOpenGLMaxNameLength = 0x92F6;
auto constexpr kOpenGLMaxNameStackDepth = 0x0D37;
auto constexpr kOpenGLMaxNumActiveVariables = 0x92F7;
auto constexpr kOpenGLMaxNumCompatibleSubroutines = 0x92F8;
auto constexpr kOpenGLMaxOptimizedVertexShaderInstructionsExt = 0x87CA;
auto constexpr kOpenGLMaxOptimizedVertexShaderInvariantsExt = 0x87CD;
auto constexpr kOpenGLMaxOptimizedVertexShaderLocalConstantsExt = 0x87CC;
auto constexpr kOpenGLMaxOptimizedVertexShaderLocalsExt = 0x87CE;
auto constexpr kOpenGLMaxOptimizedVertexShaderVariantsExt = 0x87CB;
auto constexpr kOpenGLMaxPaletteMatricesArb = 0x8842;
auto constexpr kOpenGLMaxPaletteMatricesOes = 0x8842;
auto constexpr kOpenGLMaxPatchVertices = 0x8E7D;
auto constexpr kOpenGLMaxPatchVerticesExt = 0x8E7D;
auto constexpr kOpenGLMaxPatchVerticesOes = 0x8E7D;
auto constexpr kOpenGLMaxPixelMapTable = 0x0D34;
auto constexpr kOpenGLMaxPixelTransform2dStackDepthExt = 0x8337;
auto constexpr kOpenGLMaxPnTrianglesTesselationLevelAti = 0x87F1;
auto constexpr kOpenGLMaxProgramAddressRegistersArb = 0x88B1;
auto constexpr kOpenGLMaxProgramAluInstructionsArb = 0x880B;
auto constexpr kOpenGLMaxProgramAttribComponentsNv = 0x8908;
auto constexpr kOpenGLMaxProgramAttribsArb = 0x88AD;
auto constexpr kOpenGLMaxProgramCallDepthNv = 0x88F5;
auto constexpr kOpenGLMaxProgramEnvParametersArb = 0x88B5;
auto constexpr kOpenGLMaxProgramExecInstructionsNv = 0x88F4;
auto constexpr kOpenGLMaxProgramGenericAttribsNv = 0x8DA5;
auto constexpr kOpenGLMaxProgramGenericResultsNv = 0x8DA6;
auto constexpr kOpenGLMaxProgramIfDepthNv = 0x88F6;
auto constexpr kOpenGLMaxProgramInstructionsArb = 0x88A1;
auto constexpr kOpenGLMaxProgramLocalParametersArb = 0x88B4;
auto constexpr kOpenGLMaxProgramLoopCountNv = 0x88F8;
auto constexpr kOpenGLMaxProgramLoopDepthNv = 0x88F7;
auto constexpr kOpenGLMaxProgramMatricesArb = 0x862F;
auto constexpr kOpenGLMaxProgramMatrixStackDepthArb = 0x862E;
auto constexpr kOpenGLMaxProgramNativeAddressRegistersArb = 0x88B3;
auto constexpr kOpenGLMaxProgramNativeAluInstructionsArb = 0x880E;
auto constexpr kOpenGLMaxProgramNativeAttribsArb = 0x88AF;
auto constexpr kOpenGLMaxProgramNativeInstructionsArb = 0x88A3;
auto constexpr kOpenGLMaxProgramNativeParametersArb = 0x88AB;
auto constexpr kOpenGLMaxProgramNativeTemporariesArb = 0x88A7;
auto constexpr kOpenGLMaxProgramNativeTexIndirectionsArb = 0x8810;
auto constexpr kOpenGLMaxProgramNativeTexInstructionsArb = 0x880F;
auto constexpr kOpenGLMaxProgramOutputVerticesNv = 0x8C27;
auto constexpr kOpenGLMaxProgramParameterBufferBindingsNv = 0x8DA0;
auto constexpr kOpenGLMaxProgramParameterBufferSizeNv = 0x8DA1;
auto constexpr kOpenGLMaxProgramParametersArb = 0x88A9;
auto constexpr kOpenGLMaxProgramPatchAttribsNv = 0x86D8;
auto constexpr kOpenGLMaxProgramResultComponentsNv = 0x8909;
auto constexpr kOpenGLMaxProgramSubroutineNumNv = 0x8F45;
auto constexpr kOpenGLMaxProgramSubroutineParametersNv = 0x8F44;
auto constexpr kOpenGLMaxProgramTemporariesArb = 0x88A5;
auto constexpr kOpenGLMaxProgramTexIndirectionsArb = 0x880D;
auto constexpr kOpenGLMaxProgramTexInstructionsArb = 0x880C;
auto constexpr kOpenGLMaxProgramTexelOffset = 0x8905;
auto constexpr kOpenGLMaxProgramTexelOffsetExt = 0x8905;
auto constexpr kOpenGLMaxProgramTexelOffsetNv = 0x8905;
auto constexpr kOpenGLMaxProgramTextureGatherComponentsArb = 0x8F9F;
auto constexpr kOpenGLMaxProgramTextureGatherOffset = 0x8E5F;
auto constexpr kOpenGLMaxProgramTextureGatherOffsetArb = 0x8E5F;
auto constexpr kOpenGLMaxProgramTextureGatherOffsetNv = 0x8E5F;
auto constexpr kOpenGLMaxProgramTotalOutputComponentsNv = 0x8C28;
auto constexpr kOpenGLMaxProjectionStackDepth = 0x0D38;
auto constexpr kOpenGLMaxRasterSamplesExt = 0x9329;
auto constexpr kOpenGLMaxRationalEvalOrderNv = 0x86D7;
auto constexpr kOpenGLMaxRectangleTextureSize = 0x84F8;
auto constexpr kOpenGLMaxRectangleTextureSizeArb = 0x84F8;
auto constexpr kOpenGLMaxRectangleTextureSizeNv = 0x84F8;
auto constexpr kOpenGLMaxRenderbufferSize = 0x84E8;
auto constexpr kOpenGLMaxRenderbufferSizeExt = 0x84E8;
auto constexpr kOpenGLMaxRenderbufferSizeOes = 0x84E8;
auto constexpr kOpenGLMaxSampleMaskWords = 0x8E59;
auto constexpr kOpenGLMaxSampleMaskWordsNv = 0x8E59;
auto constexpr kOpenGLMaxSamples = 0x8D57;
auto constexpr kOpenGLMaxSamplesAngle = 0x8D57;
auto constexpr kOpenGLMaxSamplesApple = 0x8D57;
auto constexpr kOpenGLMaxSamplesExt = 0x8D57;
auto constexpr kOpenGLMaxSamplesImg = 0x9135;
auto constexpr kOpenGLMaxSamplesNv = 0x8D57;
auto constexpr kOpenGLMaxServerWaitTimeout = 0x9111;
auto constexpr kOpenGLMaxServerWaitTimeoutApple = 0x9111;
auto constexpr kOpenGLMaxShaderBufferAddressNv = 0x8F35;
auto constexpr kOpenGLMaxShaderCombinedLocalStorageFastSizeExt = 0x9650;
auto constexpr kOpenGLMaxShaderCombinedLocalStorageSizeExt = 0x9651;
auto constexpr kOpenGLMaxShaderCompilerThreadsArb = 0x91B0;
auto constexpr kOpenGLMaxShaderCompilerThreadsKhr = 0x91B0;
auto constexpr kOpenGLMaxShaderPixelLocalStorageFastSizeExt = 0x8F63;
auto constexpr kOpenGLMaxShaderPixelLocalStorageSizeExt = 0x8F67;
auto constexpr kOpenGLMaxShaderStorageBlockSize = 0x90DE;
auto constexpr kOpenGLMaxShaderStorageBufferBindings = 0x90DD;
auto constexpr kOpenGLMaxShaderSubsampledImageUnitsQcom = 0x8FA1;
auto constexpr kOpenGLMaxShininessNv = 0x8504;
auto constexpr kOpenGLMaxSparse3dTextureSizeAmd = 0x9199;
auto constexpr kOpenGLMaxSparse3dTextureSizeArb = 0x9199;
auto constexpr kOpenGLMaxSparse3dTextureSizeExt = 0x9199;
auto constexpr kOpenGLMaxSparseArrayTextureLayers = 0x919A;
auto constexpr kOpenGLMaxSparseArrayTextureLayersArb = 0x919A;
auto constexpr kOpenGLMaxSparseArrayTextureLayersExt = 0x919A;
auto constexpr kOpenGLMaxSparseTextureSizeAmd = 0x9198;
auto constexpr kOpenGLMaxSparseTextureSizeArb = 0x9198;
auto constexpr kOpenGLMaxSparseTextureSizeExt = 0x9198;
auto constexpr kOpenGLMaxSpotExponentNv = 0x8505;
auto constexpr kOpenGLMaxSubpixelPrecisionBiasBitsNv = 0x9349;
auto constexpr kOpenGLMaxSubroutineUniformLocations = 0x8DE8;
auto constexpr kOpenGLMaxSubroutines = 0x8DE7;
auto constexpr kOpenGLMaxTaskAtomicCounterBuffersNv = 0x8E6C;
auto constexpr kOpenGLMaxTaskAtomicCountersNv = 0x8E6D;
auto constexpr kOpenGLMaxTaskImageUniformsNv = 0x8E6A;
auto constexpr kOpenGLMaxTaskOutputCountNv = 0x953A;
auto constexpr kOpenGLMaxTaskShaderStorageBlocksNv = 0x8E6E;
auto constexpr kOpenGLMaxTaskTextureImageUnitsNv = 0x8E69;
auto constexpr kOpenGLMaxTaskTotalMemorySizeNv = 0x9537;
auto constexpr kOpenGLMaxTaskUniformBlocksNv = 0x8E68;
auto constexpr kOpenGLMaxTaskUniformComponentsNv = 0x8E6B;
auto constexpr kOpenGLMaxTaskWorkGroupInvocationsNv = 0x95A3;
auto constexpr kOpenGLMaxTaskWorkGroupSizeNv = 0x953C;
auto constexpr kOpenGLMaxTessControlAtomicCounterBuffers = 0x92CD;
auto constexpr kOpenGLMaxTessControlAtomicCounterBuffersExt = 0x92CD;
auto constexpr kOpenGLMaxTessControlAtomicCounterBuffersOes = 0x92CD;
auto constexpr kOpenGLMaxTessControlAtomicCounters = 0x92D3;
auto constexpr kOpenGLMaxTessControlAtomicCountersExt = 0x92D3;
auto constexpr kOpenGLMaxTessControlAtomicCountersOes = 0x92D3;
auto constexpr kOpenGLMaxTessControlImageUniforms = 0x90CB;
auto constexpr kOpenGLMaxTessControlImageUniformsExt = 0x90CB;
auto constexpr kOpenGLMaxTessControlImageUniformsOes = 0x90CB;
auto constexpr kOpenGLMaxTessControlInputComponents = 0x886C;
auto constexpr kOpenGLMaxTessControlInputComponentsExt = 0x886C;
auto constexpr kOpenGLMaxTessControlInputComponentsOes = 0x886C;
auto constexpr kOpenGLMaxTessControlOutputComponents = 0x8E83;
auto constexpr kOpenGLMaxTessControlOutputComponentsExt = 0x8E83;
auto constexpr kOpenGLMaxTessControlOutputComponentsOes = 0x8E83;
auto constexpr kOpenGLMaxTessControlShaderStorageBlocks = 0x90D8;
auto constexpr kOpenGLMaxTessControlShaderStorageBlocksExt = 0x90D8;
auto constexpr kOpenGLMaxTessControlShaderStorageBlocksOes = 0x90D8;
auto constexpr kOpenGLMaxTessControlTextureImageUnits = 0x8E81;
auto constexpr kOpenGLMaxTessControlTextureImageUnitsExt = 0x8E81;
auto constexpr kOpenGLMaxTessControlTextureImageUnitsOes = 0x8E81;
auto constexpr kOpenGLMaxTessControlTotalOutputComponents = 0x8E85;
auto constexpr kOpenGLMaxTessControlTotalOutputComponentsExt = 0x8E85;
auto constexpr kOpenGLMaxTessControlTotalOutputComponentsOes = 0x8E85;
auto constexpr kOpenGLMaxTessControlUniformBlocks = 0x8E89;
auto constexpr kOpenGLMaxTessControlUniformBlocksExt = 0x8E89;
auto constexpr kOpenGLMaxTessControlUniformBlocksOes = 0x8E89;
auto constexpr kOpenGLMaxTessControlUniformComponents = 0x8E7F;
auto constexpr kOpenGLMaxTessControlUniformComponentsExt = 0x8E7F;
auto constexpr kOpenGLMaxTessControlUniformComponentsOes = 0x8E7F;
auto constexpr kOpenGLMaxTessEvaluationAtomicCounterBuffers = 0x92CE;
auto constexpr kOpenGLMaxTessEvaluationAtomicCounterBuffersExt = 0x92CE;
auto constexpr kOpenGLMaxTessEvaluationAtomicCounterBuffersOes = 0x92CE;
auto constexpr kOpenGLMaxTessEvaluationAtomicCounters = 0x92D4;
auto constexpr kOpenGLMaxTessEvaluationAtomicCountersExt = 0x92D4;
auto constexpr kOpenGLMaxTessEvaluationAtomicCountersOes = 0x92D4;
auto constexpr kOpenGLMaxTessEvaluationImageUniforms = 0x90CC;
auto constexpr kOpenGLMaxTessEvaluationImageUniformsExt = 0x90CC;
auto constexpr kOpenGLMaxTessEvaluationImageUniformsOes = 0x90CC;
auto constexpr kOpenGLMaxTessEvaluationInputComponents = 0x886D;
auto constexpr kOpenGLMaxTessEvaluationInputComponentsExt = 0x886D;
auto constexpr kOpenGLMaxTessEvaluationInputComponentsOes = 0x886D;
auto constexpr kOpenGLMaxTessEvaluationOutputComponents = 0x8E86;
auto constexpr kOpenGLMaxTessEvaluationOutputComponentsExt = 0x8E86;
auto constexpr kOpenGLMaxTessEvaluationOutputComponentsOes = 0x8E86;
auto constexpr kOpenGLMaxTessEvaluationShaderStorageBlocks = 0x90D9;
auto constexpr kOpenGLMaxTessEvaluationShaderStorageBlocksExt = 0x90D9;
auto constexpr kOpenGLMaxTessEvaluationShaderStorageBlocksOes = 0x90D9;
auto constexpr kOpenGLMaxTessEvaluationTextureImageUnits = 0x8E82;
auto constexpr kOpenGLMaxTessEvaluationTextureImageUnitsExt = 0x8E82;
auto constexpr kOpenGLMaxTessEvaluationTextureImageUnitsOes = 0x8E82;
auto constexpr kOpenGLMaxTessEvaluationUniformBlocks = 0x8E8A;
auto constexpr kOpenGLMaxTessEvaluationUniformBlocksExt = 0x8E8A;
auto constexpr kOpenGLMaxTessEvaluationUniformBlocksOes = 0x8E8A;
auto constexpr kOpenGLMaxTessEvaluationUniformComponents = 0x8E80;
auto constexpr kOpenGLMaxTessEvaluationUniformComponentsExt = 0x8E80;
auto constexpr kOpenGLMaxTessEvaluationUniformComponentsOes = 0x8E80;
auto constexpr kOpenGLMaxTessGenLevel = 0x8E7E;
auto constexpr kOpenGLMaxTessGenLevelExt = 0x8E7E;
auto constexpr kOpenGLMaxTessGenLevelOes = 0x8E7E;
auto constexpr kOpenGLMaxTessPatchComponents = 0x8E84;
auto constexpr kOpenGLMaxTessPatchComponentsExt = 0x8E84;
auto constexpr kOpenGLMaxTessPatchComponentsOes = 0x8E84;
auto constexpr kOpenGLMaxTextureBufferSize = 0x8C2B;
auto constexpr kOpenGLMaxTextureBufferSizeArb = 0x8C2B;
auto constexpr kOpenGLMaxTextureBufferSizeExt = 0x8C2B;
auto constexpr kOpenGLMaxTextureBufferSizeOes = 0x8C2B;
auto constexpr kOpenGLMaxTextureCoords = 0x8871;
auto constexpr kOpenGLMaxTextureCoordsArb = 0x8871;
auto constexpr kOpenGLMaxTextureCoordsNv = 0x8871;
auto constexpr kOpenGLMaxTextureImageUnits = 0x8872;
auto constexpr kOpenGLMaxTextureImageUnitsArb = 0x8872;
auto constexpr kOpenGLMaxTextureImageUnitsNv = 0x8872;
auto constexpr kOpenGLMaxTextureLodBias = 0x84FD;
auto constexpr kOpenGLMaxTextureLodBiasExt = 0x84FD;
auto constexpr kOpenGLMaxTextureMaxAnisotropy = 0x84FF;
auto constexpr kOpenGLMaxTextureMaxAnisotropyExt = 0x84FF;
auto constexpr kOpenGLMaxTextureSize = 0x0D33;
auto constexpr kOpenGLMaxTextureStackDepth = 0x0D39;
auto constexpr kOpenGLMaxTextureUnits = 0x84E2;
auto constexpr kOpenGLMaxTextureUnitsArb = 0x84E2;
auto constexpr kOpenGLMaxTimelineSemaphoreValueDifferenceNv = 0x95B6;
auto constexpr kOpenGLMaxTrackMatricesNv = 0x862F;
auto constexpr kOpenGLMaxTrackMatrixStackDepthNv = 0x862E;
auto constexpr kOpenGLMaxTransformFeedbackBuffers = 0x8E70;
auto constexpr kOpenGLMaxTransformFeedbackInterleavedComponents = 0x8C8A;
auto constexpr kOpenGLMaxTransformFeedbackInterleavedComponentsExt = 0x8C8A;
auto constexpr kOpenGLMaxTransformFeedbackInterleavedComponentsNv = 0x8C8A;
auto constexpr kOpenGLMaxTransformFeedbackSeparateAttribs = 0x8C8B;
auto constexpr kOpenGLMaxTransformFeedbackSeparateAttribsExt = 0x8C8B;
auto constexpr kOpenGLMaxTransformFeedbackSeparateAttribsNv = 0x8C8B;
auto constexpr kOpenGLMaxTransformFeedbackSeparateComponents = 0x8C80;
auto constexpr kOpenGLMaxTransformFeedbackSeparateComponentsExt = 0x8C80;
auto constexpr kOpenGLMaxTransformFeedbackSeparateComponentsNv = 0x8C80;
auto constexpr kOpenGLMaxUniformBlockSize = 0x8A30;
auto constexpr kOpenGLMaxUniformBufferBindings = 0x8A2F;
auto constexpr kOpenGLMaxUniformLocations = 0x826E;
auto constexpr kOpenGLMaxVaryingComponents = 0x8B4B;
auto constexpr kOpenGLMaxVaryingComponentsExt = 0x8B4B;
auto constexpr kOpenGLMaxVaryingFloats = 0x8B4B;
auto constexpr kOpenGLMaxVaryingFloatsArb = 0x8B4B;
auto constexpr kOpenGLMaxVaryingVectors = 0x8DFC;
auto constexpr kOpenGLMaxVertexArrayRangeElementNv = 0x8520;
auto constexpr kOpenGLMaxVertexAtomicCounterBuffers = 0x92CC;
auto constexpr kOpenGLMaxVertexAtomicCounters = 0x92D2;
auto constexpr kOpenGLMaxVertexAttribBindings = 0x82DA;
auto constexpr kOpenGLMaxVertexAttribRelativeOffset = 0x82D9;
auto constexpr kOpenGLMaxVertexAttribStride = 0x82E5;
auto constexpr kOpenGLMaxVertexAttribs = 0x8869;
auto constexpr kOpenGLMaxVertexAttribsArb = 0x8869;
auto constexpr kOpenGLMaxVertexBindableUniformsExt = 0x8DE2;
auto constexpr kOpenGLMaxVertexHintPgi = 0x1A22D;
auto constexpr kOpenGLMaxVertexImageUniforms = 0x90CA;
auto constexpr kOpenGLMaxVertexOutputComponents = 0x9122;
auto constexpr kOpenGLMaxVertexShaderInstructionsExt = 0x87C5;
auto constexpr kOpenGLMaxVertexShaderInvariantsExt = 0x87C7;
auto constexpr kOpenGLMaxVertexShaderLocalConstantsExt = 0x87C8;
auto constexpr kOpenGLMaxVertexShaderLocalsExt = 0x87C9;
auto constexpr kOpenGLMaxVertexShaderStorageBlocks = 0x90D6;
auto constexpr kOpenGLMaxVertexShaderVariantsExt = 0x87C6;
auto constexpr kOpenGLMaxVertexStreams = 0x8E71;
auto constexpr kOpenGLMaxVertexStreamsAti = 0x876B;
auto constexpr kOpenGLMaxVertexTextureImageUnits = 0x8B4C;
auto constexpr kOpenGLMaxVertexTextureImageUnitsArb = 0x8B4C;
auto constexpr kOpenGLMaxVertexUniformBlocks = 0x8A2B;
auto constexpr kOpenGLMaxVertexUniformComponents = 0x8B4A;
auto constexpr kOpenGLMaxVertexUniformComponentsArb = 0x8B4A;
auto constexpr kOpenGLMaxVertexUniformVectors = 0x8DFB;
auto constexpr kOpenGLMaxVertexUnitsArb = 0x86A4;
auto constexpr kOpenGLMaxVertexUnitsOes = 0x86A4;
auto constexpr kOpenGLMaxVertexVaryingComponentsArb = 0x8DDE;
auto constexpr kOpenGLMaxVertexVaryingComponentsExt = 0x8DDE;
auto constexpr kOpenGLMaxViewportDims = 0x0D3A;
auto constexpr kOpenGLMaxViewports = 0x825B;
auto constexpr kOpenGLMaxViewportsNv = 0x825B;
auto constexpr kOpenGLMaxViewportsOes = 0x825B;
auto constexpr kOpenGLMaxViewsOvr = 0x9631;
auto constexpr kOpenGLMaxWidth = 0x827E;
auto constexpr kOpenGLMaxWindowRectanglesExt = 0x8F14;
auto constexpr kOpenGLMediumFloat = 0x8DF1;
auto constexpr kOpenGLMediumInt = 0x8DF4;
auto constexpr kOpenGLMemoryAttachableAlignmentNv = 0x95A6;
auto constexpr kOpenGLMemoryAttachableNv = 0x95A8;
auto constexpr kOpenGLMemoryAttachableSizeNv = 0x95A7;
auto constexpr kOpenGLMeshOutputPerPrimitiveGranularityNv = 0x9543;
auto constexpr kOpenGLMeshOutputPerVertexGranularityNv = 0x92DF;
auto constexpr kOpenGLMeshOutputTypeNv = 0x957B;
auto constexpr kOpenGLMeshPrimitivesOutNv = 0x957A;
auto constexpr kOpenGLMeshShaderBitNv = 0x00000040;
auto constexpr kOpenGLMeshShaderNv = 0x9559;
auto constexpr kOpenGLMeshSubroutineNv = 0x957C;
auto constexpr kOpenGLMeshSubroutineUniformNv = 0x957E;
auto constexpr kOpenGLMeshVerticesOutNv = 0x9579;
auto constexpr kOpenGLMeshWorkGroupSizeNv = 0x953E;
auto constexpr kOpenGLMin = 0x8007;
auto constexpr kOpenGLMinExt = 0x8007;
auto constexpr kOpenGLMinFragmentInterpolationOffset = 0x8E5B;
auto constexpr kOpenGLMinFragmentInterpolationOffsetNv = 0x8E5B;
auto constexpr kOpenGLMinFragmentInterpolationOffsetOes = 0x8E5B;
auto constexpr kOpenGLMinFragmentShadingRateAttachmentTexelHeightExt = 0x96D9;
auto constexpr kOpenGLMinFragmentShadingRateAttachmentTexelWidthExt = 0x96D7;
auto constexpr kOpenGLMinLodWarningAmd = 0x919C;
auto constexpr kOpenGLMinMapBufferAlignment = 0x90BC;
auto constexpr kOpenGLMinProgramTexelOffset = 0x8904;
auto constexpr kOpenGLMinProgramTexelOffsetExt = 0x8904;
auto constexpr kOpenGLMinProgramTexelOffsetNv = 0x8904;
auto constexpr kOpenGLMinProgramTextureGatherOffset = 0x8E5E;
auto constexpr kOpenGLMinProgramTextureGatherOffsetArb = 0x8E5E;
auto constexpr kOpenGLMinProgramTextureGatherOffsetNv = 0x8E5E;
auto constexpr kOpenGLMinSampleShadingValue = 0x8C37;
auto constexpr kOpenGLMinSampleShadingValueArb = 0x8C37;
auto constexpr kOpenGLMinSampleShadingValueOes = 0x8C37;
auto constexpr kOpenGLMinSparseLevelAmd = 0x919B;
auto constexpr kOpenGLMinmax = 0x802E;
auto constexpr kOpenGLMinmaxExt = 0x802E;
auto constexpr kOpenGLMinmaxFormat = 0x802F;
auto constexpr kOpenGLMinmaxFormatExt = 0x802F;
auto constexpr kOpenGLMinmaxSink = 0x8030;
auto constexpr kOpenGLMinmaxSinkExt = 0x8030;
auto constexpr kOpenGLMinorVersion = 0x821C;
auto constexpr kOpenGLMinusClampedNv = 0x92B3;
auto constexpr kOpenGLMinusNv = 0x929F;
auto constexpr kOpenGLMipmap = 0x8293;
auto constexpr kOpenGLMirrorClampAti = 0x8742;
auto constexpr kOpenGLMirrorClampExt = 0x8742;
auto constexpr kOpenGLMirrorClampToBorderExt = 0x8912;
auto constexpr kOpenGLMirrorClampToEdge = 0x8743;
auto constexpr kOpenGLMirrorClampToEdgeAti = 0x8743;
auto constexpr kOpenGLMirrorClampToEdgeExt = 0x8743;
auto constexpr kOpenGLMirroredRepeat = 0x8370;
auto constexpr kOpenGLMirroredRepeatArb = 0x8370;
auto constexpr kOpenGLMirroredRepeatIbm = 0x8370;
auto constexpr kOpenGLMirroredRepeatOes = 0x8370;
auto constexpr kOpenGLMiterRevertNv = 0x90A7;
auto constexpr kOpenGLMiterTruncateNv = 0x90A8;
auto constexpr kOpenGLMixedDepthSamplesSupportedNv = 0x932F;
auto constexpr kOpenGLMixedStencilSamplesSupportedNv = 0x9330;
auto constexpr kOpenGLModelview = 0x1700;
auto constexpr kOpenGLModelview0Arb = 0x1700;
auto constexpr kOpenGLModelview0Ext = 0x1700;
auto constexpr kOpenGLModelview0MatrixExt = 0x0BA6;
auto constexpr kOpenGLModelview0StackDepthExt = 0x0BA3;
auto constexpr kOpenGLModelview10Arb = 0x872A;
auto constexpr kOpenGLModelview11Arb = 0x872B;
auto constexpr kOpenGLModelview12Arb = 0x872C;
auto constexpr kOpenGLModelview13Arb = 0x872D;
auto constexpr kOpenGLModelview14Arb = 0x872E;
auto constexpr kOpenGLModelview15Arb = 0x872F;
auto constexpr kOpenGLModelview16Arb = 0x8730;
auto constexpr kOpenGLModelview17Arb = 0x8731;
auto constexpr kOpenGLModelview18Arb = 0x8732;
auto constexpr kOpenGLModelview19Arb = 0x8733;
auto constexpr kOpenGLModelview1Arb = 0x850A;
auto constexpr kOpenGLModelview1Ext = 0x850A;
auto constexpr kOpenGLModelview1MatrixExt = 0x8506;
auto constexpr kOpenGLModelview1StackDepthExt = 0x8502;
auto constexpr kOpenGLModelview20Arb = 0x8734;
auto constexpr kOpenGLModelview21Arb = 0x8735;
auto constexpr kOpenGLModelview22Arb = 0x8736;
auto constexpr kOpenGLModelview23Arb = 0x8737;
auto constexpr kOpenGLModelview24Arb = 0x8738;
auto constexpr kOpenGLModelview25Arb = 0x8739;
auto constexpr kOpenGLModelview26Arb = 0x873A;
auto constexpr kOpenGLModelview27Arb = 0x873B;
auto constexpr kOpenGLModelview28Arb = 0x873C;
auto constexpr kOpenGLModelview29Arb = 0x873D;
auto constexpr kOpenGLModelview2Arb = 0x8722;
auto constexpr kOpenGLModelview30Arb = 0x873E;
auto constexpr kOpenGLModelview31Arb = 0x873F;
auto constexpr kOpenGLModelview3Arb = 0x8723;
auto constexpr kOpenGLModelview4Arb = 0x8724;
auto constexpr kOpenGLModelview5Arb = 0x8725;
auto constexpr kOpenGLModelview6Arb = 0x8726;
auto constexpr kOpenGLModelview7Arb = 0x8727;
auto constexpr kOpenGLModelview8Arb = 0x8728;
auto constexpr kOpenGLModelview9Arb = 0x8729;
auto constexpr kOpenGLModelviewMatrix = 0x0BA6;
auto constexpr kOpenGLModelviewMatrixFloatAsIntBitsOes = 0x898D;
auto constexpr kOpenGLModelviewProjectionNv = 0x8629;
auto constexpr kOpenGLModelviewStackDepth = 0x0BA3;
auto constexpr kOpenGLModulate = 0x2100;
auto constexpr kOpenGLModulateAddAti = 0x8744;
auto constexpr kOpenGLModulateColorImg = 0x8C04;
auto constexpr kOpenGLModulateSignedAddAti = 0x8745;
auto constexpr kOpenGLModulateSubtractAti = 0x8746;
auto constexpr kOpenGLMotionEstimationSearchBlockXQcom = 0x8C90;
auto constexpr kOpenGLMotionEstimationSearchBlockYQcom = 0x8C91;
auto constexpr kOpenGLMovAti = 0x8961;
auto constexpr kOpenGLMoveToContinuesNv = 0x90B6;
auto constexpr kOpenGLMoveToNv = 0x02;
auto constexpr kOpenGLMoveToResetsNv = 0x90B5;
auto constexpr kOpenGLMulAti = 0x8964;
auto constexpr kOpenGLMult = 0x0103;
auto constexpr kOpenGLMulticastGpusNv = 0x92BA;
auto constexpr kOpenGLMulticastProgrammableSampleLocationNv = 0x9549;
auto constexpr kOpenGLMultiply = 0x9294;
auto constexpr kOpenGLMultiplyKhr = 0x9294;
auto constexpr kOpenGLMultiplyNv = 0x9294;
auto constexpr kOpenGLMultisample = 0x809D;
auto constexpr kOpenGLMultisample3dfx = 0x86B2;
auto constexpr kOpenGLMultisampleArb = 0x809D;
auto constexpr kOpenGLMultisampleBit = 0x20000000;
auto constexpr kOpenGLMultisampleBit3dfx = 0x20000000;
auto constexpr kOpenGLMultisampleBitArb = 0x20000000;
auto constexpr kOpenGLMultisampleBitExt = 0x20000000;
auto constexpr kOpenGLMultisampleBufferBit0Qcom = 0x01000000;
auto constexpr kOpenGLMultisampleBufferBit1Qcom = 0x02000000;
auto constexpr kOpenGLMultisampleBufferBit2Qcom = 0x04000000;
auto constexpr kOpenGLMultisampleBufferBit3Qcom = 0x08000000;
auto constexpr kOpenGLMultisampleBufferBit4Qcom = 0x10000000;
auto constexpr kOpenGLMultisampleBufferBit5Qcom = 0x20000000;
auto constexpr kOpenGLMultisampleBufferBit6Qcom = 0x40000000;
auto constexpr kOpenGLMultisampleBufferBit7Qcom = 0x80000000;
auto constexpr kOpenGLMultisampleCoverageModesNv = 0x8E12;
auto constexpr kOpenGLMultisampleExt = 0x809D;
auto constexpr kOpenGLMultisampleFilterHintNv = 0x8534;
auto constexpr kOpenGLMultisampleLineWidthGranularity = 0x9382;
auto constexpr kOpenGLMultisampleLineWidthGranularityArb = 0x9382;
auto constexpr kOpenGLMultisampleLineWidthRange = 0x9381;
auto constexpr kOpenGLMultisampleLineWidthRangeArb = 0x9381;
auto constexpr kOpenGLMultisampleRasterizationAllowedExt = 0x932B;
auto constexpr kOpenGLMultisampleSgis = 0x809D;
auto constexpr kOpenGLMultisamplesNv = 0x9371;
auto constexpr kOpenGLMultiviewExt = 0x90F1;
auto constexpr kOpenGLMvpMatrixExt = 0x87E3;
auto constexpr kOpenGLN3fV3f = 0x2A25;
auto constexpr kOpenGLNameLength = 0x92F9;
auto constexpr kOpenGLNameStackDepth = 0x0D70;
auto constexpr kOpenGLNamedStringLengthArb = 0x8DE9;
auto constexpr kOpenGLNamedStringTypeArb = 0x8DEA;
auto constexpr kOpenGLNand = 0x150E;
auto constexpr kOpenGLNativeGraphicsBeginHintPgi = 0x1A203;
auto constexpr kOpenGLNativeGraphicsEndHintPgi = 0x1A204;
auto constexpr kOpenGLNativeGraphicsHandlePgi = 0x1A202;
auto constexpr kOpenGLNearest = 0x2600;
auto constexpr kOpenGLNearestClipmapLinearSgix = 0x844E;
auto constexpr kOpenGLNearestClipmapNearestSgix = 0x844D;
auto constexpr kOpenGLNearestMipmapLinear = 0x2702;
auto constexpr kOpenGLNearestMipmapNearest = 0x2700;
auto constexpr kOpenGLNegateBitAti = 0x00000004;
auto constexpr kOpenGLNegativeOneExt = 0x87DF;
auto constexpr kOpenGLNegativeOneToOne = 0x935E;
auto constexpr kOpenGLNegativeOneToOneExt = 0x935E;
auto constexpr kOpenGLNegativeWExt = 0x87DC;
auto constexpr kOpenGLNegativeXExt = 0x87D9;
auto constexpr kOpenGLNegativeYExt = 0x87DA;
auto constexpr kOpenGLNegativeZExt = 0x87DB;
auto constexpr kOpenGLNever = 0x0200;
auto constexpr kOpenGLNextBufferNv = -2;
auto constexpr kOpenGLNextVideoCaptureBufferStatusNv = 0x9025;
auto constexpr kOpenGLNicest = 0x1102;
auto constexpr kOpenGLNoError = 0;
auto constexpr kOpenGLNoResetNotification = 0x8261;
auto constexpr kOpenGLNoResetNotificationArb = 0x8261;
auto constexpr kOpenGLNoResetNotificationExt = 0x8261;
auto constexpr kOpenGLNoResetNotificationKhr = 0x8261;
auto constexpr kOpenGLNone = 0;
auto constexpr kOpenGLNoneOes = 0;
auto constexpr kOpenGLNoop = 0x1505;
auto constexpr kOpenGLNopCommandNv = 0x0001;
auto constexpr kOpenGLNor = 0x1508;
auto constexpr kOpenGLNormalArray = 0x8075;
auto constexpr kOpenGLNormalArrayAddressNv = 0x8F22;
auto constexpr kOpenGLNormalArrayBufferBinding = 0x8897;
auto constexpr kOpenGLNormalArrayBufferBindingArb = 0x8897;
auto constexpr kOpenGLNormalArrayCountExt = 0x8080;
auto constexpr kOpenGLNormalArrayExt = 0x8075;
auto constexpr kOpenGLNormalArrayLengthNv = 0x8F2C;
auto constexpr kOpenGLNormalArrayListIbm = 103071;
auto constexpr kOpenGLNormalArrayListStrideIbm = 103081;
auto constexpr kOpenGLNormalArrayParallelPointersIntel = 0x83F6;
auto constexpr kOpenGLNormalArrayPointer = 0x808F;
auto constexpr kOpenGLNormalArrayPointerExt = 0x808F;
auto constexpr kOpenGLNormalArrayStride = 0x807F;
auto constexpr kOpenGLNormalArrayStrideExt = 0x807F;
auto constexpr kOpenGLNormalArrayType = 0x807E;
auto constexpr kOpenGLNormalArrayTypeExt = 0x807E;
auto constexpr kOpenGLNormalBitPgi = 0x08000000;
auto constexpr kOpenGLNormalMap = 0x8511;
auto constexpr kOpenGLNormalMapArb = 0x8511;
auto constexpr kOpenGLNormalMapExt = 0x8511;
auto constexpr kOpenGLNormalMapNv = 0x8511;
auto constexpr kOpenGLNormalMapOes = 0x8511;
auto constexpr kOpenGLNormalize = 0x0BA1;
auto constexpr kOpenGLNormalizedRangeExt = 0x87E0;
auto constexpr kOpenGLNotequal = 0x0205;
auto constexpr kOpenGLNumActiveVariables = 0x9304;
auto constexpr kOpenGLNumCompatibleSubroutines = 0x8E4A;
auto constexpr kOpenGLNumCompressedTextureFormats = 0x86A2;
auto constexpr kOpenGLNumCompressedTextureFormatsArb = 0x86A2;
auto constexpr kOpenGLNumDeviceUuidsExt = 0x9596;
auto constexpr kOpenGLNumDownsampleScalesImg = 0x913D;
auto constexpr kOpenGLNumExtensions = 0x821D;
auto constexpr kOpenGLNumFillStreamsNv = 0x8E29;
auto constexpr kOpenGLNumFragmentConstantsAti = 0x896F;
auto constexpr kOpenGLNumFragmentRegistersAti = 0x896E;
auto constexpr kOpenGLNumGeneralCombinersNv = 0x854E;
auto constexpr kOpenGLNumInputInterpolatorComponentsAti = 0x8973;
auto constexpr kOpenGLNumInstructionsPerPassAti = 0x8971;
auto constexpr kOpenGLNumInstructionsTotalAti = 0x8972;
auto constexpr kOpenGLNumLoopbackComponentsAti = 0x8974;
auto constexpr kOpenGLNumPassesAti = 0x8970;
auto constexpr kOpenGLNumProgramBinaryFormats = 0x87FE;
auto constexpr kOpenGLNumProgramBinaryFormatsOes = 0x87FE;
auto constexpr kOpenGLNumSampleCounts = 0x9380;
auto constexpr kOpenGLNumShaderBinaryFormats = 0x8DF9;
auto constexpr kOpenGLNumShadingLanguageVersions = 0x82E9;
auto constexpr kOpenGLNumSparseLevelsArb = 0x91AA;
auto constexpr kOpenGLNumSparseLevelsExt = 0x91AA;
auto constexpr kOpenGLNumSpirVExtensions = 0x9554;
auto constexpr kOpenGLNumSupportedMultisampleModesAmd = 0x91B6;
auto constexpr kOpenGLNumSurfaceCompressionFixedRatesExt = 0x8F6E;
auto constexpr kOpenGLNumTilingTypesExt = 0x9582;
auto constexpr kOpenGLNumVideoCaptureStreamsNv = 0x9024;
auto constexpr kOpenGLNumVirtualPageSizesArb = 0x91A8;
auto constexpr kOpenGLNumVirtualPageSizesExt = 0x91A8;
auto constexpr kOpenGLNumWindowRectanglesExt = 0x8F15;
auto constexpr kOpenGLObjectActiveAttributeMaxLengthArb = 0x8B8A;
auto constexpr kOpenGLObjectActiveAttributesArb = 0x8B89;
auto constexpr kOpenGLObjectActiveUniformMaxLengthArb = 0x8B87;
auto constexpr kOpenGLObjectActiveUniformsArb = 0x8B86;
auto constexpr kOpenGLObjectAttachedObjectsArb = 0x8B85;
auto constexpr kOpenGLObjectBufferSizeAti = 0x8764;
auto constexpr kOpenGLObjectBufferUsageAti = 0x8765;
auto constexpr kOpenGLObjectCompileStatusArb = 0x8B81;
auto constexpr kOpenGLObjectDeleteStatusArb = 0x8B80;
auto constexpr kOpenGLObjectDistanceToLineSgis = 0x81F3;
auto constexpr kOpenGLObjectDistanceToPointSgis = 0x81F1;
auto constexpr kOpenGLObjectInfoLogLengthArb = 0x8B84;
auto constexpr kOpenGLObjectLineSgis = 0x81F7;
auto constexpr kOpenGLObjectLinear = 0x2401;
auto constexpr kOpenGLObjectLinearNv = 0x2401;
auto constexpr kOpenGLObjectLinkStatusArb = 0x8B82;
auto constexpr kOpenGLObjectPlane = 0x2501;
auto constexpr kOpenGLObjectPointSgis = 0x81F5;
auto constexpr kOpenGLObjectShaderSourceLengthArb = 0x8B88;
auto constexpr kOpenGLObjectSubtypeArb = 0x8B4F;
auto constexpr kOpenGLObjectType = 0x9112;
auto constexpr kOpenGLObjectTypeApple = 0x9112;
auto constexpr kOpenGLObjectTypeArb = 0x8B4E;
auto constexpr kOpenGLObjectValidateStatusArb = 0x8B83;
auto constexpr kOpenGLOcclusionQueryEventMaskAmd = 0x874F;
auto constexpr kOpenGLOcclusionTestHp = 0x8165;
auto constexpr kOpenGLOcclusionTestResultHp = 0x8166;
auto constexpr kOpenGLOffset = 0x92FC;
auto constexpr kOpenGLOffsetHiloProjectiveTexture2dNv = 0x8856;
auto constexpr kOpenGLOffsetHiloProjectiveTextureRectangleNv = 0x8857;
auto constexpr kOpenGLOffsetHiloTexture2dNv = 0x8854;
auto constexpr kOpenGLOffsetHiloTextureRectangleNv = 0x8855;
auto constexpr kOpenGLOffsetProjectiveTexture2dNv = 0x8850;
auto constexpr kOpenGLOffsetProjectiveTexture2dScaleNv = 0x8851;
auto constexpr kOpenGLOffsetProjectiveTextureRectangleNv = 0x8852;
auto constexpr kOpenGLOffsetProjectiveTextureRectangleScaleNv = 0x8853;
auto constexpr kOpenGLOffsetTexture2dBiasNv = 0x86E3;
auto constexpr kOpenGLOffsetTexture2dMatrixNv = 0x86E1;
auto constexpr kOpenGLOffsetTexture2dNv = 0x86E8;
auto constexpr kOpenGLOffsetTexture2dScaleNv = 0x86E2;
auto constexpr kOpenGLOffsetTextureBiasNv = 0x86E3;
auto constexpr kOpenGLOffsetTextureMatrixNv = 0x86E1;
auto constexpr kOpenGLOffsetTextureRectangleNv = 0x864C;
auto constexpr kOpenGLOffsetTextureRectangleScaleNv = 0x864D;
auto constexpr kOpenGLOffsetTextureScaleNv = 0x86E2;
auto constexpr kOpenGLOne = 1;
auto constexpr kOpenGLOneExt = 0x87DE;
auto constexpr kOpenGLOneMinusConstantAlpha = 0x8004;
auto constexpr kOpenGLOneMinusConstantAlphaExt = 0x8004;
auto constexpr kOpenGLOneMinusConstantColor = 0x8002;
auto constexpr kOpenGLOneMinusConstantColorExt = 0x8002;
auto constexpr kOpenGLOneMinusDstAlpha = 0x0305;
auto constexpr kOpenGLOneMinusDstColor = 0x0307;
auto constexpr kOpenGLOneMinusSrc1Alpha = 0x88FB;
auto constexpr kOpenGLOneMinusSrc1AlphaExt = 0x88FB;
auto constexpr kOpenGLOneMinusSrc1Color = 0x88FA;
auto constexpr kOpenGLOneMinusSrc1ColorExt = 0x88FA;
auto constexpr kOpenGLOneMinusSrcAlpha = 0x0303;
auto constexpr kOpenGLOneMinusSrcColor = 0x0301;
auto constexpr kOpenGLOpAddExt = 0x8787;
auto constexpr kOpenGLOpClampExt = 0x878E;
auto constexpr kOpenGLOpCrossProductExt = 0x8797;
auto constexpr kOpenGLOpDot3Ext = 0x8784;
auto constexpr kOpenGLOpDot4Ext = 0x8785;
auto constexpr kOpenGLOpExpBase2Ext = 0x8791;
auto constexpr kOpenGLOpFloorExt = 0x878F;
auto constexpr kOpenGLOpFracExt = 0x8789;
auto constexpr kOpenGLOpIndexExt = 0x8782;
auto constexpr kOpenGLOpLogBase2Ext = 0x8792;
auto constexpr kOpenGLOpMaddExt = 0x8788;
auto constexpr kOpenGLOpMaxExt = 0x878A;
auto constexpr kOpenGLOpMinExt = 0x878B;
auto constexpr kOpenGLOpMovExt = 0x8799;
auto constexpr kOpenGLOpMulExt = 0x8786;
auto constexpr kOpenGLOpMultiplyMatrixExt = 0x8798;
auto constexpr kOpenGLOpNegateExt = 0x8783;
auto constexpr kOpenGLOpPowerExt = 0x8793;
auto constexpr kOpenGLOpRecipExt = 0x8794;
auto constexpr kOpenGLOpRecipSqrtExt = 0x8795;
auto constexpr kOpenGLOpRoundExt = 0x8790;
auto constexpr kOpenGLOpSetGeExt = 0x878C;
auto constexpr kOpenGLOpSetLtExt = 0x878D;
auto constexpr kOpenGLOpSubExt = 0x8796;
auto constexpr kOpenGLOperand0Alpha = 0x8598;
auto constexpr kOpenGLOperand0AlphaArb = 0x8598;
auto constexpr kOpenGLOperand0AlphaExt = 0x8598;
auto constexpr kOpenGLOperand0Rgb = 0x8590;
auto constexpr kOpenGLOperand0RgbArb = 0x8590;
auto constexpr kOpenGLOperand0RgbExt = 0x8590;
auto constexpr kOpenGLOperand1Alpha = 0x8599;
auto constexpr kOpenGLOperand1AlphaArb = 0x8599;
auto constexpr kOpenGLOperand1AlphaExt = 0x8599;
auto constexpr kOpenGLOperand1Rgb = 0x8591;
auto constexpr kOpenGLOperand1RgbArb = 0x8591;
auto constexpr kOpenGLOperand1RgbExt = 0x8591;
auto constexpr kOpenGLOperand2Alpha = 0x859A;
auto constexpr kOpenGLOperand2AlphaArb = 0x859A;
auto constexpr kOpenGLOperand2AlphaExt = 0x859A;
auto constexpr kOpenGLOperand2Rgb = 0x8592;
auto constexpr kOpenGLOperand2RgbArb = 0x8592;
auto constexpr kOpenGLOperand2RgbExt = 0x8592;
auto constexpr kOpenGLOperand3AlphaNv = 0x859B;
auto constexpr kOpenGLOperand3RgbNv = 0x8593;
auto constexpr kOpenGLOptimalTilingExt = 0x9584;
auto constexpr kOpenGLOr = 0x1507;
auto constexpr kOpenGLOrInverted = 0x150D;
auto constexpr kOpenGLOrReverse = 0x150B;
auto constexpr kOpenGLOrder = 0x0A01;
auto constexpr kOpenGLOutOfMemory = 0x0505;
auto constexpr kOpenGLOutputColor0Ext = 0x879B;
auto constexpr kOpenGLOutputColor1Ext = 0x879C;
auto constexpr kOpenGLOutputFogExt = 0x87BD;
auto constexpr kOpenGLOutputTextureCoord0Ext = 0x879D;
auto constexpr kOpenGLOutputTextureCoord10Ext = 0x87A7;
auto constexpr kOpenGLOutputTextureCoord11Ext = 0x87A8;
auto constexpr kOpenGLOutputTextureCoord12Ext = 0x87A9;
auto constexpr kOpenGLOutputTextureCoord13Ext = 0x87AA;
auto constexpr kOpenGLOutputTextureCoord14Ext = 0x87AB;
auto constexpr kOpenGLOutputTextureCoord15Ext = 0x87AC;
auto constexpr kOpenGLOutputTextureCoord16Ext = 0x87AD;
auto constexpr kOpenGLOutputTextureCoord17Ext = 0x87AE;
auto constexpr kOpenGLOutputTextureCoord18Ext = 0x87AF;
auto constexpr kOpenGLOutputTextureCoord19Ext = 0x87B0;
auto constexpr kOpenGLOutputTextureCoord1Ext = 0x879E;
auto constexpr kOpenGLOutputTextureCoord20Ext = 0x87B1;
auto constexpr kOpenGLOutputTextureCoord21Ext = 0x87B2;
auto constexpr kOpenGLOutputTextureCoord22Ext = 0x87B3;
auto constexpr kOpenGLOutputTextureCoord23Ext = 0x87B4;
auto constexpr kOpenGLOutputTextureCoord24Ext = 0x87B5;
auto constexpr kOpenGLOutputTextureCoord25Ext = 0x87B6;
auto constexpr kOpenGLOutputTextureCoord26Ext = 0x87B7;
auto constexpr kOpenGLOutputTextureCoord27Ext = 0x87B8;
auto constexpr kOpenGLOutputTextureCoord28Ext = 0x87B9;
auto constexpr kOpenGLOutputTextureCoord29Ext = 0x87BA;
auto constexpr kOpenGLOutputTextureCoord2Ext = 0x879F;
auto constexpr kOpenGLOutputTextureCoord30Ext = 0x87BB;
auto constexpr kOpenGLOutputTextureCoord31Ext = 0x87BC;
auto constexpr kOpenGLOutputTextureCoord3Ext = 0x87A0;
auto constexpr kOpenGLOutputTextureCoord4Ext = 0x87A1;
auto constexpr kOpenGLOutputTextureCoord5Ext = 0x87A2;
auto constexpr kOpenGLOutputTextureCoord6Ext = 0x87A3;
auto constexpr kOpenGLOutputTextureCoord7Ext = 0x87A4;
auto constexpr kOpenGLOutputTextureCoord8Ext = 0x87A5;
auto constexpr kOpenGLOutputTextureCoord9Ext = 0x87A6;
auto constexpr kOpenGLOutputVertexExt = 0x879A;
auto constexpr kOpenGLOverlay = 0x9296;
auto constexpr kOpenGLOverlayKhr = 0x9296;
auto constexpr kOpenGLOverlayNv = 0x9296;
auto constexpr kOpenGLPackAlignment = 0x0D05;
auto constexpr kOpenGLPackCmykHintExt = 0x800E;
auto constexpr kOpenGLPackCompressedBlockDepth = 0x912D;
auto constexpr kOpenGLPackCompressedBlockHeight = 0x912C;
auto constexpr kOpenGLPackCompressedBlockSize = 0x912E;
auto constexpr kOpenGLPackCompressedBlockWidth = 0x912B;
auto constexpr kOpenGLPackCompressedSizeSgix = 0x831C;
auto constexpr kOpenGLPackImageDepthSgis = 0x8131;
auto constexpr kOpenGLPackImageHeight = 0x806C;
auto constexpr kOpenGLPackImageHeightExt = 0x806C;
auto constexpr kOpenGLPackInvertMesa = 0x8758;
auto constexpr kOpenGLPackLsbFirst = 0x0D01;
auto constexpr kOpenGLPackMaxCompressedSizeSgix = 0x831B;
auto constexpr kOpenGLPackResampleOml = 0x8984;
auto constexpr kOpenGLPackResampleSgix = 0x842E;
auto constexpr kOpenGLPackReverseRowOrderAngle = 0x93A4;
auto constexpr kOpenGLPackRowBytesApple = 0x8A15;
auto constexpr kOpenGLPackRowLength = 0x0D02;
auto constexpr kOpenGLPackSkipImages = 0x806B;
auto constexpr kOpenGLPackSkipImagesExt = 0x806B;
auto constexpr kOpenGLPackSkipPixels = 0x0D04;
auto constexpr kOpenGLPackSkipRows = 0x0D03;
auto constexpr kOpenGLPackSkipVolumesSgis = 0x8130;
auto constexpr kOpenGLPackSubsampleRateSgix = 0x85A0;
auto constexpr kOpenGLPackSwapBytes = 0x0D00;
auto constexpr kOpenGLPalette4R5G6B5Oes = 0x8B92;
auto constexpr kOpenGLPalette4Rgb5A1Oes = 0x8B94;
auto constexpr kOpenGLPalette4Rgb8Oes = 0x8B90;
auto constexpr kOpenGLPalette4Rgba4Oes = 0x8B93;
auto constexpr kOpenGLPalette4Rgba8Oes = 0x8B91;
auto constexpr kOpenGLPalette8R5G6B5Oes = 0x8B97;
auto constexpr kOpenGLPalette8Rgb5A1Oes = 0x8B99;
auto constexpr kOpenGLPalette8Rgb8Oes = 0x8B95;
auto constexpr kOpenGLPalette8Rgba4Oes = 0x8B98;
auto constexpr kOpenGLPalette8Rgba8Oes = 0x8B96;
auto constexpr kOpenGLParallelArraysIntel = 0x83F4;
auto constexpr kOpenGLParameterBuffer = 0x80EE;
auto constexpr kOpenGLParameterBufferArb = 0x80EE;
auto constexpr kOpenGLParameterBufferBinding = 0x80EF;
auto constexpr kOpenGLParameterBufferBindingArb = 0x80EF;
auto constexpr kOpenGLPartialSuccessNv = 0x902E;
auto constexpr kOpenGLPassThroughNv = 0x86E6;
auto constexpr kOpenGLPassThroughToken = 0x0700;
auto constexpr kOpenGLPatchDefaultInnerLevel = 0x8E73;
auto constexpr kOpenGLPatchDefaultInnerLevelExt = 0x8E73;
auto constexpr kOpenGLPatchDefaultOuterLevel = 0x8E74;
auto constexpr kOpenGLPatchDefaultOuterLevelExt = 0x8E74;
auto constexpr kOpenGLPatchVertices = 0x8E72;
auto constexpr kOpenGLPatchVerticesExt = 0x8E72;
auto constexpr kOpenGLPatchVerticesOes = 0x8E72;
auto constexpr kOpenGLPatches = 0x000E;
auto constexpr kOpenGLPatchesExt = 0x000E;
auto constexpr kOpenGLPatchesOes = 0x000E;
auto constexpr kOpenGLPathClientLengthNv = 0x907F;
auto constexpr kOpenGLPathCommandCountNv = 0x909D;
auto constexpr kOpenGLPathComputedLengthNv = 0x90A0;
auto constexpr kOpenGLPathCoordCountNv = 0x909E;
auto constexpr kOpenGLPathCoverDepthFuncNv = 0x90BF;
auto constexpr kOpenGLPathDashArrayCountNv = 0x909F;
auto constexpr kOpenGLPathDashCapsNv = 0x907B;
auto constexpr kOpenGLPathDashOffsetNv = 0x907E;
auto constexpr kOpenGLPathDashOffsetResetNv = 0x90B4;
auto constexpr kOpenGLPathEndCapsNv = 0x9076;
auto constexpr kOpenGLPathErrorPositionNv = 0x90AB;
auto constexpr kOpenGLPathFillBoundingBoxNv = 0x90A1;
auto constexpr kOpenGLPathFillCoverModeNv = 0x9082;
auto constexpr kOpenGLPathFillMaskNv = 0x9081;
auto constexpr kOpenGLPathFillModeNv = 0x9080;
auto constexpr kOpenGLPathFogGenModeNv = 0x90AC;
auto constexpr kOpenGLPathFormatPsNv = 0x9071;
auto constexpr kOpenGLPathFormatSvgNv = 0x9070;
auto constexpr kOpenGLPathGenCoeffNv = 0x90B1;
auto constexpr kOpenGLPathGenColorFormatNv = 0x90B2;
auto constexpr kOpenGLPathGenComponentsNv = 0x90B3;
auto constexpr kOpenGLPathGenModeNv = 0x90B0;
auto constexpr kOpenGLPathInitialDashCapNv = 0x907C;
auto constexpr kOpenGLPathInitialEndCapNv = 0x9077;
auto constexpr kOpenGLPathJoinStyleNv = 0x9079;
auto constexpr kOpenGLPathMaxModelviewStackDepthNv = 0x0D36;
auto constexpr kOpenGLPathMaxProjectionStackDepthNv = 0x0D38;
auto constexpr kOpenGLPathMiterLimitNv = 0x907A;
auto constexpr kOpenGLPathModelviewMatrixNv = 0x0BA6;
auto constexpr kOpenGLPathModelviewNv = 0x1700;
auto constexpr kOpenGLPathModelviewStackDepthNv = 0x0BA3;
auto constexpr kOpenGLPathObjectBoundingBoxNv = 0x908A;
auto constexpr kOpenGLPathProjectionMatrixNv = 0x0BA7;
auto constexpr kOpenGLPathProjectionNv = 0x1701;
auto constexpr kOpenGLPathProjectionStackDepthNv = 0x0BA4;
auto constexpr kOpenGLPathStencilDepthOffsetFactorNv = 0x90BD;
auto constexpr kOpenGLPathStencilDepthOffsetUnitsNv = 0x90BE;
auto constexpr kOpenGLPathStencilFuncNv = 0x90B7;
auto constexpr kOpenGLPathStencilRefNv = 0x90B8;
auto constexpr kOpenGLPathStencilValueMaskNv = 0x90B9;
auto constexpr kOpenGLPathStrokeBoundingBoxNv = 0x90A2;
auto constexpr kOpenGLPathStrokeCoverModeNv = 0x9083;
auto constexpr kOpenGLPathStrokeMaskNv = 0x9084;
auto constexpr kOpenGLPathStrokeWidthNv = 0x9075;
auto constexpr kOpenGLPathTerminalDashCapNv = 0x907D;
auto constexpr kOpenGLPathTerminalEndCapNv = 0x9078;
auto constexpr kOpenGLPathTransposeModelviewMatrixNv = 0x84E3;
auto constexpr kOpenGLPathTransposeProjectionMatrixNv = 0x84E4;
auto constexpr kOpenGLPerGpuStorageBitNv = 0x0800;
auto constexpr kOpenGLPerGpuStorageNv = 0x9548;
auto constexpr kOpenGLPerStageConstantsNv = 0x8535;
auto constexpr kOpenGLPercentageAmd = 0x8BC3;
auto constexpr kOpenGLPerfmonGlobalModeQcom = 0x8FA0;
auto constexpr kOpenGLPerfmonResultAmd = 0x8BC6;
auto constexpr kOpenGLPerfmonResultAvailableAmd = 0x8BC4;
auto constexpr kOpenGLPerfmonResultSizeAmd = 0x8BC5;
auto constexpr kOpenGLPerformanceMonitorAmd = 0x9152;
auto constexpr kOpenGLPerfqueryCounterDataBool32Intel = 0x94FC;
auto constexpr kOpenGLPerfqueryCounterDataDoubleIntel = 0x94FB;
auto constexpr kOpenGLPerfqueryCounterDataFloatIntel = 0x94FA;
auto constexpr kOpenGLPerfqueryCounterDataUint32Intel = 0x94F8;
auto constexpr kOpenGLPerfqueryCounterDataUint64Intel = 0x94F9;
auto constexpr kOpenGLPerfqueryCounterDescLengthMaxIntel = 0x94FF;
auto constexpr kOpenGLPerfqueryCounterDurationNormIntel = 0x94F1;
auto constexpr kOpenGLPerfqueryCounterDurationRawIntel = 0x94F2;
auto constexpr kOpenGLPerfqueryCounterEventIntel = 0x94F0;
auto constexpr kOpenGLPerfqueryCounterNameLengthMaxIntel = 0x94FE;
auto constexpr kOpenGLPerfqueryCounterRawIntel = 0x94F4;
auto constexpr kOpenGLPerfqueryCounterThroughputIntel = 0x94F3;
auto constexpr kOpenGLPerfqueryCounterTimestampIntel = 0x94F5;
auto constexpr kOpenGLPerfqueryDonotFlushIntel = 0x83F9;
auto constexpr kOpenGLPerfqueryFlushIntel = 0x83FA;
auto constexpr kOpenGLPerfqueryGlobalContextIntel = 0x00000001;
auto constexpr kOpenGLPerfqueryGpaExtendedCountersIntel = 0x9500;
auto constexpr kOpenGLPerfqueryQueryNameLengthMaxIntel = 0x94FD;
auto constexpr kOpenGLPerfquerySingleContextIntel = 0x00000000;
auto constexpr kOpenGLPerfqueryWaitIntel = 0x83FB;
auto constexpr kOpenGLPerspectiveCorrectionHint = 0x0C50;
auto constexpr kOpenGLPerturbExt = 0x85AE;
auto constexpr kOpenGLPhongHintWin = 0x80EB;
auto constexpr kOpenGLPhongWin = 0x80EA;
auto constexpr kOpenGLPinlightNv = 0x92A8;
auto constexpr kOpenGLPixelBufferBarrierBit = 0x00000080;
auto constexpr kOpenGLPixelBufferBarrierBitExt = 0x00000080;
auto constexpr kOpenGLPixelCountAvailableNv = 0x8867;
auto constexpr kOpenGLPixelCountNv = 0x8866;
auto constexpr kOpenGLPixelCounterBitsNv = 0x8864;
auto constexpr kOpenGLPixelCubicWeightExt = 0x8333;
auto constexpr kOpenGLPixelFragmentAlphaSourceSgis = 0x8355;
auto constexpr kOpenGLPixelFragmentRgbSourceSgis = 0x8354;
auto constexpr kOpenGLPixelGroupColorSgis = 0x8356;
auto constexpr kOpenGLPixelMagFilterExt = 0x8331;
auto constexpr kOpenGLPixelMapAToA = 0x0C79;
auto constexpr kOpenGLPixelMapAToASize = 0x0CB9;
auto constexpr kOpenGLPixelMapBToB = 0x0C78;
auto constexpr kOpenGLPixelMapBToBSize = 0x0CB8;
auto constexpr kOpenGLPixelMapGToG = 0x0C77;
auto constexpr kOpenGLPixelMapGToGSize = 0x0CB7;
auto constexpr kOpenGLPixelMapIToA = 0x0C75;
auto constexpr kOpenGLPixelMapIToASize = 0x0CB5;
auto constexpr kOpenGLPixelMapIToB = 0x0C74;
auto constexpr kOpenGLPixelMapIToBSize = 0x0CB4;
auto constexpr kOpenGLPixelMapIToG = 0x0C73;
auto constexpr kOpenGLPixelMapIToGSize = 0x0CB3;
auto constexpr kOpenGLPixelMapIToI = 0x0C70;
auto constexpr kOpenGLPixelMapIToISize = 0x0CB0;
auto constexpr kOpenGLPixelMapIToR = 0x0C72;
auto constexpr kOpenGLPixelMapIToRSize = 0x0CB2;
auto constexpr kOpenGLPixelMapRToR = 0x0C76;
auto constexpr kOpenGLPixelMapRToRSize = 0x0CB6;
auto constexpr kOpenGLPixelMapSToS = 0x0C71;
auto constexpr kOpenGLPixelMapSToSSize = 0x0CB1;
auto constexpr kOpenGLPixelMinFilterExt = 0x8332;
auto constexpr kOpenGLPixelModeBit = 0x00000020;
auto constexpr kOpenGLPixelPackBuffer = 0x88EB;
auto constexpr kOpenGLPixelPackBufferArb = 0x88EB;
auto constexpr kOpenGLPixelPackBufferBinding = 0x88ED;
auto constexpr kOpenGLPixelPackBufferBindingArb = 0x88ED;
auto constexpr kOpenGLPixelPackBufferBindingExt = 0x88ED;
auto constexpr kOpenGLPixelPackBufferBindingNv = 0x88ED;
auto constexpr kOpenGLPixelPackBufferExt = 0x88EB;
auto constexpr kOpenGLPixelPackBufferNv = 0x88EB;
auto constexpr kOpenGLPixelSubsample2424Sgix = 0x85A3;
auto constexpr kOpenGLPixelSubsample4242Sgix = 0x85A4;
auto constexpr kOpenGLPixelSubsample4444Sgix = 0x85A2;
auto constexpr kOpenGLPixelTexGenAlphaLsSgix = 0x8189;
auto constexpr kOpenGLPixelTexGenAlphaMsSgix = 0x818A;
auto constexpr kOpenGLPixelTexGenModeSgix = 0x832B;
auto constexpr kOpenGLPixelTexGenQCeilingSgix = 0x8184;
auto constexpr kOpenGLPixelTexGenQFloorSgix = 0x8186;
auto constexpr kOpenGLPixelTexGenQRoundSgix = 0x8185;
auto constexpr kOpenGLPixelTexGenSgix = 0x8139;
auto constexpr kOpenGLPixelTextureSgis = 0x8353;
auto constexpr kOpenGLPixelTileBestAlignmentSgix = 0x813E;
auto constexpr kOpenGLPixelTileCacheIncrementSgix = 0x813F;
auto constexpr kOpenGLPixelTileCacheSizeSgix = 0x8145;
auto constexpr kOpenGLPixelTileGridDepthSgix = 0x8144;
auto constexpr kOpenGLPixelTileGridHeightSgix = 0x8143;
auto constexpr kOpenGLPixelTileGridWidthSgix = 0x8142;
auto constexpr kOpenGLPixelTileHeightSgix = 0x8141;
auto constexpr kOpenGLPixelTileWidthSgix = 0x8140;
auto constexpr kOpenGLPixelTransform2dExt = 0x8330;
auto constexpr kOpenGLPixelTransform2dMatrixExt = 0x8338;
auto constexpr kOpenGLPixelTransform2dStackDepthExt = 0x8336;
auto constexpr kOpenGLPixelUnpackBuffer = 0x88EC;
auto constexpr kOpenGLPixelUnpackBufferArb = 0x88EC;
auto constexpr kOpenGLPixelUnpackBufferBinding = 0x88EF;
auto constexpr kOpenGLPixelUnpackBufferBindingArb = 0x88EF;
auto constexpr kOpenGLPixelUnpackBufferBindingExt = 0x88EF;
auto constexpr kOpenGLPixelUnpackBufferBindingNv = 0x88EF;
auto constexpr kOpenGLPixelUnpackBufferExt = 0x88EC;
auto constexpr kOpenGLPixelUnpackBufferNv = 0x88EC;
auto constexpr kOpenGLPixelsPerSamplePatternXAmd = 0x91AE;
auto constexpr kOpenGLPixelsPerSamplePatternYAmd = 0x91AF;
auto constexpr kOpenGLPlusClampedAlphaNv = 0x92B2;
auto constexpr kOpenGLPlusClampedNv = 0x92B1;
auto constexpr kOpenGLPlusDarkerNv = 0x9292;
auto constexpr kOpenGLPlusNv = 0x9291;
auto constexpr kOpenGLPnTrianglesAti = 0x87F0;
auto constexpr kOpenGLPnTrianglesNormalModeAti = 0x87F3;
auto constexpr kOpenGLPnTrianglesNormalModeLinearAti = 0x87F7;
auto constexpr kOpenGLPnTrianglesNormalModeQuadraticAti = 0x87F8;
auto constexpr kOpenGLPnTrianglesPointModeAti = 0x87F2;
auto constexpr kOpenGLPnTrianglesPointModeCubicAti = 0x87F6;
auto constexpr kOpenGLPnTrianglesPointModeLinearAti = 0x87F5;
auto constexpr kOpenGLPnTrianglesTesselationLevelAti = 0x87F4;
auto constexpr kOpenGLPoint = 0x1B00;
auto constexpr kOpenGLPointBit = 0x00000002;
auto constexpr kOpenGLPointDistanceAttenuation = 0x8129;
auto constexpr kOpenGLPointDistanceAttenuationArb = 0x8129;
auto constexpr kOpenGLPointFadeThresholdSize = 0x8128;
auto constexpr kOpenGLPointFadeThresholdSizeArb = 0x8128;
auto constexpr kOpenGLPointFadeThresholdSizeExt = 0x8128;
auto constexpr kOpenGLPointFadeThresholdSizeSgis = 0x8128;
auto constexpr kOpenGLPointNv = 0x1B00;
auto constexpr kOpenGLPointSize = 0x0B11;
auto constexpr kOpenGLPointSizeArrayBufferBindingOes = 0x8B9F;
auto constexpr kOpenGLPointSizeArrayOes = 0x8B9C;
auto constexpr kOpenGLPointSizeArrayPointerOes = 0x898C;
auto constexpr kOpenGLPointSizeArrayStrideOes = 0x898B;
auto constexpr kOpenGLPointSizeArrayTypeOes = 0x898A;
auto constexpr kOpenGLPointSizeGranularity = 0x0B13;
auto constexpr kOpenGLPointSizeMax = 0x8127;
auto constexpr kOpenGLPointSizeMaxArb = 0x8127;
auto constexpr kOpenGLPointSizeMaxExt = 0x8127;
auto constexpr kOpenGLPointSizeMaxSgis = 0x8127;
auto constexpr kOpenGLPointSizeMin = 0x8126;
auto constexpr kOpenGLPointSizeMinArb = 0x8126;
auto constexpr kOpenGLPointSizeMinExt = 0x8126;
auto constexpr kOpenGLPointSizeMinSgis = 0x8126;
auto constexpr kOpenGLPointSizeRange = 0x0B12;
auto constexpr kOpenGLPointSmooth = 0x0B10;
auto constexpr kOpenGLPointSmoothHint = 0x0C51;
auto constexpr kOpenGLPointSprite = 0x8861;
auto constexpr kOpenGLPointSpriteArb = 0x8861;
auto constexpr kOpenGLPointSpriteCoordOrigin = 0x8CA0;
auto constexpr kOpenGLPointSpriteNv = 0x8861;
auto constexpr kOpenGLPointSpriteOes = 0x8861;
auto constexpr kOpenGLPointSpriteRModeNv = 0x8863;
auto constexpr kOpenGLPointToken = 0x0701;
auto constexpr kOpenGLPoints = 0x0000;
auto constexpr kOpenGLPolygon = 0x0009;
auto constexpr kOpenGLPolygonBit = 0x00000008;
auto constexpr kOpenGLPolygonMode = 0x0B40;
auto constexpr kOpenGLPolygonModeNv = 0x0B40;
auto constexpr kOpenGLPolygonOffsetBiasExt = 0x8039;
auto constexpr kOpenGLPolygonOffsetClamp = 0x8E1B;
auto constexpr kOpenGLPolygonOffsetClampExt = 0x8E1B;
auto constexpr kOpenGLPolygonOffsetCommandNv = 0x000E;
auto constexpr kOpenGLPolygonOffsetExt = 0x8037;
auto constexpr kOpenGLPolygonOffsetFactor = 0x8038;
auto constexpr kOpenGLPolygonOffsetFactorExt = 0x8038;
auto constexpr kOpenGLPolygonOffsetFill = 0x8037;
auto constexpr kOpenGLPolygonOffsetLine = 0x2A02;
auto constexpr kOpenGLPolygonOffsetLineNv = 0x2A02;
auto constexpr kOpenGLPolygonOffsetPoint = 0x2A01;
auto constexpr kOpenGLPolygonOffsetPointNv = 0x2A01;
auto constexpr kOpenGLPolygonOffsetUnits = 0x2A00;
auto constexpr kOpenGLPolygonSmooth = 0x0B41;
auto constexpr kOpenGLPolygonSmoothHint = 0x0C53;
auto constexpr kOpenGLPolygonStipple = 0x0B42;
auto constexpr kOpenGLPolygonStippleBit = 0x00000010;
auto constexpr kOpenGLPolygonToken = 0x0703;
auto constexpr kOpenGLPosition = 0x1203;
auto constexpr kOpenGLPostColorMatrixAlphaBias = 0x80BB;
auto constexpr kOpenGLPostColorMatrixAlphaBiasSgi = 0x80BB;
auto constexpr kOpenGLPostColorMatrixAlphaScale = 0x80B7;
auto constexpr kOpenGLPostColorMatrixAlphaScaleSgi = 0x80B7;
auto constexpr kOpenGLPostColorMatrixBlueBias = 0x80BA;
auto constexpr kOpenGLPostColorMatrixBlueBiasSgi = 0x80BA;
auto constexpr kOpenGLPostColorMatrixBlueScale = 0x80B6;
auto constexpr kOpenGLPostColorMatrixBlueScaleSgi = 0x80B6;
auto constexpr kOpenGLPostColorMatrixColorTable = 0x80D2;
auto constexpr kOpenGLPostColorMatrixColorTableSgi = 0x80D2;
auto constexpr kOpenGLPostColorMatrixGreenBias = 0x80B9;
auto constexpr kOpenGLPostColorMatrixGreenBiasSgi = 0x80B9;
auto constexpr kOpenGLPostColorMatrixGreenScale = 0x80B5;
auto constexpr kOpenGLPostColorMatrixGreenScaleSgi = 0x80B5;
auto constexpr kOpenGLPostColorMatrixRedBias = 0x80B8;
auto constexpr kOpenGLPostColorMatrixRedBiasSgi = 0x80B8;
auto constexpr kOpenGLPostColorMatrixRedScale = 0x80B4;
auto constexpr kOpenGLPostColorMatrixRedScaleSgi = 0x80B4;
auto constexpr kOpenGLPostConvolutionAlphaBias = 0x8023;
auto constexpr kOpenGLPostConvolutionAlphaBiasExt = 0x8023;
auto constexpr kOpenGLPostConvolutionAlphaScale = 0x801F;
auto constexpr kOpenGLPostConvolutionAlphaScaleExt = 0x801F;
auto constexpr kOpenGLPostConvolutionBlueBias = 0x8022;
auto constexpr kOpenGLPostConvolutionBlueBiasExt = 0x8022;
auto constexpr kOpenGLPostConvolutionBlueScale = 0x801E;
auto constexpr kOpenGLPostConvolutionBlueScaleExt = 0x801E;
auto constexpr kOpenGLPostConvolutionColorTable = 0x80D1;
auto constexpr kOpenGLPostConvolutionColorTableSgi = 0x80D1;
auto constexpr kOpenGLPostConvolutionGreenBias = 0x8021;
auto constexpr kOpenGLPostConvolutionGreenBiasExt = 0x8021;
auto constexpr kOpenGLPostConvolutionGreenScale = 0x801D;
auto constexpr kOpenGLPostConvolutionGreenScaleExt = 0x801D;
auto constexpr kOpenGLPostConvolutionRedBias = 0x8020;
auto constexpr kOpenGLPostConvolutionRedBiasExt = 0x8020;
auto constexpr kOpenGLPostConvolutionRedScale = 0x801C;
auto constexpr kOpenGLPostConvolutionRedScaleExt = 0x801C;
auto constexpr kOpenGLPostImageTransformColorTableHp = 0x8162;
auto constexpr kOpenGLPostTextureFilterBiasRangeSgix = 0x817B;
auto constexpr kOpenGLPostTextureFilterBiasSgix = 0x8179;
auto constexpr kOpenGLPostTextureFilterScaleRangeSgix = 0x817C;
auto constexpr kOpenGLPostTextureFilterScaleSgix = 0x817A;
auto constexpr kOpenGLPreferDoublebufferHintPgi = 0x1A1F8;
auto constexpr kOpenGLPresentDurationNv = 0x8E2B;
auto constexpr kOpenGLPresentTimeNv = 0x8E2A;
auto constexpr kOpenGLPreserveAti = 0x8762;
auto constexpr kOpenGLPrevious = 0x8578;
auto constexpr kOpenGLPreviousArb = 0x8578;
auto constexpr kOpenGLPreviousExt = 0x8578;
auto constexpr kOpenGLPreviousTextureInputNv = 0x86E4;
auto constexpr kOpenGLPrimaryColor = 0x8577;
auto constexpr kOpenGLPrimaryColorArb = 0x8577;
auto constexpr kOpenGLPrimaryColorExt = 0x8577;
auto constexpr kOpenGLPrimaryColorNv = 0x852C;
auto constexpr kOpenGLPrimitiveBoundingBox = 0x92BE;
auto constexpr kOpenGLPrimitiveBoundingBoxArb = 0x92BE;
auto constexpr kOpenGLPrimitiveBoundingBoxExt = 0x92BE;
auto constexpr kOpenGLPrimitiveBoundingBoxOes = 0x92BE;
auto constexpr kOpenGLPrimitiveIdNv = 0x8C7C;
auto constexpr kOpenGLPrimitiveRestart = 0x8F9D;
auto constexpr kOpenGLPrimitiveRestartFixedIndex = 0x8D69;
auto constexpr kOpenGLPrimitiveRestartForPatchesSupported = 0x8221;
auto constexpr kOpenGLPrimitiveRestartForPatchesSupportedOes = 0x8221;
auto constexpr kOpenGLPrimitiveRestartIndex = 0x8F9E;
auto constexpr kOpenGLPrimitiveRestartIndexNv = 0x8559;
auto constexpr kOpenGLPrimitiveRestartNv = 0x8558;
auto constexpr kOpenGLPrimitivesGenerated = 0x8C87;
auto constexpr kOpenGLPrimitivesGeneratedExt = 0x8C87;
auto constexpr kOpenGLPrimitivesGeneratedNv = 0x8C87;
auto constexpr kOpenGLPrimitivesGeneratedOes = 0x8C87;
auto constexpr kOpenGLPrimitivesSubmitted = 0x82EF;
auto constexpr kOpenGLPrimitivesSubmittedArb = 0x82EF;
auto constexpr kOpenGLProgram = 0x82E2;
auto constexpr kOpenGLProgramAddressRegistersArb = 0x88B0;
auto constexpr kOpenGLProgramAluInstructionsArb = 0x8805;
auto constexpr kOpenGLProgramAttribComponentsNv = 0x8906;
auto constexpr kOpenGLProgramAttribsArb = 0x88AC;
auto constexpr kOpenGLProgramBinaryAngle = 0x93A6;
auto constexpr kOpenGLProgramBinaryFormatMesa = 0x875F;
auto constexpr kOpenGLProgramBinaryFormats = 0x87FF;
auto constexpr kOpenGLProgramBinaryFormatsOes = 0x87FF;
auto constexpr kOpenGLProgramBinaryLength = 0x8741;
auto constexpr kOpenGLProgramBinaryLengthOes = 0x8741;
auto constexpr kOpenGLProgramBinaryRetrievableHint = 0x8257;
auto constexpr kOpenGLProgramBindingArb = 0x8677;
auto constexpr kOpenGLProgramErrorPositionArb = 0x864B;
auto constexpr kOpenGLProgramErrorPositionNv = 0x864B;
auto constexpr kOpenGLProgramErrorStringArb = 0x8874;
auto constexpr kOpenGLProgramErrorStringNv = 0x8874;
auto constexpr kOpenGLProgramFormatArb = 0x8876;
auto constexpr kOpenGLProgramFormatAsciiArb = 0x8875;
auto constexpr kOpenGLProgramInput = 0x92E3;
auto constexpr kOpenGLProgramInstructionsArb = 0x88A0;
auto constexpr kOpenGLProgramKhr = 0x82E2;
auto constexpr kOpenGLProgramLengthArb = 0x8627;
auto constexpr kOpenGLProgramLengthNv = 0x8627;
auto constexpr kOpenGLProgramMatrixExt = 0x8E2D;
auto constexpr kOpenGLProgramMatrixStackDepthExt = 0x8E2F;
auto constexpr kOpenGLProgramNativeAddressRegistersArb = 0x88B2;
auto constexpr kOpenGLProgramNativeAluInstructionsArb = 0x8808;
auto constexpr kOpenGLProgramNativeAttribsArb = 0x88AE;
auto constexpr kOpenGLProgramNativeInstructionsArb = 0x88A2;
auto constexpr kOpenGLProgramNativeParametersArb = 0x88AA;
auto constexpr kOpenGLProgramNativeTemporariesArb = 0x88A6;
auto constexpr kOpenGLProgramNativeTexIndirectionsArb = 0x880A;
auto constexpr kOpenGLProgramNativeTexInstructionsArb = 0x8809;
auto constexpr kOpenGLProgramObjectArb = 0x8B40;
auto constexpr kOpenGLProgramObjectExt = 0x8B40;
auto constexpr kOpenGLProgramOutput = 0x92E4;
auto constexpr kOpenGLProgramParameterNv = 0x8644;
auto constexpr kOpenGLProgramParametersArb = 0x88A8;
auto constexpr kOpenGLProgramPipeline = 0x82E4;
auto constexpr kOpenGLProgramPipelineBinding = 0x825A;
auto constexpr kOpenGLProgramPipelineBindingExt = 0x825A;
auto constexpr kOpenGLProgramPipelineKhr = 0x82E4;
auto constexpr kOpenGLProgramPipelineObjectExt = 0x8A4F;
auto constexpr kOpenGLProgramPointSize = 0x8642;
auto constexpr kOpenGLProgramPointSizeArb = 0x8642;
auto constexpr kOpenGLProgramPointSizeExt = 0x8642;
auto constexpr kOpenGLProgramResidentNv = 0x8647;
auto constexpr kOpenGLProgramResultComponentsNv = 0x8907;
auto constexpr kOpenGLProgramSeparable = 0x8258;
auto constexpr kOpenGLProgramSeparableExt = 0x8258;
auto constexpr kOpenGLProgramStringArb = 0x8628;
auto constexpr kOpenGLProgramStringNv = 0x8628;
auto constexpr kOpenGLProgramTargetNv = 0x8646;
auto constexpr kOpenGLProgramTemporariesArb = 0x88A4;
auto constexpr kOpenGLProgramTexIndirectionsArb = 0x8807;
auto constexpr kOpenGLProgramTexInstructionsArb = 0x8806;
auto constexpr kOpenGLProgramUnderNativeLimitsArb = 0x88B6;
auto constexpr kOpenGLProgrammableSampleLocationArb = 0x9341;
auto constexpr kOpenGLProgrammableSampleLocationNv = 0x9341;
auto constexpr kOpenGLProgrammableSampleLocationTableSizeArb = 0x9340;
auto constexpr kOpenGLProgrammableSampleLocationTableSizeNv = 0x9340;
auto constexpr kOpenGLProjection = 0x1701;
auto constexpr kOpenGLProjectionMatrix = 0x0BA7;
auto constexpr kOpenGLProjectionMatrixFloatAsIntBitsOes = 0x898E;
auto constexpr kOpenGLProjectionStackDepth = 0x0BA4;
auto constexpr kOpenGLProtectedMemoryObjectExt = 0x959B;
auto constexpr kOpenGLProvokingVertex = 0x8E4F;
auto constexpr kOpenGLProvokingVertexExt = 0x8E4F;
auto constexpr kOpenGLProxyColorTable = 0x80D3;
auto constexpr kOpenGLProxyColorTableSgi = 0x80D3;
auto constexpr kOpenGLProxyHistogram = 0x8025;
auto constexpr kOpenGLProxyHistogramExt = 0x8025;
auto constexpr kOpenGLProxyPostColorMatrixColorTable = 0x80D5;
auto constexpr kOpenGLProxyPostColorMatrixColorTableSgi = 0x80D5;
auto constexpr kOpenGLProxyPostConvolutionColorTable = 0x80D4;
auto constexpr kOpenGLProxyPostConvolutionColorTableSgi = 0x80D4;
auto constexpr kOpenGLProxyPostImageTransformColorTableHp = 0x8163;
auto constexpr kOpenGLProxyTexture1d = 0x8063;
auto constexpr kOpenGLProxyTexture1dArray = 0x8C19;
auto constexpr kOpenGLProxyTexture1dArrayExt = 0x8C19;
auto constexpr kOpenGLProxyTexture1dExt = 0x8063;
auto constexpr kOpenGLProxyTexture1dStackMesax = 0x875B;
auto constexpr kOpenGLProxyTexture2d = 0x8064;
auto constexpr kOpenGLProxyTexture2dArray = 0x8C1B;
auto constexpr kOpenGLProxyTexture2dArrayExt = 0x8C1B;
auto constexpr kOpenGLProxyTexture2dExt = 0x8064;
auto constexpr kOpenGLProxyTexture2dMultisample = 0x9101;
auto constexpr kOpenGLProxyTexture2dMultisampleArray = 0x9103;
auto constexpr kOpenGLProxyTexture2dStackMesax = 0x875C;
auto constexpr kOpenGLProxyTexture3d = 0x8070;
auto constexpr kOpenGLProxyTexture3dExt = 0x8070;
auto constexpr kOpenGLProxyTexture4dSgis = 0x8135;
auto constexpr kOpenGLProxyTextureColorTableSgi = 0x80BD;
auto constexpr kOpenGLProxyTextureCubeMap = 0x851B;
auto constexpr kOpenGLProxyTextureCubeMapArb = 0x851B;
auto constexpr kOpenGLProxyTextureCubeMapArray = 0x900B;
auto constexpr kOpenGLProxyTextureCubeMapArrayArb = 0x900B;
auto constexpr kOpenGLProxyTextureCubeMapExt = 0x851B;
auto constexpr kOpenGLProxyTextureRectangle = 0x84F7;
auto constexpr kOpenGLProxyTextureRectangleArb = 0x84F7;
auto constexpr kOpenGLProxyTextureRectangleNv = 0x84F7;
auto constexpr kOpenGLPurgeableApple = 0x8A1D;
auto constexpr kOpenGLPurgedContextResetNv = 0x92BB;
auto constexpr kOpenGLQ = 0x2003;
auto constexpr kOpenGLQuadAlpha4Sgis = 0x811E;
auto constexpr kOpenGLQuadAlpha8Sgis = 0x811F;
auto constexpr kOpenGLQuadIntensity4Sgis = 0x8122;
auto constexpr kOpenGLQuadIntensity8Sgis = 0x8123;
auto constexpr kOpenGLQuadLuminance4Sgis = 0x8120;
auto constexpr kOpenGLQuadLuminance8Sgis = 0x8121;
auto constexpr kOpenGLQuadMeshSun = 0x8614;
auto constexpr kOpenGLQuadStrip = 0x0008;
auto constexpr kOpenGLQuadTextureSelectSgis = 0x8125;
auto constexpr kOpenGLQuadraticAttenuation = 0x1209;
auto constexpr kOpenGLQuadraticCurveToNv = 0x0A;
auto constexpr kOpenGLQuads = 0x0007;
auto constexpr kOpenGLQuadsExt = 0x0007;
auto constexpr kOpenGLQuadsFollowProvokingVertexConvention = 0x8E4C;
auto constexpr kOpenGLQuadsFollowProvokingVertexConventionExt = 0x8E4C;
auto constexpr kOpenGLQuadsOes = 0x0007;
auto constexpr kOpenGLQuarterBitAti = 0x00000010;
auto constexpr kOpenGLQuery = 0x82E3;
auto constexpr kOpenGLQueryAllEventBitsAmd = 0xFFFFFFFF;
auto constexpr kOpenGLQueryBuffer = 0x9192;
auto constexpr kOpenGLQueryBufferAmd = 0x9192;
auto constexpr kOpenGLQueryBufferBarrierBit = 0x00008000;
auto constexpr kOpenGLQueryBufferBinding = 0x9193;
auto constexpr kOpenGLQueryBufferBindingAmd = 0x9193;
auto constexpr kOpenGLQueryByRegionNoWait = 0x8E16;
auto constexpr kOpenGLQueryByRegionNoWaitInverted = 0x8E1A;
auto constexpr kOpenGLQueryByRegionNoWaitNv = 0x8E16;
auto constexpr kOpenGLQueryByRegionWait = 0x8E15;
auto constexpr kOpenGLQueryByRegionWaitInverted = 0x8E19;
auto constexpr kOpenGLQueryByRegionWaitNv = 0x8E15;
auto constexpr kOpenGLQueryCounterBits = 0x8864;
auto constexpr kOpenGLQueryCounterBitsArb = 0x8864;
auto constexpr kOpenGLQueryCounterBitsExt = 0x8864;
auto constexpr kOpenGLQueryDepthBoundsFailEventBitAmd = 0x00000008;
auto constexpr kOpenGLQueryDepthFailEventBitAmd = 0x00000002;
auto constexpr kOpenGLQueryDepthPassEventBitAmd = 0x00000001;
auto constexpr kOpenGLQueryKhr = 0x82E3;
auto constexpr kOpenGLQueryNoWait = 0x8E14;
auto constexpr kOpenGLQueryNoWaitInverted = 0x8E18;
auto constexpr kOpenGLQueryNoWaitNv = 0x8E14;
auto constexpr kOpenGLQueryObjectAmd = 0x9153;
auto constexpr kOpenGLQueryObjectExt = 0x9153;
auto constexpr kOpenGLQueryResourceBufferobjectNv = 0x9547;
auto constexpr kOpenGLQueryResourceMemtypeVidmemNv = 0x9542;
auto constexpr kOpenGLQueryResourceRenderbufferNv = 0x9546;
auto constexpr kOpenGLQueryResourceSysReservedNv = 0x9544;
auto constexpr kOpenGLQueryResourceTextureNv = 0x9545;
auto constexpr kOpenGLQueryResourceTypeVidmemAllocNv = 0x9540;
auto constexpr kOpenGLQueryResult = 0x8866;
auto constexpr kOpenGLQueryResultArb = 0x8866;
auto constexpr kOpenGLQueryResultAvailable = 0x8867;
auto constexpr kOpenGLQueryResultAvailableArb = 0x8867;
auto constexpr kOpenGLQueryResultAvailableExt = 0x8867;
auto constexpr kOpenGLQueryResultExt = 0x8866;
auto constexpr kOpenGLQueryResultNoWait = 0x9194;
auto constexpr kOpenGLQueryResultNoWaitAmd = 0x9194;
auto constexpr kOpenGLQueryStencilFailEventBitAmd = 0x00000004;
auto constexpr kOpenGLQueryTarget = 0x82EA;
auto constexpr kOpenGLQueryWait = 0x8E13;
auto constexpr kOpenGLQueryWaitInverted = 0x8E17;
auto constexpr kOpenGLQueryWaitNv = 0x8E13;
auto constexpr kOpenGLR = 0x2002;
auto constexpr kOpenGLR11fG11fB10f = 0x8C3A;
auto constexpr kOpenGLR11fG11fB10fApple = 0x8C3A;
auto constexpr kOpenGLR11fG11fB10fExt = 0x8C3A;
auto constexpr kOpenGLR16 = 0x822A;
auto constexpr kOpenGLR16Ext = 0x822A;
auto constexpr kOpenGLR16Snorm = 0x8F98;
auto constexpr kOpenGLR16SnormExt = 0x8F98;
auto constexpr kOpenGLR16f = 0x822D;
auto constexpr kOpenGLR16fExt = 0x822D;
auto constexpr kOpenGLR16i = 0x8233;
auto constexpr kOpenGLR16ui = 0x8234;
auto constexpr kOpenGLR1uiC3fV3fSun = 0x85C6;
auto constexpr kOpenGLR1uiC4fN3fV3fSun = 0x85C8;
auto constexpr kOpenGLR1uiC4ubV3fSun = 0x85C5;
auto constexpr kOpenGLR1uiN3fV3fSun = 0x85C7;
auto constexpr kOpenGLR1uiT2fC4fN3fV3fSun = 0x85CB;
auto constexpr kOpenGLR1uiT2fN3fV3fSun = 0x85CA;
auto constexpr kOpenGLR1uiT2fV3fSun = 0x85C9;
auto constexpr kOpenGLR1uiV3fSun = 0x85C4;
auto constexpr kOpenGLR32f = 0x822E;
auto constexpr kOpenGLR32fExt = 0x822E;
auto constexpr kOpenGLR32i = 0x8235;
auto constexpr kOpenGLR32ui = 0x8236;
auto constexpr kOpenGLR3G3B2 = 0x2A10;
auto constexpr kOpenGLR8 = 0x8229;
auto constexpr kOpenGLR8Ext = 0x8229;
auto constexpr kOpenGLR8Snorm = 0x8F94;
auto constexpr kOpenGLR8i = 0x8231;
auto constexpr kOpenGLR8ui = 0x8232;
auto constexpr kOpenGLRasterFixedSampleLocationsExt = 0x932A;
auto constexpr kOpenGLRasterMultisampleExt = 0x9327;
auto constexpr kOpenGLRasterPositionUnclippedIbm = 0x19262;
auto constexpr kOpenGLRasterSamplesExt = 0x9328;
auto constexpr kOpenGLRasterizerDiscard = 0x8C89;
auto constexpr kOpenGLRasterizerDiscardExt = 0x8C89;
auto constexpr kOpenGLRasterizerDiscardNv = 0x8C89;
auto constexpr kOpenGLReadBuffer = 0x0C02;
auto constexpr kOpenGLReadBufferExt = 0x0C02;
auto constexpr kOpenGLReadBufferNv = 0x0C02;
auto constexpr kOpenGLReadFramebuffer = 0x8CA8;
auto constexpr kOpenGLReadFramebufferAngle = 0x8CA8;
auto constexpr kOpenGLReadFramebufferApple = 0x8CA8;
auto constexpr kOpenGLReadFramebufferBinding = 0x8CAA;
auto constexpr kOpenGLReadFramebufferBindingAngle = 0x8CAA;
auto constexpr kOpenGLReadFramebufferBindingApple = 0x8CAA;
auto constexpr kOpenGLReadFramebufferBindingExt = 0x8CAA;
auto constexpr kOpenGLReadFramebufferBindingNv = 0x8CAA;
auto constexpr kOpenGLReadFramebufferExt = 0x8CA8;
auto constexpr kOpenGLReadFramebufferNv = 0x8CA8;
auto constexpr kOpenGLReadOnly = 0x88B8;
auto constexpr kOpenGLReadOnlyArb = 0x88B8;
auto constexpr kOpenGLReadPixelDataRangeLengthNv = 0x887B;
auto constexpr kOpenGLReadPixelDataRangeNv = 0x8879;
auto constexpr kOpenGLReadPixelDataRangePointerNv = 0x887D;
auto constexpr kOpenGLReadPixels = 0x828C;
auto constexpr kOpenGLReadPixelsFormat = 0x828D;
auto constexpr kOpenGLReadPixelsType = 0x828E;
auto constexpr kOpenGLReadWrite = 0x88BA;
auto constexpr kOpenGLReadWriteArb = 0x88BA;
auto constexpr kOpenGLRecipAddSignedAlphaImg = 0x8C05;
auto constexpr kOpenGLReclaimMemoryHintPgi = 0x1A1FE;
auto constexpr kOpenGLRectNv = 0xF6;
auto constexpr kOpenGLRed = 0x1903;
auto constexpr kOpenGLRedBias = 0x0D15;
auto constexpr kOpenGLRedBitAti = 0x00000001;
auto constexpr kOpenGLRedBits = 0x0D52;
auto constexpr kOpenGLRedExt = 0x1903;
auto constexpr kOpenGLRedInteger = 0x8D94;
auto constexpr kOpenGLRedIntegerExt = 0x8D94;
auto constexpr kOpenGLRedMaxClampIngr = 0x8564;
auto constexpr kOpenGLRedMinClampIngr = 0x8560;
auto constexpr kOpenGLRedNv = 0x1903;
auto constexpr kOpenGLRedScale = 0x0D14;
auto constexpr kOpenGLRedSnorm = 0x8F90;
auto constexpr kOpenGLReduce = 0x8016;
auto constexpr kOpenGLReduceExt = 0x8016;
auto constexpr kOpenGLReferencePlaneEquationSgix = 0x817E;
auto constexpr kOpenGLReferencePlaneSgix = 0x817D;
auto constexpr kOpenGLReferencedByComputeShader = 0x930B;
auto constexpr kOpenGLReferencedByFragmentShader = 0x930A;
auto constexpr kOpenGLReferencedByGeometryShader = 0x9309;
auto constexpr kOpenGLReferencedByGeometryShaderExt = 0x9309;
auto constexpr kOpenGLReferencedByGeometryShaderOes = 0x9309;
auto constexpr kOpenGLReferencedByMeshShaderNv = 0x95A0;
auto constexpr kOpenGLReferencedByTaskShaderNv = 0x95A1;
auto constexpr kOpenGLReferencedByTessControlShader = 0x9307;
auto constexpr kOpenGLReferencedByTessControlShaderExt = 0x9307;
auto constexpr kOpenGLReferencedByTessControlShaderOes = 0x9307;
auto constexpr kOpenGLReferencedByTessEvaluationShader = 0x9308;
auto constexpr kOpenGLReferencedByTessEvaluationShaderExt = 0x9308;
auto constexpr kOpenGLReferencedByTessEvaluationShaderOes = 0x9308;
auto constexpr kOpenGLReferencedByVertexShader = 0x9306;
auto constexpr kOpenGLReflectionMap = 0x8512;
auto constexpr kOpenGLReflectionMapArb = 0x8512;
auto constexpr kOpenGLReflectionMapExt = 0x8512;
auto constexpr kOpenGLReflectionMapNv = 0x8512;
auto constexpr kOpenGLReflectionMapOes = 0x8512;
auto constexpr kOpenGLReg0Ati = 0x8921;
auto constexpr kOpenGLReg10Ati = 0x892B;
auto constexpr kOpenGLReg11Ati = 0x892C;
auto constexpr kOpenGLReg12Ati = 0x892D;
auto constexpr kOpenGLReg13Ati = 0x892E;
auto constexpr kOpenGLReg14Ati = 0x892F;
auto constexpr kOpenGLReg15Ati = 0x8930;
auto constexpr kOpenGLReg16Ati = 0x8931;
auto constexpr kOpenGLReg17Ati = 0x8932;
auto constexpr kOpenGLReg18Ati = 0x8933;
auto constexpr kOpenGLReg19Ati = 0x8934;
auto constexpr kOpenGLReg1Ati = 0x8922;
auto constexpr kOpenGLReg20Ati = 0x8935;
auto constexpr kOpenGLReg21Ati = 0x8936;
auto constexpr kOpenGLReg22Ati = 0x8937;
auto constexpr kOpenGLReg23Ati = 0x8938;
auto constexpr kOpenGLReg24Ati = 0x8939;
auto constexpr kOpenGLReg25Ati = 0x893A;
auto constexpr kOpenGLReg26Ati = 0x893B;
auto constexpr kOpenGLReg27Ati = 0x893C;
auto constexpr kOpenGLReg28Ati = 0x893D;
auto constexpr kOpenGLReg29Ati = 0x893E;
auto constexpr kOpenGLReg2Ati = 0x8923;
auto constexpr kOpenGLReg30Ati = 0x893F;
auto constexpr kOpenGLReg31Ati = 0x8940;
auto constexpr kOpenGLReg3Ati = 0x8924;
auto constexpr kOpenGLReg4Ati = 0x8925;
auto constexpr kOpenGLReg5Ati = 0x8926;
auto constexpr kOpenGLReg6Ati = 0x8927;
auto constexpr kOpenGLReg7Ati = 0x8928;
auto constexpr kOpenGLReg8Ati = 0x8929;
auto constexpr kOpenGLReg9Ati = 0x892A;
auto constexpr kOpenGLRegisterCombinersNv = 0x8522;
auto constexpr kOpenGLRelativeArcToNv = 0xFF;
auto constexpr kOpenGLRelativeConicCurveToNv = 0x1B;
auto constexpr kOpenGLRelativeCubicCurveToNv = 0x0D;
auto constexpr kOpenGLRelativeHorizontalLineToNv = 0x07;
auto constexpr kOpenGLRelativeLargeCcwArcToNv = 0x17;
auto constexpr kOpenGLRelativeLargeCwArcToNv = 0x19;
auto constexpr kOpenGLRelativeLineToNv = 0x05;
auto constexpr kOpenGLRelativeMoveToNv = 0x03;
auto constexpr kOpenGLRelativeQuadraticCurveToNv = 0x0B;
auto constexpr kOpenGLRelativeRectNv = 0xF7;
auto constexpr kOpenGLRelativeRoundedRect2Nv = 0xEB;
auto constexpr kOpenGLRelativeRoundedRect4Nv = 0xED;
auto constexpr kOpenGLRelativeRoundedRect8Nv = 0xEF;
auto constexpr kOpenGLRelativeRoundedRectNv = 0xE9;
auto constexpr kOpenGLRelativeSmallCcwArcToNv = 0x13;
auto constexpr kOpenGLRelativeSmallCwArcToNv = 0x15;
auto constexpr kOpenGLRelativeSmoothCubicCurveToNv = 0x11;
auto constexpr kOpenGLRelativeSmoothQuadraticCurveToNv = 0x0F;
auto constexpr kOpenGLRelativeVerticalLineToNv = 0x09;
auto constexpr kOpenGLReleasedApple = 0x8A19;
auto constexpr kOpenGLRender = 0x1C00;
auto constexpr kOpenGLRenderDirectToFramebufferQcom = 0x8FB3;
auto constexpr kOpenGLRenderGpuMaskNv = 0x9558;
auto constexpr kOpenGLRenderMode = 0x0C40;
auto constexpr kOpenGLRenderbuffer = 0x8D41;
auto constexpr kOpenGLRenderbufferAlphaSize = 0x8D53;
auto constexpr kOpenGLRenderbufferAlphaSizeExt = 0x8D53;
auto constexpr kOpenGLRenderbufferAlphaSizeOes = 0x8D53;
auto constexpr kOpenGLRenderbufferBinding = 0x8CA7;
auto constexpr kOpenGLRenderbufferBindingAngle = 0x8CA7;
auto constexpr kOpenGLRenderbufferBindingExt = 0x8CA7;
auto constexpr kOpenGLRenderbufferBindingOes = 0x8CA7;
auto constexpr kOpenGLRenderbufferBlueSize = 0x8D52;
auto constexpr kOpenGLRenderbufferBlueSizeExt = 0x8D52;
auto constexpr kOpenGLRenderbufferBlueSizeOes = 0x8D52;
auto constexpr kOpenGLRenderbufferColorSamplesNv = 0x8E10;
auto constexpr kOpenGLRenderbufferCoverageSamplesNv = 0x8CAB;
auto constexpr kOpenGLRenderbufferDepthSize = 0x8D54;
auto constexpr kOpenGLRenderbufferDepthSizeExt = 0x8D54;
auto constexpr kOpenGLRenderbufferDepthSizeOes = 0x8D54;
auto constexpr kOpenGLRenderbufferExt = 0x8D41;
auto constexpr kOpenGLRenderbufferFreeMemoryAti = 0x87FD;
auto constexpr kOpenGLRenderbufferGreenSize = 0x8D51;
auto constexpr kOpenGLRenderbufferGreenSizeExt = 0x8D51;
auto constexpr kOpenGLRenderbufferGreenSizeOes = 0x8D51;
auto constexpr kOpenGLRenderbufferHeight = 0x8D43;
auto constexpr kOpenGLRenderbufferHeightExt = 0x8D43;
auto constexpr kOpenGLRenderbufferHeightOes = 0x8D43;
auto constexpr kOpenGLRenderbufferInternalFormat = 0x8D44;
auto constexpr kOpenGLRenderbufferInternalFormatExt = 0x8D44;
auto constexpr kOpenGLRenderbufferInternalFormatOes = 0x8D44;
auto constexpr kOpenGLRenderbufferOes = 0x8D41;
auto constexpr kOpenGLRenderbufferRedSize = 0x8D50;
auto constexpr kOpenGLRenderbufferRedSizeExt = 0x8D50;
auto constexpr kOpenGLRenderbufferRedSizeOes = 0x8D50;
auto constexpr kOpenGLRenderbufferSamples = 0x8CAB;
auto constexpr kOpenGLRenderbufferSamplesAngle = 0x8CAB;
auto constexpr kOpenGLRenderbufferSamplesApple = 0x8CAB;
auto constexpr kOpenGLRenderbufferSamplesExt = 0x8CAB;
auto constexpr kOpenGLRenderbufferSamplesImg = 0x9133;
auto constexpr kOpenGLRenderbufferSamplesNv = 0x8CAB;
auto constexpr kOpenGLRenderbufferStencilSize = 0x8D55;
auto constexpr kOpenGLRenderbufferStencilSizeExt = 0x8D55;
auto constexpr kOpenGLRenderbufferStencilSizeOes = 0x8D55;
auto constexpr kOpenGLRenderbufferStorageSamplesAmd = 0x91B2;
auto constexpr kOpenGLRenderbufferWidth = 0x8D42;
auto constexpr kOpenGLRenderbufferWidthExt = 0x8D42;
auto constexpr kOpenGLRenderbufferWidthOes = 0x8D42;
auto constexpr kOpenGLRenderer = 0x1F01;
auto constexpr kOpenGLRepeat = 0x2901;
auto constexpr kOpenGLReplace = 0x1E01;
auto constexpr kOpenGLReplaceExt = 0x8062;
auto constexpr kOpenGLReplaceMiddleSun = 0x0002;
auto constexpr kOpenGLReplaceOldestSun = 0x0003;
auto constexpr kOpenGLReplaceValueAmd = 0x874B;
auto constexpr kOpenGLReplacementCodeArrayPointerSun = 0x85C3;
auto constexpr kOpenGLReplacementCodeArrayStrideSun = 0x85C2;
auto constexpr kOpenGLReplacementCodeArraySun = 0x85C0;
auto constexpr kOpenGLReplacementCodeArrayTypeSun = 0x85C1;
auto constexpr kOpenGLReplacementCodeSun = 0x81D8;
auto constexpr kOpenGLReplicateBorder = 0x8153;
auto constexpr kOpenGLReplicateBorderHp = 0x8153;
auto constexpr kOpenGLRepresentativeFragmentTestNv = 0x937F;
auto constexpr kOpenGLRequiredTextureImageUnitsOes = 0x8D68;
auto constexpr kOpenGLResampleAverageOml = 0x8988;
auto constexpr kOpenGLResampleDecimateOml = 0x8989;
auto constexpr kOpenGLResampleDecimateSgix = 0x8430;
auto constexpr kOpenGLResampleReplicateOml = 0x8986;
auto constexpr kOpenGLResampleReplicateSgix = 0x8433;
auto constexpr kOpenGLResampleZeroFillOml = 0x8987;
auto constexpr kOpenGLResampleZeroFillSgix = 0x8434;
auto constexpr kOpenGLRescaleNormal = 0x803A;
auto constexpr kOpenGLRescaleNormalExt = 0x803A;
auto constexpr kOpenGLResetNotificationStrategy = 0x8256;
auto constexpr kOpenGLResetNotificationStrategyArb = 0x8256;
auto constexpr kOpenGLResetNotificationStrategyExt = 0x8256;
auto constexpr kOpenGLResetNotificationStrategyKhr = 0x8256;
auto constexpr kOpenGLRestartPathNv = 0xF0;
auto constexpr kOpenGLRestartSun = 0x0001;
auto constexpr kOpenGLRetainedApple = 0x8A1B;
auto constexpr kOpenGLReturn = 0x0102;
auto constexpr kOpenGLRg = 0x8227;
auto constexpr kOpenGLRg16 = 0x822C;
auto constexpr kOpenGLRg16Ext = 0x822C;
auto constexpr kOpenGLRg16Snorm = 0x8F99;
auto constexpr kOpenGLRg16SnormExt = 0x8F99;
auto constexpr kOpenGLRg16f = 0x822F;
auto constexpr kOpenGLRg16fExt = 0x822F;
auto constexpr kOpenGLRg16i = 0x8239;
auto constexpr kOpenGLRg16ui = 0x823A;
auto constexpr kOpenGLRg32f = 0x8230;
auto constexpr kOpenGLRg32fExt = 0x8230;
auto constexpr kOpenGLRg32i = 0x823B;
auto constexpr kOpenGLRg32ui = 0x823C;
auto constexpr kOpenGLRg8 = 0x822B;
auto constexpr kOpenGLRg8Ext = 0x822B;
auto constexpr kOpenGLRg8Snorm = 0x8F95;
auto constexpr kOpenGLRg8i = 0x8237;
auto constexpr kOpenGLRg8ui = 0x8238;
auto constexpr kOpenGLRgExt = 0x8227;
auto constexpr kOpenGLRgInteger = 0x8228;
auto constexpr kOpenGLRgSnorm = 0x8F91;
auto constexpr kOpenGLRgb = 0x1907;
auto constexpr kOpenGLRgb10 = 0x8052;
auto constexpr kOpenGLRgb10A2 = 0x8059;
auto constexpr kOpenGLRgb10A2Ext = 0x8059;
auto constexpr kOpenGLRgb10A2ui = 0x906F;
auto constexpr kOpenGLRgb10Ext = 0x8052;
auto constexpr kOpenGLRgb12 = 0x8053;
auto constexpr kOpenGLRgb12Ext = 0x8053;
auto constexpr kOpenGLRgb16 = 0x8054;
auto constexpr kOpenGLRgb16Ext = 0x8054;
auto constexpr kOpenGLRgb16Snorm = 0x8F9A;
auto constexpr kOpenGLRgb16SnormExt = 0x8F9A;
auto constexpr kOpenGLRgb16f = 0x881B;
auto constexpr kOpenGLRgb16fArb = 0x881B;
auto constexpr kOpenGLRgb16fExt = 0x881B;
auto constexpr kOpenGLRgb16i = 0x8D89;
auto constexpr kOpenGLRgb16iExt = 0x8D89;
auto constexpr kOpenGLRgb16ui = 0x8D77;
auto constexpr kOpenGLRgb16uiExt = 0x8D77;
auto constexpr kOpenGLRgb2Ext = 0x804E;
auto constexpr kOpenGLRgb32f = 0x8815;
auto constexpr kOpenGLRgb32fArb = 0x8815;
auto constexpr kOpenGLRgb32fExt = 0x8815;
auto constexpr kOpenGLRgb32i = 0x8D83;
auto constexpr kOpenGLRgb32iExt = 0x8D83;
auto constexpr kOpenGLRgb32ui = 0x8D71;
auto constexpr kOpenGLRgb32uiExt = 0x8D71;
auto constexpr kOpenGLRgb4 = 0x804F;
auto constexpr kOpenGLRgb4Ext = 0x804F;
auto constexpr kOpenGLRgb4S3tc = 0x83A1;
auto constexpr kOpenGLRgb5 = 0x8050;
auto constexpr kOpenGLRgb565 = 0x8D62;
auto constexpr kOpenGLRgb565Oes = 0x8D62;
auto constexpr kOpenGLRgb5A1 = 0x8057;
auto constexpr kOpenGLRgb5A1Ext = 0x8057;
auto constexpr kOpenGLRgb5A1Oes = 0x8057;
auto constexpr kOpenGLRgb5Ext = 0x8050;
auto constexpr kOpenGLRgb8 = 0x8051;
auto constexpr kOpenGLRgb8Ext = 0x8051;
auto constexpr kOpenGLRgb8Oes = 0x8051;
auto constexpr kOpenGLRgb8Snorm = 0x8F96;
auto constexpr kOpenGLRgb8i = 0x8D8F;
auto constexpr kOpenGLRgb8iExt = 0x8D8F;
auto constexpr kOpenGLRgb8ui = 0x8D7D;
auto constexpr kOpenGLRgb8uiExt = 0x8D7D;
auto constexpr kOpenGLRgb9E5 = 0x8C3D;
auto constexpr kOpenGLRgb9E5Apple = 0x8C3D;
auto constexpr kOpenGLRgb9E5Ext = 0x8C3D;
auto constexpr kOpenGLRgb422Apple = 0x8A1F;
auto constexpr kOpenGLRgbFloat16Apple = 0x881B;
auto constexpr kOpenGLRgbFloat16Ati = 0x881B;
auto constexpr kOpenGLRgbFloat32Apple = 0x8815;
auto constexpr kOpenGLRgbFloat32Ati = 0x8815;
auto constexpr kOpenGLRgbInteger = 0x8D98;
auto constexpr kOpenGLRgbIntegerExt = 0x8D98;
auto constexpr kOpenGLRgbRaw422Apple = 0x8A51;
auto constexpr kOpenGLRgbS3tc = 0x83A0;
auto constexpr kOpenGLRgbScale = 0x8573;
auto constexpr kOpenGLRgbScaleArb = 0x8573;
auto constexpr kOpenGLRgbScaleExt = 0x8573;
auto constexpr kOpenGLRgbSnorm = 0x8F92;
auto constexpr kOpenGLRgba = 0x1908;
auto constexpr kOpenGLRgba12 = 0x805A;
auto constexpr kOpenGLRgba12Ext = 0x805A;
auto constexpr kOpenGLRgba16 = 0x805B;
auto constexpr kOpenGLRgba16Ext = 0x805B;
auto constexpr kOpenGLRgba16Snorm = 0x8F9B;
auto constexpr kOpenGLRgba16SnormExt = 0x8F9B;
auto constexpr kOpenGLRgba16f = 0x881A;
auto constexpr kOpenGLRgba16fArb = 0x881A;
auto constexpr kOpenGLRgba16fExt = 0x881A;
auto constexpr kOpenGLRgba16i = 0x8D88;
auto constexpr kOpenGLRgba16iExt = 0x8D88;
auto constexpr kOpenGLRgba16ui = 0x8D76;
auto constexpr kOpenGLRgba16uiExt = 0x8D76;
auto constexpr kOpenGLRgba2 = 0x8055;
auto constexpr kOpenGLRgba2Ext = 0x8055;
auto constexpr kOpenGLRgba32f = 0x8814;
auto constexpr kOpenGLRgba32fArb = 0x8814;
auto constexpr kOpenGLRgba32fExt = 0x8814;
auto constexpr kOpenGLRgba32i = 0x8D82;
auto constexpr kOpenGLRgba32iExt = 0x8D82;
auto constexpr kOpenGLRgba32ui = 0x8D70;
auto constexpr kOpenGLRgba32uiExt = 0x8D70;
auto constexpr kOpenGLRgba4 = 0x8056;
auto constexpr kOpenGLRgba4Dxt5S3tc = 0x83A5;
auto constexpr kOpenGLRgba4Ext = 0x8056;
auto constexpr kOpenGLRgba4Oes = 0x8056;
auto constexpr kOpenGLRgba4S3tc = 0x83A3;
auto constexpr kOpenGLRgba8 = 0x8058;
auto constexpr kOpenGLRgba8Ext = 0x8058;
auto constexpr kOpenGLRgba8Oes = 0x8058;
auto constexpr kOpenGLRgba8Snorm = 0x8F97;
auto constexpr kOpenGLRgba8i = 0x8D8E;
auto constexpr kOpenGLRgba8iExt = 0x8D8E;
auto constexpr kOpenGLRgba8ui = 0x8D7C;
auto constexpr kOpenGLRgba8uiExt = 0x8D7C;
auto constexpr kOpenGLRgbaDxt5S3tc = 0x83A4;
auto constexpr kOpenGLRgbaFloat16Apple = 0x881A;
auto constexpr kOpenGLRgbaFloat16Ati = 0x881A;
auto constexpr kOpenGLRgbaFloat32Apple = 0x8814;
auto constexpr kOpenGLRgbaFloat32Ati = 0x8814;
auto constexpr kOpenGLRgbaFloatModeArb = 0x8820;
auto constexpr kOpenGLRgbaFloatModeAti = 0x8820;
auto constexpr kOpenGLRgbaInteger = 0x8D99;
auto constexpr kOpenGLRgbaIntegerExt = 0x8D99;
auto constexpr kOpenGLRgbaIntegerModeExt = 0x8D9E;
auto constexpr kOpenGLRgbaMode = 0x0C31;
auto constexpr kOpenGLRgbaS3tc = 0x83A2;
auto constexpr kOpenGLRgbaSignedComponentsExt = 0x8C3C;
auto constexpr kOpenGLRgbaSnorm = 0x8F93;
auto constexpr kOpenGLRgbaUnsignedDotProductMappingNv = 0x86D9;
auto constexpr kOpenGLRight = 0x0407;
auto constexpr kOpenGLRobustGpuTimeoutMsKhr = 0x82FD;
auto constexpr kOpenGLRoundNv = 0x90A4;
auto constexpr kOpenGLRoundedRect2Nv = 0xEA;
auto constexpr kOpenGLRoundedRect4Nv = 0xEC;
auto constexpr kOpenGLRoundedRect8Nv = 0xEE;
auto constexpr kOpenGLRoundedRectNv = 0xE8;
auto constexpr kOpenGLS = 0x2000;
auto constexpr kOpenGLSampleAlphaToCoverage = 0x809E;
auto constexpr kOpenGLSampleAlphaToCoverageArb = 0x809E;
auto constexpr kOpenGLSampleAlphaToMaskExt = 0x809E;
auto constexpr kOpenGLSampleAlphaToMaskSgis = 0x809E;
auto constexpr kOpenGLSampleAlphaToOne = 0x809F;
auto constexpr kOpenGLSampleAlphaToOneArb = 0x809F;
auto constexpr kOpenGLSampleAlphaToOneExt = 0x809F;
auto constexpr kOpenGLSampleAlphaToOneSgis = 0x809F;
auto constexpr kOpenGLSampleBuffers = 0x80A8;
auto constexpr kOpenGLSampleBuffers3dfx = 0x86B3;
auto constexpr kOpenGLSampleBuffersArb = 0x80A8;
auto constexpr kOpenGLSampleBuffersExt = 0x80A8;
auto constexpr kOpenGLSampleBuffersSgis = 0x80A8;
auto constexpr kOpenGLSampleCoverage = 0x80A0;
auto constexpr kOpenGLSampleCoverageArb = 0x80A0;
auto constexpr kOpenGLSampleCoverageInvert = 0x80AB;
auto constexpr kOpenGLSampleCoverageInvertArb = 0x80AB;
auto constexpr kOpenGLSampleCoverageValue = 0x80AA;
auto constexpr kOpenGLSampleCoverageValueArb = 0x80AA;
auto constexpr kOpenGLSampleLocationArb = 0x8E50;
auto constexpr kOpenGLSampleLocationNv = 0x8E50;
auto constexpr kOpenGLSampleLocationPixelGridHeightArb = 0x933F;
auto constexpr kOpenGLSampleLocationPixelGridHeightNv = 0x933F;
auto constexpr kOpenGLSampleLocationPixelGridWidthArb = 0x933E;
auto constexpr kOpenGLSampleLocationPixelGridWidthNv = 0x933E;
auto constexpr kOpenGLSampleLocationSubpixelBitsArb = 0x933D;
auto constexpr kOpenGLSampleLocationSubpixelBitsNv = 0x933D;
auto constexpr kOpenGLSampleMask = 0x8E51;
auto constexpr kOpenGLSampleMaskExt = 0x80A0;
auto constexpr kOpenGLSampleMaskInvertExt = 0x80AB;
auto constexpr kOpenGLSampleMaskInvertSgis = 0x80AB;
auto constexpr kOpenGLSampleMaskNv = 0x8E51;
auto constexpr kOpenGLSampleMaskSgis = 0x80A0;
auto constexpr kOpenGLSampleMaskValue = 0x8E52;
auto constexpr kOpenGLSampleMaskValueExt = 0x80AA;
auto constexpr kOpenGLSampleMaskValueNv = 0x8E52;
auto constexpr kOpenGLSampleMaskValueSgis = 0x80AA;
auto constexpr kOpenGLSamplePatternExt = 0x80AC;
auto constexpr kOpenGLSamplePatternSgis = 0x80AC;
auto constexpr kOpenGLSamplePosition = 0x8E50;
auto constexpr kOpenGLSamplePositionNv = 0x8E50;
auto constexpr kOpenGLSampleShading = 0x8C36;
auto constexpr kOpenGLSampleShadingArb = 0x8C36;
auto constexpr kOpenGLSampleShadingOes = 0x8C36;
auto constexpr kOpenGLSampler = 0x82E6;
auto constexpr kOpenGLSampler1d = 0x8B5D;
auto constexpr kOpenGLSampler1dArb = 0x8B5D;
auto constexpr kOpenGLSampler1dArray = 0x8DC0;
auto constexpr kOpenGLSampler1dArrayExt = 0x8DC0;
auto constexpr kOpenGLSampler1dArrayShadow = 0x8DC3;
auto constexpr kOpenGLSampler1dArrayShadowExt = 0x8DC3;
auto constexpr kOpenGLSampler1dShadow = 0x8B61;
auto constexpr kOpenGLSampler1dShadowArb = 0x8B61;
auto constexpr kOpenGLSampler2d = 0x8B5E;
auto constexpr kOpenGLSampler2dArb = 0x8B5E;
auto constexpr kOpenGLSampler2dArray = 0x8DC1;
auto constexpr kOpenGLSampler2dArrayExt = 0x8DC1;
auto constexpr kOpenGLSampler2dArrayShadow = 0x8DC4;
auto constexpr kOpenGLSampler2dArrayShadowExt = 0x8DC4;
auto constexpr kOpenGLSampler2dArrayShadowNv = 0x8DC4;
auto constexpr kOpenGLSampler2dMultisample = 0x9108;
auto constexpr kOpenGLSampler2dMultisampleArray = 0x910B;
auto constexpr kOpenGLSampler2dMultisampleArrayOes = 0x910B;
auto constexpr kOpenGLSampler2dRect = 0x8B63;
auto constexpr kOpenGLSampler2dRectArb = 0x8B63;
auto constexpr kOpenGLSampler2dRectShadow = 0x8B64;
auto constexpr kOpenGLSampler2dRectShadowArb = 0x8B64;
auto constexpr kOpenGLSampler2dShadow = 0x8B62;
auto constexpr kOpenGLSampler2dShadowArb = 0x8B62;
auto constexpr kOpenGLSampler2dShadowExt = 0x8B62;
auto constexpr kOpenGLSampler3d = 0x8B5F;
auto constexpr kOpenGLSampler3dArb = 0x8B5F;
auto constexpr kOpenGLSampler3dOes = 0x8B5F;
auto constexpr kOpenGLSamplerBinding = 0x8919;
auto constexpr kOpenGLSamplerBuffer = 0x8DC2;
auto constexpr kOpenGLSamplerBufferAmd = 0x9001;
auto constexpr kOpenGLSamplerBufferExt = 0x8DC2;
auto constexpr kOpenGLSamplerBufferOes = 0x8DC2;
auto constexpr kOpenGLSamplerCube = 0x8B60;
auto constexpr kOpenGLSamplerCubeArb = 0x8B60;
auto constexpr kOpenGLSamplerCubeMapArray = 0x900C;
auto constexpr kOpenGLSamplerCubeMapArrayArb = 0x900C;
auto constexpr kOpenGLSamplerCubeMapArrayExt = 0x900C;
auto constexpr kOpenGLSamplerCubeMapArrayOes = 0x900C;
auto constexpr kOpenGLSamplerCubeMapArrayShadow = 0x900D;
auto constexpr kOpenGLSamplerCubeMapArrayShadowArb = 0x900D;
auto constexpr kOpenGLSamplerCubeMapArrayShadowExt = 0x900D;
auto constexpr kOpenGLSamplerCubeMapArrayShadowOes = 0x900D;
auto constexpr kOpenGLSamplerCubeShadow = 0x8DC5;
auto constexpr kOpenGLSamplerCubeShadowExt = 0x8DC5;
auto constexpr kOpenGLSamplerCubeShadowNv = 0x8DC5;
auto constexpr kOpenGLSamplerExternal2dY2yExt = 0x8BE7;
auto constexpr kOpenGLSamplerExternalOes = 0x8D66;
auto constexpr kOpenGLSamplerKhr = 0x82E6;
auto constexpr kOpenGLSamplerObjectAmd = 0x9155;
auto constexpr kOpenGLSamplerRenderbufferNv = 0x8E56;
auto constexpr kOpenGLSamples = 0x80A9;
auto constexpr kOpenGLSamples3dfx = 0x86B4;
auto constexpr kOpenGLSamplesArb = 0x80A9;
auto constexpr kOpenGLSamplesExt = 0x80A9;
auto constexpr kOpenGLSamplesPassed = 0x8914;
auto constexpr kOpenGLSamplesPassedArb = 0x8914;
auto constexpr kOpenGLSamplesSgis = 0x80A9;
auto constexpr kOpenGLSaturateBitAti = 0x00000040;
auto constexpr kOpenGLScalarExt = 0x87BE;
auto constexpr kOpenGLScaleByFourNv = 0x853F;
auto constexpr kOpenGLScaleByOneHalfNv = 0x8540;
auto constexpr kOpenGLScaleByTwoNv = 0x853E;
auto constexpr kOpenGLScalebiasHintSgix = 0x8322;
auto constexpr kOpenGLScaledResolveFastestExt = 0x90BA;
auto constexpr kOpenGLScaledResolveNicestExt = 0x90BB;
auto constexpr kOpenGLScissorBit = 0x00080000;
auto constexpr kOpenGLScissorBox = 0x0C10;
auto constexpr kOpenGLScissorBoxExclusiveNv = 0x9556;
auto constexpr kOpenGLScissorCommandNv = 0x0011;
auto constexpr kOpenGLScissorTest = 0x0C11;
auto constexpr kOpenGLScissorTestExclusiveNv = 0x9555;
auto constexpr kOpenGLScreen = 0x9295;
auto constexpr kOpenGLScreenCoordinatesRend = 0x8490;
auto constexpr kOpenGLScreenKhr = 0x9295;
auto constexpr kOpenGLScreenNv = 0x9295;
auto constexpr kOpenGLSecondaryColorArray = 0x845E;
auto constexpr kOpenGLSecondaryColorArrayAddressNv = 0x8F27;
auto constexpr kOpenGLSecondaryColorArrayBufferBinding = 0x889C;
auto constexpr kOpenGLSecondaryColorArrayBufferBindingArb = 0x889C;
auto constexpr kOpenGLSecondaryColorArrayExt = 0x845E;
auto constexpr kOpenGLSecondaryColorArrayLengthNv = 0x8F31;
auto constexpr kOpenGLSecondaryColorArrayListIbm = 103077;
auto constexpr kOpenGLSecondaryColorArrayListStrideIbm = 103087;
auto constexpr kOpenGLSecondaryColorArrayPointer = 0x845D;
auto constexpr kOpenGLSecondaryColorArrayPointerExt = 0x845D;
auto constexpr kOpenGLSecondaryColorArraySize = 0x845A;
auto constexpr kOpenGLSecondaryColorArraySizeExt = 0x845A;
auto constexpr kOpenGLSecondaryColorArrayStride = 0x845C;
auto constexpr kOpenGLSecondaryColorArrayStrideExt = 0x845C;
auto constexpr kOpenGLSecondaryColorArrayType = 0x845B;
auto constexpr kOpenGLSecondaryColorArrayTypeExt = 0x845B;
auto constexpr kOpenGLSecondaryColorNv = 0x852D;
auto constexpr kOpenGLSecondaryInterpolatorAti = 0x896D;
auto constexpr kOpenGLSelect = 0x1C02;
auto constexpr kOpenGLSelectionBufferPointer = 0x0DF3;
auto constexpr kOpenGLSelectionBufferSize = 0x0DF4;
auto constexpr kOpenGLSemaphoreTypeBinaryNv = 0x95B4;
auto constexpr kOpenGLSemaphoreTypeNv = 0x95B3;
auto constexpr kOpenGLSemaphoreTypeTimelineNv = 0x95B5;
auto constexpr kOpenGLSeparable2d = 0x8012;
auto constexpr kOpenGLSeparable2dExt = 0x8012;
auto constexpr kOpenGLSeparateAttribs = 0x8C8D;
auto constexpr kOpenGLSeparateAttribsExt = 0x8C8D;
auto constexpr kOpenGLSeparateAttribsNv = 0x8C8D;
auto constexpr kOpenGLSeparateSpecularColor = 0x81FA;
auto constexpr kOpenGLSeparateSpecularColorExt = 0x81FA;
auto constexpr kOpenGLSet = 0x150F;
auto constexpr kOpenGLSetAmd = 0x874A;
auto constexpr kOpenGLSgxBinaryImg = 0x8C0A;
auto constexpr kOpenGLSgxProgramBinaryImg = 0x9130;
auto constexpr kOpenGLShadeModel = 0x0B54;
auto constexpr kOpenGLShader = 0x82E1;
auto constexpr kOpenGLShaderBinaryDmp = 0x9250;
auto constexpr kOpenGLShaderBinaryFormatSpirV = 0x9551;
auto constexpr kOpenGLShaderBinaryFormatSpirVArb = 0x9551;
auto constexpr kOpenGLShaderBinaryFormats = 0x8DF8;
auto constexpr kOpenGLShaderBinaryViv = 0x8FC4;
auto constexpr kOpenGLShaderCompiler = 0x8DFA;
auto constexpr kOpenGLShaderConsistentNv = 0x86DD;
auto constexpr kOpenGLShaderGlobalAccessBarrierBitNv = 0x00000010;
auto constexpr kOpenGLShaderImageAccessBarrierBit = 0x00000020;
auto constexpr kOpenGLShaderImageAccessBarrierBitExt = 0x00000020;
auto constexpr kOpenGLShaderImageAtomic = 0x82A6;
auto constexpr kOpenGLShaderImageLoad = 0x82A4;
auto constexpr kOpenGLShaderImageStore = 0x82A5;
auto constexpr kOpenGLShaderIncludeArb = 0x8DAE;
auto constexpr kOpenGLShaderKhr = 0x82E1;
auto constexpr kOpenGLShaderObjectArb = 0x8B48;
auto constexpr kOpenGLShaderObjectExt = 0x8B48;
auto constexpr kOpenGLShaderOperationNv = 0x86DF;
auto constexpr kOpenGLShaderPixelLocalStorageExt = 0x8F64;
auto constexpr kOpenGLShaderSourceLength = 0x8B88;
auto constexpr kOpenGLShaderStorageBarrierBit = 0x00002000;
auto constexpr kOpenGLShaderStorageBlock = 0x92E6;
auto constexpr kOpenGLShaderStorageBuffer = 0x90D2;
auto constexpr kOpenGLShaderStorageBufferBinding = 0x90D3;
auto constexpr kOpenGLShaderStorageBufferOffsetAlignment = 0x90DF;
auto constexpr kOpenGLShaderStorageBufferSize = 0x90D5;
auto constexpr kOpenGLShaderStorageBufferStart = 0x90D4;
auto constexpr kOpenGLShaderType = 0x8B4F;
auto constexpr kOpenGLShadingLanguageVersion = 0x8B8C;
auto constexpr kOpenGLShadingLanguageVersionArb = 0x8B8C;
auto constexpr kOpenGLShadingRate16InvocationsPerPixelNv = 0x956F;
auto constexpr kOpenGLShadingRate1InvocationPer1x2PixelsNv = 0x9566;
auto constexpr kOpenGLShadingRate1InvocationPer2x1PixelsNv = 0x9567;
auto constexpr kOpenGLShadingRate1InvocationPer2x2PixelsNv = 0x9568;
auto constexpr kOpenGLShadingRate1InvocationPer2x4PixelsNv = 0x9569;
auto constexpr kOpenGLShadingRate1InvocationPer4x2PixelsNv = 0x956A;
auto constexpr kOpenGLShadingRate1InvocationPer4x4PixelsNv = 0x956B;
auto constexpr kOpenGLShadingRate1InvocationPerPixelNv = 0x9565;
auto constexpr kOpenGLShadingRate1x1PixelsExt = 0x96A6;
auto constexpr kOpenGLShadingRate1x1PixelsQcom = 0x96A6;
auto constexpr kOpenGLShadingRate1x2PixelsExt = 0x96A7;
auto constexpr kOpenGLShadingRate1x2PixelsQcom = 0x96A7;
auto constexpr kOpenGLShadingRate1x4PixelsExt = 0x96AA;
auto constexpr kOpenGLShadingRate1x4PixelsQcom = 0x96AA;
auto constexpr kOpenGLShadingRate2InvocationsPerPixelNv = 0x956C;
auto constexpr kOpenGLShadingRate2x1PixelsExt = 0x96A8;
auto constexpr kOpenGLShadingRate2x1PixelsQcom = 0x96A8;
auto constexpr kOpenGLShadingRate2x2PixelsExt = 0x96A9;
auto constexpr kOpenGLShadingRate2x2PixelsQcom = 0x96A9;
auto constexpr kOpenGLShadingRate2x4PixelsExt = 0x96AD;
auto constexpr kOpenGLShadingRate2x4PixelsQcom = 0x96AD;
auto constexpr kOpenGLShadingRate4InvocationsPerPixelNv = 0x956D;
auto constexpr kOpenGLShadingRate4x1PixelsExt = 0x96AB;
auto constexpr kOpenGLShadingRate4x1PixelsQcom = 0x96AB;
auto constexpr kOpenGLShadingRate4x2PixelsExt = 0x96AC;
auto constexpr kOpenGLShadingRate4x2PixelsQcom = 0x96AC;
auto constexpr kOpenGLShadingRate4x4PixelsExt = 0x96AE;
auto constexpr kOpenGLShadingRate4x4PixelsQcom = 0x96AE;
auto constexpr kOpenGLShadingRate8InvocationsPerPixelNv = 0x956E;
auto constexpr kOpenGLShadingRateAttachmentExt = 0x96D1;
auto constexpr kOpenGLShadingRateExt = 0x96D0;
auto constexpr kOpenGLShadingRateImageBindingNv = 0x955B;
auto constexpr kOpenGLShadingRateImageNv = 0x9563;
auto constexpr kOpenGLShadingRateImagePaletteCountNv = 0x95B2;
auto constexpr kOpenGLShadingRateImagePaletteSizeNv = 0x955E;
auto constexpr kOpenGLShadingRateImagePerPrimitiveNv = 0x95B1;
auto constexpr kOpenGLShadingRateImageTexelHeightNv = 0x955D;
auto constexpr kOpenGLShadingRateImageTexelWidthNv = 0x955C;
auto constexpr kOpenGLShadingRateNoInvocationsNv = 0x9564;
auto constexpr kOpenGLShadingRatePreserveAspectRatioQcom = 0x96A5;
auto constexpr kOpenGLShadingRateQcom = 0x96A4;
auto constexpr kOpenGLShadingRateSampleOrderDefaultNv = 0x95AE;
auto constexpr kOpenGLShadingRateSampleOrderPixelMajorNv = 0x95AF;
auto constexpr kOpenGLShadingRateSampleOrderSampleMajorNv = 0x95B0;
auto constexpr kOpenGLShadowAmbientSgix = 0x80BF;
auto constexpr kOpenGLShadowAttenuationExt = 0x834E;
auto constexpr kOpenGLSharedEdgeNv = 0xC0;
auto constexpr kOpenGLSharedTexturePaletteExt = 0x81FB;
auto constexpr kOpenGLSharpenTextureFuncPointsSgis = 0x80B0;
auto constexpr kOpenGLShininess = 0x1601;
auto constexpr kOpenGLShort = 0x1402;
auto constexpr kOpenGLSignaled = 0x9119;
auto constexpr kOpenGLSignaledApple = 0x9119;
auto constexpr kOpenGLSignedAlpha8Nv = 0x8706;
auto constexpr kOpenGLSignedAlphaNv = 0x8705;
auto constexpr kOpenGLSignedHilo16Nv = 0x86FA;
auto constexpr kOpenGLSignedHilo8Nv = 0x885F;
auto constexpr kOpenGLSignedHiloNv = 0x86F9;
auto constexpr kOpenGLSignedIdentityNv = 0x853C;
auto constexpr kOpenGLSignedIntensity8Nv = 0x8708;
auto constexpr kOpenGLSignedIntensityNv = 0x8707;
auto constexpr kOpenGLSignedLuminance8Alpha8Nv = 0x8704;
auto constexpr kOpenGLSignedLuminance8Nv = 0x8702;
auto constexpr kOpenGLSignedLuminanceAlphaNv = 0x8703;
auto constexpr kOpenGLSignedLuminanceNv = 0x8701;
auto constexpr kOpenGLSignedNegateNv = 0x853D;
auto constexpr kOpenGLSignedNormalized = 0x8F9C;
auto constexpr kOpenGLSignedRgb8Nv = 0x86FF;
auto constexpr kOpenGLSignedRgb8UnsignedAlpha8Nv = 0x870D;
auto constexpr kOpenGLSignedRgbNv = 0x86FE;
auto constexpr kOpenGLSignedRgbUnsignedAlphaNv = 0x870C;
auto constexpr kOpenGLSignedRgba8Nv = 0x86FC;
auto constexpr kOpenGLSignedRgbaNv = 0x86FB;
auto constexpr kOpenGLSimultaneousTextureAndDepthTest = 0x82AC;
auto constexpr kOpenGLSimultaneousTextureAndDepthWrite = 0x82AE;
auto constexpr kOpenGLSimultaneousTextureAndStencilTest = 0x82AD;
auto constexpr kOpenGLSimultaneousTextureAndStencilWrite = 0x82AF;
auto constexpr kOpenGLSingleColor = 0x81F9;
auto constexpr kOpenGLSingleColorExt = 0x81F9;
auto constexpr kOpenGLSkipComponents1Nv = -6;
auto constexpr kOpenGLSkipComponents2Nv = -5;
auto constexpr kOpenGLSkipComponents3Nv = -4;
auto constexpr kOpenGLSkipComponents4Nv = -3;
auto constexpr kOpenGLSkipDecodeExt = 0x8A4A;
auto constexpr kOpenGLSkipMissingGlyphNv = 0x90A9;
auto constexpr kOpenGLSliceAccumSun = 0x85CC;
auto constexpr kOpenGLSlim10uSgix = 0x831E;
auto constexpr kOpenGLSlim12sSgix = 0x831F;
auto constexpr kOpenGLSlim8uSgix = 0x831D;
auto constexpr kOpenGLSluminance = 0x8C46;
auto constexpr kOpenGLSluminance8 = 0x8C47;
auto constexpr kOpenGLSluminance8Alpha8 = 0x8C45;
auto constexpr kOpenGLSluminance8Alpha8Ext = 0x8C45;
auto constexpr kOpenGLSluminance8Alpha8Nv = 0x8C45;
auto constexpr kOpenGLSluminance8Ext = 0x8C47;
auto constexpr kOpenGLSluminance8Nv = 0x8C47;
auto constexpr kOpenGLSluminanceAlpha = 0x8C44;
auto constexpr kOpenGLSluminanceAlphaExt = 0x8C44;
auto constexpr kOpenGLSluminanceAlphaNv = 0x8C44;
auto constexpr kOpenGLSluminanceExt = 0x8C46;
auto constexpr kOpenGLSluminanceNv = 0x8C46;
auto constexpr kOpenGLSmCountNv = 0x933B;
auto constexpr kOpenGLSmallCcwArcToNv = 0x12;
auto constexpr kOpenGLSmallCwArcToNv = 0x14;
auto constexpr kOpenGLSmaphs30ProgramBinaryDmp = 0x9251;
auto constexpr kOpenGLSmaphsProgramBinaryDmp = 0x9252;
auto constexpr kOpenGLSmooth = 0x1D01;
auto constexpr kOpenGLSmoothCubicCurveToNv = 0x10;
auto constexpr kOpenGLSmoothLineWidthGranularity = 0x0B23;
auto constexpr kOpenGLSmoothLineWidthRange = 0x0B22;
auto constexpr kOpenGLSmoothPointSizeGranularity = 0x0B13;
auto constexpr kOpenGLSmoothPointSizeRange = 0x0B12;
auto constexpr kOpenGLSmoothQuadraticCurveToNv = 0x0E;
auto constexpr kOpenGLSoftlight = 0x929C;
auto constexpr kOpenGLSoftlightKhr = 0x929C;
auto constexpr kOpenGLSoftlightNv = 0x929C;
auto constexpr kOpenGLSource0Alpha = 0x8588;
auto constexpr kOpenGLSource0AlphaArb = 0x8588;
auto constexpr kOpenGLSource0AlphaExt = 0x8588;
auto constexpr kOpenGLSource0Rgb = 0x8580;
auto constexpr kOpenGLSource0RgbArb = 0x8580;
auto constexpr kOpenGLSource0RgbExt = 0x8580;
auto constexpr kOpenGLSource1Alpha = 0x8589;
auto constexpr kOpenGLSource1AlphaArb = 0x8589;
auto constexpr kOpenGLSource1AlphaExt = 0x8589;
auto constexpr kOpenGLSource1Rgb = 0x8581;
auto constexpr kOpenGLSource1RgbArb = 0x8581;
auto constexpr kOpenGLSource1RgbExt = 0x8581;
auto constexpr kOpenGLSource2Alpha = 0x858A;
auto constexpr kOpenGLSource2AlphaArb = 0x858A;
auto constexpr kOpenGLSource2AlphaExt = 0x858A;
auto constexpr kOpenGLSource2Rgb = 0x8582;
auto constexpr kOpenGLSource2RgbArb = 0x8582;
auto constexpr kOpenGLSource2RgbExt = 0x8582;
auto constexpr kOpenGLSource3AlphaNv = 0x858B;
auto constexpr kOpenGLSource3RgbNv = 0x8583;
auto constexpr kOpenGLSpare0Nv = 0x852E;
auto constexpr kOpenGLSpare0PlusSecondaryColorNv = 0x8532;
auto constexpr kOpenGLSpare1Nv = 0x852F;
auto constexpr kOpenGLSparseBufferPageSizeArb = 0x82F8;
auto constexpr kOpenGLSparseStorageBitArb = 0x0400;
auto constexpr kOpenGLSparseTextureFullArrayCubeMipmapsArb = 0x91A9;
auto constexpr kOpenGLSparseTextureFullArrayCubeMipmapsExt = 0x91A9;
auto constexpr kOpenGLSpecular = 0x1202;
auto constexpr kOpenGLSphereMap = 0x2402;
auto constexpr kOpenGLSpirVBinary = 0x9552;
auto constexpr kOpenGLSpirVBinaryArb = 0x9552;
auto constexpr kOpenGLSpirVExtensions = 0x9553;
auto constexpr kOpenGLSpotCutoff = 0x1206;
auto constexpr kOpenGLSpotDirection = 0x1204;
auto constexpr kOpenGLSpotExponent = 0x1205;
auto constexpr kOpenGLSpriteAxialSgix = 0x814C;
auto constexpr kOpenGLSpriteAxisSgix = 0x814A;
auto constexpr kOpenGLSpriteEyeAlignedSgix = 0x814E;
auto constexpr kOpenGLSpriteModeSgix = 0x8149;
auto constexpr kOpenGLSpriteObjectAlignedSgix = 0x814D;
auto constexpr kOpenGLSpriteSgix = 0x8148;
auto constexpr kOpenGLSpriteTranslationSgix = 0x814B;
auto constexpr kOpenGLSquareNv = 0x90A3;
auto constexpr kOpenGLSr8Ext = 0x8FBD;
auto constexpr kOpenGLSrc0Alpha = 0x8588;
auto constexpr kOpenGLSrc0Rgb = 0x8580;
auto constexpr kOpenGLSrc1Alpha = 0x8589;
auto constexpr kOpenGLSrc1AlphaExt = 0x8589;
auto constexpr kOpenGLSrc1Color = 0x88F9;
auto constexpr kOpenGLSrc1ColorExt = 0x88F9;
auto constexpr kOpenGLSrc1Rgb = 0x8581;
auto constexpr kOpenGLSrc2Alpha = 0x858A;
auto constexpr kOpenGLSrc2Rgb = 0x8582;
auto constexpr kOpenGLSrcAlpha = 0x0302;
auto constexpr kOpenGLSrcAlphaSaturate = 0x0308;
auto constexpr kOpenGLSrcAlphaSaturateExt = 0x0308;
auto constexpr kOpenGLSrcAtopNv = 0x928E;
auto constexpr kOpenGLSrcColor = 0x0300;
auto constexpr kOpenGLSrcInNv = 0x928A;
auto constexpr kOpenGLSrcNv = 0x9286;
auto constexpr kOpenGLSrcOutNv = 0x928C;
auto constexpr kOpenGLSrcOverNv = 0x9288;
auto constexpr kOpenGLSrg8Ext = 0x8FBE;
auto constexpr kOpenGLSrgb = 0x8C40;
auto constexpr kOpenGLSrgb8 = 0x8C41;
auto constexpr kOpenGLSrgb8Alpha8 = 0x8C43;
auto constexpr kOpenGLSrgb8Alpha8Ext = 0x8C43;
auto constexpr kOpenGLSrgb8Ext = 0x8C41;
auto constexpr kOpenGLSrgb8Nv = 0x8C41;
auto constexpr kOpenGLSrgbAlpha = 0x8C42;
auto constexpr kOpenGLSrgbAlphaExt = 0x8C42;
auto constexpr kOpenGLSrgbDecodeArb = 0x8299;
auto constexpr kOpenGLSrgbExt = 0x8C40;
auto constexpr kOpenGLSrgbRead = 0x8297;
auto constexpr kOpenGLSrgbWrite = 0x8298;
auto constexpr kOpenGLStackOverflow = 0x0503;
auto constexpr kOpenGLStackOverflowKhr = 0x0503;
auto constexpr kOpenGLStackUnderflow = 0x0504;
auto constexpr kOpenGLStackUnderflowKhr = 0x0504;
auto constexpr kOpenGLStandardFontFormatNv = 0x936C;
auto constexpr kOpenGLStandardFontNameNv = 0x9072;
auto constexpr kOpenGLStateRestore = 0x8BDC;
auto constexpr kOpenGLStaticAti = 0x8760;
auto constexpr kOpenGLStaticCopy = 0x88E6;
auto constexpr kOpenGLStaticCopyArb = 0x88E6;
auto constexpr kOpenGLStaticDraw = 0x88E4;
auto constexpr kOpenGLStaticDrawArb = 0x88E4;
auto constexpr kOpenGLStaticRead = 0x88E5;
auto constexpr kOpenGLStaticReadArb = 0x88E5;
auto constexpr kOpenGLStaticVertexArrayIbm = 103061;
auto constexpr kOpenGLStencil = 0x1802;
auto constexpr kOpenGLStencilAttachment = 0x8D20;
auto constexpr kOpenGLStencilAttachmentExt = 0x8D20;
auto constexpr kOpenGLStencilAttachmentOes = 0x8D20;
auto constexpr kOpenGLStencilBackFail = 0x8801;
auto constexpr kOpenGLStencilBackFailAti = 0x8801;
auto constexpr kOpenGLStencilBackFunc = 0x8800;
auto constexpr kOpenGLStencilBackFuncAti = 0x8800;
auto constexpr kOpenGLStencilBackOpValueAmd = 0x874D;
auto constexpr kOpenGLStencilBackPassDepthFail = 0x8802;
auto constexpr kOpenGLStencilBackPassDepthFailAti = 0x8802;
auto constexpr kOpenGLStencilBackPassDepthPass = 0x8803;
auto constexpr kOpenGLStencilBackPassDepthPassAti = 0x8803;
auto constexpr kOpenGLStencilBackRef = 0x8CA3;
auto constexpr kOpenGLStencilBackValueMask = 0x8CA4;
auto constexpr kOpenGLStencilBackWritemask = 0x8CA5;
auto constexpr kOpenGLStencilBits = 0x0D57;
auto constexpr kOpenGLStencilBufferBit = 0x00000400;
auto constexpr kOpenGLStencilBufferBit0Qcom = 0x00010000;
auto constexpr kOpenGLStencilBufferBit1Qcom = 0x00020000;
auto constexpr kOpenGLStencilBufferBit2Qcom = 0x00040000;
auto constexpr kOpenGLStencilBufferBit3Qcom = 0x00080000;
auto constexpr kOpenGLStencilBufferBit4Qcom = 0x00100000;
auto constexpr kOpenGLStencilBufferBit5Qcom = 0x00200000;
auto constexpr kOpenGLStencilBufferBit6Qcom = 0x00400000;
auto constexpr kOpenGLStencilBufferBit7Qcom = 0x00800000;
auto constexpr kOpenGLStencilClearTagValueExt = 0x88F3;
auto constexpr kOpenGLStencilClearValue = 0x0B91;
auto constexpr kOpenGLStencilComponents = 0x8285;
auto constexpr kOpenGLStencilExt = 0x1802;
auto constexpr kOpenGLStencilFail = 0x0B94;
auto constexpr kOpenGLStencilFunc = 0x0B92;
auto constexpr kOpenGLStencilIndex = 0x1901;
auto constexpr kOpenGLStencilIndex1 = 0x8D46;
auto constexpr kOpenGLStencilIndex16 = 0x8D49;
auto constexpr kOpenGLStencilIndex16Ext = 0x8D49;
auto constexpr kOpenGLStencilIndex1Ext = 0x8D46;
auto constexpr kOpenGLStencilIndex1Oes = 0x8D46;
auto constexpr kOpenGLStencilIndex4 = 0x8D47;
auto constexpr kOpenGLStencilIndex4Ext = 0x8D47;
auto constexpr kOpenGLStencilIndex4Oes = 0x8D47;
auto constexpr kOpenGLStencilIndex8 = 0x8D48;
auto constexpr kOpenGLStencilIndex8Ext = 0x8D48;
auto constexpr kOpenGLStencilIndex8Oes = 0x8D48;
auto constexpr kOpenGLStencilIndexOes = 0x1901;
auto constexpr kOpenGLStencilOpValueAmd = 0x874C;
auto constexpr kOpenGLStencilPassDepthFail = 0x0B95;
auto constexpr kOpenGLStencilPassDepthPass = 0x0B96;
auto constexpr kOpenGLStencilRef = 0x0B97;
auto constexpr kOpenGLStencilRefCommandNv = 0x000C;
auto constexpr kOpenGLStencilRenderable = 0x8288;
auto constexpr kOpenGLStencilSamplesNv = 0x932E;
auto constexpr kOpenGLStencilTagBitsExt = 0x88F2;
auto constexpr kOpenGLStencilTest = 0x0B90;
auto constexpr kOpenGLStencilTestTwoSideExt = 0x8910;
auto constexpr kOpenGLStencilValueMask = 0x0B93;
auto constexpr kOpenGLStencilWritemask = 0x0B98;
auto constexpr kOpenGLStereo = 0x0C33;
auto constexpr kOpenGLStorageCachedApple = 0x85BE;
auto constexpr kOpenGLStorageClientApple = 0x85B4;
auto constexpr kOpenGLStoragePrivateApple = 0x85BD;
auto constexpr kOpenGLStorageSharedApple = 0x85BF;
auto constexpr kOpenGLStreamCopy = 0x88E2;
auto constexpr kOpenGLStreamCopyArb = 0x88E2;
auto constexpr kOpenGLStreamDraw = 0x88E0;
auto constexpr kOpenGLStreamDrawArb = 0x88E0;
auto constexpr kOpenGLStreamRasterizationAmd = 0x91A0;
auto constexpr kOpenGLStreamRead = 0x88E1;
auto constexpr kOpenGLStreamReadArb = 0x88E1;
auto constexpr kOpenGLStrictDepthfuncHintPgi = 0x1A216;
auto constexpr kOpenGLStrictLightingHintPgi = 0x1A217;
auto constexpr kOpenGLStrictScissorHintPgi = 0x1A218;
auto constexpr kOpenGLSubAti = 0x8965;
auto constexpr kOpenGLSubgroupFeatureArithmeticBitKhr = 0x00000004;
auto constexpr kOpenGLSubgroupFeatureBallotBitKhr = 0x00000008;
auto constexpr kOpenGLSubgroupFeatureBasicBitKhr = 0x00000001;
auto constexpr kOpenGLSubgroupFeatureClusteredBitKhr = 0x00000040;
auto constexpr kOpenGLSubgroupFeaturePartitionedBitNv = 0x00000100;
auto constexpr kOpenGLSubgroupFeatureQuadBitKhr = 0x00000080;
auto constexpr kOpenGLSubgroupFeatureShuffleBitKhr = 0x00000010;
auto constexpr kOpenGLSubgroupFeatureShuffleRelativeBitKhr = 0x00000020;
auto constexpr kOpenGLSubgroupFeatureVoteBitKhr = 0x00000002;
auto constexpr kOpenGLSubgroupQuadAllStagesKhr = 0x9535;
auto constexpr kOpenGLSubgroupSizeKhr = 0x9532;
auto constexpr kOpenGLSubgroupSupportedFeaturesKhr = 0x9534;
auto constexpr kOpenGLSubgroupSupportedStagesKhr = 0x9533;
auto constexpr kOpenGLSubpixelBits = 0x0D50;
auto constexpr kOpenGLSubpixelPrecisionBiasXBitsNv = 0x9347;
auto constexpr kOpenGLSubpixelPrecisionBiasYBitsNv = 0x9348;
auto constexpr kOpenGLSubsampleDistanceAmd = 0x883F;
auto constexpr kOpenGLSubtract = 0x84E7;
auto constexpr kOpenGLSubtractArb = 0x84E7;
auto constexpr kOpenGLSuccessNv = 0x902F;
auto constexpr kOpenGLSupersampleScaleXNv = 0x9372;
auto constexpr kOpenGLSupersampleScaleYNv = 0x9373;
auto constexpr kOpenGLSupportedMultisampleModesAmd = 0x91B7;
auto constexpr kOpenGLSurfaceCompressionExt = 0x96C0;
auto constexpr kOpenGLSurfaceCompressionFixedRate10bpcExt = 0x96CD;
auto constexpr kOpenGLSurfaceCompressionFixedRate11bpcExt = 0x96CE;
auto constexpr kOpenGLSurfaceCompressionFixedRate12bpcExt = 0x96CF;
auto constexpr kOpenGLSurfaceCompressionFixedRate1bpcExt = 0x96C4;
auto constexpr kOpenGLSurfaceCompressionFixedRate2bpcExt = 0x96C5;
auto constexpr kOpenGLSurfaceCompressionFixedRate3bpcExt = 0x96C6;
auto constexpr kOpenGLSurfaceCompressionFixedRate4bpcExt = 0x96C7;
auto constexpr kOpenGLSurfaceCompressionFixedRate5bpcExt = 0x96C8;
auto constexpr kOpenGLSurfaceCompressionFixedRate6bpcExt = 0x96C9;
auto constexpr kOpenGLSurfaceCompressionFixedRate7bpcExt = 0x96CA;
auto constexpr kOpenGLSurfaceCompressionFixedRate8bpcExt = 0x96CB;
auto constexpr kOpenGLSurfaceCompressionFixedRate9bpcExt = 0x96CC;
auto constexpr kOpenGLSurfaceCompressionFixedRateDefaultExt = 0x96C2;
auto constexpr kOpenGLSurfaceCompressionFixedRateNoneExt = 0x96C1;
auto constexpr kOpenGLSurfaceMappedNv = 0x8700;
auto constexpr kOpenGLSurfaceRegisteredNv = 0x86FD;
auto constexpr kOpenGLSurfaceStateNv = 0x86EB;
auto constexpr kOpenGLSwizzleStqAti = 0x8977;
auto constexpr kOpenGLSwizzleStqDqAti = 0x8979;
auto constexpr kOpenGLSwizzleStrAti = 0x8976;
auto constexpr kOpenGLSwizzleStrDrAti = 0x8978;
auto constexpr kOpenGLSwizzleStrqAti = 0x897A;
auto constexpr kOpenGLSwizzleStrqDqAti = 0x897B;
auto constexpr kOpenGLSyncClEventArb = 0x8240;
auto constexpr kOpenGLSyncClEventCompleteArb = 0x8241;
auto constexpr kOpenGLSyncCondition = 0x9113;
auto constexpr kOpenGLSyncConditionApple = 0x9113;
auto constexpr kOpenGLSyncFence = 0x9116;
auto constexpr kOpenGLSyncFenceApple = 0x9116;
auto constexpr kOpenGLSyncFlags = 0x9115;
auto constexpr kOpenGLSyncFlagsApple = 0x9115;
auto constexpr kOpenGLSyncFlushCommandsBit = 0x00000001;
auto constexpr kOpenGLSyncFlushCommandsBitApple = 0x00000001;
auto constexpr kOpenGLSyncGpuCommandsComplete = 0x9117;
auto constexpr kOpenGLSyncGpuCommandsCompleteApple = 0x9117;
auto constexpr kOpenGLSyncObjectApple = 0x8A53;
auto constexpr kOpenGLSyncStatus = 0x9114;
auto constexpr kOpenGLSyncStatusApple = 0x9114;
auto constexpr kOpenGLSyncX11FenceExt = 0x90E1;
auto constexpr kOpenGLSystemFontNameNv = 0x9073;
auto constexpr kOpenGLT = 0x2001;
auto constexpr kOpenGLT2fC3fV3f = 0x2A2A;
auto constexpr kOpenGLT2fC4fN3fV3f = 0x2A2C;
auto constexpr kOpenGLT2fC4ubV3f = 0x2A29;
auto constexpr kOpenGLT2fIuiN3fV2fExt = 0x81B3;
auto constexpr kOpenGLT2fIuiN3fV3fExt = 0x81B4;
auto constexpr kOpenGLT2fIuiV2fExt = 0x81B1;
auto constexpr kOpenGLT2fIuiV3fExt = 0x81B2;
auto constexpr kOpenGLT2fN3fV3f = 0x2A2B;
auto constexpr kOpenGLT2fV3f = 0x2A27;
auto constexpr kOpenGLT4fC4fN3fV4f = 0x2A2D;
auto constexpr kOpenGLT4fV4f = 0x2A28;
auto constexpr kOpenGLTableTooLarge = 0x8031;
auto constexpr kOpenGLTableTooLargeExt = 0x8031;
auto constexpr kOpenGLTangentArrayExt = 0x8439;
auto constexpr kOpenGLTangentArrayPointerExt = 0x8442;
auto constexpr kOpenGLTangentArrayStrideExt = 0x843F;
auto constexpr kOpenGLTangentArrayTypeExt = 0x843E;
auto constexpr kOpenGLTaskShaderBitNv = 0x00000080;
auto constexpr kOpenGLTaskShaderNv = 0x955A;
auto constexpr kOpenGLTaskSubroutineNv = 0x957D;
auto constexpr kOpenGLTaskSubroutineUniformNv = 0x957F;
auto constexpr kOpenGLTaskWorkGroupSizeNv = 0x953F;
auto constexpr kOpenGLTerminateSequenceCommandNv = 0x0000;
auto constexpr kOpenGLTessControlOutputVertices = 0x8E75;
auto constexpr kOpenGLTessControlOutputVerticesExt = 0x8E75;
auto constexpr kOpenGLTessControlOutputVerticesOes = 0x8E75;
auto constexpr kOpenGLTessControlProgramNv = 0x891E;
auto constexpr kOpenGLTessControlProgramParameterBufferNv = 0x8C74;
auto constexpr kOpenGLTessControlShader = 0x8E88;
auto constexpr kOpenGLTessControlShaderBit = 0x00000008;
auto constexpr kOpenGLTessControlShaderBitExt = 0x00000008;
auto constexpr kOpenGLTessControlShaderBitOes = 0x00000008;
auto constexpr kOpenGLTessControlShaderExt = 0x8E88;
auto constexpr kOpenGLTessControlShaderOes = 0x8E88;
auto constexpr kOpenGLTessControlShaderPatches = 0x82F1;
auto constexpr kOpenGLTessControlShaderPatchesArb = 0x82F1;
auto constexpr kOpenGLTessControlSubroutine = 0x92E9;
auto constexpr kOpenGLTessControlSubroutineUniform = 0x92EF;
auto constexpr kOpenGLTessControlTexture = 0x829C;
auto constexpr kOpenGLTessEvaluationProgramNv = 0x891F;
auto constexpr kOpenGLTessEvaluationProgramParameterBufferNv = 0x8C75;
auto constexpr kOpenGLTessEvaluationShader = 0x8E87;
auto constexpr kOpenGLTessEvaluationShaderBit = 0x00000010;
auto constexpr kOpenGLTessEvaluationShaderBitExt = 0x00000010;
auto constexpr kOpenGLTessEvaluationShaderBitOes = 0x00000010;
auto constexpr kOpenGLTessEvaluationShaderExt = 0x8E87;
auto constexpr kOpenGLTessEvaluationShaderInvocations = 0x82F2;
auto constexpr kOpenGLTessEvaluationShaderInvocationsArb = 0x82F2;
auto constexpr kOpenGLTessEvaluationShaderOes = 0x8E87;
auto constexpr kOpenGLTessEvaluationSubroutine = 0x92EA;
auto constexpr kOpenGLTessEvaluationSubroutineUniform = 0x92F0;
auto constexpr kOpenGLTessEvaluationTexture = 0x829D;
auto constexpr kOpenGLTessGenMode = 0x8E76;
auto constexpr kOpenGLTessGenModeExt = 0x8E76;
auto constexpr kOpenGLTessGenModeOes = 0x8E76;
auto constexpr kOpenGLTessGenPointMode = 0x8E79;
auto constexpr kOpenGLTessGenPointModeExt = 0x8E79;
auto constexpr kOpenGLTessGenPointModeOes = 0x8E79;
auto constexpr kOpenGLTessGenSpacing = 0x8E77;
auto constexpr kOpenGLTessGenSpacingExt = 0x8E77;
auto constexpr kOpenGLTessGenSpacingOes = 0x8E77;
auto constexpr kOpenGLTessGenVertexOrder = 0x8E78;
auto constexpr kOpenGLTessGenVertexOrderExt = 0x8E78;
auto constexpr kOpenGLTessGenVertexOrderOes = 0x8E78;
auto constexpr kOpenGLTessellationFactorAmd = 0x9005;
auto constexpr kOpenGLTessellationModeAmd = 0x9004;
auto constexpr kOpenGLTexcoord1BitPgi = 0x10000000;
auto constexpr kOpenGLTexcoord2BitPgi = 0x20000000;
auto constexpr kOpenGLTexcoord3BitPgi = 0x40000000;
auto constexpr kOpenGLTexcoord4BitPgi = 0x80000000;
auto constexpr kOpenGLTextFragmentShaderAti = 0x8200;
auto constexpr kOpenGLTexture = 0x1702;
auto constexpr kOpenGLTexture0 = 0x84C0;
auto constexpr kOpenGLTexture0Arb = 0x84C0;
auto constexpr kOpenGLTexture1 = 0x84C1;
auto constexpr kOpenGLTexture10 = 0x84CA;
auto constexpr kOpenGLTexture10Arb = 0x84CA;
auto constexpr kOpenGLTexture11 = 0x84CB;
auto constexpr kOpenGLTexture11Arb = 0x84CB;
auto constexpr kOpenGLTexture12 = 0x84CC;
auto constexpr kOpenGLTexture12Arb = 0x84CC;
auto constexpr kOpenGLTexture13 = 0x84CD;
auto constexpr kOpenGLTexture13Arb = 0x84CD;
auto constexpr kOpenGLTexture14 = 0x84CE;
auto constexpr kOpenGLTexture14Arb = 0x84CE;
auto constexpr kOpenGLTexture15 = 0x84CF;
auto constexpr kOpenGLTexture15Arb = 0x84CF;
auto constexpr kOpenGLTexture16 = 0x84D0;
auto constexpr kOpenGLTexture16Arb = 0x84D0;
auto constexpr kOpenGLTexture17 = 0x84D1;
auto constexpr kOpenGLTexture17Arb = 0x84D1;
auto constexpr kOpenGLTexture18 = 0x84D2;
auto constexpr kOpenGLTexture18Arb = 0x84D2;
auto constexpr kOpenGLTexture19 = 0x84D3;
auto constexpr kOpenGLTexture19Arb = 0x84D3;
auto constexpr kOpenGLTexture1Arb = 0x84C1;
auto constexpr kOpenGLTexture2 = 0x84C2;
auto constexpr kOpenGLTexture20 = 0x84D4;
auto constexpr kOpenGLTexture20Arb = 0x84D4;
auto constexpr kOpenGLTexture21 = 0x84D5;
auto constexpr kOpenGLTexture21Arb = 0x84D5;
auto constexpr kOpenGLTexture22 = 0x84D6;
auto constexpr kOpenGLTexture22Arb = 0x84D6;
auto constexpr kOpenGLTexture23 = 0x84D7;
auto constexpr kOpenGLTexture23Arb = 0x84D7;
auto constexpr kOpenGLTexture24 = 0x84D8;
auto constexpr kOpenGLTexture24Arb = 0x84D8;
auto constexpr kOpenGLTexture25 = 0x84D9;
auto constexpr kOpenGLTexture25Arb = 0x84D9;
auto constexpr kOpenGLTexture26 = 0x84DA;
auto constexpr kOpenGLTexture26Arb = 0x84DA;
auto constexpr kOpenGLTexture27 = 0x84DB;
auto constexpr kOpenGLTexture27Arb = 0x84DB;
auto constexpr kOpenGLTexture28 = 0x84DC;
auto constexpr kOpenGLTexture28Arb = 0x84DC;
auto constexpr kOpenGLTexture29 = 0x84DD;
auto constexpr kOpenGLTexture29Arb = 0x84DD;
auto constexpr kOpenGLTexture2Arb = 0x84C2;
auto constexpr kOpenGLTexture3 = 0x84C3;
auto constexpr kOpenGLTexture30 = 0x84DE;
auto constexpr kOpenGLTexture30Arb = 0x84DE;
auto constexpr kOpenGLTexture31 = 0x84DF;
auto constexpr kOpenGLTexture31Arb = 0x84DF;
auto constexpr kOpenGLTexture3Arb = 0x84C3;
auto constexpr kOpenGLTexture4 = 0x84C4;
auto constexpr kOpenGLTexture4Arb = 0x84C4;
auto constexpr kOpenGLTexture5 = 0x84C5;
auto constexpr kOpenGLTexture5Arb = 0x84C5;
auto constexpr kOpenGLTexture6 = 0x84C6;
auto constexpr kOpenGLTexture6Arb = 0x84C6;
auto constexpr kOpenGLTexture7 = 0x84C7;
auto constexpr kOpenGLTexture7Arb = 0x84C7;
auto constexpr kOpenGLTexture8 = 0x84C8;
auto constexpr kOpenGLTexture8Arb = 0x84C8;
auto constexpr kOpenGLTexture9 = 0x84C9;
auto constexpr kOpenGLTexture9Arb = 0x84C9;
auto constexpr kOpenGLTexture1d = 0x0DE0;
auto constexpr kOpenGLTexture1dArray = 0x8C18;
auto constexpr kOpenGLTexture1dArrayExt = 0x8C18;
auto constexpr kOpenGLTexture1dBindingExt = 0x8068;
auto constexpr kOpenGLTexture1dStackBindingMesax = 0x875D;
auto constexpr kOpenGLTexture1dStackMesax = 0x8759;
auto constexpr kOpenGLTexture2d = 0x0DE1;
auto constexpr kOpenGLTexture2dArray = 0x8C1A;
auto constexpr kOpenGLTexture2dArrayExt = 0x8C1A;
auto constexpr kOpenGLTexture2dBindingExt = 0x8069;
auto constexpr kOpenGLTexture2dMultisample = 0x9100;
auto constexpr kOpenGLTexture2dMultisampleArray = 0x9102;
auto constexpr kOpenGLTexture2dMultisampleArrayOes = 0x9102;
auto constexpr kOpenGLTexture2dStackBindingMesax = 0x875E;
auto constexpr kOpenGLTexture2dStackMesax = 0x875A;
auto constexpr kOpenGLTexture3d = 0x806F;
auto constexpr kOpenGLTexture3dBindingExt = 0x806A;
auto constexpr kOpenGLTexture3dBindingOes = 0x806A;
auto constexpr kOpenGLTexture3dExt = 0x806F;
auto constexpr kOpenGLTexture3dOes = 0x806F;
auto constexpr kOpenGLTexture4dBindingSgis = 0x814F;
auto constexpr kOpenGLTexture4dSgis = 0x8134;
auto constexpr kOpenGLTexture4dsizeSgis = 0x8136;
auto constexpr kOpenGLTextureAlphaModulateImg = 0x8C06;
auto constexpr kOpenGLTextureAlphaSize = 0x805F;
auto constexpr kOpenGLTextureAlphaSizeExt = 0x805F;
auto constexpr kOpenGLTextureAlphaType = 0x8C13;
auto constexpr kOpenGLTextureAlphaTypeArb = 0x8C13;
auto constexpr kOpenGLTextureApplicationModeExt = 0x834F;
auto constexpr kOpenGLTextureAstcDecodePrecisionExt = 0x8F69;
auto constexpr kOpenGLTextureBaseLevel = 0x813C;
auto constexpr kOpenGLTextureBaseLevelSgis = 0x813C;
auto constexpr kOpenGLTextureBinding1d = 0x8068;
auto constexpr kOpenGLTextureBinding1dArray = 0x8C1C;
auto constexpr kOpenGLTextureBinding1dArrayExt = 0x8C1C;
auto constexpr kOpenGLTextureBinding2d = 0x8069;
auto constexpr kOpenGLTextureBinding2dArray = 0x8C1D;
auto constexpr kOpenGLTextureBinding2dArrayExt = 0x8C1D;
auto constexpr kOpenGLTextureBinding2dMultisample = 0x9104;
auto constexpr kOpenGLTextureBinding2dMultisampleArray = 0x9105;
auto constexpr kOpenGLTextureBinding2dMultisampleArrayOes = 0x9105;
auto constexpr kOpenGLTextureBinding3d = 0x806A;
auto constexpr kOpenGLTextureBinding3dOes = 0x806A;
auto constexpr kOpenGLTextureBindingBuffer = 0x8C2C;
auto constexpr kOpenGLTextureBindingBufferArb = 0x8C2C;
auto constexpr kOpenGLTextureBindingBufferExt = 0x8C2C;
auto constexpr kOpenGLTextureBindingBufferOes = 0x8C2C;
auto constexpr kOpenGLTextureBindingCubeMap = 0x8514;
auto constexpr kOpenGLTextureBindingCubeMapArb = 0x8514;
auto constexpr kOpenGLTextureBindingCubeMapArray = 0x900A;
auto constexpr kOpenGLTextureBindingCubeMapArrayArb = 0x900A;
auto constexpr kOpenGLTextureBindingCubeMapArrayExt = 0x900A;
auto constexpr kOpenGLTextureBindingCubeMapArrayOes = 0x900A;
auto constexpr kOpenGLTextureBindingCubeMapExt = 0x8514;
auto constexpr kOpenGLTextureBindingCubeMapOes = 0x8514;
auto constexpr kOpenGLTextureBindingExternalOes = 0x8D67;
auto constexpr kOpenGLTextureBindingRectangle = 0x84F6;
auto constexpr kOpenGLTextureBindingRectangleArb = 0x84F6;
auto constexpr kOpenGLTextureBindingRectangleNv = 0x84F6;
auto constexpr kOpenGLTextureBindingRenderbufferNv = 0x8E53;
auto constexpr kOpenGLTextureBit = 0x00040000;
auto constexpr kOpenGLTextureBlueSize = 0x805E;
auto constexpr kOpenGLTextureBlueSizeExt = 0x805E;
auto constexpr kOpenGLTextureBlueType = 0x8C12;
auto constexpr kOpenGLTextureBlueTypeArb = 0x8C12;
auto constexpr kOpenGLTextureBorder = 0x1005;
auto constexpr kOpenGLTextureBorderColor = 0x1004;
auto constexpr kOpenGLTextureBorderColorExt = 0x1004;
auto constexpr kOpenGLTextureBorderColorNv = 0x1004;
auto constexpr kOpenGLTextureBorderColorOes = 0x1004;
auto constexpr kOpenGLTextureBorderValuesNv = 0x871A;
auto constexpr kOpenGLTextureBuffer = 0x8C2A;
auto constexpr kOpenGLTextureBufferArb = 0x8C2A;
auto constexpr kOpenGLTextureBufferBinding = 0x8C2A;
auto constexpr kOpenGLTextureBufferBindingExt = 0x8C2A;
auto constexpr kOpenGLTextureBufferBindingOes = 0x8C2A;
auto constexpr kOpenGLTextureBufferDataStoreBinding = 0x8C2D;
auto constexpr kOpenGLTextureBufferDataStoreBindingArb = 0x8C2D;
auto constexpr kOpenGLTextureBufferDataStoreBindingExt = 0x8C2D;
auto constexpr kOpenGLTextureBufferDataStoreBindingOes = 0x8C2D;
auto constexpr kOpenGLTextureBufferExt = 0x8C2A;
auto constexpr kOpenGLTextureBufferFormatArb = 0x8C2E;
auto constexpr kOpenGLTextureBufferFormatExt = 0x8C2E;
auto constexpr kOpenGLTextureBufferOes = 0x8C2A;
auto constexpr kOpenGLTextureBufferOffset = 0x919D;
auto constexpr kOpenGLTextureBufferOffsetAlignment = 0x919F;
auto constexpr kOpenGLTextureBufferOffsetAlignmentExt = 0x919F;
auto constexpr kOpenGLTextureBufferOffsetAlignmentOes = 0x919F;
auto constexpr kOpenGLTextureBufferOffsetExt = 0x919D;
auto constexpr kOpenGLTextureBufferOffsetOes = 0x919D;
auto constexpr kOpenGLTextureBufferSize = 0x919E;
auto constexpr kOpenGLTextureBufferSizeExt = 0x919E;
auto constexpr kOpenGLTextureBufferSizeOes = 0x919E;
auto constexpr kOpenGLTextureClipmapCenterSgix = 0x8171;
auto constexpr kOpenGLTextureClipmapDepthSgix = 0x8176;
auto constexpr kOpenGLTextureClipmapFrameSgix = 0x8172;
auto constexpr kOpenGLTextureClipmapLodOffsetSgix = 0x8175;
auto constexpr kOpenGLTextureClipmapOffsetSgix = 0x8173;
auto constexpr kOpenGLTextureClipmapVirtualDepthSgix = 0x8174;
auto constexpr kOpenGLTextureColorSamplesNv = 0x9046;
auto constexpr kOpenGLTextureColorTableSgi = 0x80BC;
auto constexpr kOpenGLTextureColorWritemaskSgis = 0x81EF;
auto constexpr kOpenGLTextureCompareFailValueArb = 0x80BF;
auto constexpr kOpenGLTextureCompareFunc = 0x884D;
auto constexpr kOpenGLTextureCompareFuncArb = 0x884D;
auto constexpr kOpenGLTextureCompareFuncExt = 0x884D;
auto constexpr kOpenGLTextureCompareMode = 0x884C;
auto constexpr kOpenGLTextureCompareModeArb = 0x884C;
auto constexpr kOpenGLTextureCompareModeExt = 0x884C;
auto constexpr kOpenGLTextureCompareOperatorSgix = 0x819B;
auto constexpr kOpenGLTextureCompareSgix = 0x819A;
auto constexpr kOpenGLTextureComponents = 0x1003;
auto constexpr kOpenGLTextureCompressed = 0x86A1;
auto constexpr kOpenGLTextureCompressedArb = 0x86A1;
auto constexpr kOpenGLTextureCompressedBlockHeight = 0x82B2;
auto constexpr kOpenGLTextureCompressedBlockSize = 0x82B3;
auto constexpr kOpenGLTextureCompressedBlockWidth = 0x82B1;
auto constexpr kOpenGLTextureCompressedImageSize = 0x86A0;
auto constexpr kOpenGLTextureCompressedImageSizeArb = 0x86A0;
auto constexpr kOpenGLTextureCompressionHint = 0x84EF;
auto constexpr kOpenGLTextureCompressionHintArb = 0x84EF;
auto constexpr kOpenGLTextureConstantDataSunx = 0x81D6;
auto constexpr kOpenGLTextureCoordArray = 0x8078;
auto constexpr kOpenGLTextureCoordArrayAddressNv = 0x8F25;
auto constexpr kOpenGLTextureCoordArrayBufferBinding = 0x889A;
auto constexpr kOpenGLTextureCoordArrayBufferBindingArb = 0x889A;
auto constexpr kOpenGLTextureCoordArrayCountExt = 0x808B;
auto constexpr kOpenGLTextureCoordArrayExt = 0x8078;
auto constexpr kOpenGLTextureCoordArrayLengthNv = 0x8F2F;
auto constexpr kOpenGLTextureCoordArrayListIbm = 103074;
auto constexpr kOpenGLTextureCoordArrayListStrideIbm = 103084;
auto constexpr kOpenGLTextureCoordArrayParallelPointersIntel = 0x83F8;
auto constexpr kOpenGLTextureCoordArrayPointer = 0x8092;
auto constexpr kOpenGLTextureCoordArrayPointerExt = 0x8092;
auto constexpr kOpenGLTextureCoordArraySize = 0x8088;
auto constexpr kOpenGLTextureCoordArraySizeExt = 0x8088;
auto constexpr kOpenGLTextureCoordArrayStride = 0x808A;
auto constexpr kOpenGLTextureCoordArrayStrideExt = 0x808A;
auto constexpr kOpenGLTextureCoordArrayType = 0x8089;
auto constexpr kOpenGLTextureCoordArrayTypeExt = 0x8089;
auto constexpr kOpenGLTextureCoordNv = 0x8C79;
auto constexpr kOpenGLTextureCoverageSamplesNv = 0x9045;
auto constexpr kOpenGLTextureCropRectOes = 0x8B9D;
auto constexpr kOpenGLTextureCubeMap = 0x8513;
auto constexpr kOpenGLTextureCubeMapArb = 0x8513;
auto constexpr kOpenGLTextureCubeMapArray = 0x9009;
auto constexpr kOpenGLTextureCubeMapArrayArb = 0x9009;
auto constexpr kOpenGLTextureCubeMapArrayExt = 0x9009;
auto constexpr kOpenGLTextureCubeMapArrayOes = 0x9009;
auto constexpr kOpenGLTextureCubeMapExt = 0x8513;
auto constexpr kOpenGLTextureCubeMapNegativeX = 0x8516;
auto constexpr kOpenGLTextureCubeMapNegativeXArb = 0x8516;
auto constexpr kOpenGLTextureCubeMapNegativeXExt = 0x8516;
auto constexpr kOpenGLTextureCubeMapNegativeXOes = 0x8516;
auto constexpr kOpenGLTextureCubeMapNegativeY = 0x8518;
auto constexpr kOpenGLTextureCubeMapNegativeYArb = 0x8518;
auto constexpr kOpenGLTextureCubeMapNegativeYExt = 0x8518;
auto constexpr kOpenGLTextureCubeMapNegativeYOes = 0x8518;
auto constexpr kOpenGLTextureCubeMapNegativeZ = 0x851A;
auto constexpr kOpenGLTextureCubeMapNegativeZArb = 0x851A;
auto constexpr kOpenGLTextureCubeMapNegativeZExt = 0x851A;
auto constexpr kOpenGLTextureCubeMapNegativeZOes = 0x851A;
auto constexpr kOpenGLTextureCubeMapOes = 0x8513;
auto constexpr kOpenGLTextureCubeMapPositiveX = 0x8515;
auto constexpr kOpenGLTextureCubeMapPositiveXArb = 0x8515;
auto constexpr kOpenGLTextureCubeMapPositiveXExt = 0x8515;
auto constexpr kOpenGLTextureCubeMapPositiveXOes = 0x8515;
auto constexpr kOpenGLTextureCubeMapPositiveY = 0x8517;
auto constexpr kOpenGLTextureCubeMapPositiveYArb = 0x8517;
auto constexpr kOpenGLTextureCubeMapPositiveYExt = 0x8517;
auto constexpr kOpenGLTextureCubeMapPositiveYOes = 0x8517;
auto constexpr kOpenGLTextureCubeMapPositiveZ = 0x8519;
auto constexpr kOpenGLTextureCubeMapPositiveZArb = 0x8519;
auto constexpr kOpenGLTextureCubeMapPositiveZExt = 0x8519;
auto constexpr kOpenGLTextureCubeMapPositiveZOes = 0x8519;
auto constexpr kOpenGLTextureCubeMapSeamless = 0x884F;
auto constexpr kOpenGLTextureDeformationBitSgix = 0x00000001;
auto constexpr kOpenGLTextureDeformationSgix = 0x8195;
auto constexpr kOpenGLTextureDepth = 0x8071;
auto constexpr kOpenGLTextureDepthExt = 0x8071;
auto constexpr kOpenGLTextureDepthQcom = 0x8BD4;
auto constexpr kOpenGLTextureDepthSize = 0x884A;
auto constexpr kOpenGLTextureDepthSizeArb = 0x884A;
auto constexpr kOpenGLTextureDepthType = 0x8C16;
auto constexpr kOpenGLTextureDepthTypeArb = 0x8C16;
auto constexpr kOpenGLTextureDsSizeNv = 0x871D;
auto constexpr kOpenGLTextureDtSizeNv = 0x871E;
auto constexpr kOpenGLTextureEnv = 0x2300;
auto constexpr kOpenGLTextureEnvBiasSgix = 0x80BE;
auto constexpr kOpenGLTextureEnvColor = 0x2201;
auto constexpr kOpenGLTextureEnvMode = 0x2200;
auto constexpr kOpenGLTextureExternalOes = 0x8D65;
auto constexpr kOpenGLTextureFetchBarrierBit = 0x00000008;
auto constexpr kOpenGLTextureFetchBarrierBitExt = 0x00000008;
auto constexpr kOpenGLTextureFilter4SizeSgis = 0x8147;
auto constexpr kOpenGLTextureFilterControl = 0x8500;
auto constexpr kOpenGLTextureFilterControlExt = 0x8500;
auto constexpr kOpenGLTextureFixedSampleLocations = 0x9107;
auto constexpr kOpenGLTextureFloatComponentsNv = 0x888C;
auto constexpr kOpenGLTextureFormatQcom = 0x8BD6;
auto constexpr kOpenGLTextureFormatSrgbOverrideExt = 0x8FBF;
auto constexpr kOpenGLTextureFoveatedCutoffDensityQcom = 0x96A0;
auto constexpr kOpenGLTextureFoveatedFeatureBitsQcom = 0x8BFB;
auto constexpr kOpenGLTextureFoveatedFeatureQueryQcom = 0x8BFD;
auto constexpr kOpenGLTextureFoveatedMinPixelDensityQcom = 0x8BFC;
auto constexpr kOpenGLTextureFoveatedNumFocalPointsQueryQcom = 0x8BFE;
auto constexpr kOpenGLTextureFreeMemoryAti = 0x87FC;
auto constexpr kOpenGLTextureGather = 0x82A2;
auto constexpr kOpenGLTextureGatherShadow = 0x82A3;
auto constexpr kOpenGLTextureGenMode = 0x2500;
auto constexpr kOpenGLTextureGenModeOes = 0x2500;
auto constexpr kOpenGLTextureGenQ = 0x0C63;
auto constexpr kOpenGLTextureGenR = 0x0C62;
auto constexpr kOpenGLTextureGenS = 0x0C60;
auto constexpr kOpenGLTextureGenStrOes = 0x8D60;
auto constexpr kOpenGLTextureGenT = 0x0C61;
auto constexpr kOpenGLTextureGequalRSgix = 0x819D;
auto constexpr kOpenGLTextureGreenSize = 0x805D;
auto constexpr kOpenGLTextureGreenSizeExt = 0x805D;
auto constexpr kOpenGLTextureGreenType = 0x8C11;
auto constexpr kOpenGLTextureGreenTypeArb = 0x8C11;
auto constexpr kOpenGLTextureHeight = 0x1001;
auto constexpr kOpenGLTextureHeightQcom = 0x8BD3;
auto constexpr kOpenGLTextureHiSizeNv = 0x871B;
auto constexpr kOpenGLTextureImageFormat = 0x828F;
auto constexpr kOpenGLTextureImageType = 0x8290;
auto constexpr kOpenGLTextureImageValidQcom = 0x8BD8;
auto constexpr kOpenGLTextureImmutableFormat = 0x912F;
auto constexpr kOpenGLTextureImmutableFormatExt = 0x912F;
auto constexpr kOpenGLTextureImmutableLevels = 0x82DF;
auto constexpr kOpenGLTextureIndexSizeExt = 0x80ED;
auto constexpr kOpenGLTextureIntensitySize = 0x8061;
auto constexpr kOpenGLTextureIntensitySizeExt = 0x8061;
auto constexpr kOpenGLTextureIntensityType = 0x8C15;
auto constexpr kOpenGLTextureIntensityTypeArb = 0x8C15;
auto constexpr kOpenGLTextureInternalFormat = 0x1003;
auto constexpr kOpenGLTextureInternalFormatQcom = 0x8BD5;
auto constexpr kOpenGLTextureLequalRSgix = 0x819C;
auto constexpr kOpenGLTextureLightExt = 0x8350;
auto constexpr kOpenGLTextureLightingModeHp = 0x8167;
auto constexpr kOpenGLTextureLoSizeNv = 0x871C;
auto constexpr kOpenGLTextureLodBias = 0x8501;
auto constexpr kOpenGLTextureLodBiasExt = 0x8501;
auto constexpr kOpenGLTextureLodBiasRSgix = 0x8190;
auto constexpr kOpenGLTextureLodBiasSSgix = 0x818E;
auto constexpr kOpenGLTextureLodBiasTSgix = 0x818F;
auto constexpr kOpenGLTextureLuminanceSize = 0x8060;
auto constexpr kOpenGLTextureLuminanceSizeExt = 0x8060;
auto constexpr kOpenGLTextureLuminanceType = 0x8C14;
auto constexpr kOpenGLTextureLuminanceTypeArb = 0x8C14;
auto constexpr kOpenGLTextureMagFilter = 0x2800;
auto constexpr kOpenGLTextureMagSizeNv = 0x871F;
auto constexpr kOpenGLTextureMaterialFaceExt = 0x8351;
auto constexpr kOpenGLTextureMaterialParameterExt = 0x8352;
auto constexpr kOpenGLTextureMatrix = 0x0BA8;
auto constexpr kOpenGLTextureMatrixFloatAsIntBitsOes = 0x898F;
auto constexpr kOpenGLTextureMaxAnisotropy = 0x84FE;
auto constexpr kOpenGLTextureMaxAnisotropyExt = 0x84FE;
auto constexpr kOpenGLTextureMaxClampRSgix = 0x836B;
auto constexpr kOpenGLTextureMaxClampSSgix = 0x8369;
auto constexpr kOpenGLTextureMaxClampTSgix = 0x836A;
auto constexpr kOpenGLTextureMaxLevel = 0x813D;
auto constexpr kOpenGLTextureMaxLevelApple = 0x813D;
auto constexpr kOpenGLTextureMaxLevelSgis = 0x813D;
auto constexpr kOpenGLTextureMaxLod = 0x813B;
auto constexpr kOpenGLTextureMaxLodSgis = 0x813B;
auto constexpr kOpenGLTextureMemoryLayoutIntel = 0x83FF;
auto constexpr kOpenGLTextureMinFilter = 0x2801;
auto constexpr kOpenGLTextureMinLod = 0x813A;
auto constexpr kOpenGLTextureMinLodSgis = 0x813A;
auto constexpr kOpenGLTextureMultiBufferHintSgix = 0x812E;
auto constexpr kOpenGLTextureNormalExt = 0x85AF;
auto constexpr kOpenGLTextureNumLevelsQcom = 0x8BD9;
auto constexpr kOpenGLTextureObjectValidQcom = 0x8BDB;
auto constexpr kOpenGLTexturePostSpecularHp = 0x8168;
auto constexpr kOpenGLTexturePreSpecularHp = 0x8169;
auto constexpr kOpenGLTexturePriority = 0x8066;
auto constexpr kOpenGLTexturePriorityExt = 0x8066;
auto constexpr kOpenGLTextureProtectedExt = 0x8BFA;
auto constexpr kOpenGLTextureRangeLengthApple = 0x85B7;
auto constexpr kOpenGLTextureRangePointerApple = 0x85B8;
auto constexpr kOpenGLTextureRectangle = 0x84F5;
auto constexpr kOpenGLTextureRectangleArb = 0x84F5;
auto constexpr kOpenGLTextureRectangleNv = 0x84F5;
auto constexpr kOpenGLTextureRedSize = 0x805C;
auto constexpr kOpenGLTextureRedSizeExt = 0x805C;
auto constexpr kOpenGLTextureRedType = 0x8C10;
auto constexpr kOpenGLTextureRedTypeArb = 0x8C10;
auto constexpr kOpenGLTextureReductionModeArb = 0x9366;
auto constexpr kOpenGLTextureReductionModeExt = 0x9366;
auto constexpr kOpenGLTextureRenderbufferDataStoreBindingNv = 0x8E54;
auto constexpr kOpenGLTextureRenderbufferNv = 0x8E55;
auto constexpr kOpenGLTextureResident = 0x8067;
auto constexpr kOpenGLTextureResidentExt = 0x8067;
auto constexpr kOpenGLTextureSamples = 0x9106;
auto constexpr kOpenGLTextureSamplesImg = 0x9136;
auto constexpr kOpenGLTextureShaderNv = 0x86DE;
auto constexpr kOpenGLTextureShadow = 0x82A1;
auto constexpr kOpenGLTextureSharedSize = 0x8C3F;
auto constexpr kOpenGLTextureSharedSizeExt = 0x8C3F;
auto constexpr kOpenGLTextureSparseArb = 0x91A6;
auto constexpr kOpenGLTextureSparseExt = 0x91A6;
auto constexpr kOpenGLTextureSrgbDecodeExt = 0x8A48;
auto constexpr kOpenGLTextureStackDepth = 0x0BA5;
auto constexpr kOpenGLTextureStencilSize = 0x88F1;
auto constexpr kOpenGLTextureStencilSizeExt = 0x88F1;
auto constexpr kOpenGLTextureStorageHintApple = 0x85BC;
auto constexpr kOpenGLTextureStorageSparseBitAmd = 0x00000001;
auto constexpr kOpenGLTextureSwizzleA = 0x8E45;
auto constexpr kOpenGLTextureSwizzleAExt = 0x8E45;
auto constexpr kOpenGLTextureSwizzleB = 0x8E44;
auto constexpr kOpenGLTextureSwizzleBExt = 0x8E44;
auto constexpr kOpenGLTextureSwizzleG = 0x8E43;
auto constexpr kOpenGLTextureSwizzleGExt = 0x8E43;
auto constexpr kOpenGLTextureSwizzleR = 0x8E42;
auto constexpr kOpenGLTextureSwizzleRExt = 0x8E42;
auto constexpr kOpenGLTextureSwizzleRgba = 0x8E46;
auto constexpr kOpenGLTextureSwizzleRgbaExt = 0x8E46;
auto constexpr kOpenGLTextureTarget = 0x1006;
auto constexpr kOpenGLTextureTargetQcom = 0x8BDA;
auto constexpr kOpenGLTextureTilingExt = 0x9580;
auto constexpr kOpenGLTextureTooLargeExt = 0x8065;
auto constexpr kOpenGLTextureTypeQcom = 0x8BD7;
auto constexpr kOpenGLTextureUnnormalizedCoordinatesArm = 0x8F6A;
auto constexpr kOpenGLTextureUnsignedRemapModeNv = 0x888F;
auto constexpr kOpenGLTextureUpdateBarrierBit = 0x00000100;
auto constexpr kOpenGLTextureUpdateBarrierBitExt = 0x00000100;
auto constexpr kOpenGLTextureUsageAngle = 0x93A2;
auto constexpr kOpenGLTextureView = 0x82B5;
auto constexpr kOpenGLTextureViewMinLayer = 0x82DD;
auto constexpr kOpenGLTextureViewMinLayerExt = 0x82DD;
auto constexpr kOpenGLTextureViewMinLayerOes = 0x82DD;
auto constexpr kOpenGLTextureViewMinLevel = 0x82DB;
auto constexpr kOpenGLTextureViewMinLevelExt = 0x82DB;
auto constexpr kOpenGLTextureViewMinLevelOes = 0x82DB;
auto constexpr kOpenGLTextureViewNumLayers = 0x82DE;
auto constexpr kOpenGLTextureViewNumLayersExt = 0x82DE;
auto constexpr kOpenGLTextureViewNumLayersOes = 0x82DE;
auto constexpr kOpenGLTextureViewNumLevels = 0x82DC;
auto constexpr kOpenGLTextureViewNumLevelsExt = 0x82DC;
auto constexpr kOpenGLTextureViewNumLevelsOes = 0x82DC;
auto constexpr kOpenGLTextureWidth = 0x1000;
auto constexpr kOpenGLTextureWidthQcom = 0x8BD2;
auto constexpr kOpenGLTextureWrapQSgis = 0x8137;
auto constexpr kOpenGLTextureWrapR = 0x8072;
auto constexpr kOpenGLTextureWrapRExt = 0x8072;
auto constexpr kOpenGLTextureWrapROes = 0x8072;
auto constexpr kOpenGLTextureWrapS = 0x2802;
auto constexpr kOpenGLTextureWrapT = 0x2803;
auto constexpr kOpenGLTileRasterOrderFixedMesa = 0x8BB8;
auto constexpr kOpenGLTileRasterOrderIncreasingXMesa = 0x8BB9;
auto constexpr kOpenGLTileRasterOrderIncreasingYMesa = 0x8BBA;
auto constexpr kOpenGLTilingTypesExt = 0x9583;
auto constexpr kOpenGLTimeElapsed = 0x88BF;
auto constexpr kOpenGLTimeElapsedExt = 0x88BF;
auto constexpr kOpenGLTimelineSemaphoreValueNv = 0x9595;
auto constexpr kOpenGLTimeoutExpired = 0x911B;
auto constexpr kOpenGLTimeoutExpiredApple = 0x911B;
auto constexpr kOpenGLTimeoutIgnored = 0xFFFFFFFFFFFFFFFF;
auto constexpr kOpenGLTimeoutIgnoredApple = 0xFFFFFFFFFFFFFFFF;
auto constexpr kOpenGLTimestamp = 0x8E28;
auto constexpr kOpenGLTimestampExt = 0x8E28;
auto constexpr kOpenGLTopLevelArraySize = 0x930C;
auto constexpr kOpenGLTopLevelArrayStride = 0x930D;
auto constexpr kOpenGLTraceAllBitsMesa = 0xFFFF;
auto constexpr kOpenGLTraceArraysBitMesa = 0x0004;
auto constexpr kOpenGLTraceErrorsBitMesa = 0x0020;
auto constexpr kOpenGLTraceMaskMesa = 0x8755;
auto constexpr kOpenGLTraceNameMesa = 0x8756;
auto constexpr kOpenGLTraceOperationsBitMesa = 0x0001;
auto constexpr kOpenGLTracePixelsBitMesa = 0x0010;
auto constexpr kOpenGLTracePrimitivesBitMesa = 0x0002;
auto constexpr kOpenGLTraceTexturesBitMesa = 0x0008;
auto constexpr kOpenGLTrackMatrixNv = 0x8648;
auto constexpr kOpenGLTrackMatrixTransformNv = 0x8649;
auto constexpr kOpenGLTransformBit = 0x00001000;
auto constexpr kOpenGLTransformFeedback = 0x8E22;
auto constexpr kOpenGLTransformFeedbackActive = 0x8E24;
auto constexpr kOpenGLTransformFeedbackAttribsNv = 0x8C7E;
auto constexpr kOpenGLTransformFeedbackBarrierBit = 0x00000800;
auto constexpr kOpenGLTransformFeedbackBarrierBitExt = 0x00000800;
auto constexpr kOpenGLTransformFeedbackBinding = 0x8E25;
auto constexpr kOpenGLTransformFeedbackBindingNv = 0x8E25;
auto constexpr kOpenGLTransformFeedbackBuffer = 0x8C8E;
auto constexpr kOpenGLTransformFeedbackBufferActive = 0x8E24;
auto constexpr kOpenGLTransformFeedbackBufferActiveNv = 0x8E24;
auto constexpr kOpenGLTransformFeedbackBufferBinding = 0x8C8F;
auto constexpr kOpenGLTransformFeedbackBufferBindingExt = 0x8C8F;
auto constexpr kOpenGLTransformFeedbackBufferBindingNv = 0x8C8F;
auto constexpr kOpenGLTransformFeedbackBufferExt = 0x8C8E;
auto constexpr kOpenGLTransformFeedbackBufferIndex = 0x934B;
auto constexpr kOpenGLTransformFeedbackBufferMode = 0x8C7F;
auto constexpr kOpenGLTransformFeedbackBufferModeExt = 0x8C7F;
auto constexpr kOpenGLTransformFeedbackBufferModeNv = 0x8C7F;
auto constexpr kOpenGLTransformFeedbackBufferNv = 0x8C8E;
auto constexpr kOpenGLTransformFeedbackBufferPaused = 0x8E23;
auto constexpr kOpenGLTransformFeedbackBufferPausedNv = 0x8E23;
auto constexpr kOpenGLTransformFeedbackBufferSize = 0x8C85;
auto constexpr kOpenGLTransformFeedbackBufferSizeExt = 0x8C85;
auto constexpr kOpenGLTransformFeedbackBufferSizeNv = 0x8C85;
auto constexpr kOpenGLTransformFeedbackBufferStart = 0x8C84;
auto constexpr kOpenGLTransformFeedbackBufferStartExt = 0x8C84;
auto constexpr kOpenGLTransformFeedbackBufferStartNv = 0x8C84;
auto constexpr kOpenGLTransformFeedbackBufferStride = 0x934C;
auto constexpr kOpenGLTransformFeedbackNv = 0x8E22;
auto constexpr kOpenGLTransformFeedbackOverflow = 0x82EC;
auto constexpr kOpenGLTransformFeedbackOverflowArb = 0x82EC;
auto constexpr kOpenGLTransformFeedbackPaused = 0x8E23;
auto constexpr kOpenGLTransformFeedbackPrimitivesWritten = 0x8C88;
auto constexpr kOpenGLTransformFeedbackPrimitivesWrittenExt = 0x8C88;
auto constexpr kOpenGLTransformFeedbackPrimitivesWrittenNv = 0x8C88;
auto constexpr kOpenGLTransformFeedbackRecordNv = 0x8C86;
auto constexpr kOpenGLTransformFeedbackStreamOverflow = 0x82ED;
auto constexpr kOpenGLTransformFeedbackStreamOverflowArb = 0x82ED;
auto constexpr kOpenGLTransformFeedbackVarying = 0x92F4;
auto constexpr kOpenGLTransformFeedbackVaryingMaxLength = 0x8C76;
auto constexpr kOpenGLTransformFeedbackVaryingMaxLengthExt = 0x8C76;
auto constexpr kOpenGLTransformFeedbackVaryings = 0x8C83;
auto constexpr kOpenGLTransformFeedbackVaryingsExt = 0x8C83;
auto constexpr kOpenGLTransformFeedbackVaryingsNv = 0x8C83;
auto constexpr kOpenGLTransformHintApple = 0x85B1;
auto constexpr kOpenGLTranslate2dNv = 0x9090;
auto constexpr kOpenGLTranslate3dNv = 0x9091;
auto constexpr kOpenGLTranslateXNv = 0x908E;
auto constexpr kOpenGLTranslateYNv = 0x908F;
auto constexpr kOpenGLTranslatedShaderSourceLengthAngle = 0x93A0;
auto constexpr kOpenGLTransposeAffine2dNv = 0x9096;
auto constexpr kOpenGLTransposeAffine3dNv = 0x9098;
auto constexpr kOpenGLTransposeColorMatrix = 0x84E6;
auto constexpr kOpenGLTransposeColorMatrixArb = 0x84E6;
auto constexpr kOpenGLTransposeCurrentMatrixArb = 0x88B7;
auto constexpr kOpenGLTransposeModelviewMatrix = 0x84E3;
auto constexpr kOpenGLTransposeModelviewMatrixArb = 0x84E3;
auto constexpr kOpenGLTransposeNv = 0x862C;
auto constexpr kOpenGLTransposeProgramMatrixExt = 0x8E2E;
auto constexpr kOpenGLTransposeProjectionMatrix = 0x84E4;
auto constexpr kOpenGLTransposeProjectionMatrixArb = 0x84E4;
auto constexpr kOpenGLTransposeTextureMatrix = 0x84E5;
auto constexpr kOpenGLTransposeTextureMatrixArb = 0x84E5;
auto constexpr kOpenGLTriangleFan = 0x0006;
auto constexpr kOpenGLTriangleListSun = 0x81D7;
auto constexpr kOpenGLTriangleMeshSun = 0x8615;
auto constexpr kOpenGLTriangleStrip = 0x0005;
auto constexpr kOpenGLTriangleStripAdjacency = 0x000D;
auto constexpr kOpenGLTriangleStripAdjacencyArb = 0x000D;
auto constexpr kOpenGLTriangleStripAdjacencyExt = 0x000D;
auto constexpr kOpenGLTriangleStripAdjacencyOes = 0x000D;
auto constexpr kOpenGLTriangles = 0x0004;
auto constexpr kOpenGLTrianglesAdjacency = 0x000C;
auto constexpr kOpenGLTrianglesAdjacencyArb = 0x000C;
auto constexpr kOpenGLTrianglesAdjacencyExt = 0x000C;
auto constexpr kOpenGLTrianglesAdjacencyOes = 0x000C;
auto constexpr kOpenGLTriangularNv = 0x90A5;
auto constexpr kOpenGLTrpErrorContextResetImg = 0x8EA1;
auto constexpr kOpenGLTrpImg = 0x8EA0;
auto constexpr kOpenGLTrpUnsupportedContextImg = 0x8EA2;
auto constexpr kOpenGLTrue = 1;
auto constexpr kOpenGLType = 0x92FA;
auto constexpr kOpenGLUncorrelatedNv = 0x9282;
auto constexpr kOpenGLUndefinedApple = 0x8A1C;
auto constexpr kOpenGLUndefinedVertex = 0x8260;
auto constexpr kOpenGLUndefinedVertexExt = 0x8260;
auto constexpr kOpenGLUndefinedVertexOes = 0x8260;
auto constexpr kOpenGLUniform = 0x92E1;
auto constexpr kOpenGLUniformAddressCommandNv = 0x000A;
auto constexpr kOpenGLUniformArrayStride = 0x8A3C;
auto constexpr kOpenGLUniformAtomicCounterBufferIndex = 0x92DA;
auto constexpr kOpenGLUniformBarrierBit = 0x00000004;
auto constexpr kOpenGLUniformBarrierBitExt = 0x00000004;
auto constexpr kOpenGLUniformBlock = 0x92E2;
auto constexpr kOpenGLUniformBlockActiveUniformIndices = 0x8A43;
auto constexpr kOpenGLUniformBlockActiveUniforms = 0x8A42;
auto constexpr kOpenGLUniformBlockBinding = 0x8A3F;
auto constexpr kOpenGLUniformBlockDataSize = 0x8A40;
auto constexpr kOpenGLUniformBlockIndex = 0x8A3A;
auto constexpr kOpenGLUniformBlockNameLength = 0x8A41;
auto constexpr kOpenGLUniformBlockReferencedByComputeShader = 0x90EC;
auto constexpr kOpenGLUniformBlockReferencedByFragmentShader = 0x8A46;
auto constexpr kOpenGLUniformBlockReferencedByGeometryShader = 0x8A45;
auto constexpr kOpenGLUniformBlockReferencedByMeshShaderNv = 0x959C;
auto constexpr kOpenGLUniformBlockReferencedByTaskShaderNv = 0x959D;
auto constexpr kOpenGLUniformBlockReferencedByTessControlShader = 0x84F0;
auto constexpr kOpenGLUniformBlockReferencedByTessEvaluationShader = 0x84F1;
auto constexpr kOpenGLUniformBlockReferencedByVertexShader = 0x8A44;
auto constexpr kOpenGLUniformBuffer = 0x8A11;
auto constexpr kOpenGLUniformBufferAddressNv = 0x936F;
auto constexpr kOpenGLUniformBufferBinding = 0x8A28;
auto constexpr kOpenGLUniformBufferBindingExt = 0x8DEF;
auto constexpr kOpenGLUniformBufferExt = 0x8DEE;
auto constexpr kOpenGLUniformBufferLengthNv = 0x9370;
auto constexpr kOpenGLUniformBufferOffsetAlignment = 0x8A34;
auto constexpr kOpenGLUniformBufferSize = 0x8A2A;
auto constexpr kOpenGLUniformBufferStart = 0x8A29;
auto constexpr kOpenGLUniformBufferUnifiedNv = 0x936E;
auto constexpr kOpenGLUniformIsRowMajor = 0x8A3E;
auto constexpr kOpenGLUniformMatrixStride = 0x8A3D;
auto constexpr kOpenGLUniformNameLength = 0x8A39;
auto constexpr kOpenGLUniformOffset = 0x8A3B;
auto constexpr kOpenGLUniformSize = 0x8A38;
auto constexpr kOpenGLUniformType = 0x8A37;
auto constexpr kOpenGLUnknownContextReset = 0x8255;
auto constexpr kOpenGLUnknownContextResetArb = 0x8255;
auto constexpr kOpenGLUnknownContextResetExt = 0x8255;
auto constexpr kOpenGLUnknownContextResetKhr = 0x8255;
auto constexpr kOpenGLUnpackAlignment = 0x0CF5;
auto constexpr kOpenGLUnpackClientStorageApple = 0x85B2;
auto constexpr kOpenGLUnpackCmykHintExt = 0x800F;
auto constexpr kOpenGLUnpackColorspaceConversionWebgl = 0x9243;
auto constexpr kOpenGLUnpackCompressedBlockDepth = 0x9129;
auto constexpr kOpenGLUnpackCompressedBlockHeight = 0x9128;
auto constexpr kOpenGLUnpackCompressedBlockSize = 0x912A;
auto constexpr kOpenGLUnpackCompressedBlockWidth = 0x9127;
auto constexpr kOpenGLUnpackCompressedSizeSgix = 0x831A;
auto constexpr kOpenGLUnpackConstantDataSunx = 0x81D5;
auto constexpr kOpenGLUnpackFlipYWebgl = 0x9240;
auto constexpr kOpenGLUnpackImageDepthSgis = 0x8133;
auto constexpr kOpenGLUnpackImageHeight = 0x806E;
auto constexpr kOpenGLUnpackImageHeightExt = 0x806E;
auto constexpr kOpenGLUnpackLsbFirst = 0x0CF1;
auto constexpr kOpenGLUnpackPremultiplyAlphaWebgl = 0x9241;
auto constexpr kOpenGLUnpackResampleOml = 0x8985;
auto constexpr kOpenGLUnpackResampleSgix = 0x842F;
auto constexpr kOpenGLUnpackRowBytesApple = 0x8A16;
auto constexpr kOpenGLUnpackRowLength = 0x0CF2;
auto constexpr kOpenGLUnpackRowLengthExt = 0x0CF2;
auto constexpr kOpenGLUnpackSkipImages = 0x806D;
auto constexpr kOpenGLUnpackSkipImagesExt = 0x806D;
auto constexpr kOpenGLUnpackSkipPixels = 0x0CF4;
auto constexpr kOpenGLUnpackSkipPixelsExt = 0x0CF4;
auto constexpr kOpenGLUnpackSkipRows = 0x0CF3;
auto constexpr kOpenGLUnpackSkipRowsExt = 0x0CF3;
auto constexpr kOpenGLUnpackSkipVolumesSgis = 0x8132;
auto constexpr kOpenGLUnpackSubsampleRateSgix = 0x85A1;
auto constexpr kOpenGLUnpackSwapBytes = 0x0CF0;
auto constexpr kOpenGLUnsignaled = 0x9118;
auto constexpr kOpenGLUnsignaledApple = 0x9118;
auto constexpr kOpenGLUnsignedByte = 0x1401;
auto constexpr kOpenGLUnsignedByte233Rev = 0x8362;
auto constexpr kOpenGLUnsignedByte233RevExt = 0x8362;
auto constexpr kOpenGLUnsignedByte332 = 0x8032;
auto constexpr kOpenGLUnsignedByte332Ext = 0x8032;
auto constexpr kOpenGLUnsignedIdentityNv = 0x8536;
auto constexpr kOpenGLUnsignedInt = 0x1405;
auto constexpr kOpenGLUnsignedInt16Nv = 0x8FF0;
auto constexpr kOpenGLUnsignedInt16Vec2Nv = 0x8FF1;
auto constexpr kOpenGLUnsignedInt16Vec3Nv = 0x8FF2;
auto constexpr kOpenGLUnsignedInt16Vec4Nv = 0x8FF3;
auto constexpr kOpenGLUnsignedInt64Amd = 0x8BC2;
auto constexpr kOpenGLUnsignedInt64Arb = 0x140F;
auto constexpr kOpenGLUnsignedInt64Nv = 0x140F;
auto constexpr kOpenGLUnsignedInt64Vec2Arb = 0x8FF5;
auto constexpr kOpenGLUnsignedInt64Vec2Nv = 0x8FF5;
auto constexpr kOpenGLUnsignedInt64Vec3Arb = 0x8FF6;
auto constexpr kOpenGLUnsignedInt64Vec3Nv = 0x8FF6;
auto constexpr kOpenGLUnsignedInt64Vec4Arb = 0x8FF7;
auto constexpr kOpenGLUnsignedInt64Vec4Nv = 0x8FF7;
auto constexpr kOpenGLUnsignedInt8Nv = 0x8FEC;
auto constexpr kOpenGLUnsignedInt8Vec2Nv = 0x8FED;
auto constexpr kOpenGLUnsignedInt8Vec3Nv = 0x8FEE;
auto constexpr kOpenGLUnsignedInt8Vec4Nv = 0x8FEF;
auto constexpr kOpenGLUnsignedInt1010102 = 0x8036;
auto constexpr kOpenGLUnsignedInt1010102Ext = 0x8036;
auto constexpr kOpenGLUnsignedInt1010102Oes = 0x8DF6;
auto constexpr kOpenGLUnsignedInt10f11f11fRev = 0x8C3B;
auto constexpr kOpenGLUnsignedInt10f11f11fRevApple = 0x8C3B;
auto constexpr kOpenGLUnsignedInt10f11f11fRevExt = 0x8C3B;
auto constexpr kOpenGLUnsignedInt248 = 0x84FA;
auto constexpr kOpenGLUnsignedInt248Ext = 0x84FA;
auto constexpr kOpenGLUnsignedInt248Mesa = 0x8751;
auto constexpr kOpenGLUnsignedInt248Nv = 0x84FA;
auto constexpr kOpenGLUnsignedInt248Oes = 0x84FA;
auto constexpr kOpenGLUnsignedInt2101010Rev = 0x8368;
auto constexpr kOpenGLUnsignedInt2101010RevExt = 0x8368;
auto constexpr kOpenGLUnsignedInt5999Rev = 0x8C3E;
auto constexpr kOpenGLUnsignedInt5999RevApple = 0x8C3E;
auto constexpr kOpenGLUnsignedInt5999RevExt = 0x8C3E;
auto constexpr kOpenGLUnsignedInt824RevMesa = 0x8752;
auto constexpr kOpenGLUnsignedInt8888 = 0x8035;
auto constexpr kOpenGLUnsignedInt8888Ext = 0x8035;
auto constexpr kOpenGLUnsignedInt8888Rev = 0x8367;
auto constexpr kOpenGLUnsignedInt8888RevExt = 0x8367;
auto constexpr kOpenGLUnsignedInt88S8S8RevNv = 0x86DB;
auto constexpr kOpenGLUnsignedIntAtomicCounter = 0x92DB;
auto constexpr kOpenGLUnsignedIntImage1d = 0x9062;
auto constexpr kOpenGLUnsignedIntImage1dArray = 0x9068;
auto constexpr kOpenGLUnsignedIntImage1dArrayExt = 0x9068;
auto constexpr kOpenGLUnsignedIntImage1dExt = 0x9062;
auto constexpr kOpenGLUnsignedIntImage2d = 0x9063;
auto constexpr kOpenGLUnsignedIntImage2dArray = 0x9069;
auto constexpr kOpenGLUnsignedIntImage2dArrayExt = 0x9069;
auto constexpr kOpenGLUnsignedIntImage2dExt = 0x9063;
auto constexpr kOpenGLUnsignedIntImage2dMultisample = 0x906B;
auto constexpr kOpenGLUnsignedIntImage2dMultisampleArray = 0x906C;
auto constexpr kOpenGLUnsignedIntImage2dMultisampleArrayExt = 0x906C;
auto constexpr kOpenGLUnsignedIntImage2dMultisampleExt = 0x906B;
auto constexpr kOpenGLUnsignedIntImage2dRect = 0x9065;
auto constexpr kOpenGLUnsignedIntImage2dRectExt = 0x9065;
auto constexpr kOpenGLUnsignedIntImage3d = 0x9064;
auto constexpr kOpenGLUnsignedIntImage3dExt = 0x9064;
auto constexpr kOpenGLUnsignedIntImageBuffer = 0x9067;
auto constexpr kOpenGLUnsignedIntImageBufferExt = 0x9067;
auto constexpr kOpenGLUnsignedIntImageBufferOes = 0x9067;
auto constexpr kOpenGLUnsignedIntImageCube = 0x9066;
auto constexpr kOpenGLUnsignedIntImageCubeExt = 0x9066;
auto constexpr kOpenGLUnsignedIntImageCubeMapArray = 0x906A;
auto constexpr kOpenGLUnsignedIntImageCubeMapArrayExt = 0x906A;
auto constexpr kOpenGLUnsignedIntImageCubeMapArrayOes = 0x906A;
auto constexpr kOpenGLUnsignedIntS8S888Nv = 0x86DA;
auto constexpr kOpenGLUnsignedIntSampler1d = 0x8DD1;
auto constexpr kOpenGLUnsignedIntSampler1dArray = 0x8DD6;
auto constexpr kOpenGLUnsignedIntSampler1dArrayExt = 0x8DD6;
auto constexpr kOpenGLUnsignedIntSampler1dExt = 0x8DD1;
auto constexpr kOpenGLUnsignedIntSampler2d = 0x8DD2;
auto constexpr kOpenGLUnsignedIntSampler2dArray = 0x8DD7;
auto constexpr kOpenGLUnsignedIntSampler2dArrayExt = 0x8DD7;
auto constexpr kOpenGLUnsignedIntSampler2dExt = 0x8DD2;
auto constexpr kOpenGLUnsignedIntSampler2dMultisample = 0x910A;
auto constexpr kOpenGLUnsignedIntSampler2dMultisampleArray = 0x910D;
auto constexpr kOpenGLUnsignedIntSampler2dMultisampleArrayOes = 0x910D;
auto constexpr kOpenGLUnsignedIntSampler2dRect = 0x8DD5;
auto constexpr kOpenGLUnsignedIntSampler2dRectExt = 0x8DD5;
auto constexpr kOpenGLUnsignedIntSampler3d = 0x8DD3;
auto constexpr kOpenGLUnsignedIntSampler3dExt = 0x8DD3;
auto constexpr kOpenGLUnsignedIntSamplerBuffer = 0x8DD8;
auto constexpr kOpenGLUnsignedIntSamplerBufferAmd = 0x9003;
auto constexpr kOpenGLUnsignedIntSamplerBufferExt = 0x8DD8;
auto constexpr kOpenGLUnsignedIntSamplerBufferOes = 0x8DD8;
auto constexpr kOpenGLUnsignedIntSamplerCube = 0x8DD4;
auto constexpr kOpenGLUnsignedIntSamplerCubeExt = 0x8DD4;
auto constexpr kOpenGLUnsignedIntSamplerCubeMapArray = 0x900F;
auto constexpr kOpenGLUnsignedIntSamplerCubeMapArrayArb = 0x900F;
auto constexpr kOpenGLUnsignedIntSamplerCubeMapArrayExt = 0x900F;
auto constexpr kOpenGLUnsignedIntSamplerCubeMapArrayOes = 0x900F;
auto constexpr kOpenGLUnsignedIntSamplerRenderbufferNv = 0x8E58;
auto constexpr kOpenGLUnsignedIntVec2 = 0x8DC6;
auto constexpr kOpenGLUnsignedIntVec2Ext = 0x8DC6;
auto constexpr kOpenGLUnsignedIntVec3 = 0x8DC7;
auto constexpr kOpenGLUnsignedIntVec3Ext = 0x8DC7;
auto constexpr kOpenGLUnsignedIntVec4 = 0x8DC8;
auto constexpr kOpenGLUnsignedIntVec4Ext = 0x8DC8;
auto constexpr kOpenGLUnsignedInvertNv = 0x8537;
auto constexpr kOpenGLUnsignedNormalized = 0x8C17;
auto constexpr kOpenGLUnsignedNormalizedArb = 0x8C17;
auto constexpr kOpenGLUnsignedNormalizedExt = 0x8C17;
auto constexpr kOpenGLUnsignedShort = 0x1403;
auto constexpr kOpenGLUnsignedShort151Mesa = 0x8753;
auto constexpr kOpenGLUnsignedShort115RevMesa = 0x8754;
auto constexpr kOpenGLUnsignedShort1555Rev = 0x8366;
auto constexpr kOpenGLUnsignedShort1555RevExt = 0x8366;
auto constexpr kOpenGLUnsignedShort4444 = 0x8033;
auto constexpr kOpenGLUnsignedShort4444Ext = 0x8033;
auto constexpr kOpenGLUnsignedShort4444Rev = 0x8365;
auto constexpr kOpenGLUnsignedShort4444RevExt = 0x8365;
auto constexpr kOpenGLUnsignedShort4444RevImg = 0x8365;
auto constexpr kOpenGLUnsignedShort5551 = 0x8034;
auto constexpr kOpenGLUnsignedShort5551Ext = 0x8034;
auto constexpr kOpenGLUnsignedShort565 = 0x8363;
auto constexpr kOpenGLUnsignedShort565Ext = 0x8363;
auto constexpr kOpenGLUnsignedShort565Rev = 0x8364;
auto constexpr kOpenGLUnsignedShort565RevExt = 0x8364;
auto constexpr kOpenGLUnsignedShort88Apple = 0x85BA;
auto constexpr kOpenGLUnsignedShort88Mesa = 0x85BA;
auto constexpr kOpenGLUnsignedShort88RevApple = 0x85BB;
auto constexpr kOpenGLUnsignedShort88RevMesa = 0x85BB;
auto constexpr kOpenGLUploadGpuMaskNvx = 0x954A;
auto constexpr kOpenGLUpperLeft = 0x8CA2;
auto constexpr kOpenGLUpperLeftExt = 0x8CA2;
auto constexpr kOpenGLUseMissingGlyphNv = 0x90AA;
auto constexpr kOpenGLUtf16Nv = 0x909B;
auto constexpr kOpenGLUtf8Nv = 0x909A;
auto constexpr kOpenGLUuidSizeExt = 16;
auto constexpr kOpenGLV2f = 0x2A20;
auto constexpr kOpenGLV3f = 0x2A21;
auto constexpr kOpenGLValidateShaderBinaryQcom = 0x96A3;
auto constexpr kOpenGLValidateStatus = 0x8B83;
auto constexpr kOpenGLVariableANv = 0x8523;
auto constexpr kOpenGLVariableBNv = 0x8524;
auto constexpr kOpenGLVariableCNv = 0x8525;
auto constexpr kOpenGLVariableDNv = 0x8526;
auto constexpr kOpenGLVariableENv = 0x8527;
auto constexpr kOpenGLVariableFNv = 0x8528;
auto constexpr kOpenGLVariableGNv = 0x8529;
auto constexpr kOpenGLVariantArrayExt = 0x87E8;
auto constexpr kOpenGLVariantArrayPointerExt = 0x87E9;
auto constexpr kOpenGLVariantArrayStrideExt = 0x87E6;
auto constexpr kOpenGLVariantArrayTypeExt = 0x87E7;
auto constexpr kOpenGLVariantDatatypeExt = 0x87E5;
auto constexpr kOpenGLVariantExt = 0x87C1;
auto constexpr kOpenGLVariantValueExt = 0x87E4;
auto constexpr kOpenGLVboFreeMemoryAti = 0x87FB;
auto constexpr kOpenGLVectorExt = 0x87BF;
auto constexpr kOpenGLVendor = 0x1F00;
auto constexpr kOpenGLVersion = 0x1F02;
auto constexpr kOpenGLVersionEsCl10 = 1;
auto constexpr kOpenGLVersionEsCl11 = 1;
auto constexpr kOpenGLVersionEsCm11 = 1;
auto constexpr kOpenGLVertex23BitPgi = 0x00000004;
auto constexpr kOpenGLVertex4BitPgi = 0x00000008;
auto constexpr kOpenGLVertexArray = 0x8074;
auto constexpr kOpenGLVertexArrayAddressNv = 0x8F21;
auto constexpr kOpenGLVertexArrayBinding = 0x85B5;
auto constexpr kOpenGLVertexArrayBindingApple = 0x85B5;
auto constexpr kOpenGLVertexArrayBindingOes = 0x85B5;
auto constexpr kOpenGLVertexArrayBufferBinding = 0x8896;
auto constexpr kOpenGLVertexArrayBufferBindingArb = 0x8896;
auto constexpr kOpenGLVertexArrayCountExt = 0x807D;
auto constexpr kOpenGLVertexArrayExt = 0x8074;
auto constexpr kOpenGLVertexArrayKhr = 0x8074;
auto constexpr kOpenGLVertexArrayLengthNv = 0x8F2B;
auto constexpr kOpenGLVertexArrayListIbm = 103070;
auto constexpr kOpenGLVertexArrayListStrideIbm = 103080;
auto constexpr kOpenGLVertexArrayObjectAmd = 0x9154;
auto constexpr kOpenGLVertexArrayObjectExt = 0x9154;
auto constexpr kOpenGLVertexArrayParallelPointersIntel = 0x83F5;
auto constexpr kOpenGLVertexArrayPointer = 0x808E;
auto constexpr kOpenGLVertexArrayPointerExt = 0x808E;
auto constexpr kOpenGLVertexArrayRangeApple = 0x851D;
auto constexpr kOpenGLVertexArrayRangeLengthApple = 0x851E;
auto constexpr kOpenGLVertexArrayRangeLengthNv = 0x851E;
auto constexpr kOpenGLVertexArrayRangeNv = 0x851D;
auto constexpr kOpenGLVertexArrayRangePointerApple = 0x8521;
auto constexpr kOpenGLVertexArrayRangePointerNv = 0x8521;
auto constexpr kOpenGLVertexArrayRangeValidNv = 0x851F;
auto constexpr kOpenGLVertexArrayRangeWithoutFlushNv = 0x8533;
auto constexpr kOpenGLVertexArraySize = 0x807A;
auto constexpr kOpenGLVertexArraySizeExt = 0x807A;
auto constexpr kOpenGLVertexArrayStorageHintApple = 0x851F;
auto constexpr kOpenGLVertexArrayStride = 0x807C;
auto constexpr kOpenGLVertexArrayStrideExt = 0x807C;
auto constexpr kOpenGLVertexArrayType = 0x807B;
auto constexpr kOpenGLVertexArrayTypeExt = 0x807B;
auto constexpr kOpenGLVertexAttribArray0Nv = 0x8650;
auto constexpr kOpenGLVertexAttribArray10Nv = 0x865A;
auto constexpr kOpenGLVertexAttribArray11Nv = 0x865B;
auto constexpr kOpenGLVertexAttribArray12Nv = 0x865C;
auto constexpr kOpenGLVertexAttribArray13Nv = 0x865D;
auto constexpr kOpenGLVertexAttribArray14Nv = 0x865E;
auto constexpr kOpenGLVertexAttribArray15Nv = 0x865F;
auto constexpr kOpenGLVertexAttribArray1Nv = 0x8651;
auto constexpr kOpenGLVertexAttribArray2Nv = 0x8652;
auto constexpr kOpenGLVertexAttribArray3Nv = 0x8653;
auto constexpr kOpenGLVertexAttribArray4Nv = 0x8654;
auto constexpr kOpenGLVertexAttribArray5Nv = 0x8655;
auto constexpr kOpenGLVertexAttribArray6Nv = 0x8656;
auto constexpr kOpenGLVertexAttribArray7Nv = 0x8657;
auto constexpr kOpenGLVertexAttribArray8Nv = 0x8658;
auto constexpr kOpenGLVertexAttribArray9Nv = 0x8659;
auto constexpr kOpenGLVertexAttribArrayAddressNv = 0x8F20;
auto constexpr kOpenGLVertexAttribArrayBarrierBit = 0x00000001;
auto constexpr kOpenGLVertexAttribArrayBarrierBitExt = 0x00000001;
auto constexpr kOpenGLVertexAttribArrayBufferBinding = 0x889F;
auto constexpr kOpenGLVertexAttribArrayBufferBindingArb = 0x889F;
auto constexpr kOpenGLVertexAttribArrayDivisor = 0x88FE;
auto constexpr kOpenGLVertexAttribArrayDivisorAngle = 0x88FE;
auto constexpr kOpenGLVertexAttribArrayDivisorArb = 0x88FE;
auto constexpr kOpenGLVertexAttribArrayDivisorExt = 0x88FE;
auto constexpr kOpenGLVertexAttribArrayDivisorNv = 0x88FE;
auto constexpr kOpenGLVertexAttribArrayEnabled = 0x8622;
auto constexpr kOpenGLVertexAttribArrayEnabledArb = 0x8622;
auto constexpr kOpenGLVertexAttribArrayInteger = 0x88FD;
auto constexpr kOpenGLVertexAttribArrayIntegerExt = 0x88FD;
auto constexpr kOpenGLVertexAttribArrayIntegerNv = 0x88FD;
auto constexpr kOpenGLVertexAttribArrayLengthNv = 0x8F2A;
auto constexpr kOpenGLVertexAttribArrayLong = 0x874E;
auto constexpr kOpenGLVertexAttribArrayNormalized = 0x886A;
auto constexpr kOpenGLVertexAttribArrayNormalizedArb = 0x886A;
auto constexpr kOpenGLVertexAttribArrayPointer = 0x8645;
auto constexpr kOpenGLVertexAttribArrayPointerArb = 0x8645;
auto constexpr kOpenGLVertexAttribArraySize = 0x8623;
auto constexpr kOpenGLVertexAttribArraySizeArb = 0x8623;
auto constexpr kOpenGLVertexAttribArrayStride = 0x8624;
auto constexpr kOpenGLVertexAttribArrayStrideArb = 0x8624;
auto constexpr kOpenGLVertexAttribArrayType = 0x8625;
auto constexpr kOpenGLVertexAttribArrayTypeArb = 0x8625;
auto constexpr kOpenGLVertexAttribArrayUnifiedNv = 0x8F1E;
auto constexpr kOpenGLVertexAttribBinding = 0x82D4;
auto constexpr kOpenGLVertexAttribMap1Apple = 0x8A00;
auto constexpr kOpenGLVertexAttribMap1CoeffApple = 0x8A03;
auto constexpr kOpenGLVertexAttribMap1DomainApple = 0x8A05;
auto constexpr kOpenGLVertexAttribMap1OrderApple = 0x8A04;
auto constexpr kOpenGLVertexAttribMap1SizeApple = 0x8A02;
auto constexpr kOpenGLVertexAttribMap2Apple = 0x8A01;
auto constexpr kOpenGLVertexAttribMap2CoeffApple = 0x8A07;
auto constexpr kOpenGLVertexAttribMap2DomainApple = 0x8A09;
auto constexpr kOpenGLVertexAttribMap2OrderApple = 0x8A08;
auto constexpr kOpenGLVertexAttribMap2SizeApple = 0x8A06;
auto constexpr kOpenGLVertexAttribRelativeOffset = 0x82D5;
auto constexpr kOpenGLVertexBindingBuffer = 0x8F4F;
auto constexpr kOpenGLVertexBindingDivisor = 0x82D6;
auto constexpr kOpenGLVertexBindingOffset = 0x82D7;
auto constexpr kOpenGLVertexBindingStride = 0x82D8;
auto constexpr kOpenGLVertexBlendArb = 0x86A7;
auto constexpr kOpenGLVertexConsistentHintPgi = 0x1A22B;
auto constexpr kOpenGLVertexDataHintPgi = 0x1A22A;
auto constexpr kOpenGLVertexElementSwizzleAmd = 0x91A4;
auto constexpr kOpenGLVertexIdNv = 0x8C7B;
auto constexpr kOpenGLVertexIdSwizzleAmd = 0x91A5;
auto constexpr kOpenGLVertexPreclipHintSgix = 0x83EF;
auto constexpr kOpenGLVertexPreclipSgix = 0x83EE;
auto constexpr kOpenGLVertexProgramArb = 0x8620;
auto constexpr kOpenGLVertexProgramBindingNv = 0x864A;
auto constexpr kOpenGLVertexProgramCallbackDataMesa = 0x8BB7;
auto constexpr kOpenGLVertexProgramCallbackFuncMesa = 0x8BB6;
auto constexpr kOpenGLVertexProgramCallbackMesa = 0x8BB5;
auto constexpr kOpenGLVertexProgramNv = 0x8620;
auto constexpr kOpenGLVertexProgramParameterBufferNv = 0x8DA2;
auto constexpr kOpenGLVertexProgramPointSize = 0x8642;
auto constexpr kOpenGLVertexProgramPointSizeArb = 0x8642;
auto constexpr kOpenGLVertexProgramPointSizeNv = 0x8642;
auto constexpr kOpenGLVertexProgramPositionMesa = 0x8BB4;
auto constexpr kOpenGLVertexProgramTwoSide = 0x8643;
auto constexpr kOpenGLVertexProgramTwoSideArb = 0x8643;
auto constexpr kOpenGLVertexProgramTwoSideNv = 0x8643;
auto constexpr kOpenGLVertexShader = 0x8B31;
auto constexpr kOpenGLVertexShaderArb = 0x8B31;
auto constexpr kOpenGLVertexShaderBindingExt = 0x8781;
auto constexpr kOpenGLVertexShaderBit = 0x00000001;
auto constexpr kOpenGLVertexShaderBitExt = 0x00000001;
auto constexpr kOpenGLVertexShaderExt = 0x8780;
auto constexpr kOpenGLVertexShaderInstructionsExt = 0x87CF;
auto constexpr kOpenGLVertexShaderInvariantsExt = 0x87D1;
auto constexpr kOpenGLVertexShaderInvocations = 0x82F0;
auto constexpr kOpenGLVertexShaderInvocationsArb = 0x82F0;
auto constexpr kOpenGLVertexShaderLocalConstantsExt = 0x87D2;
auto constexpr kOpenGLVertexShaderLocalsExt = 0x87D3;
auto constexpr kOpenGLVertexShaderOptimizedExt = 0x87D4;
auto constexpr kOpenGLVertexShaderVariantsExt = 0x87D0;
auto constexpr kOpenGLVertexSourceAti = 0x8774;
auto constexpr kOpenGLVertexStateProgramNv = 0x8621;
auto constexpr kOpenGLVertexStream0Ati = 0x876C;
auto constexpr kOpenGLVertexStream1Ati = 0x876D;
auto constexpr kOpenGLVertexStream2Ati = 0x876E;
auto constexpr kOpenGLVertexStream3Ati = 0x876F;
auto constexpr kOpenGLVertexStream4Ati = 0x8770;
auto constexpr kOpenGLVertexStream5Ati = 0x8771;
auto constexpr kOpenGLVertexStream6Ati = 0x8772;
auto constexpr kOpenGLVertexStream7Ati = 0x8773;
auto constexpr kOpenGLVertexSubroutine = 0x92E8;
auto constexpr kOpenGLVertexSubroutineUniform = 0x92EE;
auto constexpr kOpenGLVertexTexture = 0x829B;
auto constexpr kOpenGLVertexWeightArrayExt = 0x850C;
auto constexpr kOpenGLVertexWeightArrayPointerExt = 0x8510;
auto constexpr kOpenGLVertexWeightArraySizeExt = 0x850D;
auto constexpr kOpenGLVertexWeightArrayStrideExt = 0x850F;
auto constexpr kOpenGLVertexWeightArrayTypeExt = 0x850E;
auto constexpr kOpenGLVertexWeightingExt = 0x8509;
auto constexpr kOpenGLVerticalLineToNv = 0x08;
auto constexpr kOpenGLVerticesSubmitted = 0x82EE;
auto constexpr kOpenGLVerticesSubmittedArb = 0x82EE;
auto constexpr kOpenGLVibranceBiasNv = 0x8719;
auto constexpr kOpenGLVibranceScaleNv = 0x8713;
auto constexpr kOpenGLVideoBufferBindingNv = 0x9021;
auto constexpr kOpenGLVideoBufferInternalFormatNv = 0x902D;
auto constexpr kOpenGLVideoBufferNv = 0x9020;
auto constexpr kOpenGLVideoBufferPitchNv = 0x9028;
auto constexpr kOpenGLVideoCaptureFieldLowerHeightNv = 0x903B;
auto constexpr kOpenGLVideoCaptureFieldUpperHeightNv = 0x903A;
auto constexpr kOpenGLVideoCaptureFrameHeightNv = 0x9039;
auto constexpr kOpenGLVideoCaptureFrameWidthNv = 0x9038;
auto constexpr kOpenGLVideoCaptureSurfaceOriginNv = 0x903C;
auto constexpr kOpenGLVideoCaptureTo422SupportedNv = 0x9026;
auto constexpr kOpenGLVideoColorConversionMatrixNv = 0x9029;
auto constexpr kOpenGLVideoColorConversionMaxNv = 0x902A;
auto constexpr kOpenGLVideoColorConversionMinNv = 0x902B;
auto constexpr kOpenGLVideoColorConversionOffsetNv = 0x902C;
auto constexpr kOpenGLViewClass128Bits = 0x82C4;
auto constexpr kOpenGLViewClass16Bits = 0x82CA;
auto constexpr kOpenGLViewClass24Bits = 0x82C9;
auto constexpr kOpenGLViewClass32Bits = 0x82C8;
auto constexpr kOpenGLViewClass48Bits = 0x82C7;
auto constexpr kOpenGLViewClass64Bits = 0x82C6;
auto constexpr kOpenGLViewClass8Bits = 0x82CB;
auto constexpr kOpenGLViewClass96Bits = 0x82C5;
auto constexpr kOpenGLViewClassAstc10x10Rgba = 0x9393;
auto constexpr kOpenGLViewClassAstc10x5Rgba = 0x9390;
auto constexpr kOpenGLViewClassAstc10x6Rgba = 0x9391;
auto constexpr kOpenGLViewClassAstc10x8Rgba = 0x9392;
auto constexpr kOpenGLViewClassAstc12x10Rgba = 0x9394;
auto constexpr kOpenGLViewClassAstc12x12Rgba = 0x9395;
auto constexpr kOpenGLViewClassAstc4x4Rgba = 0x9388;
auto constexpr kOpenGLViewClassAstc5x4Rgba = 0x9389;
auto constexpr kOpenGLViewClassAstc5x5Rgba = 0x938A;
auto constexpr kOpenGLViewClassAstc6x5Rgba = 0x938B;
auto constexpr kOpenGLViewClassAstc6x6Rgba = 0x938C;
auto constexpr kOpenGLViewClassAstc8x5Rgba = 0x938D;
auto constexpr kOpenGLViewClassAstc8x6Rgba = 0x938E;
auto constexpr kOpenGLViewClassAstc8x8Rgba = 0x938F;
auto constexpr kOpenGLViewClassBptcFloat = 0x82D3;
auto constexpr kOpenGLViewClassBptcUnorm = 0x82D2;
auto constexpr kOpenGLViewClassEacR11 = 0x9383;
auto constexpr kOpenGLViewClassEacRg11 = 0x9384;
auto constexpr kOpenGLViewClassEtc2EacRgba = 0x9387;
auto constexpr kOpenGLViewClassEtc2Rgb = 0x9385;
auto constexpr kOpenGLViewClassEtc2Rgba = 0x9386;
auto constexpr kOpenGLViewClassRgtc1Red = 0x82D0;
auto constexpr kOpenGLViewClassRgtc2Rg = 0x82D1;
auto constexpr kOpenGLViewClassS3tcDxt1Rgb = 0x82CC;
auto constexpr kOpenGLViewClassS3tcDxt1Rgba = 0x82CD;
auto constexpr kOpenGLViewClassS3tcDxt3Rgba = 0x82CE;
auto constexpr kOpenGLViewClassS3tcDxt5Rgba = 0x82CF;
auto constexpr kOpenGLViewCompatibilityClass = 0x82B6;
auto constexpr kOpenGLViewport = 0x0BA2;
auto constexpr kOpenGLViewportBit = 0x00000800;
auto constexpr kOpenGLViewportBoundsRange = 0x825D;
auto constexpr kOpenGLViewportBoundsRangeExt = 0x825D;
auto constexpr kOpenGLViewportBoundsRangeNv = 0x825D;
auto constexpr kOpenGLViewportBoundsRangeOes = 0x825D;
auto constexpr kOpenGLViewportCommandNv = 0x0010;
auto constexpr kOpenGLViewportIndexProvokingVertex = 0x825F;
auto constexpr kOpenGLViewportIndexProvokingVertexExt = 0x825F;
auto constexpr kOpenGLViewportIndexProvokingVertexNv = 0x825F;
auto constexpr kOpenGLViewportIndexProvokingVertexOes = 0x825F;
auto constexpr kOpenGLViewportPositionWScaleNv = 0x937C;
auto constexpr kOpenGLViewportPositionWScaleXCoeffNv = 0x937D;
auto constexpr kOpenGLViewportPositionWScaleYCoeffNv = 0x937E;
auto constexpr kOpenGLViewportSubpixelBits = 0x825C;
auto constexpr kOpenGLViewportSubpixelBitsExt = 0x825C;
auto constexpr kOpenGLViewportSubpixelBitsNv = 0x825C;
auto constexpr kOpenGLViewportSubpixelBitsOes = 0x825C;
auto constexpr kOpenGLViewportSwizzleNegativeWNv = 0x9357;
auto constexpr kOpenGLViewportSwizzleNegativeXNv = 0x9351;
auto constexpr kOpenGLViewportSwizzleNegativeYNv = 0x9353;
auto constexpr kOpenGLViewportSwizzleNegativeZNv = 0x9355;
auto constexpr kOpenGLViewportSwizzlePositiveWNv = 0x9356;
auto constexpr kOpenGLViewportSwizzlePositiveXNv = 0x9350;
auto constexpr kOpenGLViewportSwizzlePositiveYNv = 0x9352;
auto constexpr kOpenGLViewportSwizzlePositiveZNv = 0x9354;
auto constexpr kOpenGLViewportSwizzleWNv = 0x935B;
auto constexpr kOpenGLViewportSwizzleXNv = 0x9358;
auto constexpr kOpenGLViewportSwizzleYNv = 0x9359;
auto constexpr kOpenGLViewportSwizzleZNv = 0x935A;
auto constexpr kOpenGLVirtualPageSizeIndexArb = 0x91A7;
auto constexpr kOpenGLVirtualPageSizeIndexExt = 0x91A7;
auto constexpr kOpenGLVirtualPageSizeXAmd = 0x9195;
auto constexpr kOpenGLVirtualPageSizeXArb = 0x9195;
auto constexpr kOpenGLVirtualPageSizeXExt = 0x9195;
auto constexpr kOpenGLVirtualPageSizeYAmd = 0x9196;
auto constexpr kOpenGLVirtualPageSizeYArb = 0x9196;
auto constexpr kOpenGLVirtualPageSizeYExt = 0x9196;
auto constexpr kOpenGLVirtualPageSizeZAmd = 0x9197;
auto constexpr kOpenGLVirtualPageSizeZArb = 0x9197;
auto constexpr kOpenGLVirtualPageSizeZExt = 0x9197;
auto constexpr kOpenGLVividlightNv = 0x92A6;
auto constexpr kOpenGLVolatileApple = 0x8A1A;
auto constexpr kOpenGLWExt = 0x87D8;
auto constexpr kOpenGLWaitFailed = 0x911D;
auto constexpr kOpenGLWaitFailedApple = 0x911D;
auto constexpr kOpenGLWarpSizeNv = 0x9339;
auto constexpr kOpenGLWarpsPerSmNv = 0x933A;
auto constexpr kOpenGLWeightArrayArb = 0x86AD;
auto constexpr kOpenGLWeightArrayBufferBinding = 0x889E;
auto constexpr kOpenGLWeightArrayBufferBindingArb = 0x889E;
auto constexpr kOpenGLWeightArrayBufferBindingOes = 0x889E;
auto constexpr kOpenGLWeightArrayOes = 0x86AD;
auto constexpr kOpenGLWeightArrayPointerArb = 0x86AC;
auto constexpr kOpenGLWeightArrayPointerOes = 0x86AC;
auto constexpr kOpenGLWeightArraySizeArb = 0x86AB;
auto constexpr kOpenGLWeightArraySizeOes = 0x86AB;
auto constexpr kOpenGLWeightArrayStrideArb = 0x86AA;
auto constexpr kOpenGLWeightArrayStrideOes = 0x86AA;
auto constexpr kOpenGLWeightArrayTypeArb = 0x86A9;
auto constexpr kOpenGLWeightArrayTypeOes = 0x86A9;
auto constexpr kOpenGLWeightSumUnityArb = 0x86A6;
auto constexpr kOpenGLWeightedAverageArb = 0x9367;
auto constexpr kOpenGLWeightedAverageExt = 0x9367;
auto constexpr kOpenGLWideLineHintPgi = 0x1A222;
auto constexpr kOpenGLWindowRectangleExt = 0x8F12;
auto constexpr kOpenGLWindowRectangleModeExt = 0x8F13;
auto constexpr kOpenGLWrapBorderSun = 0x81D4;
auto constexpr kOpenGLWriteDiscardNv = 0x88BE;
auto constexpr kOpenGLWriteOnly = 0x88B9;
auto constexpr kOpenGLWriteOnlyArb = 0x88B9;
auto constexpr kOpenGLWriteOnlyOes = 0x88B9;
auto constexpr kOpenGLWritePixelDataRangeLengthNv = 0x887A;
auto constexpr kOpenGLWritePixelDataRangeNv = 0x8878;
auto constexpr kOpenGLWritePixelDataRangePointerNv = 0x887C;
auto constexpr kOpenGLWriteonlyRenderingQcom = 0x8823;
auto constexpr kOpenGLXExt = 0x87D5;
auto constexpr kOpenGLXor = 0x1506;
auto constexpr kOpenGLXorNv = 0x1506;
auto constexpr kOpenGLYExt = 0x87D6;
auto constexpr kOpenGLYcbaycr8a4224Nv = 0x9032;
auto constexpr kOpenGLYcbcr422Apple = 0x85B9;
auto constexpr kOpenGLYcbcrMesa = 0x8757;
auto constexpr kOpenGLYcbycr8422Nv = 0x9031;
auto constexpr kOpenGLYcrcb422Sgix = 0x81BB;
auto constexpr kOpenGLYcrcb444Sgix = 0x81BC;
auto constexpr kOpenGLYcrcbSgix = 0x8318;
auto constexpr kOpenGLYcrcbaSgix = 0x8319;
auto constexpr kOpenGLZ400BinaryAmd = 0x8740;
auto constexpr kOpenGLZ4y12z4cb12z4a12z4y12z4cr12z4a124224Nv = 0x9036;
auto constexpr kOpenGLZ4y12z4cb12z4cr12444Nv = 0x9037;
auto constexpr kOpenGLZ4y12z4cb12z4y12z4cr12422Nv = 0x9035;
auto constexpr kOpenGLZ6y10z6cb10z6a10z6y10z6cr10z6a104224Nv = 0x9034;
auto constexpr kOpenGLZ6y10z6cb10z6y10z6cr10422Nv = 0x9033;
auto constexpr kOpenGLZExt = 0x87D7;
auto constexpr kOpenGLZero = 0;
auto constexpr kOpenGLZeroExt = 0x87DD;
auto constexpr kOpenGLZeroToOne = 0x935F;
auto constexpr kOpenGLZeroToOneExt = 0x935F;
auto constexpr kOpenGLZoomX = 0x0D16;
auto constexpr kOpenGLZoomY = 0x0D17;

} /* namespace boom */