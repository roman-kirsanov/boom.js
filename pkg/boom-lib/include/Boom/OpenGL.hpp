#pragma once

#include <optional>
#include <cinttypes>
#include <Boom/Memory.hpp>

namespace boom {

struct __OpenGLImpl;

class View;
class OpenGL;

using OpenGLRef = std::shared_ptr<boom::OpenGL>;
using OpenGLCRef = std::shared_ptr<boom::OpenGL const>;
using OpenGLWRef = std::weak_ptr<boom::OpenGL>;
using OpenGLCWRef = std::weak_ptr<boom::OpenGL const>;

using OpenGLBitfield = std::uint32_t;
using OpenGLBoolean = std::uint8_t;
using OpenGLByte = std::int8_t;
using OpenGLChar = char;
using OpenGLCharARB = char;
using OpenGLClampd = double;
using OpenGLClampf = float;
using OpenGLClampx = std::int32_t;
using OpenGLDouble = double;
using OpenGLEGLClientBufferEXT = void*;
using OpenGLEGLImageOES = void*;
using OpenGLEnum = std::uint32_t;
using OpenGLFixed = std::int32_t;
using OpenGLFloat = float;
using OpenGLHalf = std::uint16_t;
using OpenGLHalfARB = std::uint16_t;
using OpenGLHalfNV = std::uint16_t;
using OpenGLInt = std::int32_t;
using OpenGLInt64 = std::int64_t;
using OpenGLInt64EXT = std::int64_t;
using OpenGLIntptr = std::intptr_t;
using OpenGLIntptrARB = std::intptr_t;
using OpenGLShort = std::int16_t;
using OpenGLSizei = std::int32_t;
using OpenGLSizeiptrARB = std::int64_t;
using OpenGLSync = struct __GLsync*;
using OpenGLUbyte = std::uint8_t;
using OpenGLUint = std::uint32_t;
using OpenGLUInt64 = std::uint64_t;
using OpenGLUInt64EXT = std::uint64_t;
using OpenGLUShort = std::uint16_t;
using OpenGLVDPAUSurfaceNV = boom::OpenGLIntptr;
using OpenGLDebugProc = void (*)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void const*);
using OpenGLDebugProcARB = void (*)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void const*);
using OpenGLDebugProcKHR = void (*)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void const*);
using OpenGLDebugProcAMD = void (*)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void*);
using OpenGLVulkanProcNV = void (*)(void);

#ifdef __APPLE__
using OpenGLHandleARB = void*;
#else
using OpenGLHandleARB = std::uint32_t;
#endif
#ifdef _WIN64
using OpenGLSizeiptr = std::int64_t;
#else
using OpenGLSizeiptr = long;
#endif

enum class OpenGLVersion {
    CoreProfile_32,
    CoreProfile_33,
    CoreProfile_40,
    CoreProfile_41,
    CoreProfile_42,
    CoreProfile_43,
    CoreProfile_44,
    CoreProfile_45,
    CoreProfile_46,
    CompatibilityProfile_32,
    CompatibilityProfile_33,
    CompatibilityProfile_40,
    CompatibilityProfile_41,
    CompatibilityProfile_42,
    CompatibilityProfile_43,
    CompatibilityProfile_44,
    CompatibilityProfile_45,
    CompatibilityProfile_46,
    ES_10,
    ES_11,
    ES_20,
    ES_30,
    ES_31,
    ES_32
};

struct OpenGLOptions {
    std::optional<std::shared_ptr<boom::OpenGL const>> shared;
    std::optional<std::shared_ptr<boom::View const>> view;
    std::optional<boom::OpenGLVersion> version;
    std::optional<std::int32_t> majorVersion; // TODO: remove...
    std::optional<std::int32_t> minorVersion; // TODO: remove...
    std::optional<bool> debug;
};

class OpenGL : public boom::Object {
public:
    OpenGL(boom::OpenGLOptions const& = {});
    void accum(boom::OpenGLEnum op, boom::OpenGLFloat value) const;
    void accumxOES(boom::OpenGLEnum op, boom::OpenGLFixed value) const;
    boom::OpenGLBoolean acquireKeyedMutexWin32EXT(boom::OpenGLUint memory, boom::OpenGLUInt64 key, boom::OpenGLUint timeout) const;
    void activeProgramEXT(boom::OpenGLUint program) const;
    void activeShaderProgram(boom::OpenGLUint pipeline, boom::OpenGLUint program) const;
    void activeShaderProgramEXT(boom::OpenGLUint pipeline, boom::OpenGLUint program) const;
    void activeStencilFaceEXT(boom::OpenGLEnum face) const;
    void activeTexture(boom::OpenGLEnum texture) const;
    void activeTextureARB(boom::OpenGLEnum texture) const;
    void activeVaryingNV(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    void alphaFragmentOp1ATI(boom::OpenGLEnum op, boom::OpenGLUint dst, boom::OpenGLUint dstMod, boom::OpenGLUint arg1, boom::OpenGLUint arg1Rep, boom::OpenGLUint arg1Mod) const;
    void alphaFragmentOp2ATI(boom::OpenGLEnum op, boom::OpenGLUint dst, boom::OpenGLUint dstMod, boom::OpenGLUint arg1, boom::OpenGLUint arg1Rep, boom::OpenGLUint arg1Mod, boom::OpenGLUint arg2, boom::OpenGLUint arg2Rep, boom::OpenGLUint arg2Mod) const;
    void alphaFragmentOp3ATI(boom::OpenGLEnum op, boom::OpenGLUint dst, boom::OpenGLUint dstMod, boom::OpenGLUint arg1, boom::OpenGLUint arg1Rep, boom::OpenGLUint arg1Mod, boom::OpenGLUint arg2, boom::OpenGLUint arg2Rep, boom::OpenGLUint arg2Mod, boom::OpenGLUint arg3, boom::OpenGLUint arg3Rep, boom::OpenGLUint arg3Mod) const;
    void alphaFunc(boom::OpenGLEnum func, boom::OpenGLFloat ref) const;
    void alphaFuncQCOM(boom::OpenGLEnum func, boom::OpenGLClampf ref) const;
    void alphaFuncx(boom::OpenGLEnum func, boom::OpenGLFixed ref) const;
    void alphaFuncxOES(boom::OpenGLEnum func, boom::OpenGLFixed ref) const;
    void alphaToCoverageDitherControlNV(boom::OpenGLEnum mode) const;
    void applyFramebufferAttachmentCMAAINTEL() const;
    void applyTextureEXT(boom::OpenGLEnum mode) const;
    boom::OpenGLBoolean areProgramsResidentNV(boom::OpenGLSizei n, boom::OpenGLUint const* programs, boom::OpenGLBoolean* residences) const;
    boom::OpenGLBoolean areTexturesResident(boom::OpenGLSizei n, boom::OpenGLUint const* textures, boom::OpenGLBoolean* residences) const;
    boom::OpenGLBoolean areTexturesResidentEXT(boom::OpenGLSizei n, boom::OpenGLUint const* textures, boom::OpenGLBoolean* residences) const;
    void arrayElement(boom::OpenGLInt i) const;
    void arrayElementEXT(boom::OpenGLInt i) const;
    void arrayObjectATI(boom::OpenGLEnum array, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLUint buffer, boom::OpenGLUint offset) const;
    boom::OpenGLUint asyncCopyBufferSubDataNVX(boom::OpenGLSizei waitSemaphoreCount, boom::OpenGLUint const* waitSemaphoreArray, boom::OpenGLUInt64 const* fenceValueArray, boom::OpenGLUint readGpu, boom::OpenGLBitfield writeGpuMask, boom::OpenGLUint readBuffer, boom::OpenGLUint writeBuffer, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size, boom::OpenGLSizei signalSemaphoreCount, boom::OpenGLUint const* signalSemaphoreArray, boom::OpenGLUInt64 const* signalValueArray) const;
    boom::OpenGLUint asyncCopyImageSubDataNVX(boom::OpenGLSizei waitSemaphoreCount, boom::OpenGLUint const* waitSemaphoreArray, boom::OpenGLUInt64 const* waitValueArray, boom::OpenGLUint srcGpu, boom::OpenGLBitfield dstGpuMask, boom::OpenGLUint srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUint dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei srcWidth, boom::OpenGLSizei srcHeight, boom::OpenGLSizei srcDepth, boom::OpenGLSizei signalSemaphoreCount, boom::OpenGLUint const* signalSemaphoreArray, boom::OpenGLUInt64 const* signalValueArray) const;
    void asyncMarkerSGIX(boom::OpenGLUint marker) const;
    void attachObjectARB(boom::OpenGLHandleARB containerObj, boom::OpenGLHandleARB obj) const;
    void attachShader(boom::OpenGLUint program, boom::OpenGLUint shader) const;
    void begin(boom::OpenGLEnum mode) const;
    void beginConditionalRender(boom::OpenGLUint id, boom::OpenGLEnum mode) const;
    void beginConditionalRenderNV(boom::OpenGLUint id, boom::OpenGLEnum mode) const;
    void beginConditionalRenderNVX(boom::OpenGLUint id) const;
    void beginFragmentShaderATI() const;
    void beginOcclusionQueryNV(boom::OpenGLUint id) const;
    void beginPerfMonitorAMD(boom::OpenGLUint monitor) const;
    void beginPerfQueryINTEL(boom::OpenGLUint queryHandle) const;
    void beginQuery(boom::OpenGLEnum target, boom::OpenGLUint id) const;
    void beginQueryARB(boom::OpenGLEnum target, boom::OpenGLUint id) const;
    void beginQueryEXT(boom::OpenGLEnum target, boom::OpenGLUint id) const;
    void beginQueryIndexed(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint id) const;
    void beginTransformFeedback(boom::OpenGLEnum primitiveMode) const;
    void beginTransformFeedbackEXT(boom::OpenGLEnum primitiveMode) const;
    void beginTransformFeedbackNV(boom::OpenGLEnum primitiveMode) const;
    void beginVertexShaderEXT() const;
    void beginVideoCaptureNV(boom::OpenGLUint video_capture_slot) const;
    void bindAttribLocation(boom::OpenGLUint program, boom::OpenGLUint index, boom::OpenGLChar const* name) const;
    void bindAttribLocationARB(boom::OpenGLHandleARB programObj, boom::OpenGLUint index, boom::OpenGLCharARB const* name) const;
    void bindBuffer(boom::OpenGLEnum target, boom::OpenGLUint buffer) const;
    void bindBufferARB(boom::OpenGLEnum target, boom::OpenGLUint buffer) const;
    void bindBufferBase(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint buffer) const;
    void bindBufferBaseEXT(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint buffer) const;
    void bindBufferBaseNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint buffer) const;
    void bindBufferOffsetEXT(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint buffer, boom::OpenGLIntptr offset) const;
    void bindBufferOffsetNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint buffer, boom::OpenGLIntptr offset) const;
    void bindBufferRange(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void bindBufferRangeEXT(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void bindBufferRangeNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void bindBuffersBase(boom::OpenGLEnum target, boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* buffers) const;
    void bindBuffersRange(boom::OpenGLEnum target, boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* buffers, boom::OpenGLIntptr const* offsets, boom::OpenGLSizeiptr const* sizes) const;
    void bindFragDataLocation(boom::OpenGLUint program, boom::OpenGLUint color, boom::OpenGLChar const* name) const;
    void bindFragDataLocationEXT(boom::OpenGLUint program, boom::OpenGLUint color, boom::OpenGLChar const* name) const;
    void bindFragDataLocationIndexed(boom::OpenGLUint program, boom::OpenGLUint colorNumber, boom::OpenGLUint index, boom::OpenGLChar const* name) const;
    void bindFragDataLocationIndexedEXT(boom::OpenGLUint program, boom::OpenGLUint colorNumber, boom::OpenGLUint index, boom::OpenGLChar const* name) const;
    void bindFragmentShaderATI(boom::OpenGLUint id) const;
    void bindFramebuffer(boom::OpenGLEnum target, boom::OpenGLUint framebuffer) const;
    void bindFramebufferEXT(boom::OpenGLEnum target, boom::OpenGLUint framebuffer) const;
    void bindFramebufferOES(boom::OpenGLEnum target, boom::OpenGLUint framebuffer) const;
    void bindImageTexture(boom::OpenGLUint unit, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLBoolean layered, boom::OpenGLInt layer, boom::OpenGLEnum access, boom::OpenGLEnum format) const;
    void bindImageTextureEXT(boom::OpenGLUint index, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLBoolean layered, boom::OpenGLInt layer, boom::OpenGLEnum access, boom::OpenGLInt format) const;
    void bindImageTextures(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* textures) const;
    boom::OpenGLUint bindLightParameterEXT(boom::OpenGLEnum light, boom::OpenGLEnum value) const;
    boom::OpenGLUint bindMaterialParameterEXT(boom::OpenGLEnum face, boom::OpenGLEnum value) const;
    void bindMultiTextureEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLUint texture) const;
    boom::OpenGLUint bindParameterEXT(boom::OpenGLEnum value) const;
    void bindProgramARB(boom::OpenGLEnum target, boom::OpenGLUint program) const;
    void bindProgramNV(boom::OpenGLEnum target, boom::OpenGLUint id) const;
    void bindProgramPipeline(boom::OpenGLUint pipeline) const;
    void bindProgramPipelineEXT(boom::OpenGLUint pipeline) const;
    void bindRenderbuffer(boom::OpenGLEnum target, boom::OpenGLUint renderbuffer) const;
    void bindRenderbufferEXT(boom::OpenGLEnum target, boom::OpenGLUint renderbuffer) const;
    void bindRenderbufferOES(boom::OpenGLEnum target, boom::OpenGLUint renderbuffer) const;
    void bindSampler(boom::OpenGLUint unit, boom::OpenGLUint sampler) const;
    void bindSamplers(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* samplers) const;
    void bindShadingRateImageNV(boom::OpenGLUint texture) const;
    boom::OpenGLUint bindTexGenParameterEXT(boom::OpenGLEnum unit, boom::OpenGLEnum coord, boom::OpenGLEnum value) const;
    void bindTexture(boom::OpenGLEnum target, boom::OpenGLUint texture) const;
    void bindTextureEXT(boom::OpenGLEnum target, boom::OpenGLUint texture) const;
    void bindTextures(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* textures) const;
    void bindTextureUnit(boom::OpenGLUint unit, boom::OpenGLUint texture) const;
    boom::OpenGLUint bindTextureUnitParameterEXT(boom::OpenGLEnum unit, boom::OpenGLEnum value) const;
    void bindTransformFeedback(boom::OpenGLEnum target, boom::OpenGLUint id) const;
    void bindTransformFeedbackNV(boom::OpenGLEnum target, boom::OpenGLUint id) const;
    void bindVertexArray(boom::OpenGLUint array) const;
    void bindVertexArrayAPPLE(boom::OpenGLUint array) const;
    void bindVertexArrayOES(boom::OpenGLUint array) const;
    void bindVertexBuffer(boom::OpenGLUint bindingindex, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizei stride) const;
    void bindVertexBuffers(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* buffers, boom::OpenGLIntptr const* offsets, boom::OpenGLSizei const* strides) const;
    void bindVertexShaderEXT(boom::OpenGLUint id) const;
    void bindVideoCaptureStreamBufferNV(boom::OpenGLUint video_capture_slot, boom::OpenGLUint stream, boom::OpenGLEnum frame_region, boom::OpenGLIntptrARB offset) const;
    void bindVideoCaptureStreamTextureNV(boom::OpenGLUint video_capture_slot, boom::OpenGLUint stream, boom::OpenGLEnum frame_region, boom::OpenGLEnum target, boom::OpenGLUint texture) const;
    void binormal3bEXT(boom::OpenGLByte bx, boom::OpenGLByte by, boom::OpenGLByte bz) const;
    void binormal3bvEXT(boom::OpenGLByte const* v) const;
    void binormal3dEXT(boom::OpenGLDouble bx, boom::OpenGLDouble by, boom::OpenGLDouble bz) const;
    void binormal3dvEXT(boom::OpenGLDouble const* v) const;
    void binormal3fEXT(boom::OpenGLFloat bx, boom::OpenGLFloat by, boom::OpenGLFloat bz) const;
    void binormal3fvEXT(boom::OpenGLFloat const* v) const;
    void binormal3iEXT(boom::OpenGLInt bx, boom::OpenGLInt by, boom::OpenGLInt bz) const;
    void binormal3ivEXT(boom::OpenGLInt const* v) const;
    void binormal3sEXT(boom::OpenGLShort bx, boom::OpenGLShort by, boom::OpenGLShort bz) const;
    void binormal3svEXT(boom::OpenGLShort const* v) const;
    void binormalPointerEXT(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void bitmap(boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLFloat xorig, boom::OpenGLFloat yorig, boom::OpenGLFloat xmove, boom::OpenGLFloat ymove, boom::OpenGLUbyte const* bitmap) const;
    void bitmapxOES(boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLFixed xorig, boom::OpenGLFixed yorig, boom::OpenGLFixed xmove, boom::OpenGLFixed ymove, boom::OpenGLUbyte const* bitmap) const;
    void blendBarrier() const;
    void blendBarrierKHR() const;
    void blendBarrierNV() const;
    void blendColor(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void blendColorEXT(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void blendColorxOES(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void blendEquation(boom::OpenGLEnum mode) const;
    void blendEquationEXT(boom::OpenGLEnum mode) const;
    void blendEquationi(boom::OpenGLUint buf, boom::OpenGLEnum mode) const;
    void blendEquationiARB(boom::OpenGLUint buf, boom::OpenGLEnum mode) const;
    void blendEquationiEXT(boom::OpenGLUint buf, boom::OpenGLEnum mode) const;
    void blendEquationIndexedAMD(boom::OpenGLUint buf, boom::OpenGLEnum mode) const;
    void blendEquationiOES(boom::OpenGLUint buf, boom::OpenGLEnum mode) const;
    void blendEquationOES(boom::OpenGLEnum mode) const;
    void blendEquationSeparate(boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateEXT(boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparatei(boom::OpenGLUint buf, boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateiARB(boom::OpenGLUint buf, boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateiEXT(boom::OpenGLUint buf, boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateIndexedAMD(boom::OpenGLUint buf, boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateiOES(boom::OpenGLUint buf, boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparateOES(boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendFunc(boom::OpenGLEnum sfactor, boom::OpenGLEnum dfactor) const;
    void blendFunci(boom::OpenGLUint buf, boom::OpenGLEnum src, boom::OpenGLEnum dst) const;
    void blendFunciARB(boom::OpenGLUint buf, boom::OpenGLEnum src, boom::OpenGLEnum dst) const;
    void blendFunciEXT(boom::OpenGLUint buf, boom::OpenGLEnum src, boom::OpenGLEnum dst) const;
    void blendFuncIndexedAMD(boom::OpenGLUint buf, boom::OpenGLEnum src, boom::OpenGLEnum dst) const;
    void blendFunciOES(boom::OpenGLUint buf, boom::OpenGLEnum src, boom::OpenGLEnum dst) const;
    void blendFuncSeparate(boom::OpenGLEnum sfactorRGB, boom::OpenGLEnum dfactorRGB, boom::OpenGLEnum sfactorAlpha, boom::OpenGLEnum dfactorAlpha) const;
    void blendFuncSeparateEXT(boom::OpenGLEnum sfactorRGB, boom::OpenGLEnum dfactorRGB, boom::OpenGLEnum sfactorAlpha, boom::OpenGLEnum dfactorAlpha) const;
    void blendFuncSeparatei(boom::OpenGLUint buf, boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendFuncSeparateiARB(boom::OpenGLUint buf, boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendFuncSeparateiEXT(boom::OpenGLUint buf, boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendFuncSeparateIndexedAMD(boom::OpenGLUint buf, boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendFuncSeparateINGR(boom::OpenGLEnum sfactorRGB, boom::OpenGLEnum dfactorRGB, boom::OpenGLEnum sfactorAlpha, boom::OpenGLEnum dfactorAlpha) const;
    void blendFuncSeparateiOES(boom::OpenGLUint buf, boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendFuncSeparateOES(boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendParameteriNV(boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void blitFramebuffer(boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void blitFramebufferANGLE(boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void blitFramebufferEXT(boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void blitFramebufferNV(boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void blitNamedFramebuffer(boom::OpenGLUint readFramebuffer, boom::OpenGLUint drawFramebuffer, boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void bufferAddressRangeNV(boom::OpenGLEnum pname, boom::OpenGLUint index, boom::OpenGLUInt64EXT address, boom::OpenGLSizeiptr length) const;
    void bufferAttachMemoryNV(boom::OpenGLEnum target, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void bufferData(boom::OpenGLEnum target, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLEnum usage) const;
    void bufferDataARB(boom::OpenGLEnum target, boom::OpenGLSizeiptrARB size, void const* data, boom::OpenGLEnum usage) const;
    void bufferPageCommitmentARB(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLBoolean commit) const;
    void bufferPageCommitmentMemNV(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLUint memory, boom::OpenGLUInt64 memOffset, boom::OpenGLBoolean commit) const;
    void bufferParameteriAPPLE(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void bufferStorage(boom::OpenGLEnum target, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLBitfield flags) const;
    void bufferStorageEXT(boom::OpenGLEnum target, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLBitfield flags) const;
    void bufferStorageExternalEXT(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEGLClientBufferEXT clientBuffer, boom::OpenGLBitfield flags) const;
    void bufferStorageMemEXT(boom::OpenGLEnum target, boom::OpenGLSizeiptr size, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void bufferSubData(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void bufferSubDataARB(boom::OpenGLEnum target, boom::OpenGLIntptrARB offset, boom::OpenGLSizeiptrARB size, void const* data) const;
    void callCommandListNV(boom::OpenGLUint list) const;
    void callList(boom::OpenGLUint list) const;
    void callLists(boom::OpenGLSizei n, boom::OpenGLEnum type, void const* lists) const;
    boom::OpenGLEnum checkFramebufferStatus(boom::OpenGLEnum target) const;
    boom::OpenGLEnum checkFramebufferStatusEXT(boom::OpenGLEnum target) const;
    boom::OpenGLEnum checkFramebufferStatusOES(boom::OpenGLEnum target) const;
    boom::OpenGLEnum checkNamedFramebufferStatus(boom::OpenGLUint framebuffer, boom::OpenGLEnum target) const;
    boom::OpenGLEnum checkNamedFramebufferStatusEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum target) const;
    void clampColor(boom::OpenGLEnum target, boom::OpenGLEnum clamp) const;
    void clampColorARB(boom::OpenGLEnum target, boom::OpenGLEnum clamp) const;
    void clear(boom::OpenGLBitfield mask) const;
    void clearAccum(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void clearAccumxOES(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void clearBufferData(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearBufferfi(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat depth, boom::OpenGLInt stencil) const;
    void clearBufferfv(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat const* value) const;
    void clearBufferiv(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLInt const* value) const;
    void clearBufferSubData(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearBufferuiv(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLUint const* value) const;
    void clearColor(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void clearColorIiEXT(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue, boom::OpenGLInt alpha) const;
    void clearColorIuiEXT(boom::OpenGLUint red, boom::OpenGLUint green, boom::OpenGLUint blue, boom::OpenGLUint alpha) const;
    void clearColorx(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void clearColorxOES(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void clearDepth(boom::OpenGLDouble depth) const;
    void clearDepthdNV(boom::OpenGLDouble depth) const;
    void clearDepthf(boom::OpenGLFloat d) const;
    void clearDepthfOES(boom::OpenGLClampf depth) const;
    void clearDepthx(boom::OpenGLFixed depth) const;
    void clearDepthxOES(boom::OpenGLFixed depth) const;
    void clearIndex(boom::OpenGLFloat c) const;
    void clearNamedBufferData(boom::OpenGLUint buffer, boom::OpenGLEnum internalformat, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearNamedBufferDataEXT(boom::OpenGLUint buffer, boom::OpenGLEnum internalformat, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearNamedBufferSubData(boom::OpenGLUint buffer, boom::OpenGLEnum internalformat, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearNamedBufferSubDataEXT(boom::OpenGLUint buffer, boom::OpenGLEnum internalformat, boom::OpenGLSizeiptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearNamedFramebufferfi(boom::OpenGLUint framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat depth, boom::OpenGLInt stencil) const;
    void clearNamedFramebufferfv(boom::OpenGLUint framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat const* value) const;
    void clearNamedFramebufferiv(boom::OpenGLUint framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLInt const* value) const;
    void clearNamedFramebufferuiv(boom::OpenGLUint framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLUint const* value) const;
    void clearPixelLocalStorageuiEXT(boom::OpenGLSizei offset, boom::OpenGLSizei n, boom::OpenGLUint const* values) const;
    void clearStencil(boom::OpenGLInt s) const;
    void clearTexImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearTexImageEXT(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearTexSubImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearTexSubImageEXT(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clientActiveTexture(boom::OpenGLEnum texture) const;
    void clientActiveTextureARB(boom::OpenGLEnum texture) const;
    void clientActiveVertexStreamATI(boom::OpenGLEnum stream) const;
    void clientAttribDefaultEXT(boom::OpenGLBitfield mask) const;
    void clientWaitSemaphoreui64NVX(boom::OpenGLSizei fenceObjectCount, boom::OpenGLUint const* semaphoreArray, boom::OpenGLUInt64 const* fenceValueArray) const;
    boom::OpenGLEnum clientWaitSync(boom::OpenGLSync sync, boom::OpenGLBitfield flags, boom::OpenGLUInt64 timeout) const;
    boom::OpenGLEnum clientWaitSyncAPPLE(boom::OpenGLSync sync, boom::OpenGLBitfield flags, boom::OpenGLUInt64 timeout) const;
    void clipControl(boom::OpenGLEnum origin, boom::OpenGLEnum depth) const;
    void clipControlEXT(boom::OpenGLEnum origin, boom::OpenGLEnum depth) const;
    void clipPlane(boom::OpenGLEnum plane, boom::OpenGLDouble const* equation) const;
    void clipPlanef(boom::OpenGLEnum p, boom::OpenGLFloat const* eqn) const;
    void clipPlanefIMG(boom::OpenGLEnum p, boom::OpenGLFloat const* eqn) const;
    void clipPlanefOES(boom::OpenGLEnum plane, boom::OpenGLFloat const* equation) const;
    void clipPlanex(boom::OpenGLEnum plane, boom::OpenGLFixed const* equation) const;
    void clipPlanexIMG(boom::OpenGLEnum p, boom::OpenGLFixed const* eqn) const;
    void clipPlanexOES(boom::OpenGLEnum plane, boom::OpenGLFixed const* equation) const;
    void color3b(boom::OpenGLByte red, boom::OpenGLByte green, boom::OpenGLByte blue) const;
    void color3bv(boom::OpenGLByte const* v) const;
    void color3d(boom::OpenGLDouble red, boom::OpenGLDouble green, boom::OpenGLDouble blue) const;
    void color3dv(boom::OpenGLDouble const* v) const;
    void color3f(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue) const;
    void color3fv(boom::OpenGLFloat const* v) const;
    void color3fVertex3fSUN(boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void color3fVertex3fvSUN(boom::OpenGLFloat const* c, boom::OpenGLFloat const* v) const;
    void color3hNV(boom::OpenGLHalfNV red, boom::OpenGLHalfNV green, boom::OpenGLHalfNV blue) const;
    void color3hvNV(boom::OpenGLHalfNV const* v) const;
    void color3i(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue) const;
    void color3iv(boom::OpenGLInt const* v) const;
    void color3s(boom::OpenGLShort red, boom::OpenGLShort green, boom::OpenGLShort blue) const;
    void color3sv(boom::OpenGLShort const* v) const;
    void color3ub(boom::OpenGLUbyte red, boom::OpenGLUbyte green, boom::OpenGLUbyte blue) const;
    void color3ubv(boom::OpenGLUbyte const* v) const;
    void color3ui(boom::OpenGLUint red, boom::OpenGLUint green, boom::OpenGLUint blue) const;
    void color3uiv(boom::OpenGLUint const* v) const;
    void color3us(boom::OpenGLUShort red, boom::OpenGLUShort green, boom::OpenGLUShort blue) const;
    void color3usv(boom::OpenGLUShort const* v) const;
    void color3xOES(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue) const;
    void color3xvOES(boom::OpenGLFixed const* components) const;
    void color4b(boom::OpenGLByte red, boom::OpenGLByte green, boom::OpenGLByte blue, boom::OpenGLByte alpha) const;
    void color4bv(boom::OpenGLByte const* v) const;
    void color4d(boom::OpenGLDouble red, boom::OpenGLDouble green, boom::OpenGLDouble blue, boom::OpenGLDouble alpha) const;
    void color4dv(boom::OpenGLDouble const* v) const;
    void color4f(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void color4fNormal3fVertex3fSUN(boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat a, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void color4fNormal3fVertex3fvSUN(boom::OpenGLFloat const* c, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void color4fv(boom::OpenGLFloat const* v) const;
    void color4hNV(boom::OpenGLHalfNV red, boom::OpenGLHalfNV green, boom::OpenGLHalfNV blue, boom::OpenGLHalfNV alpha) const;
    void color4hvNV(boom::OpenGLHalfNV const* v) const;
    void color4i(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue, boom::OpenGLInt alpha) const;
    void color4iv(boom::OpenGLInt const* v) const;
    void color4s(boom::OpenGLShort red, boom::OpenGLShort green, boom::OpenGLShort blue, boom::OpenGLShort alpha) const;
    void color4sv(boom::OpenGLShort const* v) const;
    void color4ub(boom::OpenGLUbyte red, boom::OpenGLUbyte green, boom::OpenGLUbyte blue, boom::OpenGLUbyte alpha) const;
    void color4ubv(boom::OpenGLUbyte const* v) const;
    void color4ubVertex2fSUN(boom::OpenGLUbyte r, boom::OpenGLUbyte g, boom::OpenGLUbyte b, boom::OpenGLUbyte a, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void color4ubVertex2fvSUN(boom::OpenGLUbyte const* c, boom::OpenGLFloat const* v) const;
    void color4ubVertex3fSUN(boom::OpenGLUbyte r, boom::OpenGLUbyte g, boom::OpenGLUbyte b, boom::OpenGLUbyte a, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void color4ubVertex3fvSUN(boom::OpenGLUbyte const* c, boom::OpenGLFloat const* v) const;
    void color4ui(boom::OpenGLUint red, boom::OpenGLUint green, boom::OpenGLUint blue, boom::OpenGLUint alpha) const;
    void color4uiv(boom::OpenGLUint const* v) const;
    void color4us(boom::OpenGLUShort red, boom::OpenGLUShort green, boom::OpenGLUShort blue, boom::OpenGLUShort alpha) const;
    void color4usv(boom::OpenGLUShort const* v) const;
    void color4x(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void color4xOES(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void color4xvOES(boom::OpenGLFixed const* components) const;
    void colorFormatNV(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void colorFragmentOp1ATI(boom::OpenGLEnum op, boom::OpenGLUint dst, boom::OpenGLUint dstMask, boom::OpenGLUint dstMod, boom::OpenGLUint arg1, boom::OpenGLUint arg1Rep, boom::OpenGLUint arg1Mod) const;
    void colorFragmentOp2ATI(boom::OpenGLEnum op, boom::OpenGLUint dst, boom::OpenGLUint dstMask, boom::OpenGLUint dstMod, boom::OpenGLUint arg1, boom::OpenGLUint arg1Rep, boom::OpenGLUint arg1Mod, boom::OpenGLUint arg2, boom::OpenGLUint arg2Rep, boom::OpenGLUint arg2Mod) const;
    void colorFragmentOp3ATI(boom::OpenGLEnum op, boom::OpenGLUint dst, boom::OpenGLUint dstMask, boom::OpenGLUint dstMod, boom::OpenGLUint arg1, boom::OpenGLUint arg1Rep, boom::OpenGLUint arg1Mod, boom::OpenGLUint arg2, boom::OpenGLUint arg2Rep, boom::OpenGLUint arg2Mod, boom::OpenGLUint arg3, boom::OpenGLUint arg3Rep, boom::OpenGLUint arg3Mod) const;
    void colorMask(boom::OpenGLBoolean red, boom::OpenGLBoolean green, boom::OpenGLBoolean blue, boom::OpenGLBoolean alpha) const;
    void colorMaski(boom::OpenGLUint index, boom::OpenGLBoolean r, boom::OpenGLBoolean g, boom::OpenGLBoolean b, boom::OpenGLBoolean a) const;
    void colorMaskiEXT(boom::OpenGLUint index, boom::OpenGLBoolean r, boom::OpenGLBoolean g, boom::OpenGLBoolean b, boom::OpenGLBoolean a) const;
    void colorMaskIndexedEXT(boom::OpenGLUint index, boom::OpenGLBoolean r, boom::OpenGLBoolean g, boom::OpenGLBoolean b, boom::OpenGLBoolean a) const;
    void colorMaskiOES(boom::OpenGLUint index, boom::OpenGLBoolean r, boom::OpenGLBoolean g, boom::OpenGLBoolean b, boom::OpenGLBoolean a) const;
    void colorMaterial(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void colorP3ui(boom::OpenGLEnum type, boom::OpenGLUint color) const;
    void colorP3uiv(boom::OpenGLEnum type, boom::OpenGLUint const* color) const;
    void colorP4ui(boom::OpenGLEnum type, boom::OpenGLUint color) const;
    void colorP4uiv(boom::OpenGLEnum type, boom::OpenGLUint const* color) const;
    void colorPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void colorPointerEXT(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLSizei count, void const* pointer) const;
    void colorPointerListIBM(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void colorPointervINTEL(boom::OpenGLInt size, boom::OpenGLEnum type, void const** pointer) const;
    void colorSubTable(boom::OpenGLEnum target, boom::OpenGLSizei start, boom::OpenGLSizei count, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void colorSubTableEXT(boom::OpenGLEnum target, boom::OpenGLSizei start, boom::OpenGLSizei count, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void colorTable(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* table) const;
    void colorTableEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* table) const;
    void colorTableParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void colorTableParameterfvSGI(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void colorTableParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void colorTableParameterivSGI(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void colorTableSGI(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* table) const;
    void combinerInputNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum variable, boom::OpenGLEnum input, boom::OpenGLEnum mapping, boom::OpenGLEnum componentUsage) const;
    void combinerOutputNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum abOutput, boom::OpenGLEnum cdOutput, boom::OpenGLEnum sumOutput, boom::OpenGLEnum scale, boom::OpenGLEnum bias, boom::OpenGLBoolean abDotProduct, boom::OpenGLBoolean cdDotProduct, boom::OpenGLBoolean muxSum) const;
    void combinerParameterfNV(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void combinerParameterfvNV(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void combinerParameteriNV(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void combinerParameterivNV(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void combinerStageParameterfvNV(boom::OpenGLEnum stage, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void commandListSegmentsNV(boom::OpenGLUint list, boom::OpenGLUint segments) const;
    void compileCommandListNV(boom::OpenGLUint list) const;
    void compileShader(boom::OpenGLUint shader) const;
    void compileShaderARB(boom::OpenGLHandleARB shaderObj) const;
    void compileShaderIncludeARB(boom::OpenGLUint shader, boom::OpenGLSizei count, boom::OpenGLChar const* const* path, boom::OpenGLInt const* length) const;
    void compressedMultiTexImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedMultiTexImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedMultiTexImage3DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedMultiTexSubImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedMultiTexSubImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedMultiTexSubImage3DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTexImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage1DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage2DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage3DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage3DOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage1DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage2DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage3DARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage3DOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTextureImage1DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTextureImage2DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTextureImage3DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTextureSubImage1D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTextureSubImage1DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTextureSubImage2D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTextureSubImage2DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void compressedTextureSubImage3D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTextureSubImage3DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* bits) const;
    void conservativeRasterParameterfNV(boom::OpenGLEnum pname, boom::OpenGLFloat value) const;
    void conservativeRasterParameteriNV(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void convolutionFilter1D(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* image) const;
    void convolutionFilter1DEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* image) const;
    void convolutionFilter2D(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* image) const;
    void convolutionFilter2DEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* image) const;
    void convolutionParameterf(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat params) const;
    void convolutionParameterfEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat params) const;
    void convolutionParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void convolutionParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void convolutionParameteri(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt params) const;
    void convolutionParameteriEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt params) const;
    void convolutionParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void convolutionParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void convolutionParameterxOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void convolutionParameterxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void copyBufferSubData(boom::OpenGLEnum readTarget, boom::OpenGLEnum writeTarget, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void copyBufferSubDataNV(boom::OpenGLEnum readTarget, boom::OpenGLEnum writeTarget, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void copyColorSubTable(boom::OpenGLEnum target, boom::OpenGLSizei start, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyColorSubTableEXT(boom::OpenGLEnum target, boom::OpenGLSizei start, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyColorTable(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyColorTableSGI(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyConvolutionFilter1D(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyConvolutionFilter1DEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyConvolutionFilter2D(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyConvolutionFilter2DEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyImageSubData(boom::OpenGLUint srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUint dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei srcWidth, boom::OpenGLSizei srcHeight, boom::OpenGLSizei srcDepth) const;
    void copyImageSubDataEXT(boom::OpenGLUint srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUint dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei srcWidth, boom::OpenGLSizei srcHeight, boom::OpenGLSizei srcDepth) const;
    void copyImageSubDataNV(boom::OpenGLUint srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUint dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void copyImageSubDataOES(boom::OpenGLUint srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUint dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei srcWidth, boom::OpenGLSizei srcHeight, boom::OpenGLSizei srcDepth) const;
    void copyMultiTexImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLInt border) const;
    void copyMultiTexImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border) const;
    void copyMultiTexSubImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyMultiTexSubImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyMultiTexSubImage3DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyNamedBufferSubData(boom::OpenGLUint readBuffer, boom::OpenGLUint writeBuffer, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void copyPathNV(boom::OpenGLUint resultPath, boom::OpenGLUint srcPath) const;
    void copyPixels(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum type) const;
    void copyTexImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLInt border) const;
    void copyTexImage1DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLInt border) const;
    void copyTexImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border) const;
    void copyTexImage2DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border) const;
    void copyTexSubImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyTexSubImage1DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyTexSubImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTexSubImage2DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTexSubImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTexSubImage3DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTexSubImage3DOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTextureImage1DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLInt border) const;
    void copyTextureImage2DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border) const;
    void copyTextureLevelsAPPLE(boom::OpenGLUint destinationTexture, boom::OpenGLUint sourceTexture, boom::OpenGLInt sourceBaseLevel, boom::OpenGLSizei sourceLevelCount) const;
    void copyTextureSubImage1D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyTextureSubImage1DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyTextureSubImage2D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTextureSubImage2DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTextureSubImage3D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTextureSubImage3DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void coverageMaskNV(boom::OpenGLBoolean mask) const;
    void coverageModulationNV(boom::OpenGLEnum components) const;
    void coverageModulationTableNV(boom::OpenGLSizei n, boom::OpenGLFloat const* v) const;
    void coverageOperationNV(boom::OpenGLEnum operation) const;
    void coverFillPathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUint pathBase, boom::OpenGLEnum coverMode, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void coverFillPathNV(boom::OpenGLUint path, boom::OpenGLEnum coverMode) const;
    void coverStrokePathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUint pathBase, boom::OpenGLEnum coverMode, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void coverStrokePathNV(boom::OpenGLUint path, boom::OpenGLEnum coverMode) const;
    void createBuffers(boom::OpenGLSizei n, boom::OpenGLUint* buffers) const;
    void createCommandListsNV(boom::OpenGLSizei n, boom::OpenGLUint* lists) const;
    void createFramebuffers(boom::OpenGLSizei n, boom::OpenGLUint* framebuffers) const;
    void createMemoryObjectsEXT(boom::OpenGLSizei n, boom::OpenGLUint* memoryObjects) const;
    void createPerfQueryINTEL(boom::OpenGLUint queryId, boom::OpenGLUint* queryHandle) const;
    boom::OpenGLUint createProgram() const;
    boom::OpenGLHandleARB createProgramObjectARB() const;
    void createProgramPipelines(boom::OpenGLSizei n, boom::OpenGLUint* pipelines) const;
    boom::OpenGLUint createProgressFenceNVX() const;
    void createQueries(boom::OpenGLEnum target, boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    void createRenderbuffers(boom::OpenGLSizei n, boom::OpenGLUint* renderbuffers) const;
    void createSamplers(boom::OpenGLSizei n, boom::OpenGLUint* samplers) const;
    void createSemaphoresNV(boom::OpenGLSizei n, boom::OpenGLUint* semaphores) const;
    boom::OpenGLUint createShader(boom::OpenGLEnum type) const;
    boom::OpenGLHandleARB createShaderObjectARB(boom::OpenGLEnum shaderType) const;
    boom::OpenGLUint createShaderProgramEXT(boom::OpenGLEnum type, boom::OpenGLChar const* string) const;
    boom::OpenGLUint createShaderProgramv(boom::OpenGLEnum type, boom::OpenGLSizei count, boom::OpenGLChar const* const* strings) const;
    boom::OpenGLUint createShaderProgramvEXT(boom::OpenGLEnum type, boom::OpenGLSizei count, boom::OpenGLChar const* const* strings) const;
    void createStatesNV(boom::OpenGLSizei n, boom::OpenGLUint* states) const;
    boom::OpenGLSync createSyncFromCLeventARB(void** context, void** event, boom::OpenGLBitfield flags) const;
    void createTextures(boom::OpenGLEnum target, boom::OpenGLSizei n, boom::OpenGLUint* textures) const;
    void createTransformFeedbacks(boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    void createVertexArrays(boom::OpenGLSizei n, boom::OpenGLUint* arrays) const;
    void cullFace(boom::OpenGLEnum mode) const;
    void cullParameterdvEXT(boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void cullParameterfvEXT(boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void currentPaletteMatrixARB(boom::OpenGLInt index) const;
    void currentPaletteMatrixOES(boom::OpenGLUint matrixpaletteindex) const;
    void debugMessageCallback(boom::OpenGLDebugProc callback, void const* userParam) const;
    void debugMessageCallbackAMD(boom::OpenGLDebugProcAMD callback, void* userParam) const;
    void debugMessageCallbackARB(boom::OpenGLDebugProcARB callback, void const* userParam) const;
    void debugMessageCallbackKHR(boom::OpenGLDebugProcKHR callback, void const* userParam) const;
    void debugMessageControl(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLEnum severity, boom::OpenGLSizei count, boom::OpenGLUint const* ids, boom::OpenGLBoolean enabled) const;
    void debugMessageControlARB(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLEnum severity, boom::OpenGLSizei count, boom::OpenGLUint const* ids, boom::OpenGLBoolean enabled) const;
    void debugMessageControlKHR(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLEnum severity, boom::OpenGLSizei count, boom::OpenGLUint const* ids, boom::OpenGLBoolean enabled) const;
    void debugMessageEnableAMD(boom::OpenGLEnum category, boom::OpenGLEnum severity, boom::OpenGLSizei count, boom::OpenGLUint const* ids, boom::OpenGLBoolean enabled) const;
    void debugMessageInsert(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLUint id, boom::OpenGLEnum severity, boom::OpenGLSizei length, boom::OpenGLChar const* buf) const;
    void debugMessageInsertAMD(boom::OpenGLEnum category, boom::OpenGLEnum severity, boom::OpenGLUint id, boom::OpenGLSizei length, boom::OpenGLChar const* buf) const;
    void debugMessageInsertARB(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLUint id, boom::OpenGLEnum severity, boom::OpenGLSizei length, boom::OpenGLChar const* buf) const;
    void debugMessageInsertKHR(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLUint id, boom::OpenGLEnum severity, boom::OpenGLSizei length, boom::OpenGLChar const* buf) const;
    void deformationMap3dSGIX(boom::OpenGLEnum target, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLDouble v1, boom::OpenGLDouble v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLDouble w1, boom::OpenGLDouble w2, boom::OpenGLInt wstride, boom::OpenGLInt worder, boom::OpenGLDouble const* points) const;
    void deformationMap3fSGIX(boom::OpenGLEnum target, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLFloat w1, boom::OpenGLFloat w2, boom::OpenGLInt wstride, boom::OpenGLInt worder, boom::OpenGLFloat const* points) const;
    void deformSGIX(boom::OpenGLBitfield mask) const;
    void deleteAsyncMarkersSGIX(boom::OpenGLUint marker, boom::OpenGLSizei range) const;
    void deleteBuffers(boom::OpenGLSizei n, boom::OpenGLUint const* buffers) const;
    void deleteBuffersARB(boom::OpenGLSizei n, boom::OpenGLUint const* buffers) const;
    void deleteCommandListsNV(boom::OpenGLSizei n, boom::OpenGLUint const* lists) const;
    void deleteFencesAPPLE(boom::OpenGLSizei n, boom::OpenGLUint const* fences) const;
    void deleteFencesNV(boom::OpenGLSizei n, boom::OpenGLUint const* fences) const;
    void deleteFragmentShaderATI(boom::OpenGLUint id) const;
    void deleteFramebuffers(boom::OpenGLSizei n, boom::OpenGLUint const* framebuffers) const;
    void deleteFramebuffersEXT(boom::OpenGLSizei n, boom::OpenGLUint const* framebuffers) const;
    void deleteFramebuffersOES(boom::OpenGLSizei n, boom::OpenGLUint const* framebuffers) const;
    void deleteLists(boom::OpenGLUint list, boom::OpenGLSizei range) const;
    void deleteMemoryObjectsEXT(boom::OpenGLSizei n, boom::OpenGLUint const* memoryObjects) const;
    void deleteNamedStringARB(boom::OpenGLInt namelen, boom::OpenGLChar const* name) const;
    void deleteNamesAMD(boom::OpenGLEnum identifier, boom::OpenGLUint num, boom::OpenGLUint const* names) const;
    void deleteObjectARB(boom::OpenGLHandleARB obj) const;
    void deleteOcclusionQueriesNV(boom::OpenGLSizei n, boom::OpenGLUint const* ids) const;
    void deletePathsNV(boom::OpenGLUint path, boom::OpenGLSizei range) const;
    void deletePerfMonitorsAMD(boom::OpenGLSizei n, boom::OpenGLUint* monitors) const;
    void deletePerfQueryINTEL(boom::OpenGLUint queryHandle) const;
    void deleteProgram(boom::OpenGLUint program) const;
    void deleteProgramPipelines(boom::OpenGLSizei n, boom::OpenGLUint const* pipelines) const;
    void deleteProgramPipelinesEXT(boom::OpenGLSizei n, boom::OpenGLUint const* pipelines) const;
    void deleteProgramsARB(boom::OpenGLSizei n, boom::OpenGLUint const* programs) const;
    void deleteProgramsNV(boom::OpenGLSizei n, boom::OpenGLUint const* programs) const;
    void deleteQueries(boom::OpenGLSizei n, boom::OpenGLUint const* ids) const;
    void deleteQueriesARB(boom::OpenGLSizei n, boom::OpenGLUint const* ids) const;
    void deleteQueriesEXT(boom::OpenGLSizei n, boom::OpenGLUint const* ids) const;
    void deleteQueryResourceTagNV(boom::OpenGLSizei n, boom::OpenGLInt const* tagIds) const;
    void deleteRenderbuffers(boom::OpenGLSizei n, boom::OpenGLUint const* renderbuffers) const;
    void deleteRenderbuffersEXT(boom::OpenGLSizei n, boom::OpenGLUint const* renderbuffers) const;
    void deleteRenderbuffersOES(boom::OpenGLSizei n, boom::OpenGLUint const* renderbuffers) const;
    void deleteSamplers(boom::OpenGLSizei count, boom::OpenGLUint const* samplers) const;
    void deleteSemaphoresEXT(boom::OpenGLSizei n, boom::OpenGLUint const* semaphores) const;
    void deleteShader(boom::OpenGLUint shader) const;
    void deleteStatesNV(boom::OpenGLSizei n, boom::OpenGLUint const* states) const;
    void deleteSync(boom::OpenGLSync sync) const;
    void deleteSyncAPPLE(boom::OpenGLSync sync) const;
    void deleteTextures(boom::OpenGLSizei n, boom::OpenGLUint const* textures) const;
    void deleteTexturesEXT(boom::OpenGLSizei n, boom::OpenGLUint const* textures) const;
    void deleteTransformFeedbacks(boom::OpenGLSizei n, boom::OpenGLUint const* ids) const;
    void deleteTransformFeedbacksNV(boom::OpenGLSizei n, boom::OpenGLUint const* ids) const;
    void deleteVertexArrays(boom::OpenGLSizei n, boom::OpenGLUint const* arrays) const;
    void deleteVertexArraysAPPLE(boom::OpenGLSizei n, boom::OpenGLUint const* arrays) const;
    void deleteVertexArraysOES(boom::OpenGLSizei n, boom::OpenGLUint const* arrays) const;
    void deleteVertexShaderEXT(boom::OpenGLUint id) const;
    void depthBoundsdNV(boom::OpenGLDouble zmin, boom::OpenGLDouble zmax) const;
    void depthBoundsEXT(boom::OpenGLClampd zmin, boom::OpenGLClampd zmax) const;
    void depthFunc(boom::OpenGLEnum func) const;
    void depthMask(boom::OpenGLBoolean flag) const;
    void depthRange(boom::OpenGLDouble n, boom::OpenGLDouble f) const;
    void depthRangeArraydvNV(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void depthRangeArrayfvNV(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void depthRangeArrayfvOES(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void depthRangeArrayv(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void depthRangedNV(boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void depthRangef(boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void depthRangefOES(boom::OpenGLClampf n, boom::OpenGLClampf f) const;
    void depthRangeIndexed(boom::OpenGLUint index, boom::OpenGLDouble n, boom::OpenGLDouble f) const;
    void depthRangeIndexeddNV(boom::OpenGLUint index, boom::OpenGLDouble n, boom::OpenGLDouble f) const;
    void depthRangeIndexedfNV(boom::OpenGLUint index, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void depthRangeIndexedfOES(boom::OpenGLUint index, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void depthRangex(boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void depthRangexOES(boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void detachObjectARB(boom::OpenGLHandleARB containerObj, boom::OpenGLHandleARB attachedObj) const;
    void detachShader(boom::OpenGLUint program, boom::OpenGLUint shader) const;
    void detailTexFuncSGIS(boom::OpenGLEnum target, boom::OpenGLSizei n, boom::OpenGLFloat const* points) const;
    void disable(boom::OpenGLEnum cap) const;
    void disableClientState(boom::OpenGLEnum array) const;
    void disableClientStateiEXT(boom::OpenGLEnum array, boom::OpenGLUint index) const;
    void disableClientStateIndexedEXT(boom::OpenGLEnum array, boom::OpenGLUint index) const;
    void disableDriverControlQCOM(boom::OpenGLUint driverControl) const;
    void disablei(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void disableiEXT(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void disableIndexedEXT(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void disableiNV(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void disableiOES(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void disableVariantClientStateEXT(boom::OpenGLUint id) const;
    void disableVertexArrayAttrib(boom::OpenGLUint vaobj, boom::OpenGLUint index) const;
    void disableVertexArrayAttribEXT(boom::OpenGLUint vaobj, boom::OpenGLUint index) const;
    void disableVertexArrayEXT(boom::OpenGLUint vaobj, boom::OpenGLEnum array) const;
    void disableVertexAttribAPPLE(boom::OpenGLUint index, boom::OpenGLEnum pname) const;
    void disableVertexAttribArray(boom::OpenGLUint index) const;
    void disableVertexAttribArrayARB(boom::OpenGLUint index) const;
    void discardFramebufferEXT(boom::OpenGLEnum target, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments) const;
    void dispatchCompute(boom::OpenGLUint num_groups_x, boom::OpenGLUint num_groups_y, boom::OpenGLUint num_groups_z) const;
    void dispatchComputeGroupSizeARB(boom::OpenGLUint num_groups_x, boom::OpenGLUint num_groups_y, boom::OpenGLUint num_groups_z, boom::OpenGLUint group_size_x, boom::OpenGLUint group_size_y, boom::OpenGLUint group_size_z) const;
    void dispatchComputeIndirect(boom::OpenGLIntptr indirect) const;
    void drawArrays(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count) const;
    void drawArraysEXT(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count) const;
    void drawArraysIndirect(boom::OpenGLEnum mode, void const* indirect) const;
    void drawArraysInstanced(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei instancecount) const;
    void drawArraysInstancedANGLE(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei primcount) const;
    void drawArraysInstancedARB(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei primcount) const;
    void drawArraysInstancedBaseInstance(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei instancecount, boom::OpenGLUint baseinstance) const;
    void drawArraysInstancedBaseInstanceEXT(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei instancecount, boom::OpenGLUint baseinstance) const;
    void drawArraysInstancedEXT(boom::OpenGLEnum mode, boom::OpenGLInt start, boom::OpenGLSizei count, boom::OpenGLSizei primcount) const;
    void drawArraysInstancedNV(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei primcount) const;
    void drawBuffer(boom::OpenGLEnum buf) const;
    void drawBuffers(boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void drawBuffersARB(boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void drawBuffersATI(boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void drawBuffersEXT(boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void drawBuffersIndexedEXT(boom::OpenGLInt n, boom::OpenGLEnum const* location, boom::OpenGLInt const* indices) const;
    void drawBuffersNV(boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void drawCommandsAddressNV(boom::OpenGLEnum primitiveMode, boom::OpenGLUInt64 const* indirects, boom::OpenGLSizei const* sizes, boom::OpenGLUint count) const;
    void drawCommandsNV(boom::OpenGLEnum primitiveMode, boom::OpenGLUint buffer, boom::OpenGLIntptr const* indirects, boom::OpenGLSizei const* sizes, boom::OpenGLUint count) const;
    void drawCommandsStatesAddressNV(boom::OpenGLUInt64 const* indirects, boom::OpenGLSizei const* sizes, boom::OpenGLUint const* states, boom::OpenGLUint const* fbos, boom::OpenGLUint count) const;
    void drawCommandsStatesNV(boom::OpenGLUint buffer, boom::OpenGLIntptr const* indirects, boom::OpenGLSizei const* sizes, boom::OpenGLUint const* states, boom::OpenGLUint const* fbos, boom::OpenGLUint count) const;
    void drawElementArrayAPPLE(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count) const;
    void drawElementArrayATI(boom::OpenGLEnum mode, boom::OpenGLSizei count) const;
    void drawElements(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices) const;
    void drawElementsBaseVertex(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawElementsBaseVertexEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawElementsBaseVertexOES(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawElementsIndirect(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect) const;
    void drawElementsInstanced(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount) const;
    void drawElementsInstancedANGLE(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei primcount) const;
    void drawElementsInstancedARB(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei primcount) const;
    void drawElementsInstancedBaseInstance(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLUint baseinstance) const;
    void drawElementsInstancedBaseInstanceEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLUint baseinstance) const;
    void drawElementsInstancedBaseVertex(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex) const;
    void drawElementsInstancedBaseVertexBaseInstance(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex, boom::OpenGLUint baseinstance) const;
    void drawElementsInstancedBaseVertexBaseInstanceEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex, boom::OpenGLUint baseinstance) const;
    void drawElementsInstancedBaseVertexEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex) const;
    void drawElementsInstancedBaseVertexOES(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex) const;
    void drawElementsInstancedEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei primcount) const;
    void drawElementsInstancedNV(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei primcount) const;
    void drawMeshArraysSUN(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei width) const;
    void drawMeshTasksIndirectNV(boom::OpenGLIntptr indirect) const;
    void drawMeshTasksNV(boom::OpenGLUint first, boom::OpenGLUint count) const;
    void drawPixels(boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void drawRangeElementArrayAPPLE(boom::OpenGLEnum mode, boom::OpenGLUint start, boom::OpenGLUint end, boom::OpenGLInt first, boom::OpenGLSizei count) const;
    void drawRangeElementArrayATI(boom::OpenGLEnum mode, boom::OpenGLUint start, boom::OpenGLUint end, boom::OpenGLSizei count) const;
    void drawRangeElements(boom::OpenGLEnum mode, boom::OpenGLUint start, boom::OpenGLUint end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices) const;
    void drawRangeElementsBaseVertex(boom::OpenGLEnum mode, boom::OpenGLUint start, boom::OpenGLUint end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawRangeElementsBaseVertexEXT(boom::OpenGLEnum mode, boom::OpenGLUint start, boom::OpenGLUint end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawRangeElementsBaseVertexOES(boom::OpenGLEnum mode, boom::OpenGLUint start, boom::OpenGLUint end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawRangeElementsEXT(boom::OpenGLEnum mode, boom::OpenGLUint start, boom::OpenGLUint end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices) const;
    void drawTexfOES(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat width, boom::OpenGLFloat height) const;
    void drawTexfvOES(boom::OpenGLFloat const* coords) const;
    void drawTexiOES(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt width, boom::OpenGLInt height) const;
    void drawTexivOES(boom::OpenGLInt const* coords) const;
    void drawTexsOES(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort width, boom::OpenGLShort height) const;
    void drawTexsvOES(boom::OpenGLShort const* coords) const;
    void drawTextureNV(boom::OpenGLUint texture, boom::OpenGLUint sampler, boom::OpenGLFloat x0, boom::OpenGLFloat y0, boom::OpenGLFloat x1, boom::OpenGLFloat y1, boom::OpenGLFloat z, boom::OpenGLFloat s0, boom::OpenGLFloat t0, boom::OpenGLFloat s1, boom::OpenGLFloat t1) const;
    void drawTexxOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z, boom::OpenGLFixed width, boom::OpenGLFixed height) const;
    void drawTexxvOES(boom::OpenGLFixed const* coords) const;
    void drawTransformFeedback(boom::OpenGLEnum mode, boom::OpenGLUint id) const;
    void drawTransformFeedbackEXT(boom::OpenGLEnum mode, boom::OpenGLUint id) const;
    void drawTransformFeedbackInstanced(boom::OpenGLEnum mode, boom::OpenGLUint id, boom::OpenGLSizei instancecount) const;
    void drawTransformFeedbackInstancedEXT(boom::OpenGLEnum mode, boom::OpenGLUint id, boom::OpenGLSizei instancecount) const;
    void drawTransformFeedbackNV(boom::OpenGLEnum mode, boom::OpenGLUint id) const;
    void drawTransformFeedbackStream(boom::OpenGLEnum mode, boom::OpenGLUint id, boom::OpenGLUint stream) const;
    void drawTransformFeedbackStreamInstanced(boom::OpenGLEnum mode, boom::OpenGLUint id, boom::OpenGLUint stream, boom::OpenGLSizei instancecount) const;
    void drawVkImageNV(boom::OpenGLUInt64 vkImage, boom::OpenGLUint sampler, boom::OpenGLFloat x0, boom::OpenGLFloat y0, boom::OpenGLFloat x1, boom::OpenGLFloat y1, boom::OpenGLFloat z, boom::OpenGLFloat s0, boom::OpenGLFloat t0, boom::OpenGLFloat s1, boom::OpenGLFloat t1) const;
    void edgeFlag(boom::OpenGLBoolean flag) const;
    void edgeFlagFormatNV(boom::OpenGLSizei stride) const;
    void edgeFlagPointer(boom::OpenGLSizei stride, void const* pointer) const;
    void edgeFlagPointerEXT(boom::OpenGLSizei stride, boom::OpenGLSizei count, boom::OpenGLBoolean const* pointer) const;
    void edgeFlagPointerListIBM(boom::OpenGLInt stride, boom::OpenGLBoolean const** pointer, boom::OpenGLInt ptrstride) const;
    void edgeFlagv(boom::OpenGLBoolean const* flag) const;
    void eGLImageTargetRenderbufferStorageOES(boom::OpenGLEnum target, boom::OpenGLEGLImageOES image) const;
    void eGLImageTargetTexStorageEXT(boom::OpenGLEnum target, boom::OpenGLEGLImageOES image, boom::OpenGLInt const* attrib_list) const;
    void eGLImageTargetTexture2DOES(boom::OpenGLEnum target, boom::OpenGLEGLImageOES image) const;
    void eGLImageTargetTextureStorageEXT(boom::OpenGLUint texture, boom::OpenGLEGLImageOES image, boom::OpenGLInt const* attrib_list) const;
    void elementPointerAPPLE(boom::OpenGLEnum type, void const* pointer) const;
    void elementPointerATI(boom::OpenGLEnum type, void const* pointer) const;
    void enable(boom::OpenGLEnum cap) const;
    void enableClientState(boom::OpenGLEnum array) const;
    void enableClientStateiEXT(boom::OpenGLEnum array, boom::OpenGLUint index) const;
    void enableClientStateIndexedEXT(boom::OpenGLEnum array, boom::OpenGLUint index) const;
    void enableDriverControlQCOM(boom::OpenGLUint driverControl) const;
    void enablei(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void enableiEXT(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void enableIndexedEXT(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void enableiNV(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void enableiOES(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void enableVariantClientStateEXT(boom::OpenGLUint id) const;
    void enableVertexArrayAttrib(boom::OpenGLUint vaobj, boom::OpenGLUint index) const;
    void enableVertexArrayAttribEXT(boom::OpenGLUint vaobj, boom::OpenGLUint index) const;
    void enableVertexArrayEXT(boom::OpenGLUint vaobj, boom::OpenGLEnum array) const;
    void enableVertexAttribAPPLE(boom::OpenGLUint index, boom::OpenGLEnum pname) const;
    void enableVertexAttribArray(boom::OpenGLUint index) const;
    void enableVertexAttribArrayARB(boom::OpenGLUint index) const;
    void end() const;
    void endConditionalRender() const;
    void endConditionalRenderNV() const;
    void endConditionalRenderNVX() const;
    void endFragmentShaderATI() const;
    void endList() const;
    void endOcclusionQueryNV() const;
    void endPerfMonitorAMD(boom::OpenGLUint monitor) const;
    void endPerfQueryINTEL(boom::OpenGLUint queryHandle) const;
    void endQuery(boom::OpenGLEnum target) const;
    void endQueryARB(boom::OpenGLEnum target) const;
    void endQueryEXT(boom::OpenGLEnum target) const;
    void endQueryIndexed(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void endTilingQCOM(boom::OpenGLBitfield preserveMask) const;
    void endTransformFeedback() const;
    void endTransformFeedbackEXT() const;
    void endTransformFeedbackNV() const;
    void endVertexShaderEXT() const;
    void endVideoCaptureNV(boom::OpenGLUint video_capture_slot) const;
    void evalCoord1d(boom::OpenGLDouble u) const;
    void evalCoord1dv(boom::OpenGLDouble const* u) const;
    void evalCoord1f(boom::OpenGLFloat u) const;
    void evalCoord1fv(boom::OpenGLFloat const* u) const;
    void evalCoord1xOES(boom::OpenGLFixed u) const;
    void evalCoord1xvOES(boom::OpenGLFixed const* coords) const;
    void evalCoord2d(boom::OpenGLDouble u, boom::OpenGLDouble v) const;
    void evalCoord2dv(boom::OpenGLDouble const* u) const;
    void evalCoord2f(boom::OpenGLFloat u, boom::OpenGLFloat v) const;
    void evalCoord2fv(boom::OpenGLFloat const* u) const;
    void evalCoord2xOES(boom::OpenGLFixed u, boom::OpenGLFixed v) const;
    void evalCoord2xvOES(boom::OpenGLFixed const* coords) const;
    void evalMapsNV(boom::OpenGLEnum target, boom::OpenGLEnum mode) const;
    void evalMesh1(boom::OpenGLEnum mode, boom::OpenGLInt i1, boom::OpenGLInt i2) const;
    void evalMesh2(boom::OpenGLEnum mode, boom::OpenGLInt i1, boom::OpenGLInt i2, boom::OpenGLInt j1, boom::OpenGLInt j2) const;
    void evalPoint1(boom::OpenGLInt i) const;
    void evalPoint2(boom::OpenGLInt i, boom::OpenGLInt j) const;
    void evaluateDepthValuesARB() const;
    void executeProgramNV(boom::OpenGLEnum target, boom::OpenGLUint id, boom::OpenGLFloat const* params) const;
    void extGetBufferPointervQCOM(boom::OpenGLEnum target, void** params) const;
    void extGetBuffersQCOM(boom::OpenGLUint* buffers, boom::OpenGLInt maxBuffers, boom::OpenGLInt* numBuffers) const;
    void extGetFramebuffersQCOM(boom::OpenGLUint* framebuffers, boom::OpenGLInt maxFramebuffers, boom::OpenGLInt* numFramebuffers) const;
    void extGetProgramBinarySourceQCOM(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLChar* source, boom::OpenGLInt* length) const;
    void extGetProgramsQCOM(boom::OpenGLUint* programs, boom::OpenGLInt maxPrograms, boom::OpenGLInt* numPrograms) const;
    void extGetRenderbuffersQCOM(boom::OpenGLUint* renderbuffers, boom::OpenGLInt maxRenderbuffers, boom::OpenGLInt* numRenderbuffers) const;
    void extGetShadersQCOM(boom::OpenGLUint* shaders, boom::OpenGLInt maxShaders, boom::OpenGLInt* numShaders) const;
    void extGetTexLevelParameterivQCOM(boom::OpenGLUint texture, boom::OpenGLEnum face, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void extGetTexSubImageQCOM(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void* texels) const;
    void extGetTexturesQCOM(boom::OpenGLUint* textures, boom::OpenGLInt maxTextures, boom::OpenGLInt* numTextures) const;
    boom::OpenGLBoolean extIsProgramBinaryQCOM(boom::OpenGLUint program) const;
    void extractComponentEXT(boom::OpenGLUint res, boom::OpenGLUint src, boom::OpenGLUint num) const;
    void extrapolateTex2DQCOM(boom::OpenGLUint src1, boom::OpenGLUint src2, boom::OpenGLUint output, boom::OpenGLFloat scaleFactor) const;
    void extTexObjectStateOverrideiQCOM(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void feedbackBuffer(boom::OpenGLSizei size, boom::OpenGLEnum type, boom::OpenGLFloat* buffer) const;
    void feedbackBufferxOES(boom::OpenGLSizei n, boom::OpenGLEnum type, boom::OpenGLFixed const* buffer) const;
    boom::OpenGLSync fenceSync(boom::OpenGLEnum condition, boom::OpenGLBitfield flags) const;
    boom::OpenGLSync fenceSyncAPPLE(boom::OpenGLEnum condition, boom::OpenGLBitfield flags) const;
    void finalCombinerInputNV(boom::OpenGLEnum variable, boom::OpenGLEnum input, boom::OpenGLEnum mapping, boom::OpenGLEnum componentUsage) const;
    void finish() const;
    boom::OpenGLInt finishAsyncSGIX(boom::OpenGLUint* markerp) const;
    void finishFenceAPPLE(boom::OpenGLUint fence) const;
    void finishFenceNV(boom::OpenGLUint fence) const;
    void finishObjectAPPLE(boom::OpenGLEnum object, boom::OpenGLInt name) const;
    void finishTextureSUNX() const;
    void flush() const;
    void flushMappedBufferRange(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void flushMappedBufferRangeAPPLE(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void flushMappedBufferRangeEXT(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void flushMappedNamedBufferRange(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void flushMappedNamedBufferRangeEXT(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void flushPixelDataRangeNV(boom::OpenGLEnum target) const;
    void flushRasterSGIX() const;
    void flushStaticDataIBM(boom::OpenGLEnum target) const;
    void flushVertexArrayRangeAPPLE(boom::OpenGLSizei length, void* pointer) const;
    void flushVertexArrayRangeNV() const;
    void fogCoordd(boom::OpenGLDouble coord) const;
    void fogCoorddEXT(boom::OpenGLDouble coord) const;
    void fogCoorddv(boom::OpenGLDouble const* coord) const;
    void fogCoorddvEXT(boom::OpenGLDouble const* coord) const;
    void fogCoordf(boom::OpenGLFloat coord) const;
    void fogCoordfEXT(boom::OpenGLFloat coord) const;
    void fogCoordFormatNV(boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void fogCoordfv(boom::OpenGLFloat const* coord) const;
    void fogCoordfvEXT(boom::OpenGLFloat const* coord) const;
    void fogCoordhNV(boom::OpenGLHalfNV fog) const;
    void fogCoordhvNV(boom::OpenGLHalfNV const* fog) const;
    void fogCoordPointer(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void fogCoordPointerEXT(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void fogCoordPointerListIBM(boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void fogf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void fogFuncSGIS(boom::OpenGLSizei n, boom::OpenGLFloat const* points) const;
    void fogfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void fogi(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void fogiv(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void fogx(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void fogxOES(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void fogxv(boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void fogxvOES(boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void fragmentColorMaterialSGIX(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void fragmentCoverageColorNV(boom::OpenGLUint color) const;
    void fragmentLightfSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void fragmentLightfvSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void fragmentLightiSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void fragmentLightivSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void fragmentLightModelfSGIX(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void fragmentLightModelfvSGIX(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void fragmentLightModeliSGIX(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void fragmentLightModelivSGIX(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void fragmentMaterialfSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void fragmentMaterialfvSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void fragmentMaterialiSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void fragmentMaterialivSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void framebufferDrawBufferEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum mode) const;
    void framebufferDrawBuffersEXT(boom::OpenGLUint framebuffer, boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void framebufferFetchBarrierEXT() const;
    void framebufferFetchBarrierQCOM() const;
    void framebufferFoveationConfigQCOM(boom::OpenGLUint framebuffer, boom::OpenGLUint numLayers, boom::OpenGLUint focalPointsPerLayer, boom::OpenGLUint requestedFeatures, boom::OpenGLUint* providedFeatures) const;
    void framebufferFoveationParametersQCOM(boom::OpenGLUint framebuffer, boom::OpenGLUint layer, boom::OpenGLUint focalPoint, boom::OpenGLFloat focalX, boom::OpenGLFloat focalY, boom::OpenGLFloat gainX, boom::OpenGLFloat gainY, boom::OpenGLFloat foveaArea) const;
    void framebufferParameteri(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void framebufferParameteriMESA(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void framebufferPixelLocalStorageSizeEXT(boom::OpenGLUint target, boom::OpenGLSizei size) const;
    void framebufferReadBufferEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum mode) const;
    void framebufferRenderbuffer(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUint renderbuffer) const;
    void framebufferRenderbufferEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUint renderbuffer) const;
    void framebufferRenderbufferOES(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUint renderbuffer) const;
    void framebufferSampleLocationsfvARB(boom::OpenGLEnum target, boom::OpenGLUint start, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void framebufferSampleLocationsfvNV(boom::OpenGLEnum target, boom::OpenGLUint start, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void framebufferSamplePositionsfvAMD(boom::OpenGLEnum target, boom::OpenGLUint numsamples, boom::OpenGLUint pixelindex, boom::OpenGLFloat const* values) const;
    void framebufferShadingRateEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt baseLayer, boom::OpenGLSizei numLayers, boom::OpenGLSizei texelWidth, boom::OpenGLSizei texelHeight) const;
    void framebufferTexture(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void framebufferTexture1D(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void framebufferTexture1DEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void framebufferTexture2D(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void framebufferTexture2DDownsampleIMG(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xscale, boom::OpenGLInt yscale) const;
    void framebufferTexture2DEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void framebufferTexture2DMultisampleEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLSizei samples) const;
    void framebufferTexture2DMultisampleIMG(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLSizei samples) const;
    void framebufferTexture2DOES(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void framebufferTexture3D(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt zoffset) const;
    void framebufferTexture3DEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt zoffset) const;
    void framebufferTexture3DOES(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt zoffset) const;
    void framebufferTextureARB(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void framebufferTextureEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void framebufferTextureFaceARB(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum face) const;
    void framebufferTextureFaceEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum face) const;
    void framebufferTextureLayer(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void framebufferTextureLayerARB(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void framebufferTextureLayerDownsampleIMG(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt layer, boom::OpenGLInt xscale, boom::OpenGLInt yscale) const;
    void framebufferTextureLayerEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void framebufferTextureMultisampleMultiviewOVR(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLSizei samples, boom::OpenGLInt baseViewIndex, boom::OpenGLSizei numViews) const;
    void framebufferTextureMultiviewOVR(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt baseViewIndex, boom::OpenGLSizei numViews) const;
    void framebufferTextureOES(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void frameTerminatorGREMEDY() const;
    void frameZoomSGIX(boom::OpenGLInt factor) const;
    void freeObjectBufferATI(boom::OpenGLUint buffer) const;
    void frontFace(boom::OpenGLEnum mode) const;
    void frustum(boom::OpenGLDouble left, boom::OpenGLDouble right, boom::OpenGLDouble bottom, boom::OpenGLDouble top, boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void frustumf(boom::OpenGLFloat l, boom::OpenGLFloat r, boom::OpenGLFloat b, boom::OpenGLFloat t, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void frustumfOES(boom::OpenGLFloat l, boom::OpenGLFloat r, boom::OpenGLFloat b, boom::OpenGLFloat t, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void frustumx(boom::OpenGLFixed l, boom::OpenGLFixed r, boom::OpenGLFixed b, boom::OpenGLFixed t, boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void frustumxOES(boom::OpenGLFixed l, boom::OpenGLFixed r, boom::OpenGLFixed b, boom::OpenGLFixed t, boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    boom::OpenGLUint genAsyncMarkersSGIX(boom::OpenGLSizei range) const;
    void genBuffers(boom::OpenGLSizei n, boom::OpenGLUint* buffers) const;
    void genBuffersARB(boom::OpenGLSizei n, boom::OpenGLUint* buffers) const;
    void generateMipmap(boom::OpenGLEnum target) const;
    void generateMipmapEXT(boom::OpenGLEnum target) const;
    void generateMipmapOES(boom::OpenGLEnum target) const;
    void generateMultiTexMipmapEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target) const;
    void generateTextureMipmap(boom::OpenGLUint texture) const;
    void generateTextureMipmapEXT(boom::OpenGLUint texture, boom::OpenGLEnum target) const;
    void genFencesAPPLE(boom::OpenGLSizei n, boom::OpenGLUint* fences) const;
    void genFencesNV(boom::OpenGLSizei n, boom::OpenGLUint* fences) const;
    boom::OpenGLUint genFragmentShadersATI(boom::OpenGLUint range) const;
    void genFramebuffers(boom::OpenGLSizei n, boom::OpenGLUint* framebuffers) const;
    void genFramebuffersEXT(boom::OpenGLSizei n, boom::OpenGLUint* framebuffers) const;
    void genFramebuffersOES(boom::OpenGLSizei n, boom::OpenGLUint* framebuffers) const;
    boom::OpenGLUint genLists(boom::OpenGLSizei range) const;
    void genNamesAMD(boom::OpenGLEnum identifier, boom::OpenGLUint num, boom::OpenGLUint* names) const;
    void genOcclusionQueriesNV(boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    boom::OpenGLUint genPathsNV(boom::OpenGLSizei range) const;
    void genPerfMonitorsAMD(boom::OpenGLSizei n, boom::OpenGLUint* monitors) const;
    void genProgramPipelines(boom::OpenGLSizei n, boom::OpenGLUint* pipelines) const;
    void genProgramPipelinesEXT(boom::OpenGLSizei n, boom::OpenGLUint* pipelines) const;
    void genProgramsARB(boom::OpenGLSizei n, boom::OpenGLUint* programs) const;
    void genProgramsNV(boom::OpenGLSizei n, boom::OpenGLUint* programs) const;
    void genQueries(boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    void genQueriesARB(boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    void genQueriesEXT(boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    void genQueryResourceTagNV(boom::OpenGLSizei n, boom::OpenGLInt* tagIds) const;
    void genRenderbuffers(boom::OpenGLSizei n, boom::OpenGLUint* renderbuffers) const;
    void genRenderbuffersEXT(boom::OpenGLSizei n, boom::OpenGLUint* renderbuffers) const;
    void genRenderbuffersOES(boom::OpenGLSizei n, boom::OpenGLUint* renderbuffers) const;
    void genSamplers(boom::OpenGLSizei count, boom::OpenGLUint* samplers) const;
    void genSemaphoresEXT(boom::OpenGLSizei n, boom::OpenGLUint* semaphores) const;
    boom::OpenGLUint genSymbolsEXT(boom::OpenGLEnum datatype, boom::OpenGLEnum storagetype, boom::OpenGLEnum range, boom::OpenGLUint components) const;
    void genTextures(boom::OpenGLSizei n, boom::OpenGLUint* textures) const;
    void genTexturesEXT(boom::OpenGLSizei n, boom::OpenGLUint* textures) const;
    void genTransformFeedbacks(boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    void genTransformFeedbacksNV(boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    void genVertexArrays(boom::OpenGLSizei n, boom::OpenGLUint* arrays) const;
    void genVertexArraysAPPLE(boom::OpenGLSizei n, boom::OpenGLUint* arrays) const;
    void genVertexArraysOES(boom::OpenGLSizei n, boom::OpenGLUint* arrays) const;
    boom::OpenGLUint genVertexShadersEXT(boom::OpenGLUint range) const;
    void getActiveAtomicCounterBufferiv(boom::OpenGLUint program, boom::OpenGLUint bufferIndex, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getActiveAttrib(boom::OpenGLUint program, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLInt* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getActiveAttribARB(boom::OpenGLHandleARB programObj, boom::OpenGLUint index, boom::OpenGLSizei maxLength, boom::OpenGLSizei* length, boom::OpenGLInt* size, boom::OpenGLEnum* type, boom::OpenGLCharARB* name) const;
    void getActiveSubroutineName(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* name) const;
    void getActiveSubroutineUniformiv(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* values) const;
    void getActiveSubroutineUniformName(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* name) const;
    void getActiveUniform(boom::OpenGLUint program, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLInt* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getActiveUniformARB(boom::OpenGLHandleARB programObj, boom::OpenGLUint index, boom::OpenGLSizei maxLength, boom::OpenGLSizei* length, boom::OpenGLInt* size, boom::OpenGLEnum* type, boom::OpenGLCharARB* name) const;
    void getActiveUniformBlockiv(boom::OpenGLUint program, boom::OpenGLUint uniformBlockIndex, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getActiveUniformBlockName(boom::OpenGLUint program, boom::OpenGLUint uniformBlockIndex, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* uniformBlockName) const;
    void getActiveUniformName(boom::OpenGLUint program, boom::OpenGLUint uniformIndex, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* uniformName) const;
    void getActiveUniformsiv(boom::OpenGLUint program, boom::OpenGLSizei uniformCount, boom::OpenGLUint const* uniformIndices, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getActiveVaryingNV(boom::OpenGLUint program, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLSizei* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getArrayObjectfvATI(boom::OpenGLEnum array, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getArrayObjectivATI(boom::OpenGLEnum array, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getAttachedObjectsARB(boom::OpenGLHandleARB containerObj, boom::OpenGLSizei maxCount, boom::OpenGLSizei* count, boom::OpenGLHandleARB* obj) const;
    void getAttachedShaders(boom::OpenGLUint program, boom::OpenGLSizei maxCount, boom::OpenGLSizei* count, boom::OpenGLUint* shaders) const;
    boom::OpenGLInt getAttribLocation(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getAttribLocationARB(boom::OpenGLHandleARB programObj, boom::OpenGLCharARB const* name) const;
    void getBooleanIndexedvEXT(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLBoolean* data) const;
    void getBooleani_v(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLBoolean* data) const;
    void getBooleanv(boom::OpenGLEnum pname, boom::OpenGLBoolean* data) const;
    void getBufferParameteri64v(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getBufferParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getBufferParameterivARB(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getBufferParameterui64vNV(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUInt64EXT* params) const;
    void getBufferPointerv(boom::OpenGLEnum target, boom::OpenGLEnum pname, void** params) const;
    void getBufferPointervARB(boom::OpenGLEnum target, boom::OpenGLEnum pname, void** params) const;
    void getBufferPointervOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, void** params) const;
    void getBufferSubData(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void* data) const;
    void getBufferSubDataARB(boom::OpenGLEnum target, boom::OpenGLIntptrARB offset, boom::OpenGLSizeiptrARB size, void* data) const;
    void getClipPlane(boom::OpenGLEnum plane, boom::OpenGLDouble* equation) const;
    void getClipPlanef(boom::OpenGLEnum plane, boom::OpenGLFloat* equation) const;
    void getClipPlanefOES(boom::OpenGLEnum plane, boom::OpenGLFloat* equation) const;
    void getClipPlanex(boom::OpenGLEnum plane, boom::OpenGLFixed* equation) const;
    void getClipPlanexOES(boom::OpenGLEnum plane, boom::OpenGLFixed* equation) const;
    void getColorTable(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* table) const;
    void getColorTableEXT(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* data) const;
    void getColorTableParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getColorTableParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getColorTableParameterfvSGI(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getColorTableParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getColorTableParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getColorTableParameterivSGI(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getColorTableSGI(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* table) const;
    void getCombinerInputParameterfvNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum variable, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getCombinerInputParameterivNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum variable, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getCombinerOutputParameterfvNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getCombinerOutputParameterivNV(boom::OpenGLEnum stage, boom::OpenGLEnum portion, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getCombinerStageParameterfvNV(boom::OpenGLEnum stage, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    boom::OpenGLUint getCommandHeaderNV(boom::OpenGLEnum tokenID, boom::OpenGLUint size) const;
    void getCompressedMultiTexImageEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt lod, void* img) const;
    void getCompressedTexImage(boom::OpenGLEnum target, boom::OpenGLInt level, void* img) const;
    void getCompressedTexImageARB(boom::OpenGLEnum target, boom::OpenGLInt level, void* img) const;
    void getCompressedTextureImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLSizei bufSize, void* pixels) const;
    void getCompressedTextureImageEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt lod, void* img) const;
    void getCompressedTextureSubImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLSizei bufSize, void* pixels) const;
    void getConvolutionFilter(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* image) const;
    void getConvolutionFilterEXT(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* image) const;
    void getConvolutionParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getConvolutionParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getConvolutionParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getConvolutionParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getConvolutionParameterxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getCoverageModulationTableNV(boom::OpenGLSizei bufSize, boom::OpenGLFloat* v) const;
    boom::OpenGLUint getDebugMessageLog(boom::OpenGLUint count, boom::OpenGLSizei bufSize, boom::OpenGLEnum* sources, boom::OpenGLEnum* types, boom::OpenGLUint* ids, boom::OpenGLEnum* severities, boom::OpenGLSizei* lengths, boom::OpenGLChar* messageLog) const;
    boom::OpenGLUint getDebugMessageLogAMD(boom::OpenGLUint count, boom::OpenGLSizei bufSize, boom::OpenGLEnum* categories, boom::OpenGLEnum* severities, boom::OpenGLUint* ids, boom::OpenGLSizei* lengths, boom::OpenGLChar* message) const;
    boom::OpenGLUint getDebugMessageLogARB(boom::OpenGLUint count, boom::OpenGLSizei bufSize, boom::OpenGLEnum* sources, boom::OpenGLEnum* types, boom::OpenGLUint* ids, boom::OpenGLEnum* severities, boom::OpenGLSizei* lengths, boom::OpenGLChar* messageLog) const;
    boom::OpenGLUint getDebugMessageLogKHR(boom::OpenGLUint count, boom::OpenGLSizei bufSize, boom::OpenGLEnum* sources, boom::OpenGLEnum* types, boom::OpenGLUint* ids, boom::OpenGLEnum* severities, boom::OpenGLSizei* lengths, boom::OpenGLChar* messageLog) const;
    void getDetailTexFuncSGIS(boom::OpenGLEnum target, boom::OpenGLFloat* points) const;
    void getDoubleIndexedvEXT(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble* data) const;
    void getDoublei_v(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble* data) const;
    void getDoublei_vEXT(boom::OpenGLEnum pname, boom::OpenGLUint index, boom::OpenGLDouble* params) const;
    void getDoublev(boom::OpenGLEnum pname, boom::OpenGLDouble* data) const;
    void getDriverControlsQCOM(boom::OpenGLInt* num, boom::OpenGLSizei size, boom::OpenGLUint* driverControls) const;
    void getDriverControlStringQCOM(boom::OpenGLUint driverControl, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* driverControlString) const;
    boom::OpenGLEnum getError() const;
    void getFenceivNV(boom::OpenGLUint fence, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFinalCombinerInputParameterfvNV(boom::OpenGLEnum variable, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getFinalCombinerInputParameterivNV(boom::OpenGLEnum variable, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFirstPerfQueryIdINTEL(boom::OpenGLUint* queryId) const;
    void getFixedv(boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getFixedvOES(boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getFloatIndexedvEXT(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat* data) const;
    void getFloati_v(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat* data) const;
    void getFloati_vEXT(boom::OpenGLEnum pname, boom::OpenGLUint index, boom::OpenGLFloat* params) const;
    void getFloati_vNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat* data) const;
    void getFloati_vOES(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat* data) const;
    void getFloatv(boom::OpenGLEnum pname, boom::OpenGLFloat* data) const;
    void getFogFuncSGIS(boom::OpenGLFloat* points) const;
    boom::OpenGLInt getFragDataIndex(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getFragDataIndexEXT(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getFragDataLocation(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getFragDataLocationEXT(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    void getFragmentLightfvSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getFragmentLightivSGIX(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFragmentMaterialfvSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getFragmentMaterialivSGIX(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFragmentShadingRatesEXT(boom::OpenGLSizei samples, boom::OpenGLSizei maxCount, boom::OpenGLSizei* count, boom::OpenGLEnum* shadingRates) const;
    void getFramebufferAttachmentParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFramebufferAttachmentParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFramebufferAttachmentParameterivOES(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFramebufferParameterfvAMD(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint numsamples, boom::OpenGLUint pixelindex, boom::OpenGLSizei size, boom::OpenGLFloat* values) const;
    void getFramebufferParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFramebufferParameterivEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFramebufferParameterivMESA(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    boom::OpenGLSizei getFramebufferPixelLocalStorageSizeEXT(boom::OpenGLUint target) const;
    boom::OpenGLEnum getGraphicsResetStatus() const;
    boom::OpenGLEnum getGraphicsResetStatusARB() const;
    boom::OpenGLEnum getGraphicsResetStatusEXT() const;
    boom::OpenGLEnum getGraphicsResetStatusKHR() const;
    boom::OpenGLHandleARB getHandleARB(boom::OpenGLEnum pname) const;
    void getHistogram(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, void* values) const;
    void getHistogramEXT(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, void* values) const;
    void getHistogramParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getHistogramParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getHistogramParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getHistogramParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getHistogramParameterxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    boom::OpenGLUInt64 getImageHandleARB(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLBoolean layered, boom::OpenGLInt layer, boom::OpenGLEnum format) const;
    boom::OpenGLUInt64 getImageHandleNV(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLBoolean layered, boom::OpenGLInt layer, boom::OpenGLEnum format) const;
    void getImageTransformParameterfvHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getImageTransformParameterivHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getInfoLogARB(boom::OpenGLHandleARB obj, boom::OpenGLSizei maxLength, boom::OpenGLSizei* length, boom::OpenGLCharARB* infoLog) const;
    boom::OpenGLInt getInstrumentsSGIX() const;
    void getInteger64i_v(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt64* data) const;
    void getInteger64v(boom::OpenGLEnum pname, boom::OpenGLInt64* data) const;
    void getInteger64vAPPLE(boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getInteger64vEXT(boom::OpenGLEnum pname, boom::OpenGLInt64* data) const;
    void getIntegerIndexedvEXT(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt* data) const;
    void getIntegeri_v(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt* data) const;
    void getIntegeri_vEXT(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt* data) const;
    void getIntegerui64i_vNV(boom::OpenGLEnum value, boom::OpenGLUint index, boom::OpenGLUInt64EXT* result) const;
    void getIntegerui64vNV(boom::OpenGLEnum value, boom::OpenGLUInt64EXT* result) const;
    void getIntegerv(boom::OpenGLEnum pname, boom::OpenGLInt* data) const;
    void getInternalformati64v(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLInt64* params) const;
    void getInternalformativ(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLInt* params) const;
    void getInternalformatSampleivNV(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei samples, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLInt* params) const;
    void getInvariantBooleanvEXT(boom::OpenGLUint id, boom::OpenGLEnum value, boom::OpenGLBoolean* data) const;
    void getInvariantFloatvEXT(boom::OpenGLUint id, boom::OpenGLEnum value, boom::OpenGLFloat* data) const;
    void getInvariantIntegervEXT(boom::OpenGLUint id, boom::OpenGLEnum value, boom::OpenGLInt* data) const;
    void getLightfv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getLightiv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getLightxOES(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getLightxv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getLightxvOES(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getListParameterfvSGIX(boom::OpenGLUint list, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getListParameterivSGIX(boom::OpenGLUint list, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getLocalConstantBooleanvEXT(boom::OpenGLUint id, boom::OpenGLEnum value, boom::OpenGLBoolean* data) const;
    void getLocalConstantFloatvEXT(boom::OpenGLUint id, boom::OpenGLEnum value, boom::OpenGLFloat* data) const;
    void getLocalConstantIntegervEXT(boom::OpenGLUint id, boom::OpenGLEnum value, boom::OpenGLInt* data) const;
    void getMapAttribParameterfvNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMapAttribParameterivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMapControlPointsNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLSizei ustride, boom::OpenGLSizei vstride, boom::OpenGLBoolean packed, void* points) const;
    void getMapdv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLDouble* v) const;
    void getMapfv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLFloat* v) const;
    void getMapiv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLInt* v) const;
    void getMapParameterfvNV(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMapParameterivNV(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMapxvOES(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLFixed* v) const;
    void getMaterialfv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMaterialiv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMaterialxOES(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void getMaterialxv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getMaterialxvOES(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getMemoryObjectDetachedResourcesuivNV(boom::OpenGLUint memory, boom::OpenGLEnum pname, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLUint* params) const;
    void getMemoryObjectParameterivEXT(boom::OpenGLUint memoryObject, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMinmax(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, void* values) const;
    void getMinmaxEXT(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, void* values) const;
    void getMinmaxParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMinmaxParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMinmaxParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMinmaxParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMultisamplefv(boom::OpenGLEnum pname, boom::OpenGLUint index, boom::OpenGLFloat* val) const;
    void getMultisamplefvNV(boom::OpenGLEnum pname, boom::OpenGLUint index, boom::OpenGLFloat* val) const;
    void getMultiTexEnvfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMultiTexEnvivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMultiTexGendvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getMultiTexGenfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMultiTexGenivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMultiTexImageEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void* pixels) const;
    void getMultiTexLevelParameterfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMultiTexLevelParameterivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMultiTexParameterfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMultiTexParameterIivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMultiTexParameterIuivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getMultiTexParameterivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedBufferParameteri64v(boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getNamedBufferParameteriv(boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedBufferParameterivEXT(boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedBufferParameterui64vNV(boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLUInt64EXT* params) const;
    void getNamedBufferPointerv(boom::OpenGLUint buffer, boom::OpenGLEnum pname, void** params) const;
    void getNamedBufferPointervEXT(boom::OpenGLUint buffer, boom::OpenGLEnum pname, void** params) const;
    void getNamedBufferSubData(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void* data) const;
    void getNamedBufferSubDataEXT(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void* data) const;
    void getNamedFramebufferAttachmentParameteriv(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedFramebufferAttachmentParameterivEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedFramebufferParameterfvAMD(boom::OpenGLUint framebuffer, boom::OpenGLEnum pname, boom::OpenGLUint numsamples, boom::OpenGLUint pixelindex, boom::OpenGLSizei size, boom::OpenGLFloat* values) const;
    void getNamedFramebufferParameteriv(boom::OpenGLUint framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getNamedFramebufferParameterivEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedProgramivEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedProgramLocalParameterdvEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble* params) const;
    void getNamedProgramLocalParameterfvEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat* params) const;
    void getNamedProgramLocalParameterIivEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt* params) const;
    void getNamedProgramLocalParameterIuivEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint* params) const;
    void getNamedProgramStringEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLEnum pname, void* string) const;
    void getNamedRenderbufferParameteriv(boom::OpenGLUint renderbuffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedRenderbufferParameterivEXT(boom::OpenGLUint renderbuffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedStringARB(boom::OpenGLInt namelen, boom::OpenGLChar const* name, boom::OpenGLSizei bufSize, boom::OpenGLInt* stringlen, boom::OpenGLChar* string) const;
    void getNamedStringivARB(boom::OpenGLInt namelen, boom::OpenGLChar const* name, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getnColorTable(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* table) const;
    void getnColorTableARB(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* table) const;
    void getnCompressedTexImage(boom::OpenGLEnum target, boom::OpenGLInt lod, boom::OpenGLSizei bufSize, void* pixels) const;
    void getnCompressedTexImageARB(boom::OpenGLEnum target, boom::OpenGLInt lod, boom::OpenGLSizei bufSize, void* img) const;
    void getnConvolutionFilter(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* image) const;
    void getnConvolutionFilterARB(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* image) const;
    void getNextPerfQueryIdINTEL(boom::OpenGLUint queryId, boom::OpenGLUint* nextQueryId) const;
    void getnHistogram(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* values) const;
    void getnHistogramARB(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* values) const;
    void getnMapdv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLDouble* v) const;
    void getnMapdvARB(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLDouble* v) const;
    void getnMapfv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLFloat* v) const;
    void getnMapfvARB(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLFloat* v) const;
    void getnMapiv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLInt* v) const;
    void getnMapivARB(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLInt* v) const;
    void getnMinmax(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* values) const;
    void getnMinmaxARB(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* values) const;
    void getnPixelMapfv(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLFloat* values) const;
    void getnPixelMapfvARB(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLFloat* values) const;
    void getnPixelMapuiv(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLUint* values) const;
    void getnPixelMapuivARB(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLUint* values) const;
    void getnPixelMapusv(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLUShort* values) const;
    void getnPixelMapusvARB(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLUShort* values) const;
    void getnPolygonStipple(boom::OpenGLSizei bufSize, boom::OpenGLUbyte* pattern) const;
    void getnPolygonStippleARB(boom::OpenGLSizei bufSize, boom::OpenGLUbyte* pattern) const;
    void getnSeparableFilter(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei rowBufSize, void* row, boom::OpenGLSizei columnBufSize, void* column, void* span) const;
    void getnSeparableFilterARB(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei rowBufSize, void* row, boom::OpenGLSizei columnBufSize, void* column, void* span) const;
    void getnTexImage(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* pixels) const;
    void getnTexImageARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* img) const;
    void getnUniformdv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLDouble* params) const;
    void getnUniformdvARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLDouble* params) const;
    void getnUniformfv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLFloat* params) const;
    void getnUniformfvARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLFloat* params) const;
    void getnUniformfvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLFloat* params) const;
    void getnUniformfvKHR(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLFloat* params) const;
    void getnUniformi64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLInt64* params) const;
    void getnUniformiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLInt* params) const;
    void getnUniformivARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLInt* params) const;
    void getnUniformivEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLInt* params) const;
    void getnUniformivKHR(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLInt* params) const;
    void getnUniformui64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLUInt64* params) const;
    void getnUniformuiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLUint* params) const;
    void getnUniformuivARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLUint* params) const;
    void getnUniformuivKHR(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLUint* params) const;
    void getObjectBufferfvATI(boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getObjectBufferivATI(boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getObjectLabel(boom::OpenGLEnum identifier, boom::OpenGLUint name, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getObjectLabelEXT(boom::OpenGLEnum type, boom::OpenGLUint object, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getObjectLabelKHR(boom::OpenGLEnum identifier, boom::OpenGLUint name, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getObjectParameterfvARB(boom::OpenGLHandleARB obj, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getObjectParameterivAPPLE(boom::OpenGLEnum objectType, boom::OpenGLUint name, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getObjectParameterivARB(boom::OpenGLHandleARB obj, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getObjectPtrLabel(void const* ptr, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getObjectPtrLabelKHR(void const* ptr, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getOcclusionQueryivNV(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getOcclusionQueryuivNV(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getPathColorGenfvNV(boom::OpenGLEnum color, boom::OpenGLEnum pname, boom::OpenGLFloat* value) const;
    void getPathColorGenivNV(boom::OpenGLEnum color, boom::OpenGLEnum pname, boom::OpenGLInt* value) const;
    void getPathCommandsNV(boom::OpenGLUint path, boom::OpenGLUbyte* commands) const;
    void getPathCoordsNV(boom::OpenGLUint path, boom::OpenGLFloat* coords) const;
    void getPathDashArrayNV(boom::OpenGLUint path, boom::OpenGLFloat* dashArray) const;
    boom::OpenGLFloat getPathLengthNV(boom::OpenGLUint path, boom::OpenGLSizei startSegment, boom::OpenGLSizei numSegments) const;
    void getPathMetricRangeNV(boom::OpenGLBitfield metricQueryMask, boom::OpenGLUint firstPathName, boom::OpenGLSizei numPaths, boom::OpenGLSizei stride, boom::OpenGLFloat* metrics) const;
    void getPathMetricsNV(boom::OpenGLBitfield metricQueryMask, boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUint pathBase, boom::OpenGLSizei stride, boom::OpenGLFloat* metrics) const;
    void getPathParameterfvNV(boom::OpenGLUint path, boom::OpenGLEnum pname, boom::OpenGLFloat* value) const;
    void getPathParameterivNV(boom::OpenGLUint path, boom::OpenGLEnum pname, boom::OpenGLInt* value) const;
    void getPathSpacingNV(boom::OpenGLEnum pathListMode, boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUint pathBase, boom::OpenGLFloat advanceScale, boom::OpenGLFloat kerningScale, boom::OpenGLEnum transformType, boom::OpenGLFloat* returnedSpacing) const;
    void getPathTexGenfvNV(boom::OpenGLEnum texCoordSet, boom::OpenGLEnum pname, boom::OpenGLFloat* value) const;
    void getPathTexGenivNV(boom::OpenGLEnum texCoordSet, boom::OpenGLEnum pname, boom::OpenGLInt* value) const;
    void getPerfCounterInfoINTEL(boom::OpenGLUint queryId, boom::OpenGLUint counterId, boom::OpenGLUint counterNameLength, boom::OpenGLChar* counterName, boom::OpenGLUint counterDescLength, boom::OpenGLChar* counterDesc, boom::OpenGLUint* counterOffset, boom::OpenGLUint* counterDataSize, boom::OpenGLUint* counterTypeEnum, boom::OpenGLUint* counterDataTypeEnum, boom::OpenGLUInt64* rawCounterMaxValue) const;
    void getPerfMonitorCounterDataAMD(boom::OpenGLUint monitor, boom::OpenGLEnum pname, boom::OpenGLSizei dataSize, boom::OpenGLUint* data, boom::OpenGLInt* bytesWritten) const;
    void getPerfMonitorCounterInfoAMD(boom::OpenGLUint group, boom::OpenGLUint counter, boom::OpenGLEnum pname, void* data) const;
    void getPerfMonitorCountersAMD(boom::OpenGLUint group, boom::OpenGLInt* numCounters, boom::OpenGLInt* maxActiveCounters, boom::OpenGLSizei counterSize, boom::OpenGLUint* counters) const;
    void getPerfMonitorCounterStringAMD(boom::OpenGLUint group, boom::OpenGLUint counter, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* counterString) const;
    void getPerfMonitorGroupsAMD(boom::OpenGLInt* numGroups, boom::OpenGLSizei groupsSize, boom::OpenGLUint* groups) const;
    void getPerfMonitorGroupStringAMD(boom::OpenGLUint group, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* groupString) const;
    void getPerfQueryDataINTEL(boom::OpenGLUint queryHandle, boom::OpenGLUint flags, boom::OpenGLSizei dataSize, void* data, boom::OpenGLUint* bytesWritten) const;
    void getPerfQueryIdByNameINTEL(boom::OpenGLChar* queryName, boom::OpenGLUint* queryId) const;
    void getPerfQueryInfoINTEL(boom::OpenGLUint queryId, boom::OpenGLUint queryNameLength, boom::OpenGLChar* queryName, boom::OpenGLUint* dataSize, boom::OpenGLUint* noCounters, boom::OpenGLUint* noInstances, boom::OpenGLUint* capsMask) const;
    void getPixelMapfv(boom::OpenGLEnum map, boom::OpenGLFloat* values) const;
    void getPixelMapuiv(boom::OpenGLEnum map, boom::OpenGLUint* values) const;
    void getPixelMapusv(boom::OpenGLEnum map, boom::OpenGLUShort* values) const;
    void getPixelMapxv(boom::OpenGLEnum map, boom::OpenGLInt size, boom::OpenGLFixed* values) const;
    void getPixelTexGenParameterfvSGIS(boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getPixelTexGenParameterivSGIS(boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getPixelTransformParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getPixelTransformParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getPointerIndexedvEXT(boom::OpenGLEnum target, boom::OpenGLUint index, void** data) const;
    void getPointeri_vEXT(boom::OpenGLEnum pname, boom::OpenGLUint index, void** params) const;
    void getPointerv(boom::OpenGLEnum pname, void** params) const;
    void getPointervEXT(boom::OpenGLEnum pname, void** params) const;
    void getPointervKHR(boom::OpenGLEnum pname, void** params) const;
    void getPolygonStipple(boom::OpenGLUbyte* mask) const;
    void getProgramBinary(boom::OpenGLUint program, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLEnum* binaryFormat, void* binary) const;
    void getProgramBinaryOES(boom::OpenGLUint program, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLEnum* binaryFormat, void* binary) const;
    void getProgramEnvParameterdvARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble* params) const;
    void getProgramEnvParameterfvARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat* params) const;
    void getProgramEnvParameterIivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt* params) const;
    void getProgramEnvParameterIuivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint* params) const;
    void getProgramInfoLog(boom::OpenGLUint program, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* infoLog) const;
    void getProgramInterfaceiv(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramiv(boom::OpenGLUint program, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramivARB(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramivNV(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramLocalParameterdvARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble* params) const;
    void getProgramLocalParameterfvARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat* params) const;
    void getProgramLocalParameterIivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt* params) const;
    void getProgramLocalParameterIuivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint* params) const;
    void getProgramNamedParameterdvNV(boom::OpenGLUint id, boom::OpenGLSizei len, boom::OpenGLUbyte const* name, boom::OpenGLDouble* params) const;
    void getProgramNamedParameterfvNV(boom::OpenGLUint id, boom::OpenGLSizei len, boom::OpenGLUbyte const* name, boom::OpenGLFloat* params) const;
    void getProgramParameterdvNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getProgramParameterfvNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getProgramPipelineInfoLog(boom::OpenGLUint pipeline, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* infoLog) const;
    void getProgramPipelineInfoLogEXT(boom::OpenGLUint pipeline, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* infoLog) const;
    void getProgramPipelineiv(boom::OpenGLUint pipeline, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramPipelineivEXT(boom::OpenGLUint pipeline, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramResourcefvNV(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLUint index, boom::OpenGLSizei propCount, boom::OpenGLEnum const* props, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLFloat* params) const;
    boom::OpenGLUint getProgramResourceIndex(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLChar const* name) const;
    void getProgramResourceiv(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLUint index, boom::OpenGLSizei propCount, boom::OpenGLEnum const* props, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLInt* params) const;
    boom::OpenGLInt getProgramResourceLocation(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getProgramResourceLocationIndex(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getProgramResourceLocationIndexEXT(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLChar const* name) const;
    void getProgramResourceName(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* name) const;
    void getProgramStageiv(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLEnum pname, boom::OpenGLInt* values) const;
    void getProgramStringARB(boom::OpenGLEnum target, boom::OpenGLEnum pname, void* string) const;
    void getProgramStringNV(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUbyte* program) const;
    void getProgramSubroutineParameteruivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint* param) const;
    void getQueryBufferObjecti64v(boom::OpenGLUint id, boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryBufferObjectiv(boom::OpenGLUint id, boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryBufferObjectui64v(boom::OpenGLUint id, boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryBufferObjectuiv(boom::OpenGLUint id, boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryIndexediv(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryivARB(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryObjecti64v(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getQueryObjecti64vEXT(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getQueryObjectiv(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryObjectivARB(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryObjectivEXT(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryObjectui64v(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUInt64* params) const;
    void getQueryObjectui64vEXT(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUInt64* params) const;
    void getQueryObjectuiv(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getQueryObjectuivARB(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getQueryObjectuivEXT(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getRenderbufferParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getRenderbufferParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getRenderbufferParameterivOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSamplerParameterfv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getSamplerParameterIiv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSamplerParameterIivEXT(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSamplerParameterIivOES(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSamplerParameterIuiv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getSamplerParameterIuivEXT(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getSamplerParameterIuivOES(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getSamplerParameteriv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSemaphoreParameterivNV(boom::OpenGLUint semaphore, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSemaphoreParameterui64vEXT(boom::OpenGLUint semaphore, boom::OpenGLEnum pname, boom::OpenGLUInt64* params) const;
    void getSeparableFilter(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* row, void* column, void* span) const;
    void getSeparableFilterEXT(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, void* row, void* column, void* span) const;
    void getShaderInfoLog(boom::OpenGLUint shader, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* infoLog) const;
    void getShaderiv(boom::OpenGLUint shader, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getShaderPrecisionFormat(boom::OpenGLEnum shadertype, boom::OpenGLEnum precisiontype, boom::OpenGLInt* range, boom::OpenGLInt* precision) const;
    void getShaderSource(boom::OpenGLUint shader, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* source) const;
    void getShaderSourceARB(boom::OpenGLHandleARB obj, boom::OpenGLSizei maxLength, boom::OpenGLSizei* length, boom::OpenGLCharARB* source) const;
    void getShadingRateImagePaletteNV(boom::OpenGLUint viewport, boom::OpenGLUint entry, boom::OpenGLEnum* rate) const;
    void getShadingRateSampleLocationivNV(boom::OpenGLEnum rate, boom::OpenGLUint samples, boom::OpenGLUint index, boom::OpenGLInt* location) const;
    void getSharpenTexFuncSGIS(boom::OpenGLEnum target, boom::OpenGLFloat* points) const;
    boom::OpenGLUShort getStageIndexNV(boom::OpenGLEnum shadertype) const;
    boom::OpenGLUbyte  const* getString(boom::OpenGLEnum name) const;
    boom::OpenGLUbyte  const* getStringi(boom::OpenGLEnum name, boom::OpenGLUint index) const;
    boom::OpenGLUint getSubroutineIndex(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getSubroutineUniformLocation(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLChar const* name) const;
    void getSynciv(boom::OpenGLSync sync, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLInt* values) const;
    void getSyncivAPPLE(boom::OpenGLSync sync, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLInt* values) const;
    void getTexBumpParameterfvATI(boom::OpenGLEnum pname, boom::OpenGLFloat* param) const;
    void getTexBumpParameterivATI(boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getTexEnvfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexEnviv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexEnvxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTexEnvxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTexFilterFuncSGIS(boom::OpenGLEnum target, boom::OpenGLEnum filter, boom::OpenGLFloat* weights) const;
    void getTexGendv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getTexGenfv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexGenfvOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexGeniv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexGenivOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexGenxvOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTexImage(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void* pixels) const;
    void getTexLevelParameterfv(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexLevelParameteriv(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexLevelParameterxvOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTexParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexParameterIiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexParameterIivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexParameterIivOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexParameterIuiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getTexParameterIuivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getTexParameterIuivOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getTexParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexParameterPointervAPPLE(boom::OpenGLEnum target, boom::OpenGLEnum pname, void** params) const;
    void getTexParameterxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTexParameterxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    boom::OpenGLUInt64 getTextureHandleARB(boom::OpenGLUint texture) const;
    boom::OpenGLUInt64 getTextureHandleIMG(boom::OpenGLUint texture) const;
    boom::OpenGLUInt64 getTextureHandleNV(boom::OpenGLUint texture) const;
    void getTextureImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* pixels) const;
    void getTextureImageEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void* pixels) const;
    void getTextureLevelParameterfv(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTextureLevelParameterfvEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTextureLevelParameteriv(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureLevelParameterivEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureParameterfv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTextureParameterfvEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTextureParameterIiv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureParameterIivEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureParameterIuiv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getTextureParameterIuivEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getTextureParameteriv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureParameterivEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    boom::OpenGLUInt64 getTextureSamplerHandleARB(boom::OpenGLUint texture, boom::OpenGLUint sampler) const;
    boom::OpenGLUInt64 getTextureSamplerHandleIMG(boom::OpenGLUint texture, boom::OpenGLUint sampler) const;
    boom::OpenGLUInt64 getTextureSamplerHandleNV(boom::OpenGLUint texture, boom::OpenGLUint sampler) const;
    void getTextureSubImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* pixels) const;
    void getTrackMatrixivNV(boom::OpenGLEnum target, boom::OpenGLUint address, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTransformFeedbacki64_v(boom::OpenGLUint xfb, boom::OpenGLEnum pname, boom::OpenGLUint index, boom::OpenGLInt64* param) const;
    void getTransformFeedbackiv(boom::OpenGLUint xfb, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getTransformFeedbacki_v(boom::OpenGLUint xfb, boom::OpenGLEnum pname, boom::OpenGLUint index, boom::OpenGLInt* param) const;
    void getTransformFeedbackVarying(boom::OpenGLUint program, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLSizei* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getTransformFeedbackVaryingEXT(boom::OpenGLUint program, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLSizei* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getTransformFeedbackVaryingNV(boom::OpenGLUint program, boom::OpenGLUint index, boom::OpenGLInt* location) const;
    void getTranslatedShaderSourceANGLE(boom::OpenGLUint shader, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* source) const;
    boom::OpenGLUint getUniformBlockIndex(boom::OpenGLUint program, boom::OpenGLChar const* uniformBlockName) const;
    boom::OpenGLInt getUniformBufferSizeEXT(boom::OpenGLUint program, boom::OpenGLInt location) const;
    void getUniformdv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble* params) const;
    void getUniformfv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat* params) const;
    void getUniformfvARB(boom::OpenGLHandleARB programObj, boom::OpenGLInt location, boom::OpenGLFloat* params) const;
    void getUniformi64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt64* params) const;
    void getUniformi64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt64EXT* params) const;
    void getUniformIndices(boom::OpenGLUint program, boom::OpenGLSizei uniformCount, boom::OpenGLChar const* const* uniformNames, boom::OpenGLUint* uniformIndices) const;
    void getUniformiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt* params) const;
    void getUniformivARB(boom::OpenGLHandleARB programObj, boom::OpenGLInt location, boom::OpenGLInt* params) const;
    boom::OpenGLInt getUniformLocation(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getUniformLocationARB(boom::OpenGLHandleARB programObj, boom::OpenGLCharARB const* name) const;
    boom::OpenGLIntptr getUniformOffsetEXT(boom::OpenGLUint program, boom::OpenGLInt location) const;
    void getUniformSubroutineuiv(boom::OpenGLEnum shadertype, boom::OpenGLInt location, boom::OpenGLUint* params) const;
    void getUniformui64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64* params) const;
    void getUniformui64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64EXT* params) const;
    void getUniformuiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint* params) const;
    void getUniformuivEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint* params) const;
    void getUnsignedBytei_vEXT(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUbyte* data) const;
    void getUnsignedBytevEXT(boom::OpenGLEnum pname, boom::OpenGLUbyte* data) const;
    void getVariantArrayObjectfvATI(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVariantArrayObjectivATI(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVariantBooleanvEXT(boom::OpenGLUint id, boom::OpenGLEnum value, boom::OpenGLBoolean* data) const;
    void getVariantFloatvEXT(boom::OpenGLUint id, boom::OpenGLEnum value, boom::OpenGLFloat* data) const;
    void getVariantIntegervEXT(boom::OpenGLUint id, boom::OpenGLEnum value, boom::OpenGLInt* data) const;
    void getVariantPointervEXT(boom::OpenGLUint id, boom::OpenGLEnum value, void** data) const;
    boom::OpenGLInt getVaryingLocationNV(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    void getVertexArrayIndexed64iv(boom::OpenGLUint vaobj, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt64* param) const;
    void getVertexArrayIndexediv(boom::OpenGLUint vaobj, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getVertexArrayIntegeri_vEXT(boom::OpenGLUint vaobj, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getVertexArrayIntegervEXT(boom::OpenGLUint vaobj, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getVertexArrayiv(boom::OpenGLUint vaobj, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getVertexArrayPointeri_vEXT(boom::OpenGLUint vaobj, boom::OpenGLUint index, boom::OpenGLEnum pname, void** param) const;
    void getVertexArrayPointervEXT(boom::OpenGLUint vaobj, boom::OpenGLEnum pname, void** param) const;
    void getVertexAttribArrayObjectfvATI(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVertexAttribArrayObjectivATI(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribdv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribdvARB(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribdvNV(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribfv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVertexAttribfvARB(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVertexAttribfvNV(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVertexAttribIiv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribIivEXT(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribIuiv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getVertexAttribIuivEXT(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getVertexAttribiv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribivARB(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribivNV(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribLdv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribLdvEXT(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribLi64vNV(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt64EXT* params) const;
    void getVertexAttribLui64vARB(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLUInt64EXT* params) const;
    void getVertexAttribLui64vNV(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLUInt64EXT* params) const;
    void getVertexAttribPointerv(boom::OpenGLUint index, boom::OpenGLEnum pname, void** pointer) const;
    void getVertexAttribPointervARB(boom::OpenGLUint index, boom::OpenGLEnum pname, void** pointer) const;
    void getVertexAttribPointervNV(boom::OpenGLUint index, boom::OpenGLEnum pname, void** pointer) const;
    void getVideoCaptureivNV(boom::OpenGLUint video_capture_slot, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVideoCaptureStreamdvNV(boom::OpenGLUint video_capture_slot, boom::OpenGLUint stream, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVideoCaptureStreamfvNV(boom::OpenGLUint video_capture_slot, boom::OpenGLUint stream, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVideoCaptureStreamivNV(boom::OpenGLUint video_capture_slot, boom::OpenGLUint stream, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVideoi64vNV(boom::OpenGLUint video_slot, boom::OpenGLEnum pname, boom::OpenGLInt64EXT* params) const;
    void getVideoivNV(boom::OpenGLUint video_slot, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVideoui64vNV(boom::OpenGLUint video_slot, boom::OpenGLEnum pname, boom::OpenGLUInt64EXT* params) const;
    void getVideouivNV(boom::OpenGLUint video_slot, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    boom::OpenGLVulkanProcNV getVkProcAddrNV(boom::OpenGLChar const* name) const;
    void globalAlphaFactorbSUN(boom::OpenGLByte factor) const;
    void globalAlphaFactordSUN(boom::OpenGLDouble factor) const;
    void globalAlphaFactorfSUN(boom::OpenGLFloat factor) const;
    void globalAlphaFactoriSUN(boom::OpenGLInt factor) const;
    void globalAlphaFactorsSUN(boom::OpenGLShort factor) const;
    void globalAlphaFactorubSUN(boom::OpenGLUbyte factor) const;
    void globalAlphaFactoruiSUN(boom::OpenGLUint factor) const;
    void globalAlphaFactorusSUN(boom::OpenGLUShort factor) const;
    void hint(boom::OpenGLEnum target, boom::OpenGLEnum mode) const;
    void hintPGI(boom::OpenGLEnum target, boom::OpenGLInt mode) const;
    void histogram(boom::OpenGLEnum target, boom::OpenGLSizei width, boom::OpenGLEnum internalformat, boom::OpenGLBoolean sink) const;
    void histogramEXT(boom::OpenGLEnum target, boom::OpenGLSizei width, boom::OpenGLEnum internalformat, boom::OpenGLBoolean sink) const;
    void iglooInterfaceSGIX(boom::OpenGLEnum pname, void const* params) const;
    void imageTransformParameterfHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void imageTransformParameterfvHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void imageTransformParameteriHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void imageTransformParameterivHP(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void importMemoryFdEXT(boom::OpenGLUint memory, boom::OpenGLUInt64 size, boom::OpenGLEnum handleType, boom::OpenGLInt fd) const;
    void importMemoryWin32HandleEXT(boom::OpenGLUint memory, boom::OpenGLUInt64 size, boom::OpenGLEnum handleType, void* handle) const;
    void importMemoryWin32NameEXT(boom::OpenGLUint memory, boom::OpenGLUInt64 size, boom::OpenGLEnum handleType, void const* name) const;
    void importSemaphoreFdEXT(boom::OpenGLUint semaphore, boom::OpenGLEnum handleType, boom::OpenGLInt fd) const;
    void importSemaphoreWin32HandleEXT(boom::OpenGLUint semaphore, boom::OpenGLEnum handleType, void* handle) const;
    void importSemaphoreWin32NameEXT(boom::OpenGLUint semaphore, boom::OpenGLEnum handleType, void const* name) const;
    boom::OpenGLSync importSyncEXT(boom::OpenGLEnum external_sync_type, boom::OpenGLIntptr external_sync, boom::OpenGLBitfield flags) const;
    void indexd(boom::OpenGLDouble c) const;
    void indexdv(boom::OpenGLDouble const* c) const;
    void indexf(boom::OpenGLFloat c) const;
    void indexFormatNV(boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void indexFuncEXT(boom::OpenGLEnum func, boom::OpenGLClampf ref) const;
    void indexfv(boom::OpenGLFloat const* c) const;
    void indexi(boom::OpenGLInt c) const;
    void indexiv(boom::OpenGLInt const* c) const;
    void indexMask(boom::OpenGLUint mask) const;
    void indexMaterialEXT(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void indexPointer(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void indexPointerEXT(boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLSizei count, void const* pointer) const;
    void indexPointerListIBM(boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void indexs(boom::OpenGLShort c) const;
    void indexsv(boom::OpenGLShort const* c) const;
    void indexub(boom::OpenGLUbyte c) const;
    void indexubv(boom::OpenGLUbyte const* c) const;
    void indexxOES(boom::OpenGLFixed component) const;
    void indexxvOES(boom::OpenGLFixed const* component) const;
    void initNames() const;
    void insertComponentEXT(boom::OpenGLUint res, boom::OpenGLUint src, boom::OpenGLUint num) const;
    void insertEventMarkerEXT(boom::OpenGLSizei length, boom::OpenGLChar const* marker) const;
    void instrumentsBufferSGIX(boom::OpenGLSizei size, boom::OpenGLInt* buffer) const;
    void interleavedArrays(boom::OpenGLEnum format, boom::OpenGLSizei stride, void const* pointer) const;
    void interpolatePathsNV(boom::OpenGLUint resultPath, boom::OpenGLUint pathA, boom::OpenGLUint pathB, boom::OpenGLFloat weight) const;
    void invalidateBufferData(boom::OpenGLUint buffer) const;
    void invalidateBufferSubData(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void invalidateFramebuffer(boom::OpenGLEnum target, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments) const;
    void invalidateNamedFramebufferData(boom::OpenGLUint framebuffer, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments) const;
    void invalidateNamedFramebufferSubData(boom::OpenGLUint framebuffer, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void invalidateSubFramebuffer(boom::OpenGLEnum target, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void invalidateTexImage(boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void invalidateTexSubImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    boom::OpenGLBoolean isAsyncMarkerSGIX(boom::OpenGLUint marker) const;
    boom::OpenGLBoolean isBuffer(boom::OpenGLUint buffer) const;
    boom::OpenGLBoolean isBufferARB(boom::OpenGLUint buffer) const;
    boom::OpenGLBoolean isBufferResidentNV(boom::OpenGLEnum target) const;
    boom::OpenGLBoolean isCommandListNV(boom::OpenGLUint list) const;
    boom::OpenGLBoolean isEnabled(boom::OpenGLEnum cap) const;
    boom::OpenGLBoolean isEnabledi(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    boom::OpenGLBoolean isEnablediEXT(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    boom::OpenGLBoolean isEnabledIndexedEXT(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    boom::OpenGLBoolean isEnablediNV(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    boom::OpenGLBoolean isEnablediOES(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    boom::OpenGLBoolean isFenceAPPLE(boom::OpenGLUint fence) const;
    boom::OpenGLBoolean isFenceNV(boom::OpenGLUint fence) const;
    boom::OpenGLBoolean isFramebuffer(boom::OpenGLUint framebuffer) const;
    boom::OpenGLBoolean isFramebufferEXT(boom::OpenGLUint framebuffer) const;
    boom::OpenGLBoolean isFramebufferOES(boom::OpenGLUint framebuffer) const;
    boom::OpenGLBoolean isImageHandleResidentARB(boom::OpenGLUInt64 handle) const;
    boom::OpenGLBoolean isImageHandleResidentNV(boom::OpenGLUInt64 handle) const;
    boom::OpenGLBoolean isList(boom::OpenGLUint list) const;
    boom::OpenGLBoolean isMemoryObjectEXT(boom::OpenGLUint memoryObject) const;
    boom::OpenGLBoolean isNameAMD(boom::OpenGLEnum identifier, boom::OpenGLUint name) const;
    boom::OpenGLBoolean isNamedBufferResidentNV(boom::OpenGLUint buffer) const;
    boom::OpenGLBoolean isNamedStringARB(boom::OpenGLInt namelen, boom::OpenGLChar const* name) const;
    boom::OpenGLBoolean isObjectBufferATI(boom::OpenGLUint buffer) const;
    boom::OpenGLBoolean isOcclusionQueryNV(boom::OpenGLUint id) const;
    boom::OpenGLBoolean isPathNV(boom::OpenGLUint path) const;
    boom::OpenGLBoolean isPointInFillPathNV(boom::OpenGLUint path, boom::OpenGLUint mask, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    boom::OpenGLBoolean isPointInStrokePathNV(boom::OpenGLUint path, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    boom::OpenGLBoolean isProgram(boom::OpenGLUint program) const;
    boom::OpenGLBoolean isProgramARB(boom::OpenGLUint program) const;
    boom::OpenGLBoolean isProgramNV(boom::OpenGLUint id) const;
    boom::OpenGLBoolean isProgramPipeline(boom::OpenGLUint pipeline) const;
    boom::OpenGLBoolean isProgramPipelineEXT(boom::OpenGLUint pipeline) const;
    boom::OpenGLBoolean isQuery(boom::OpenGLUint id) const;
    boom::OpenGLBoolean isQueryARB(boom::OpenGLUint id) const;
    boom::OpenGLBoolean isQueryEXT(boom::OpenGLUint id) const;
    boom::OpenGLBoolean isRenderbuffer(boom::OpenGLUint renderbuffer) const;
    boom::OpenGLBoolean isRenderbufferEXT(boom::OpenGLUint renderbuffer) const;
    boom::OpenGLBoolean isRenderbufferOES(boom::OpenGLUint renderbuffer) const;
    boom::OpenGLBoolean isSampler(boom::OpenGLUint sampler) const;
    boom::OpenGLBoolean isSemaphoreEXT(boom::OpenGLUint semaphore) const;
    boom::OpenGLBoolean isShader(boom::OpenGLUint shader) const;
    boom::OpenGLBoolean isStateNV(boom::OpenGLUint state) const;
    boom::OpenGLBoolean isSync(boom::OpenGLSync sync) const;
    boom::OpenGLBoolean isSyncAPPLE(boom::OpenGLSync sync) const;
    boom::OpenGLBoolean isTexture(boom::OpenGLUint texture) const;
    boom::OpenGLBoolean isTextureEXT(boom::OpenGLUint texture) const;
    boom::OpenGLBoolean isTextureHandleResidentARB(boom::OpenGLUInt64 handle) const;
    boom::OpenGLBoolean isTextureHandleResidentNV(boom::OpenGLUInt64 handle) const;
    boom::OpenGLBoolean isTransformFeedback(boom::OpenGLUint id) const;
    boom::OpenGLBoolean isTransformFeedbackNV(boom::OpenGLUint id) const;
    boom::OpenGLBoolean isVariantEnabledEXT(boom::OpenGLUint id, boom::OpenGLEnum cap) const;
    boom::OpenGLBoolean isVertexArray(boom::OpenGLUint array) const;
    boom::OpenGLBoolean isVertexArrayAPPLE(boom::OpenGLUint array) const;
    boom::OpenGLBoolean isVertexArrayOES(boom::OpenGLUint array) const;
    boom::OpenGLBoolean isVertexAttribEnabledAPPLE(boom::OpenGLUint index, boom::OpenGLEnum pname) const;
    void labelObjectEXT(boom::OpenGLEnum type, boom::OpenGLUint object, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    void lGPUCopyImageSubDataNVX(boom::OpenGLUint sourceGpu, boom::OpenGLBitfield destinationGpuMask, boom::OpenGLUint srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srxY, boom::OpenGLInt srcZ, boom::OpenGLUint dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void lGPUInterlockNVX() const;
    void lGPUNamedBufferSubDataNVX(boom::OpenGLBitfield gpuMask, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void lightEnviSGIX(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void lightf(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void lightfv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void lighti(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void lightiv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void lightModelf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void lightModelfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void lightModeli(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void lightModeliv(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void lightModelx(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void lightModelxOES(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void lightModelxv(boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void lightModelxvOES(boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void lightx(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void lightxOES(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void lightxv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void lightxvOES(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void lineStipple(boom::OpenGLInt factor, boom::OpenGLUShort pattern) const;
    void lineWidth(boom::OpenGLFloat width) const;
    void lineWidthx(boom::OpenGLFixed width) const;
    void lineWidthxOES(boom::OpenGLFixed width) const;
    void linkProgram(boom::OpenGLUint program) const;
    void linkProgramARB(boom::OpenGLHandleARB programObj) const;
    void listBase(boom::OpenGLUint base) const;
    void listDrawCommandsStatesClientNV(boom::OpenGLUint list, boom::OpenGLUint segment, void const** indirects, boom::OpenGLSizei const* sizes, boom::OpenGLUint const* states, boom::OpenGLUint const* fbos, boom::OpenGLUint count) const;
    void listParameterfSGIX(boom::OpenGLUint list, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void listParameterfvSGIX(boom::OpenGLUint list, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void listParameteriSGIX(boom::OpenGLUint list, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void listParameterivSGIX(boom::OpenGLUint list, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void loadIdentity() const;
    void loadIdentityDeformationMapSGIX(boom::OpenGLBitfield mask) const;
    void loadMatrixd(boom::OpenGLDouble const* m) const;
    void loadMatrixf(boom::OpenGLFloat const* m) const;
    void loadMatrixx(boom::OpenGLFixed const* m) const;
    void loadMatrixxOES(boom::OpenGLFixed const* m) const;
    void loadName(boom::OpenGLUint name) const;
    void loadPaletteFromModelViewMatrixOES() const;
    void loadProgramNV(boom::OpenGLEnum target, boom::OpenGLUint id, boom::OpenGLSizei len, boom::OpenGLUbyte const* program) const;
    void loadTransposeMatrixd(boom::OpenGLDouble const* m) const;
    void loadTransposeMatrixdARB(boom::OpenGLDouble const* m) const;
    void loadTransposeMatrixf(boom::OpenGLFloat const* m) const;
    void loadTransposeMatrixfARB(boom::OpenGLFloat const* m) const;
    void loadTransposeMatrixxOES(boom::OpenGLFixed const* m) const;
    void lockArraysEXT(boom::OpenGLInt first, boom::OpenGLSizei count) const;
    void logicOp(boom::OpenGLEnum opcode) const;
    void makeBufferNonResidentNV(boom::OpenGLEnum target) const;
    void makeBufferResidentNV(boom::OpenGLEnum target, boom::OpenGLEnum access) const;
    void makeImageHandleNonResidentARB(boom::OpenGLUInt64 handle) const;
    void makeImageHandleNonResidentNV(boom::OpenGLUInt64 handle) const;
    void makeImageHandleResidentARB(boom::OpenGLUInt64 handle, boom::OpenGLEnum access) const;
    void makeImageHandleResidentNV(boom::OpenGLUInt64 handle, boom::OpenGLEnum access) const;
    void makeNamedBufferNonResidentNV(boom::OpenGLUint buffer) const;
    void makeNamedBufferResidentNV(boom::OpenGLUint buffer, boom::OpenGLEnum access) const;
    void makeTextureHandleNonResidentARB(boom::OpenGLUInt64 handle) const;
    void makeTextureHandleNonResidentNV(boom::OpenGLUInt64 handle) const;
    void makeTextureHandleResidentARB(boom::OpenGLUInt64 handle) const;
    void makeTextureHandleResidentNV(boom::OpenGLUInt64 handle) const;
    void map1d(boom::OpenGLEnum target, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLDouble const* points) const;
    void map1f(boom::OpenGLEnum target, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLFloat const* points) const;
    void map1xOES(boom::OpenGLEnum target, boom::OpenGLFixed u1, boom::OpenGLFixed u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLFixed points) const;
    void map2d(boom::OpenGLEnum target, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLDouble v1, boom::OpenGLDouble v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLDouble const* points) const;
    void map2f(boom::OpenGLEnum target, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLFloat const* points) const;
    void map2xOES(boom::OpenGLEnum target, boom::OpenGLFixed u1, boom::OpenGLFixed u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLFixed v1, boom::OpenGLFixed v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLFixed points) const;
    void * mapBuffer(boom::OpenGLEnum target, boom::OpenGLEnum access) const;
    void * mapBufferARB(boom::OpenGLEnum target, boom::OpenGLEnum access) const;
    void * mapBufferOES(boom::OpenGLEnum target, boom::OpenGLEnum access) const;
    void * mapBufferRange(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length, boom::OpenGLBitfield access) const;
    void * mapBufferRangeEXT(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length, boom::OpenGLBitfield access) const;
    void mapControlPointsNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLSizei ustride, boom::OpenGLSizei vstride, boom::OpenGLInt uorder, boom::OpenGLInt vorder, boom::OpenGLBoolean packed, void const* points) const;
    void mapGrid1d(boom::OpenGLInt un, boom::OpenGLDouble u1, boom::OpenGLDouble u2) const;
    void mapGrid1f(boom::OpenGLInt un, boom::OpenGLFloat u1, boom::OpenGLFloat u2) const;
    void mapGrid1xOES(boom::OpenGLInt n, boom::OpenGLFixed u1, boom::OpenGLFixed u2) const;
    void mapGrid2d(boom::OpenGLInt un, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt vn, boom::OpenGLDouble v1, boom::OpenGLDouble v2) const;
    void mapGrid2f(boom::OpenGLInt un, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt vn, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void mapGrid2xOES(boom::OpenGLInt n, boom::OpenGLFixed u1, boom::OpenGLFixed u2, boom::OpenGLFixed v1, boom::OpenGLFixed v2) const;
    void * mapNamedBuffer(boom::OpenGLUint buffer, boom::OpenGLEnum access) const;
    void * mapNamedBufferEXT(boom::OpenGLUint buffer, boom::OpenGLEnum access) const;
    void * mapNamedBufferRange(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length, boom::OpenGLBitfield access) const;
    void * mapNamedBufferRangeEXT(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length, boom::OpenGLBitfield access) const;
    void * mapObjectBufferATI(boom::OpenGLUint buffer) const;
    void mapParameterfvNV(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void mapParameterivNV(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void * mapTexture2DINTEL(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLBitfield access, boom::OpenGLInt* stride, boom::OpenGLEnum* layout) const;
    void mapVertexAttrib1dAPPLE(boom::OpenGLUint index, boom::OpenGLUint size, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLDouble const* points) const;
    void mapVertexAttrib1fAPPLE(boom::OpenGLUint index, boom::OpenGLUint size, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLFloat const* points) const;
    void mapVertexAttrib2dAPPLE(boom::OpenGLUint index, boom::OpenGLUint size, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLDouble v1, boom::OpenGLDouble v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLDouble const* points) const;
    void mapVertexAttrib2fAPPLE(boom::OpenGLUint index, boom::OpenGLUint size, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLFloat const* points) const;
    void materialf(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void materialfv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void materiali(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void materialiv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void materialx(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void materialxOES(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void materialxv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void materialxvOES(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void matrixFrustumEXT(boom::OpenGLEnum mode, boom::OpenGLDouble left, boom::OpenGLDouble right, boom::OpenGLDouble bottom, boom::OpenGLDouble top, boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void matrixIndexPointerARB(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void matrixIndexPointerOES(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void matrixIndexubvARB(boom::OpenGLInt size, boom::OpenGLUbyte const* indices) const;
    void matrixIndexuivARB(boom::OpenGLInt size, boom::OpenGLUint const* indices) const;
    void matrixIndexusvARB(boom::OpenGLInt size, boom::OpenGLUShort const* indices) const;
    void matrixLoad3x2fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixLoad3x3fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixLoaddEXT(boom::OpenGLEnum mode, boom::OpenGLDouble const* m) const;
    void matrixLoadfEXT(boom::OpenGLEnum mode, boom::OpenGLFloat const* m) const;
    void matrixLoadIdentityEXT(boom::OpenGLEnum mode) const;
    void matrixLoadTranspose3x3fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixLoadTransposedEXT(boom::OpenGLEnum mode, boom::OpenGLDouble const* m) const;
    void matrixLoadTransposefEXT(boom::OpenGLEnum mode, boom::OpenGLFloat const* m) const;
    void matrixMode(boom::OpenGLEnum mode) const;
    void matrixMult3x2fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixMult3x3fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixMultdEXT(boom::OpenGLEnum mode, boom::OpenGLDouble const* m) const;
    void matrixMultfEXT(boom::OpenGLEnum mode, boom::OpenGLFloat const* m) const;
    void matrixMultTranspose3x3fNV(boom::OpenGLEnum matrixMode, boom::OpenGLFloat const* m) const;
    void matrixMultTransposedEXT(boom::OpenGLEnum mode, boom::OpenGLDouble const* m) const;
    void matrixMultTransposefEXT(boom::OpenGLEnum mode, boom::OpenGLFloat const* m) const;
    void matrixOrthoEXT(boom::OpenGLEnum mode, boom::OpenGLDouble left, boom::OpenGLDouble right, boom::OpenGLDouble bottom, boom::OpenGLDouble top, boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void matrixPopEXT(boom::OpenGLEnum mode) const;
    void matrixPushEXT(boom::OpenGLEnum mode) const;
    void matrixRotatedEXT(boom::OpenGLEnum mode, boom::OpenGLDouble angle, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void matrixRotatefEXT(boom::OpenGLEnum mode, boom::OpenGLFloat angle, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void matrixScaledEXT(boom::OpenGLEnum mode, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void matrixScalefEXT(boom::OpenGLEnum mode, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void matrixTranslatedEXT(boom::OpenGLEnum mode, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void matrixTranslatefEXT(boom::OpenGLEnum mode, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void maxShaderCompilerThreadsARB(boom::OpenGLUint count) const;
    void maxShaderCompilerThreadsKHR(boom::OpenGLUint count) const;
    void memoryBarrier(boom::OpenGLBitfield barriers) const;
    void memoryBarrierByRegion(boom::OpenGLBitfield barriers) const;
    void memoryBarrierEXT(boom::OpenGLBitfield barriers) const;
    void memoryObjectParameterivEXT(boom::OpenGLUint memoryObject, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void minmax(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLBoolean sink) const;
    void minmaxEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLBoolean sink) const;
    void minSampleShading(boom::OpenGLFloat value) const;
    void minSampleShadingARB(boom::OpenGLFloat value) const;
    void minSampleShadingOES(boom::OpenGLFloat value) const;
    void multicastBarrierNV() const;
    void multicastBlitFramebufferNV(boom::OpenGLUint srcGpu, boom::OpenGLUint dstGpu, boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void multicastBufferSubDataNV(boom::OpenGLBitfield gpuMask, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void multicastCopyBufferSubDataNV(boom::OpenGLUint readGpu, boom::OpenGLBitfield writeGpuMask, boom::OpenGLUint readBuffer, boom::OpenGLUint writeBuffer, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void multicastCopyImageSubDataNV(boom::OpenGLUint srcGpu, boom::OpenGLBitfield dstGpuMask, boom::OpenGLUint srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUint dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei srcWidth, boom::OpenGLSizei srcHeight, boom::OpenGLSizei srcDepth) const;
    void multicastFramebufferSampleLocationsfvNV(boom::OpenGLUint gpu, boom::OpenGLUint framebuffer, boom::OpenGLUint start, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void multicastGetQueryObjecti64vNV(boom::OpenGLUint gpu, boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void multicastGetQueryObjectivNV(boom::OpenGLUint gpu, boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void multicastGetQueryObjectui64vNV(boom::OpenGLUint gpu, boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUInt64* params) const;
    void multicastGetQueryObjectuivNV(boom::OpenGLUint gpu, boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void multicastScissorArrayvNVX(boom::OpenGLUint gpu, boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLInt const* v) const;
    void multicastViewportArrayvNVX(boom::OpenGLUint gpu, boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void multicastViewportPositionWScaleNVX(boom::OpenGLUint gpu, boom::OpenGLUint index, boom::OpenGLFloat xcoeff, boom::OpenGLFloat ycoeff) const;
    void multicastWaitSyncNV(boom::OpenGLUint signalGpu, boom::OpenGLBitfield waitGpuMask) const;
    void multiDrawArrays(boom::OpenGLEnum mode, boom::OpenGLInt const* first, boom::OpenGLSizei const* count, boom::OpenGLSizei drawcount) const;
    void multiDrawArraysEXT(boom::OpenGLEnum mode, boom::OpenGLInt const* first, boom::OpenGLSizei const* count, boom::OpenGLSizei primcount) const;
    void multiDrawArraysIndirect(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawArraysIndirectAMD(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLSizei primcount, boom::OpenGLSizei stride) const;
    void multiDrawArraysIndirectBindlessCountNV(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLSizei drawCount, boom::OpenGLSizei maxDrawCount, boom::OpenGLSizei stride, boom::OpenGLInt vertexBufferCount) const;
    void multiDrawArraysIndirectBindlessNV(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLSizei drawCount, boom::OpenGLSizei stride, boom::OpenGLInt vertexBufferCount) const;
    void multiDrawArraysIndirectCount(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiDrawArraysIndirectCountARB(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiDrawArraysIndirectEXT(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawElementArrayAPPLE(boom::OpenGLEnum mode, boom::OpenGLInt const* first, boom::OpenGLSizei const* count, boom::OpenGLSizei primcount) const;
    void multiDrawElements(boom::OpenGLEnum mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei drawcount) const;
    void multiDrawElementsBaseVertex(boom::OpenGLEnum mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei drawcount, boom::OpenGLInt const* basevertex) const;
    void multiDrawElementsBaseVertexEXT(boom::OpenGLEnum mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei drawcount, boom::OpenGLInt const* basevertex) const;
    void multiDrawElementsEXT(boom::OpenGLEnum mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei primcount) const;
    void multiDrawElementsIndirect(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawElementsIndirectAMD(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLSizei primcount, boom::OpenGLSizei stride) const;
    void multiDrawElementsIndirectBindlessCountNV(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLSizei drawCount, boom::OpenGLSizei maxDrawCount, boom::OpenGLSizei stride, boom::OpenGLInt vertexBufferCount) const;
    void multiDrawElementsIndirectBindlessNV(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLSizei drawCount, boom::OpenGLSizei stride, boom::OpenGLInt vertexBufferCount) const;
    void multiDrawElementsIndirectCount(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiDrawElementsIndirectCountARB(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiDrawElementsIndirectEXT(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawMeshTasksIndirectCountNV(boom::OpenGLIntptr indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiDrawMeshTasksIndirectNV(boom::OpenGLIntptr indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawRangeElementArrayAPPLE(boom::OpenGLEnum mode, boom::OpenGLUint start, boom::OpenGLUint end, boom::OpenGLInt const* first, boom::OpenGLSizei const* count, boom::OpenGLSizei primcount) const;
    void multiModeDrawArraysIBM(boom::OpenGLEnum const* mode, boom::OpenGLInt const* first, boom::OpenGLSizei const* count, boom::OpenGLSizei primcount, boom::OpenGLInt modestride) const;
    void multiModeDrawElementsIBM(boom::OpenGLEnum const* mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei primcount, boom::OpenGLInt modestride) const;
    void multiTexBufferEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer) const;
    void multiTexCoord1bOES(boom::OpenGLEnum texture, boom::OpenGLByte s) const;
    void multiTexCoord1bvOES(boom::OpenGLEnum texture, boom::OpenGLByte const* coords) const;
    void multiTexCoord1d(boom::OpenGLEnum target, boom::OpenGLDouble s) const;
    void multiTexCoord1dARB(boom::OpenGLEnum target, boom::OpenGLDouble s) const;
    void multiTexCoord1dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord1dvARB(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord1f(boom::OpenGLEnum target, boom::OpenGLFloat s) const;
    void multiTexCoord1fARB(boom::OpenGLEnum target, boom::OpenGLFloat s) const;
    void multiTexCoord1fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord1fvARB(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord1hNV(boom::OpenGLEnum target, boom::OpenGLHalfNV s) const;
    void multiTexCoord1hvNV(boom::OpenGLEnum target, boom::OpenGLHalfNV const* v) const;
    void multiTexCoord1i(boom::OpenGLEnum target, boom::OpenGLInt s) const;
    void multiTexCoord1iARB(boom::OpenGLEnum target, boom::OpenGLInt s) const;
    void multiTexCoord1iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord1ivARB(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord1s(boom::OpenGLEnum target, boom::OpenGLShort s) const;
    void multiTexCoord1sARB(boom::OpenGLEnum target, boom::OpenGLShort s) const;
    void multiTexCoord1sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord1svARB(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord1xOES(boom::OpenGLEnum texture, boom::OpenGLFixed s) const;
    void multiTexCoord1xvOES(boom::OpenGLEnum texture, boom::OpenGLFixed const* coords) const;
    void multiTexCoord2bOES(boom::OpenGLEnum texture, boom::OpenGLByte s, boom::OpenGLByte t) const;
    void multiTexCoord2bvOES(boom::OpenGLEnum texture, boom::OpenGLByte const* coords) const;
    void multiTexCoord2d(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t) const;
    void multiTexCoord2dARB(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t) const;
    void multiTexCoord2dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord2dvARB(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord2f(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t) const;
    void multiTexCoord2fARB(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t) const;
    void multiTexCoord2fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord2fvARB(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord2hNV(boom::OpenGLEnum target, boom::OpenGLHalfNV s, boom::OpenGLHalfNV t) const;
    void multiTexCoord2hvNV(boom::OpenGLEnum target, boom::OpenGLHalfNV const* v) const;
    void multiTexCoord2i(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t) const;
    void multiTexCoord2iARB(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t) const;
    void multiTexCoord2iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord2ivARB(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord2s(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t) const;
    void multiTexCoord2sARB(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t) const;
    void multiTexCoord2sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord2svARB(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord2xOES(boom::OpenGLEnum texture, boom::OpenGLFixed s, boom::OpenGLFixed t) const;
    void multiTexCoord2xvOES(boom::OpenGLEnum texture, boom::OpenGLFixed const* coords) const;
    void multiTexCoord3bOES(boom::OpenGLEnum texture, boom::OpenGLByte s, boom::OpenGLByte t, boom::OpenGLByte r) const;
    void multiTexCoord3bvOES(boom::OpenGLEnum texture, boom::OpenGLByte const* coords) const;
    void multiTexCoord3d(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r) const;
    void multiTexCoord3dARB(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r) const;
    void multiTexCoord3dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord3dvARB(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord3f(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r) const;
    void multiTexCoord3fARB(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r) const;
    void multiTexCoord3fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord3fvARB(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord3hNV(boom::OpenGLEnum target, boom::OpenGLHalfNV s, boom::OpenGLHalfNV t, boom::OpenGLHalfNV r) const;
    void multiTexCoord3hvNV(boom::OpenGLEnum target, boom::OpenGLHalfNV const* v) const;
    void multiTexCoord3i(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r) const;
    void multiTexCoord3iARB(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r) const;
    void multiTexCoord3iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord3ivARB(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord3s(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r) const;
    void multiTexCoord3sARB(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r) const;
    void multiTexCoord3sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord3svARB(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord3xOES(boom::OpenGLEnum texture, boom::OpenGLFixed s, boom::OpenGLFixed t, boom::OpenGLFixed r) const;
    void multiTexCoord3xvOES(boom::OpenGLEnum texture, boom::OpenGLFixed const* coords) const;
    void multiTexCoord4bOES(boom::OpenGLEnum texture, boom::OpenGLByte s, boom::OpenGLByte t, boom::OpenGLByte r, boom::OpenGLByte q) const;
    void multiTexCoord4bvOES(boom::OpenGLEnum texture, boom::OpenGLByte const* coords) const;
    void multiTexCoord4d(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r, boom::OpenGLDouble q) const;
    void multiTexCoord4dARB(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r, boom::OpenGLDouble q) const;
    void multiTexCoord4dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord4dvARB(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord4f(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat q) const;
    void multiTexCoord4fARB(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat q) const;
    void multiTexCoord4fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord4fvARB(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord4hNV(boom::OpenGLEnum target, boom::OpenGLHalfNV s, boom::OpenGLHalfNV t, boom::OpenGLHalfNV r, boom::OpenGLHalfNV q) const;
    void multiTexCoord4hvNV(boom::OpenGLEnum target, boom::OpenGLHalfNV const* v) const;
    void multiTexCoord4i(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r, boom::OpenGLInt q) const;
    void multiTexCoord4iARB(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r, boom::OpenGLInt q) const;
    void multiTexCoord4iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord4ivARB(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord4s(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r, boom::OpenGLShort q) const;
    void multiTexCoord4sARB(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r, boom::OpenGLShort q) const;
    void multiTexCoord4sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord4svARB(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord4x(boom::OpenGLEnum texture, boom::OpenGLFixed s, boom::OpenGLFixed t, boom::OpenGLFixed r, boom::OpenGLFixed q) const;
    void multiTexCoord4xOES(boom::OpenGLEnum texture, boom::OpenGLFixed s, boom::OpenGLFixed t, boom::OpenGLFixed r, boom::OpenGLFixed q) const;
    void multiTexCoord4xvOES(boom::OpenGLEnum texture, boom::OpenGLFixed const* coords) const;
    void multiTexCoordP1ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void multiTexCoordP1uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void multiTexCoordP2ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void multiTexCoordP2uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void multiTexCoordP3ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void multiTexCoordP3uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void multiTexCoordP4ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void multiTexCoordP4uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void multiTexCoordPointerEXT(boom::OpenGLEnum texunit, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void multiTexEnvfEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void multiTexEnvfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void multiTexEnviEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void multiTexEnvivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void multiTexGendEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble param) const;
    void multiTexGendvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble const* params) const;
    void multiTexGenfEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void multiTexGenfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void multiTexGeniEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void multiTexGenivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void multiTexImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multiTexImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multiTexImage3DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multiTexParameterfEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void multiTexParameterfvEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void multiTexParameteriEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void multiTexParameterIivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void multiTexParameterIuivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint const* params) const;
    void multiTexParameterivEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void multiTexRenderbufferEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLUint renderbuffer) const;
    void multiTexSubImage1DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multiTexSubImage2DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multiTexSubImage3DEXT(boom::OpenGLEnum texunit, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void multMatrixd(boom::OpenGLDouble const* m) const;
    void multMatrixf(boom::OpenGLFloat const* m) const;
    void multMatrixx(boom::OpenGLFixed const* m) const;
    void multMatrixxOES(boom::OpenGLFixed const* m) const;
    void multTransposeMatrixd(boom::OpenGLDouble const* m) const;
    void multTransposeMatrixdARB(boom::OpenGLDouble const* m) const;
    void multTransposeMatrixf(boom::OpenGLFloat const* m) const;
    void multTransposeMatrixfARB(boom::OpenGLFloat const* m) const;
    void multTransposeMatrixxOES(boom::OpenGLFixed const* m) const;
    void namedBufferAttachMemoryNV(boom::OpenGLUint buffer, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void namedBufferData(boom::OpenGLUint buffer, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLEnum usage) const;
    void namedBufferDataEXT(boom::OpenGLUint buffer, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLEnum usage) const;
    void namedBufferPageCommitmentARB(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLBoolean commit) const;
    void namedBufferPageCommitmentEXT(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLBoolean commit) const;
    void namedBufferPageCommitmentMemNV(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLUint memory, boom::OpenGLUInt64 memOffset, boom::OpenGLBoolean commit) const;
    void namedBufferStorage(boom::OpenGLUint buffer, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLBitfield flags) const;
    void namedBufferStorageEXT(boom::OpenGLUint buffer, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLBitfield flags) const;
    void namedBufferStorageExternalEXT(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEGLClientBufferEXT clientBuffer, boom::OpenGLBitfield flags) const;
    void namedBufferStorageMemEXT(boom::OpenGLUint buffer, boom::OpenGLSizeiptr size, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void namedBufferSubData(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void namedBufferSubDataEXT(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void namedCopyBufferSubDataEXT(boom::OpenGLUint readBuffer, boom::OpenGLUint writeBuffer, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void namedFramebufferDrawBuffer(boom::OpenGLUint framebuffer, boom::OpenGLEnum buf) const;
    void namedFramebufferDrawBuffers(boom::OpenGLUint framebuffer, boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void namedFramebufferParameteri(boom::OpenGLUint framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void namedFramebufferParameteriEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void namedFramebufferReadBuffer(boom::OpenGLUint framebuffer, boom::OpenGLEnum src) const;
    void namedFramebufferRenderbuffer(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUint renderbuffer) const;
    void namedFramebufferRenderbufferEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUint renderbuffer) const;
    void namedFramebufferSampleLocationsfvARB(boom::OpenGLUint framebuffer, boom::OpenGLUint start, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void namedFramebufferSampleLocationsfvNV(boom::OpenGLUint framebuffer, boom::OpenGLUint start, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void namedFramebufferSamplePositionsfvAMD(boom::OpenGLUint framebuffer, boom::OpenGLUint numsamples, boom::OpenGLUint pixelindex, boom::OpenGLFloat const* values) const;
    void namedFramebufferTexture(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void namedFramebufferTexture1DEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void namedFramebufferTexture2DEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void namedFramebufferTexture3DEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt zoffset) const;
    void namedFramebufferTextureEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void namedFramebufferTextureFaceEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum face) const;
    void namedFramebufferTextureLayer(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void namedFramebufferTextureLayerEXT(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void namedProgramLocalParameter4dEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void namedProgramLocalParameter4dvEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble const* params) const;
    void namedProgramLocalParameter4fEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void namedProgramLocalParameter4fvEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat const* params) const;
    void namedProgramLocalParameterI4iEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void namedProgramLocalParameterI4ivEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt const* params) const;
    void namedProgramLocalParameterI4uiEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y, boom::OpenGLUint z, boom::OpenGLUint w) const;
    void namedProgramLocalParameterI4uivEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint const* params) const;
    void namedProgramLocalParameters4fvEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLFloat const* params) const;
    void namedProgramLocalParametersI4ivEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLInt const* params) const;
    void namedProgramLocalParametersI4uivEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLUint const* params) const;
    void namedProgramStringEXT(boom::OpenGLUint program, boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLSizei len, void const* string) const;
    void namedRenderbufferStorage(boom::OpenGLUint renderbuffer, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedRenderbufferStorageEXT(boom::OpenGLUint renderbuffer, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedRenderbufferStorageMultisample(boom::OpenGLUint renderbuffer, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedRenderbufferStorageMultisampleAdvancedAMD(boom::OpenGLUint renderbuffer, boom::OpenGLSizei samples, boom::OpenGLSizei storageSamples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedRenderbufferStorageMultisampleCoverageEXT(boom::OpenGLUint renderbuffer, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedRenderbufferStorageMultisampleEXT(boom::OpenGLUint renderbuffer, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedStringARB(boom::OpenGLEnum type, boom::OpenGLInt namelen, boom::OpenGLChar const* name, boom::OpenGLInt stringlen, boom::OpenGLChar const* string) const;
    void newList(boom::OpenGLUint list, boom::OpenGLEnum mode) const;
    boom::OpenGLUint newObjectBufferATI(boom::OpenGLSizei size, void const* pointer, boom::OpenGLEnum usage) const;
    void normal3b(boom::OpenGLByte nx, boom::OpenGLByte ny, boom::OpenGLByte nz) const;
    void normal3bv(boom::OpenGLByte const* v) const;
    void normal3d(boom::OpenGLDouble nx, boom::OpenGLDouble ny, boom::OpenGLDouble nz) const;
    void normal3dv(boom::OpenGLDouble const* v) const;
    void normal3f(boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz) const;
    void normal3fv(boom::OpenGLFloat const* v) const;
    void normal3fVertex3fSUN(boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void normal3fVertex3fvSUN(boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void normal3hNV(boom::OpenGLHalfNV nx, boom::OpenGLHalfNV ny, boom::OpenGLHalfNV nz) const;
    void normal3hvNV(boom::OpenGLHalfNV const* v) const;
    void normal3i(boom::OpenGLInt nx, boom::OpenGLInt ny, boom::OpenGLInt nz) const;
    void normal3iv(boom::OpenGLInt const* v) const;
    void normal3s(boom::OpenGLShort nx, boom::OpenGLShort ny, boom::OpenGLShort nz) const;
    void normal3sv(boom::OpenGLShort const* v) const;
    void normal3x(boom::OpenGLFixed nx, boom::OpenGLFixed ny, boom::OpenGLFixed nz) const;
    void normal3xOES(boom::OpenGLFixed nx, boom::OpenGLFixed ny, boom::OpenGLFixed nz) const;
    void normal3xvOES(boom::OpenGLFixed const* coords) const;
    void normalFormatNV(boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void normalP3ui(boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void normalP3uiv(boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void normalPointer(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void normalPointerEXT(boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLSizei count, void const* pointer) const;
    void normalPointerListIBM(boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void normalPointervINTEL(boom::OpenGLEnum type, void const** pointer) const;
    void normalStream3bATI(boom::OpenGLEnum stream, boom::OpenGLByte nx, boom::OpenGLByte ny, boom::OpenGLByte nz) const;
    void normalStream3bvATI(boom::OpenGLEnum stream, boom::OpenGLByte const* coords) const;
    void normalStream3dATI(boom::OpenGLEnum stream, boom::OpenGLDouble nx, boom::OpenGLDouble ny, boom::OpenGLDouble nz) const;
    void normalStream3dvATI(boom::OpenGLEnum stream, boom::OpenGLDouble const* coords) const;
    void normalStream3fATI(boom::OpenGLEnum stream, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz) const;
    void normalStream3fvATI(boom::OpenGLEnum stream, boom::OpenGLFloat const* coords) const;
    void normalStream3iATI(boom::OpenGLEnum stream, boom::OpenGLInt nx, boom::OpenGLInt ny, boom::OpenGLInt nz) const;
    void normalStream3ivATI(boom::OpenGLEnum stream, boom::OpenGLInt const* coords) const;
    void normalStream3sATI(boom::OpenGLEnum stream, boom::OpenGLShort nx, boom::OpenGLShort ny, boom::OpenGLShort nz) const;
    void normalStream3svATI(boom::OpenGLEnum stream, boom::OpenGLShort const* coords) const;
    void objectLabel(boom::OpenGLEnum identifier, boom::OpenGLUint name, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    void objectLabelKHR(boom::OpenGLEnum identifier, boom::OpenGLUint name, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    void objectPtrLabel(void const* ptr, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    void objectPtrLabelKHR(void const* ptr, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    boom::OpenGLEnum objectPurgeableAPPLE(boom::OpenGLEnum objectType, boom::OpenGLUint name, boom::OpenGLEnum option) const;
    boom::OpenGLEnum objectUnpurgeableAPPLE(boom::OpenGLEnum objectType, boom::OpenGLUint name, boom::OpenGLEnum option) const;
    void ortho(boom::OpenGLDouble left, boom::OpenGLDouble right, boom::OpenGLDouble bottom, boom::OpenGLDouble top, boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void orthof(boom::OpenGLFloat l, boom::OpenGLFloat r, boom::OpenGLFloat b, boom::OpenGLFloat t, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void orthofOES(boom::OpenGLFloat l, boom::OpenGLFloat r, boom::OpenGLFloat b, boom::OpenGLFloat t, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void orthox(boom::OpenGLFixed l, boom::OpenGLFixed r, boom::OpenGLFixed b, boom::OpenGLFixed t, boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void orthoxOES(boom::OpenGLFixed l, boom::OpenGLFixed r, boom::OpenGLFixed b, boom::OpenGLFixed t, boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void passTexCoordATI(boom::OpenGLUint dst, boom::OpenGLUint coord, boom::OpenGLEnum swizzle) const;
    void passThrough(boom::OpenGLFloat token) const;
    void passThroughxOES(boom::OpenGLFixed token) const;
    void patchParameterfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* values) const;
    void patchParameteri(boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void patchParameteriEXT(boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void patchParameteriOES(boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void pathColorGenNV(boom::OpenGLEnum color, boom::OpenGLEnum genMode, boom::OpenGLEnum colorFormat, boom::OpenGLFloat const* coeffs) const;
    void pathCommandsNV(boom::OpenGLUint path, boom::OpenGLSizei numCommands, boom::OpenGLUbyte const* commands, boom::OpenGLSizei numCoords, boom::OpenGLEnum coordType, void const* coords) const;
    void pathCoordsNV(boom::OpenGLUint path, boom::OpenGLSizei numCoords, boom::OpenGLEnum coordType, void const* coords) const;
    void pathCoverDepthFuncNV(boom::OpenGLEnum func) const;
    void pathDashArrayNV(boom::OpenGLUint path, boom::OpenGLSizei dashCount, boom::OpenGLFloat const* dashArray) const;
    void pathFogGenNV(boom::OpenGLEnum genMode) const;
    boom::OpenGLEnum pathGlyphIndexArrayNV(boom::OpenGLUint firstPathName, boom::OpenGLEnum fontTarget, void const* fontName, boom::OpenGLBitfield fontStyle, boom::OpenGLUint firstGlyphIndex, boom::OpenGLSizei numGlyphs, boom::OpenGLUint pathParameterTemplate, boom::OpenGLFloat emScale) const;
    boom::OpenGLEnum pathGlyphIndexRangeNV(boom::OpenGLEnum fontTarget, void const* fontName, boom::OpenGLBitfield fontStyle, boom::OpenGLUint pathParameterTemplate, boom::OpenGLFloat emScale, boom::OpenGLUint* baseAndCount) const;
    void pathGlyphRangeNV(boom::OpenGLUint firstPathName, boom::OpenGLEnum fontTarget, void const* fontName, boom::OpenGLBitfield fontStyle, boom::OpenGLUint firstGlyph, boom::OpenGLSizei numGlyphs, boom::OpenGLEnum handleMissingGlyphs, boom::OpenGLUint pathParameterTemplate, boom::OpenGLFloat emScale) const;
    void pathGlyphsNV(boom::OpenGLUint firstPathName, boom::OpenGLEnum fontTarget, void const* fontName, boom::OpenGLBitfield fontStyle, boom::OpenGLSizei numGlyphs, boom::OpenGLEnum type, void const* charcodes, boom::OpenGLEnum handleMissingGlyphs, boom::OpenGLUint pathParameterTemplate, boom::OpenGLFloat emScale) const;
    boom::OpenGLEnum pathMemoryGlyphIndexArrayNV(boom::OpenGLUint firstPathName, boom::OpenGLEnum fontTarget, boom::OpenGLSizeiptr fontSize, void const* fontData, boom::OpenGLSizei faceIndex, boom::OpenGLUint firstGlyphIndex, boom::OpenGLSizei numGlyphs, boom::OpenGLUint pathParameterTemplate, boom::OpenGLFloat emScale) const;
    void pathParameterfNV(boom::OpenGLUint path, boom::OpenGLEnum pname, boom::OpenGLFloat value) const;
    void pathParameterfvNV(boom::OpenGLUint path, boom::OpenGLEnum pname, boom::OpenGLFloat const* value) const;
    void pathParameteriNV(boom::OpenGLUint path, boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void pathParameterivNV(boom::OpenGLUint path, boom::OpenGLEnum pname, boom::OpenGLInt const* value) const;
    void pathStencilDepthOffsetNV(boom::OpenGLFloat factor, boom::OpenGLFloat units) const;
    void pathStencilFuncNV(boom::OpenGLEnum func, boom::OpenGLInt ref, boom::OpenGLUint mask) const;
    void pathStringNV(boom::OpenGLUint path, boom::OpenGLEnum format, boom::OpenGLSizei length, void const* pathString) const;
    void pathSubCommandsNV(boom::OpenGLUint path, boom::OpenGLSizei commandStart, boom::OpenGLSizei commandsToDelete, boom::OpenGLSizei numCommands, boom::OpenGLUbyte const* commands, boom::OpenGLSizei numCoords, boom::OpenGLEnum coordType, void const* coords) const;
    void pathSubCoordsNV(boom::OpenGLUint path, boom::OpenGLSizei coordStart, boom::OpenGLSizei numCoords, boom::OpenGLEnum coordType, void const* coords) const;
    void pathTexGenNV(boom::OpenGLEnum texCoordSet, boom::OpenGLEnum genMode, boom::OpenGLInt components, boom::OpenGLFloat const* coeffs) const;
    void pauseTransformFeedback() const;
    void pauseTransformFeedbackNV() const;
    void pixelDataRangeNV(boom::OpenGLEnum target, boom::OpenGLSizei length, void const* pointer) const;
    void pixelMapfv(boom::OpenGLEnum map, boom::OpenGLSizei mapsize, boom::OpenGLFloat const* values) const;
    void pixelMapuiv(boom::OpenGLEnum map, boom::OpenGLSizei mapsize, boom::OpenGLUint const* values) const;
    void pixelMapusv(boom::OpenGLEnum map, boom::OpenGLSizei mapsize, boom::OpenGLUShort const* values) const;
    void pixelMapx(boom::OpenGLEnum map, boom::OpenGLInt size, boom::OpenGLFixed const* values) const;
    void pixelStoref(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pixelStorei(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pixelStorex(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void pixelTexGenParameterfSGIS(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pixelTexGenParameterfvSGIS(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pixelTexGenParameteriSGIS(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pixelTexGenParameterivSGIS(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void pixelTexGenSGIX(boom::OpenGLEnum mode) const;
    void pixelTransferf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pixelTransferi(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pixelTransferxOES(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void pixelTransformParameterfEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pixelTransformParameterfvEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pixelTransformParameteriEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pixelTransformParameterivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void pixelZoom(boom::OpenGLFloat xfactor, boom::OpenGLFloat yfactor) const;
    void pixelZoomxOES(boom::OpenGLFixed xfactor, boom::OpenGLFixed yfactor) const;
    void pNTrianglesfATI(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pNTrianglesiATI(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    boom::OpenGLBoolean pointAlongPathNV(boom::OpenGLUint path, boom::OpenGLSizei startSegment, boom::OpenGLSizei numSegments, boom::OpenGLFloat distance, boom::OpenGLFloat* x, boom::OpenGLFloat* y, boom::OpenGLFloat* tangentX, boom::OpenGLFloat* tangentY) const;
    void pointParameterf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pointParameterfARB(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pointParameterfEXT(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pointParameterfSGIS(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pointParameterfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pointParameterfvARB(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pointParameterfvEXT(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pointParameterfvSGIS(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pointParameteri(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pointParameteriNV(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pointParameteriv(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void pointParameterivNV(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void pointParameterx(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void pointParameterxOES(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void pointParameterxv(boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void pointParameterxvOES(boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void pointSize(boom::OpenGLFloat size) const;
    void pointSizePointerOES(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void pointSizex(boom::OpenGLFixed size) const;
    void pointSizexOES(boom::OpenGLFixed size) const;
    boom::OpenGLInt pollAsyncSGIX(boom::OpenGLUint* markerp) const;
    boom::OpenGLInt pollInstrumentsSGIX(boom::OpenGLInt* marker_p) const;
    void polygonMode(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void polygonModeNV(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void polygonOffset(boom::OpenGLFloat factor, boom::OpenGLFloat units) const;
    void polygonOffsetClamp(boom::OpenGLFloat factor, boom::OpenGLFloat units, boom::OpenGLFloat clamp) const;
    void polygonOffsetClampEXT(boom::OpenGLFloat factor, boom::OpenGLFloat units, boom::OpenGLFloat clamp) const;
    void polygonOffsetEXT(boom::OpenGLFloat factor, boom::OpenGLFloat bias) const;
    void polygonOffsetx(boom::OpenGLFixed factor, boom::OpenGLFixed units) const;
    void polygonOffsetxOES(boom::OpenGLFixed factor, boom::OpenGLFixed units) const;
    void polygonStipple(boom::OpenGLUbyte const* mask) const;
    void popAttrib() const;
    void popClientAttrib() const;
    void popDebugGroup() const;
    void popDebugGroupKHR() const;
    void popGroupMarkerEXT() const;
    void popMatrix() const;
    void popName() const;
    void presentFrameDualFillNV(boom::OpenGLUint video_slot, boom::OpenGLUInt64EXT minPresentTime, boom::OpenGLUint beginPresentTimeId, boom::OpenGLUint presentDurationId, boom::OpenGLEnum type, boom::OpenGLEnum target0, boom::OpenGLUint fill0, boom::OpenGLEnum target1, boom::OpenGLUint fill1, boom::OpenGLEnum target2, boom::OpenGLUint fill2, boom::OpenGLEnum target3, boom::OpenGLUint fill3) const;
    void presentFrameKeyedNV(boom::OpenGLUint video_slot, boom::OpenGLUInt64EXT minPresentTime, boom::OpenGLUint beginPresentTimeId, boom::OpenGLUint presentDurationId, boom::OpenGLEnum type, boom::OpenGLEnum target0, boom::OpenGLUint fill0, boom::OpenGLUint key0, boom::OpenGLEnum target1, boom::OpenGLUint fill1, boom::OpenGLUint key1) const;
    void primitiveBoundingBox(boom::OpenGLFloat minX, boom::OpenGLFloat minY, boom::OpenGLFloat minZ, boom::OpenGLFloat minW, boom::OpenGLFloat maxX, boom::OpenGLFloat maxY, boom::OpenGLFloat maxZ, boom::OpenGLFloat maxW) const;
    void primitiveBoundingBoxARB(boom::OpenGLFloat minX, boom::OpenGLFloat minY, boom::OpenGLFloat minZ, boom::OpenGLFloat minW, boom::OpenGLFloat maxX, boom::OpenGLFloat maxY, boom::OpenGLFloat maxZ, boom::OpenGLFloat maxW) const;
    void primitiveBoundingBoxEXT(boom::OpenGLFloat minX, boom::OpenGLFloat minY, boom::OpenGLFloat minZ, boom::OpenGLFloat minW, boom::OpenGLFloat maxX, boom::OpenGLFloat maxY, boom::OpenGLFloat maxZ, boom::OpenGLFloat maxW) const;
    void primitiveBoundingBoxOES(boom::OpenGLFloat minX, boom::OpenGLFloat minY, boom::OpenGLFloat minZ, boom::OpenGLFloat minW, boom::OpenGLFloat maxX, boom::OpenGLFloat maxY, boom::OpenGLFloat maxZ, boom::OpenGLFloat maxW) const;
    void primitiveRestartIndex(boom::OpenGLUint index) const;
    void primitiveRestartIndexNV(boom::OpenGLUint index) const;
    void primitiveRestartNV() const;
    void prioritizeTextures(boom::OpenGLSizei n, boom::OpenGLUint const* textures, boom::OpenGLFloat const* priorities) const;
    void prioritizeTexturesEXT(boom::OpenGLSizei n, boom::OpenGLUint const* textures, boom::OpenGLClampf const* priorities) const;
    void prioritizeTexturesxOES(boom::OpenGLSizei n, boom::OpenGLUint const* textures, boom::OpenGLFixed const* priorities) const;
    void programBinary(boom::OpenGLUint program, boom::OpenGLEnum binaryFormat, void const* binary, boom::OpenGLSizei length) const;
    void programBinaryOES(boom::OpenGLUint program, boom::OpenGLEnum binaryFormat, void const* binary, boom::OpenGLInt length) const;
    void programBufferParametersfvNV(boom::OpenGLEnum target, boom::OpenGLUint bindingIndex, boom::OpenGLUint wordIndex, boom::OpenGLSizei count, boom::OpenGLFloat const* params) const;
    void programBufferParametersIivNV(boom::OpenGLEnum target, boom::OpenGLUint bindingIndex, boom::OpenGLUint wordIndex, boom::OpenGLSizei count, boom::OpenGLInt const* params) const;
    void programBufferParametersIuivNV(boom::OpenGLEnum target, boom::OpenGLUint bindingIndex, boom::OpenGLUint wordIndex, boom::OpenGLSizei count, boom::OpenGLUint const* params) const;
    void programEnvParameter4dARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void programEnvParameter4dvARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble const* params) const;
    void programEnvParameter4fARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void programEnvParameter4fvARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat const* params) const;
    void programEnvParameterI4iNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void programEnvParameterI4ivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt const* params) const;
    void programEnvParameterI4uiNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y, boom::OpenGLUint z, boom::OpenGLUint w) const;
    void programEnvParameterI4uivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint const* params) const;
    void programEnvParameters4fvEXT(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLFloat const* params) const;
    void programEnvParametersI4ivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLInt const* params) const;
    void programEnvParametersI4uivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLUint const* params) const;
    void programLocalParameter4dARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void programLocalParameter4dvARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble const* params) const;
    void programLocalParameter4fARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void programLocalParameter4fvARB(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat const* params) const;
    void programLocalParameterI4iNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void programLocalParameterI4ivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt const* params) const;
    void programLocalParameterI4uiNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y, boom::OpenGLUint z, boom::OpenGLUint w) const;
    void programLocalParameterI4uivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint const* params) const;
    void programLocalParameters4fvEXT(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLFloat const* params) const;
    void programLocalParametersI4ivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLInt const* params) const;
    void programLocalParametersI4uivNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLUint const* params) const;
    void programNamedParameter4dNV(boom::OpenGLUint id, boom::OpenGLSizei len, boom::OpenGLUbyte const* name, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void programNamedParameter4dvNV(boom::OpenGLUint id, boom::OpenGLSizei len, boom::OpenGLUbyte const* name, boom::OpenGLDouble const* v) const;
    void programNamedParameter4fNV(boom::OpenGLUint id, boom::OpenGLSizei len, boom::OpenGLUbyte const* name, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void programNamedParameter4fvNV(boom::OpenGLUint id, boom::OpenGLSizei len, boom::OpenGLUbyte const* name, boom::OpenGLFloat const* v) const;
    void programParameter4dNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void programParameter4dvNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void programParameter4fNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void programParameter4fvNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void programParameteri(boom::OpenGLUint program, boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void programParameteriARB(boom::OpenGLUint program, boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void programParameteriEXT(boom::OpenGLUint program, boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void programParameters4dvNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void programParameters4fvNV(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void programPathFragmentInputGenNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLEnum genMode, boom::OpenGLInt components, boom::OpenGLFloat const* coeffs) const;
    void programStringARB(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLSizei len, void const* string) const;
    void programSubroutineParametersuivNV(boom::OpenGLEnum target, boom::OpenGLSizei count, boom::OpenGLUint const* params) const;
    void programUniform1d(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble v0) const;
    void programUniform1dEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble x) const;
    void programUniform1dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform1dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform1f(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0) const;
    void programUniform1fEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0) const;
    void programUniform1fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform1fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform1i(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0) const;
    void programUniform1i64ARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt64 x) const;
    void programUniform1i64NV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt64EXT x) const;
    void programUniform1i64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void programUniform1i64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void programUniform1iEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0) const;
    void programUniform1iv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform1ivEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform1ui(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0) const;
    void programUniform1ui64ARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64 x) const;
    void programUniform1ui64NV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64EXT x) const;
    void programUniform1ui64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void programUniform1ui64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void programUniform1uiEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0) const;
    void programUniform1uiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniform1uivEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniform2d(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble v0, boom::OpenGLDouble v1) const;
    void programUniform2dEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void programUniform2dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform2dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform2f(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1) const;
    void programUniform2fEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1) const;
    void programUniform2fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform2fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform2i(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1) const;
    void programUniform2i64ARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y) const;
    void programUniform2i64NV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y) const;
    void programUniform2i64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void programUniform2i64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void programUniform2iEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1) const;
    void programUniform2iv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform2ivEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform2ui(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1) const;
    void programUniform2ui64ARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y) const;
    void programUniform2ui64NV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y) const;
    void programUniform2ui64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void programUniform2ui64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void programUniform2uiEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1) const;
    void programUniform2uiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniform2uivEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniform3d(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble v0, boom::OpenGLDouble v1, boom::OpenGLDouble v2) const;
    void programUniform3dEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void programUniform3dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform3dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform3f(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void programUniform3fEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void programUniform3fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform3fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform3i(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2) const;
    void programUniform3i64ARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y, boom::OpenGLInt64 z) const;
    void programUniform3i64NV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z) const;
    void programUniform3i64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void programUniform3i64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void programUniform3iEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2) const;
    void programUniform3iv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform3ivEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform3ui(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2) const;
    void programUniform3ui64ARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y, boom::OpenGLUInt64 z) const;
    void programUniform3ui64NV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z) const;
    void programUniform3ui64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void programUniform3ui64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void programUniform3uiEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2) const;
    void programUniform3uiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniform3uivEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniform4d(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble v0, boom::OpenGLDouble v1, boom::OpenGLDouble v2, boom::OpenGLDouble v3) const;
    void programUniform4dEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void programUniform4dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform4dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform4f(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLFloat v3) const;
    void programUniform4fEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLFloat v3) const;
    void programUniform4fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform4fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform4i(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2, boom::OpenGLInt v3) const;
    void programUniform4i64ARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y, boom::OpenGLInt64 z, boom::OpenGLInt64 w) const;
    void programUniform4i64NV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z, boom::OpenGLInt64EXT w) const;
    void programUniform4i64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void programUniform4i64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void programUniform4iEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2, boom::OpenGLInt v3) const;
    void programUniform4iv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform4ivEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform4ui(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2, boom::OpenGLUint v3) const;
    void programUniform4ui64ARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y, boom::OpenGLUInt64 z, boom::OpenGLUInt64 w) const;
    void programUniform4ui64NV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z, boom::OpenGLUInt64EXT w) const;
    void programUniform4ui64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void programUniform4ui64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void programUniform4uiEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2, boom::OpenGLUint v3) const;
    void programUniform4uiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniform4uivEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniformHandleui64ARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void programUniformHandleui64IMG(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void programUniformHandleui64NV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void programUniformHandleui64vARB(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* values) const;
    void programUniformHandleui64vIMG(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* values) const;
    void programUniformHandleui64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* values) const;
    void programUniformMatrix2dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2x3dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2x3dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2x3fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2x3fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2x4dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2x4dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2x4fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2x4fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3x2dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3x2dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3x2fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3x2fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3x4dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3x4dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3x4fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3x4fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4x2dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4x2dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4x2fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4x2fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4x3dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4x3dvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4x3fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4x3fvEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformui64NV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUInt64EXT value) const;
    void programUniformui64vNV(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void programVertexLimitNV(boom::OpenGLEnum target, boom::OpenGLInt limit) const;
    void provokingVertex(boom::OpenGLEnum mode) const;
    void provokingVertexEXT(boom::OpenGLEnum mode) const;
    void pushAttrib(boom::OpenGLBitfield mask) const;
    void pushClientAttrib(boom::OpenGLBitfield mask) const;
    void pushClientAttribDefaultEXT(boom::OpenGLBitfield mask) const;
    void pushDebugGroup(boom::OpenGLEnum source, boom::OpenGLUint id, boom::OpenGLSizei length, boom::OpenGLChar const* message) const;
    void pushDebugGroupKHR(boom::OpenGLEnum source, boom::OpenGLUint id, boom::OpenGLSizei length, boom::OpenGLChar const* message) const;
    void pushGroupMarkerEXT(boom::OpenGLSizei length, boom::OpenGLChar const* marker) const;
    void pushMatrix() const;
    void pushName(boom::OpenGLUint name) const;
    void queryCounter(boom::OpenGLUint id, boom::OpenGLEnum target) const;
    void queryCounterEXT(boom::OpenGLUint id, boom::OpenGLEnum target) const;
    boom::OpenGLBitfield queryMatrixxOES(boom::OpenGLFixed* mantissa, boom::OpenGLInt* exponent) const;
    void queryObjectParameteruiAMD(boom::OpenGLEnum target, boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUint param) const;
    boom::OpenGLInt queryResourceNV(boom::OpenGLEnum queryType, boom::OpenGLInt tagId, boom::OpenGLUint count, boom::OpenGLInt* buffer) const;
    void queryResourceTagNV(boom::OpenGLInt tagId, boom::OpenGLChar const* tagString) const;
    void rasterPos2d(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void rasterPos2dv(boom::OpenGLDouble const* v) const;
    void rasterPos2f(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void rasterPos2fv(boom::OpenGLFloat const* v) const;
    void rasterPos2i(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void rasterPos2iv(boom::OpenGLInt const* v) const;
    void rasterPos2s(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void rasterPos2sv(boom::OpenGLShort const* v) const;
    void rasterPos2xOES(boom::OpenGLFixed x, boom::OpenGLFixed y) const;
    void rasterPos2xvOES(boom::OpenGLFixed const* coords) const;
    void rasterPos3d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void rasterPos3dv(boom::OpenGLDouble const* v) const;
    void rasterPos3f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void rasterPos3fv(boom::OpenGLFloat const* v) const;
    void rasterPos3i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void rasterPos3iv(boom::OpenGLInt const* v) const;
    void rasterPos3s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void rasterPos3sv(boom::OpenGLShort const* v) const;
    void rasterPos3xOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void rasterPos3xvOES(boom::OpenGLFixed const* coords) const;
    void rasterPos4d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void rasterPos4dv(boom::OpenGLDouble const* v) const;
    void rasterPos4f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void rasterPos4fv(boom::OpenGLFloat const* v) const;
    void rasterPos4i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void rasterPos4iv(boom::OpenGLInt const* v) const;
    void rasterPos4s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void rasterPos4sv(boom::OpenGLShort const* v) const;
    void rasterPos4xOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z, boom::OpenGLFixed w) const;
    void rasterPos4xvOES(boom::OpenGLFixed const* coords) const;
    void rasterSamplesEXT(boom::OpenGLUint samples, boom::OpenGLBoolean fixedsamplelocations) const;
    void readBuffer(boom::OpenGLEnum src) const;
    void readBufferIndexedEXT(boom::OpenGLEnum src, boom::OpenGLInt index) const;
    void readBufferNV(boom::OpenGLEnum mode) const;
    void readInstrumentsSGIX(boom::OpenGLInt marker) const;
    void readnPixels(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* data) const;
    void readnPixelsARB(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* data) const;
    void readnPixelsEXT(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* data) const;
    void readnPixelsKHR(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* data) const;
    void readPixels(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void* pixels) const;
    void rectd(boom::OpenGLDouble x1, boom::OpenGLDouble y1, boom::OpenGLDouble x2, boom::OpenGLDouble y2) const;
    void rectdv(boom::OpenGLDouble const* v1, boom::OpenGLDouble const* v2) const;
    void rectf(boom::OpenGLFloat x1, boom::OpenGLFloat y1, boom::OpenGLFloat x2, boom::OpenGLFloat y2) const;
    void rectfv(boom::OpenGLFloat const* v1, boom::OpenGLFloat const* v2) const;
    void recti(boom::OpenGLInt x1, boom::OpenGLInt y1, boom::OpenGLInt x2, boom::OpenGLInt y2) const;
    void rectiv(boom::OpenGLInt const* v1, boom::OpenGLInt const* v2) const;
    void rects(boom::OpenGLShort x1, boom::OpenGLShort y1, boom::OpenGLShort x2, boom::OpenGLShort y2) const;
    void rectsv(boom::OpenGLShort const* v1, boom::OpenGLShort const* v2) const;
    void rectxOES(boom::OpenGLFixed x1, boom::OpenGLFixed y1, boom::OpenGLFixed x2, boom::OpenGLFixed y2) const;
    void rectxvOES(boom::OpenGLFixed const* v1, boom::OpenGLFixed const* v2) const;
    void referencePlaneSGIX(boom::OpenGLDouble const* equation) const;
    boom::OpenGLBoolean releaseKeyedMutexWin32EXT(boom::OpenGLUint memory, boom::OpenGLUInt64 key) const;
    void releaseShaderCompiler() const;
    void renderbufferStorage(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleAdvancedAMD(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLSizei storageSamples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleANGLE(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleAPPLE(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleCoverageNV(boom::OpenGLEnum target, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleEXT(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleIMG(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisampleNV(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageOES(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderGpuMaskNV(boom::OpenGLBitfield mask) const;
    boom::OpenGLInt renderMode(boom::OpenGLEnum mode) const;
    void replacementCodePointerSUN(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const** pointer) const;
    void replacementCodeubSUN(boom::OpenGLUbyte code) const;
    void replacementCodeubvSUN(boom::OpenGLUbyte const* code) const;
    void replacementCodeuiColor3fVertex3fSUN(boom::OpenGLUint rc, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiColor3fVertex3fvSUN(boom::OpenGLUint const* rc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* v) const;
    void replacementCodeuiColor4fNormal3fVertex3fSUN(boom::OpenGLUint rc, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat a, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiColor4fNormal3fVertex3fvSUN(boom::OpenGLUint const* rc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void replacementCodeuiColor4ubVertex3fSUN(boom::OpenGLUint rc, boom::OpenGLUbyte r, boom::OpenGLUbyte g, boom::OpenGLUbyte b, boom::OpenGLUbyte a, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiColor4ubVertex3fvSUN(boom::OpenGLUint const* rc, boom::OpenGLUbyte const* c, boom::OpenGLFloat const* v) const;
    void replacementCodeuiNormal3fVertex3fSUN(boom::OpenGLUint rc, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiNormal3fVertex3fvSUN(boom::OpenGLUint const* rc, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void replacementCodeuiSUN(boom::OpenGLUint code) const;
    void replacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN(boom::OpenGLUint rc, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat a, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN(boom::OpenGLUint const* rc, boom::OpenGLFloat const* tc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void replacementCodeuiTexCoord2fNormal3fVertex3fSUN(boom::OpenGLUint rc, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiTexCoord2fNormal3fVertex3fvSUN(boom::OpenGLUint const* rc, boom::OpenGLFloat const* tc, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void replacementCodeuiTexCoord2fVertex3fSUN(boom::OpenGLUint rc, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiTexCoord2fVertex3fvSUN(boom::OpenGLUint const* rc, boom::OpenGLFloat const* tc, boom::OpenGLFloat const* v) const;
    void replacementCodeuiVertex3fSUN(boom::OpenGLUint rc, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void replacementCodeuiVertex3fvSUN(boom::OpenGLUint const* rc, boom::OpenGLFloat const* v) const;
    void replacementCodeuivSUN(boom::OpenGLUint const* code) const;
    void replacementCodeusSUN(boom::OpenGLUShort code) const;
    void replacementCodeusvSUN(boom::OpenGLUShort const* code) const;
    void requestResidentProgramsNV(boom::OpenGLSizei n, boom::OpenGLUint const* programs) const;
    void resetHistogram(boom::OpenGLEnum target) const;
    void resetHistogramEXT(boom::OpenGLEnum target) const;
    void resetMemoryObjectParameterNV(boom::OpenGLUint memory, boom::OpenGLEnum pname) const;
    void resetMinmax(boom::OpenGLEnum target) const;
    void resetMinmaxEXT(boom::OpenGLEnum target) const;
    void resizeBuffersMESA() const;
    void resolveDepthValuesNV() const;
    void resolveMultisampleFramebufferAPPLE() const;
    void resumeTransformFeedback() const;
    void resumeTransformFeedbackNV() const;
    void rotated(boom::OpenGLDouble angle, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void rotatef(boom::OpenGLFloat angle, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void rotatex(boom::OpenGLFixed angle, boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void rotatexOES(boom::OpenGLFixed angle, boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void sampleCoverage(boom::OpenGLFloat value, boom::OpenGLBoolean invert) const;
    void sampleCoverageARB(boom::OpenGLFloat value, boom::OpenGLBoolean invert) const;
    void sampleCoveragex(boom::OpenGLClampx value, boom::OpenGLBoolean invert) const;
    void sampleCoveragexOES(boom::OpenGLClampx value, boom::OpenGLBoolean invert) const;
    void sampleMapATI(boom::OpenGLUint dst, boom::OpenGLUint interp, boom::OpenGLEnum swizzle) const;
    void sampleMaskEXT(boom::OpenGLClampf value, boom::OpenGLBoolean invert) const;
    void sampleMaski(boom::OpenGLUint maskNumber, boom::OpenGLBitfield mask) const;
    void sampleMaskIndexedNV(boom::OpenGLUint index, boom::OpenGLBitfield mask) const;
    void sampleMaskSGIS(boom::OpenGLClampf value, boom::OpenGLBoolean invert) const;
    void samplePatternEXT(boom::OpenGLEnum pattern) const;
    void samplePatternSGIS(boom::OpenGLEnum pattern) const;
    void samplerParameterf(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void samplerParameterfv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLFloat const* param) const;
    void samplerParameteri(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void samplerParameterIiv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void samplerParameterIivEXT(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void samplerParameterIivOES(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void samplerParameterIuiv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLUint const* param) const;
    void samplerParameterIuivEXT(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLUint const* param) const;
    void samplerParameterIuivOES(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLUint const* param) const;
    void samplerParameteriv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void scaled(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void scalef(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void scalex(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void scalexOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void scissor(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorArrayv(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLInt const* v) const;
    void scissorArrayvNV(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLInt const* v) const;
    void scissorArrayvOES(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLInt const* v) const;
    void scissorExclusiveArrayvNV(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLInt const* v) const;
    void scissorExclusiveNV(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorIndexed(boom::OpenGLUint index, boom::OpenGLInt left, boom::OpenGLInt bottom, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorIndexedNV(boom::OpenGLUint index, boom::OpenGLInt left, boom::OpenGLInt bottom, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorIndexedOES(boom::OpenGLUint index, boom::OpenGLInt left, boom::OpenGLInt bottom, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorIndexedv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void scissorIndexedvNV(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void scissorIndexedvOES(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void secondaryColor3b(boom::OpenGLByte red, boom::OpenGLByte green, boom::OpenGLByte blue) const;
    void secondaryColor3bEXT(boom::OpenGLByte red, boom::OpenGLByte green, boom::OpenGLByte blue) const;
    void secondaryColor3bv(boom::OpenGLByte const* v) const;
    void secondaryColor3bvEXT(boom::OpenGLByte const* v) const;
    void secondaryColor3d(boom::OpenGLDouble red, boom::OpenGLDouble green, boom::OpenGLDouble blue) const;
    void secondaryColor3dEXT(boom::OpenGLDouble red, boom::OpenGLDouble green, boom::OpenGLDouble blue) const;
    void secondaryColor3dv(boom::OpenGLDouble const* v) const;
    void secondaryColor3dvEXT(boom::OpenGLDouble const* v) const;
    void secondaryColor3f(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue) const;
    void secondaryColor3fEXT(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue) const;
    void secondaryColor3fv(boom::OpenGLFloat const* v) const;
    void secondaryColor3fvEXT(boom::OpenGLFloat const* v) const;
    void secondaryColor3hNV(boom::OpenGLHalfNV red, boom::OpenGLHalfNV green, boom::OpenGLHalfNV blue) const;
    void secondaryColor3hvNV(boom::OpenGLHalfNV const* v) const;
    void secondaryColor3i(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue) const;
    void secondaryColor3iEXT(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue) const;
    void secondaryColor3iv(boom::OpenGLInt const* v) const;
    void secondaryColor3ivEXT(boom::OpenGLInt const* v) const;
    void secondaryColor3s(boom::OpenGLShort red, boom::OpenGLShort green, boom::OpenGLShort blue) const;
    void secondaryColor3sEXT(boom::OpenGLShort red, boom::OpenGLShort green, boom::OpenGLShort blue) const;
    void secondaryColor3sv(boom::OpenGLShort const* v) const;
    void secondaryColor3svEXT(boom::OpenGLShort const* v) const;
    void secondaryColor3ub(boom::OpenGLUbyte red, boom::OpenGLUbyte green, boom::OpenGLUbyte blue) const;
    void secondaryColor3ubEXT(boom::OpenGLUbyte red, boom::OpenGLUbyte green, boom::OpenGLUbyte blue) const;
    void secondaryColor3ubv(boom::OpenGLUbyte const* v) const;
    void secondaryColor3ubvEXT(boom::OpenGLUbyte const* v) const;
    void secondaryColor3ui(boom::OpenGLUint red, boom::OpenGLUint green, boom::OpenGLUint blue) const;
    void secondaryColor3uiEXT(boom::OpenGLUint red, boom::OpenGLUint green, boom::OpenGLUint blue) const;
    void secondaryColor3uiv(boom::OpenGLUint const* v) const;
    void secondaryColor3uivEXT(boom::OpenGLUint const* v) const;
    void secondaryColor3us(boom::OpenGLUShort red, boom::OpenGLUShort green, boom::OpenGLUShort blue) const;
    void secondaryColor3usEXT(boom::OpenGLUShort red, boom::OpenGLUShort green, boom::OpenGLUShort blue) const;
    void secondaryColor3usv(boom::OpenGLUShort const* v) const;
    void secondaryColor3usvEXT(boom::OpenGLUShort const* v) const;
    void secondaryColorFormatNV(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void secondaryColorP3ui(boom::OpenGLEnum type, boom::OpenGLUint color) const;
    void secondaryColorP3uiv(boom::OpenGLEnum type, boom::OpenGLUint const* color) const;
    void secondaryColorPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void secondaryColorPointerEXT(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void secondaryColorPointerListIBM(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void selectBuffer(boom::OpenGLSizei size, boom::OpenGLUint* buffer) const;
    void selectPerfMonitorCountersAMD(boom::OpenGLUint monitor, boom::OpenGLBoolean enable, boom::OpenGLUint group, boom::OpenGLInt numCounters, boom::OpenGLUint* counterList) const;
    void semaphoreParameterivNV(boom::OpenGLUint semaphore, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void semaphoreParameterui64vEXT(boom::OpenGLUint semaphore, boom::OpenGLEnum pname, boom::OpenGLUInt64 const* params) const;
    void separableFilter2D(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* row, void const* column) const;
    void separableFilter2DEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* row, void const* column) const;
    void setFenceAPPLE(boom::OpenGLUint fence) const;
    void setFenceNV(boom::OpenGLUint fence, boom::OpenGLEnum condition) const;
    void setFragmentShaderConstantATI(boom::OpenGLUint dst, boom::OpenGLFloat const* value) const;
    void setInvariantEXT(boom::OpenGLUint id, boom::OpenGLEnum type, void const* addr) const;
    void setLocalConstantEXT(boom::OpenGLUint id, boom::OpenGLEnum type, void const* addr) const;
    void setMultisamplefvAMD(boom::OpenGLEnum pname, boom::OpenGLUint index, boom::OpenGLFloat const* val) const;
    void shadeModel(boom::OpenGLEnum mode) const;
    void shaderBinary(boom::OpenGLSizei count, boom::OpenGLUint const* shaders, boom::OpenGLEnum binaryFormat, void const* binary, boom::OpenGLSizei length) const;
    void shaderOp1EXT(boom::OpenGLEnum op, boom::OpenGLUint res, boom::OpenGLUint arg1) const;
    void shaderOp2EXT(boom::OpenGLEnum op, boom::OpenGLUint res, boom::OpenGLUint arg1, boom::OpenGLUint arg2) const;
    void shaderOp3EXT(boom::OpenGLEnum op, boom::OpenGLUint res, boom::OpenGLUint arg1, boom::OpenGLUint arg2, boom::OpenGLUint arg3) const;
    void shaderSource(boom::OpenGLUint shader, boom::OpenGLSizei count, boom::OpenGLChar const* const* string, boom::OpenGLInt const* length) const;
    void shaderSourceARB(boom::OpenGLHandleARB shaderObj, boom::OpenGLSizei count, boom::OpenGLCharARB const** string, boom::OpenGLInt const* length) const;
    void shaderStorageBlockBinding(boom::OpenGLUint program, boom::OpenGLUint storageBlockIndex, boom::OpenGLUint storageBlockBinding) const;
    void shadingRateCombinerOpsEXT(boom::OpenGLEnum combinerOp0, boom::OpenGLEnum combinerOp1) const;
    void shadingRateEXT(boom::OpenGLEnum rate) const;
    void shadingRateImageBarrierNV(boom::OpenGLBoolean synchronize) const;
    void shadingRateImagePaletteNV(boom::OpenGLUint viewport, boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLEnum const* rates) const;
    void shadingRateQCOM(boom::OpenGLEnum rate) const;
    void shadingRateSampleOrderCustomNV(boom::OpenGLEnum rate, boom::OpenGLUint samples, boom::OpenGLInt const* locations) const;
    void shadingRateSampleOrderNV(boom::OpenGLEnum order) const;
    void sharpenTexFuncSGIS(boom::OpenGLEnum target, boom::OpenGLSizei n, boom::OpenGLFloat const* points) const;
    void signalSemaphoreEXT(boom::OpenGLUint semaphore, boom::OpenGLUint numBufferBarriers, boom::OpenGLUint const* buffers, boom::OpenGLUint numTextureBarriers, boom::OpenGLUint const* textures, boom::OpenGLEnum const* dstLayouts) const;
    void signalSemaphoreui64NVX(boom::OpenGLUint signalGpu, boom::OpenGLSizei fenceObjectCount, boom::OpenGLUint const* semaphoreArray, boom::OpenGLUInt64 const* fenceValueArray) const;
    void signalVkFenceNV(boom::OpenGLUInt64 vkFence) const;
    void signalVkSemaphoreNV(boom::OpenGLUInt64 vkSemaphore) const;
    void specializeShader(boom::OpenGLUint shader, boom::OpenGLChar const* pEntryPoint, boom::OpenGLUint numSpecializationConstants, boom::OpenGLUint const* pConstantIndex, boom::OpenGLUint const* pConstantValue) const;
    void specializeShaderARB(boom::OpenGLUint shader, boom::OpenGLChar const* pEntryPoint, boom::OpenGLUint numSpecializationConstants, boom::OpenGLUint const* pConstantIndex, boom::OpenGLUint const* pConstantValue) const;
    void spriteParameterfSGIX(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void spriteParameterfvSGIX(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void spriteParameteriSGIX(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void spriteParameterivSGIX(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void startInstrumentsSGIX() const;
    void startTilingQCOM(boom::OpenGLUint x, boom::OpenGLUint y, boom::OpenGLUint width, boom::OpenGLUint height, boom::OpenGLBitfield preserveMask) const;
    void stateCaptureNV(boom::OpenGLUint state, boom::OpenGLEnum mode) const;
    void stencilClearTagEXT(boom::OpenGLSizei stencilTagBits, boom::OpenGLUint stencilClearTag) const;
    void stencilFillPathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUint pathBase, boom::OpenGLEnum fillMode, boom::OpenGLUint mask, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void stencilFillPathNV(boom::OpenGLUint path, boom::OpenGLEnum fillMode, boom::OpenGLUint mask) const;
    void stencilFunc(boom::OpenGLEnum func, boom::OpenGLInt ref, boom::OpenGLUint mask) const;
    void stencilFuncSeparate(boom::OpenGLEnum face, boom::OpenGLEnum func, boom::OpenGLInt ref, boom::OpenGLUint mask) const;
    void stencilFuncSeparateATI(boom::OpenGLEnum frontfunc, boom::OpenGLEnum backfunc, boom::OpenGLInt ref, boom::OpenGLUint mask) const;
    void stencilMask(boom::OpenGLUint mask) const;
    void stencilMaskSeparate(boom::OpenGLEnum face, boom::OpenGLUint mask) const;
    void stencilOp(boom::OpenGLEnum fail, boom::OpenGLEnum zfail, boom::OpenGLEnum zpass) const;
    void stencilOpSeparate(boom::OpenGLEnum face, boom::OpenGLEnum sfail, boom::OpenGLEnum dpfail, boom::OpenGLEnum dppass) const;
    void stencilOpSeparateATI(boom::OpenGLEnum face, boom::OpenGLEnum sfail, boom::OpenGLEnum dpfail, boom::OpenGLEnum dppass) const;
    void stencilOpValueAMD(boom::OpenGLEnum face, boom::OpenGLUint value) const;
    void stencilStrokePathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUint pathBase, boom::OpenGLInt reference, boom::OpenGLUint mask, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void stencilStrokePathNV(boom::OpenGLUint path, boom::OpenGLInt reference, boom::OpenGLUint mask) const;
    void stencilThenCoverFillPathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUint pathBase, boom::OpenGLEnum fillMode, boom::OpenGLUint mask, boom::OpenGLEnum coverMode, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void stencilThenCoverFillPathNV(boom::OpenGLUint path, boom::OpenGLEnum fillMode, boom::OpenGLUint mask, boom::OpenGLEnum coverMode) const;
    void stencilThenCoverStrokePathInstancedNV(boom::OpenGLSizei numPaths, boom::OpenGLEnum pathNameType, void const* paths, boom::OpenGLUint pathBase, boom::OpenGLInt reference, boom::OpenGLUint mask, boom::OpenGLEnum coverMode, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void stencilThenCoverStrokePathNV(boom::OpenGLUint path, boom::OpenGLInt reference, boom::OpenGLUint mask, boom::OpenGLEnum coverMode) const;
    void stopInstrumentsSGIX(boom::OpenGLInt marker) const;
    void stringMarkerGREMEDY(boom::OpenGLSizei len, void const* string) const;
    void subpixelPrecisionBiasNV(boom::OpenGLUint xbits, boom::OpenGLUint ybits) const;
    void swizzleEXT(boom::OpenGLUint res, boom::OpenGLUint in, boom::OpenGLEnum outX, boom::OpenGLEnum outY, boom::OpenGLEnum outZ, boom::OpenGLEnum outW) const;
    void syncTextureINTEL(boom::OpenGLUint texture) const;
    void tagSampleBufferSGIX() const;
    void tangent3bEXT(boom::OpenGLByte tx, boom::OpenGLByte ty, boom::OpenGLByte tz) const;
    void tangent3bvEXT(boom::OpenGLByte const* v) const;
    void tangent3dEXT(boom::OpenGLDouble tx, boom::OpenGLDouble ty, boom::OpenGLDouble tz) const;
    void tangent3dvEXT(boom::OpenGLDouble const* v) const;
    void tangent3fEXT(boom::OpenGLFloat tx, boom::OpenGLFloat ty, boom::OpenGLFloat tz) const;
    void tangent3fvEXT(boom::OpenGLFloat const* v) const;
    void tangent3iEXT(boom::OpenGLInt tx, boom::OpenGLInt ty, boom::OpenGLInt tz) const;
    void tangent3ivEXT(boom::OpenGLInt const* v) const;
    void tangent3sEXT(boom::OpenGLShort tx, boom::OpenGLShort ty, boom::OpenGLShort tz) const;
    void tangent3svEXT(boom::OpenGLShort const* v) const;
    void tangentPointerEXT(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void tbufferMask3DFX(boom::OpenGLUint mask) const;
    void tessellationFactorAMD(boom::OpenGLFloat factor) const;
    void tessellationModeAMD(boom::OpenGLEnum mode) const;
    boom::OpenGLBoolean testFenceAPPLE(boom::OpenGLUint fence) const;
    boom::OpenGLBoolean testFenceNV(boom::OpenGLUint fence) const;
    boom::OpenGLBoolean testObjectAPPLE(boom::OpenGLEnum object, boom::OpenGLUint name) const;
    void texAttachMemoryNV(boom::OpenGLEnum target, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void texBuffer(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer) const;
    void texBufferARB(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer) const;
    void texBufferEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer) const;
    void texBufferOES(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer) const;
    void texBufferRange(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void texBufferRangeEXT(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void texBufferRangeOES(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void texBumpParameterfvATI(boom::OpenGLEnum pname, boom::OpenGLFloat const* param) const;
    void texBumpParameterivATI(boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void texCoord1bOES(boom::OpenGLByte s) const;
    void texCoord1bvOES(boom::OpenGLByte const* coords) const;
    void texCoord1d(boom::OpenGLDouble s) const;
    void texCoord1dv(boom::OpenGLDouble const* v) const;
    void texCoord1f(boom::OpenGLFloat s) const;
    void texCoord1fv(boom::OpenGLFloat const* v) const;
    void texCoord1hNV(boom::OpenGLHalfNV s) const;
    void texCoord1hvNV(boom::OpenGLHalfNV const* v) const;
    void texCoord1i(boom::OpenGLInt s) const;
    void texCoord1iv(boom::OpenGLInt const* v) const;
    void texCoord1s(boom::OpenGLShort s) const;
    void texCoord1sv(boom::OpenGLShort const* v) const;
    void texCoord1xOES(boom::OpenGLFixed s) const;
    void texCoord1xvOES(boom::OpenGLFixed const* coords) const;
    void texCoord2bOES(boom::OpenGLByte s, boom::OpenGLByte t) const;
    void texCoord2bvOES(boom::OpenGLByte const* coords) const;
    void texCoord2d(boom::OpenGLDouble s, boom::OpenGLDouble t) const;
    void texCoord2dv(boom::OpenGLDouble const* v) const;
    void texCoord2f(boom::OpenGLFloat s, boom::OpenGLFloat t) const;
    void texCoord2fColor3fVertex3fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void texCoord2fColor3fVertex3fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* v) const;
    void texCoord2fColor4fNormal3fVertex3fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat a, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void texCoord2fColor4fNormal3fVertex3fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void texCoord2fColor4ubVertex3fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLUbyte r, boom::OpenGLUbyte g, boom::OpenGLUbyte b, boom::OpenGLUbyte a, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void texCoord2fColor4ubVertex3fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLUbyte const* c, boom::OpenGLFloat const* v) const;
    void texCoord2fNormal3fVertex3fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void texCoord2fNormal3fVertex3fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void texCoord2fv(boom::OpenGLFloat const* v) const;
    void texCoord2fVertex3fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void texCoord2fVertex3fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* v) const;
    void texCoord2hNV(boom::OpenGLHalfNV s, boom::OpenGLHalfNV t) const;
    void texCoord2hvNV(boom::OpenGLHalfNV const* v) const;
    void texCoord2i(boom::OpenGLInt s, boom::OpenGLInt t) const;
    void texCoord2iv(boom::OpenGLInt const* v) const;
    void texCoord2s(boom::OpenGLShort s, boom::OpenGLShort t) const;
    void texCoord2sv(boom::OpenGLShort const* v) const;
    void texCoord2xOES(boom::OpenGLFixed s, boom::OpenGLFixed t) const;
    void texCoord2xvOES(boom::OpenGLFixed const* coords) const;
    void texCoord3bOES(boom::OpenGLByte s, boom::OpenGLByte t, boom::OpenGLByte r) const;
    void texCoord3bvOES(boom::OpenGLByte const* coords) const;
    void texCoord3d(boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r) const;
    void texCoord3dv(boom::OpenGLDouble const* v) const;
    void texCoord3f(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r) const;
    void texCoord3fv(boom::OpenGLFloat const* v) const;
    void texCoord3hNV(boom::OpenGLHalfNV s, boom::OpenGLHalfNV t, boom::OpenGLHalfNV r) const;
    void texCoord3hvNV(boom::OpenGLHalfNV const* v) const;
    void texCoord3i(boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r) const;
    void texCoord3iv(boom::OpenGLInt const* v) const;
    void texCoord3s(boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r) const;
    void texCoord3sv(boom::OpenGLShort const* v) const;
    void texCoord3xOES(boom::OpenGLFixed s, boom::OpenGLFixed t, boom::OpenGLFixed r) const;
    void texCoord3xvOES(boom::OpenGLFixed const* coords) const;
    void texCoord4bOES(boom::OpenGLByte s, boom::OpenGLByte t, boom::OpenGLByte r, boom::OpenGLByte q) const;
    void texCoord4bvOES(boom::OpenGLByte const* coords) const;
    void texCoord4d(boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r, boom::OpenGLDouble q) const;
    void texCoord4dv(boom::OpenGLDouble const* v) const;
    void texCoord4f(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat q) const;
    void texCoord4fColor4fNormal3fVertex4fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat p, boom::OpenGLFloat q, boom::OpenGLFloat r, boom::OpenGLFloat g, boom::OpenGLFloat b, boom::OpenGLFloat a, boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void texCoord4fColor4fNormal3fVertex4fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* c, boom::OpenGLFloat const* n, boom::OpenGLFloat const* v) const;
    void texCoord4fv(boom::OpenGLFloat const* v) const;
    void texCoord4fVertex4fSUN(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat p, boom::OpenGLFloat q, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void texCoord4fVertex4fvSUN(boom::OpenGLFloat const* tc, boom::OpenGLFloat const* v) const;
    void texCoord4hNV(boom::OpenGLHalfNV s, boom::OpenGLHalfNV t, boom::OpenGLHalfNV r, boom::OpenGLHalfNV q) const;
    void texCoord4hvNV(boom::OpenGLHalfNV const* v) const;
    void texCoord4i(boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r, boom::OpenGLInt q) const;
    void texCoord4iv(boom::OpenGLInt const* v) const;
    void texCoord4s(boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r, boom::OpenGLShort q) const;
    void texCoord4sv(boom::OpenGLShort const* v) const;
    void texCoord4xOES(boom::OpenGLFixed s, boom::OpenGLFixed t, boom::OpenGLFixed r, boom::OpenGLFixed q) const;
    void texCoord4xvOES(boom::OpenGLFixed const* coords) const;
    void texCoordFormatNV(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void texCoordP1ui(boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void texCoordP1uiv(boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void texCoordP2ui(boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void texCoordP2uiv(boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void texCoordP3ui(boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void texCoordP3uiv(boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void texCoordP4ui(boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void texCoordP4uiv(boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void texCoordPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void texCoordPointerEXT(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLSizei count, void const* pointer) const;
    void texCoordPointerListIBM(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void texCoordPointervINTEL(boom::OpenGLInt size, boom::OpenGLEnum type, void const** pointer) const;
    void texEnvf(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void texEnvfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void texEnvi(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void texEnviv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texEnvx(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texEnvxOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texEnvxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texEnvxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texEstimateMotionQCOM(boom::OpenGLUint ref, boom::OpenGLUint target, boom::OpenGLUint output) const;
    void texEstimateMotionRegionsQCOM(boom::OpenGLUint ref, boom::OpenGLUint target, boom::OpenGLUint output, boom::OpenGLUint mask) const;
    void texFilterFuncSGIS(boom::OpenGLEnum target, boom::OpenGLEnum filter, boom::OpenGLSizei n, boom::OpenGLFloat const* weights) const;
    void texGend(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble param) const;
    void texGendv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble const* params) const;
    void texGenf(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void texGenfOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void texGenfv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void texGenfvOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void texGeni(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void texGeniOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void texGeniv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texGenivOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texGenxOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texGenxvOES(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage2DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void texImage2DMultisampleCoverageNV(boom::OpenGLEnum target, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedSampleLocations) const;
    void texImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage3DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage3DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void texImage3DMultisampleCoverageNV(boom::OpenGLEnum target, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedSampleLocations) const;
    void texImage3DOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage4DSGIS(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLSizei size4d, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texPageCommitmentARB(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean commit) const;
    void texPageCommitmentEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean commit) const;
    void texPageCommitmentMemNV(boom::OpenGLEnum target, boom::OpenGLInt layer, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLUint memory, boom::OpenGLUInt64 offset, boom::OpenGLBoolean commit) const;
    void texParameterf(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void texParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void texParameteri(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void texParameterIiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texParameterIivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texParameterIivOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texParameterIuiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint const* params) const;
    void texParameterIuivEXT(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint const* params) const;
    void texParameterIuivOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint const* params) const;
    void texParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texParameterx(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texParameterxOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texParameterxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texParameterxvOES(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texRenderbufferNV(boom::OpenGLEnum target, boom::OpenGLUint renderbuffer) const;
    void texStorage1D(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width) const;
    void texStorage1DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width) const;
    void texStorage2D(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void texStorage2DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void texStorage2DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void texStorage3D(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void texStorage3DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void texStorage3DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void texStorage3DMultisampleOES(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void texStorageAttribs2DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt const* attrib_list) const;
    void texStorageAttribs3DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt const* attrib_list) const;
    void texStorageMem1DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void texStorageMem2DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void texStorageMem2DMultisampleEXT(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedSampleLocations, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void texStorageMem3DEXT(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void texStorageMem3DMultisampleEXT(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedSampleLocations, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void texStorageSparseAMD(boom::OpenGLEnum target, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLSizei layers, boom::OpenGLBitfield flags) const;
    void texSubImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage1DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage2DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage3DEXT(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage3DOES(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage4DSGIS(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt woffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLSizei size4d, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureAttachMemoryNV(boom::OpenGLUint texture, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void textureBarrier() const;
    void textureBarrierNV() const;
    void textureBuffer(boom::OpenGLUint texture, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer) const;
    void textureBufferEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer) const;
    void textureBufferRange(boom::OpenGLUint texture, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void textureBufferRangeEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void textureColorMaskSGIS(boom::OpenGLBoolean red, boom::OpenGLBoolean green, boom::OpenGLBoolean blue, boom::OpenGLBoolean alpha) const;
    void textureFoveationParametersQCOM(boom::OpenGLUint texture, boom::OpenGLUint layer, boom::OpenGLUint focalPoint, boom::OpenGLFloat focalX, boom::OpenGLFloat focalY, boom::OpenGLFloat gainX, boom::OpenGLFloat gainY, boom::OpenGLFloat foveaArea) const;
    void textureImage1DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureImage2DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureImage2DMultisampleCoverageNV(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedSampleLocations) const;
    void textureImage2DMultisampleNV(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedSampleLocations) const;
    void textureImage3DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureImage3DMultisampleCoverageNV(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLSizei coverageSamples, boom::OpenGLSizei colorSamples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedSampleLocations) const;
    void textureImage3DMultisampleNV(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLInt internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedSampleLocations) const;
    void textureLightEXT(boom::OpenGLEnum pname) const;
    void textureMaterialEXT(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void textureNormalEXT(boom::OpenGLEnum mode) const;
    void texturePageCommitmentEXT(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean commit) const;
    void texturePageCommitmentMemNV(boom::OpenGLUint texture, boom::OpenGLInt layer, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLUint memory, boom::OpenGLUInt64 offset, boom::OpenGLBoolean commit) const;
    void textureParameterf(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void textureParameterfEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void textureParameterfv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLFloat const* param) const;
    void textureParameterfvEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void textureParameteri(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void textureParameteriEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void textureParameterIiv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void textureParameterIivEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void textureParameterIuiv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLUint const* params) const;
    void textureParameterIuivEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint const* params) const;
    void textureParameteriv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void textureParameterivEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void textureRangeAPPLE(boom::OpenGLEnum target, boom::OpenGLSizei length, void const* pointer) const;
    void textureRenderbufferEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLUint renderbuffer) const;
    void textureStorage1D(boom::OpenGLUint texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width) const;
    void textureStorage1DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width) const;
    void textureStorage2D(boom::OpenGLUint texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void textureStorage2DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void textureStorage2DMultisample(boom::OpenGLUint texture, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void textureStorage2DMultisampleEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void textureStorage3D(boom::OpenGLUint texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void textureStorage3DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void textureStorage3DMultisample(boom::OpenGLUint texture, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void textureStorage3DMultisampleEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void textureStorageMem1DEXT(boom::OpenGLUint texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void textureStorageMem2DEXT(boom::OpenGLUint texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void textureStorageMem2DMultisampleEXT(boom::OpenGLUint texture, boom::OpenGLSizei samples, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedSampleLocations, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void textureStorageMem3DEXT(boom::OpenGLUint texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void textureStorageMem3DMultisampleEXT(boom::OpenGLUint texture, boom::OpenGLSizei samples, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedSampleLocations, boom::OpenGLUint memory, boom::OpenGLUInt64 offset) const;
    void textureStorageSparseAMD(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLEnum internalFormat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLSizei layers, boom::OpenGLBitfield flags) const;
    void textureSubImage1D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage1DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage2D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage2DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage3D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage3DEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureView(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLUint origtexture, boom::OpenGLEnum internalformat, boom::OpenGLUint minlevel, boom::OpenGLUint numlevels, boom::OpenGLUint minlayer, boom::OpenGLUint numlayers) const;
    void textureViewEXT(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLUint origtexture, boom::OpenGLEnum internalformat, boom::OpenGLUint minlevel, boom::OpenGLUint numlevels, boom::OpenGLUint minlayer, boom::OpenGLUint numlayers) const;
    void textureViewOES(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLUint origtexture, boom::OpenGLEnum internalformat, boom::OpenGLUint minlevel, boom::OpenGLUint numlevels, boom::OpenGLUint minlayer, boom::OpenGLUint numlayers) const;
    void trackMatrixNV(boom::OpenGLEnum target, boom::OpenGLUint address, boom::OpenGLEnum matrix, boom::OpenGLEnum transform) const;
    void transformFeedbackAttribsNV(boom::OpenGLSizei count, boom::OpenGLInt const* attribs, boom::OpenGLEnum bufferMode) const;
    void transformFeedbackBufferBase(boom::OpenGLUint xfb, boom::OpenGLUint index, boom::OpenGLUint buffer) const;
    void transformFeedbackBufferRange(boom::OpenGLUint xfb, boom::OpenGLUint index, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void transformFeedbackStreamAttribsNV(boom::OpenGLSizei count, boom::OpenGLInt const* attribs, boom::OpenGLSizei nbuffers, boom::OpenGLInt const* bufstreams, boom::OpenGLEnum bufferMode) const;
    void transformFeedbackVaryings(boom::OpenGLUint program, boom::OpenGLSizei count, boom::OpenGLChar const* const* varyings, boom::OpenGLEnum bufferMode) const;
    void transformFeedbackVaryingsEXT(boom::OpenGLUint program, boom::OpenGLSizei count, boom::OpenGLChar const* const* varyings, boom::OpenGLEnum bufferMode) const;
    void transformFeedbackVaryingsNV(boom::OpenGLUint program, boom::OpenGLSizei count, boom::OpenGLInt const* locations, boom::OpenGLEnum bufferMode) const;
    void transformPathNV(boom::OpenGLUint resultPath, boom::OpenGLUint srcPath, boom::OpenGLEnum transformType, boom::OpenGLFloat const* transformValues) const;
    void translated(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void translatef(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void translatex(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void translatexOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void uniform1d(boom::OpenGLInt location, boom::OpenGLDouble x) const;
    void uniform1dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform1f(boom::OpenGLInt location, boom::OpenGLFloat v0) const;
    void uniform1fARB(boom::OpenGLInt location, boom::OpenGLFloat v0) const;
    void uniform1fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform1fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform1i(boom::OpenGLInt location, boom::OpenGLInt v0) const;
    void uniform1i64ARB(boom::OpenGLInt location, boom::OpenGLInt64 x) const;
    void uniform1i64NV(boom::OpenGLInt location, boom::OpenGLInt64EXT x) const;
    void uniform1i64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void uniform1i64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void uniform1iARB(boom::OpenGLInt location, boom::OpenGLInt v0) const;
    void uniform1iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform1ivARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform1ui(boom::OpenGLInt location, boom::OpenGLUint v0) const;
    void uniform1ui64ARB(boom::OpenGLInt location, boom::OpenGLUInt64 x) const;
    void uniform1ui64NV(boom::OpenGLInt location, boom::OpenGLUInt64EXT x) const;
    void uniform1ui64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniform1ui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void uniform1uiEXT(boom::OpenGLInt location, boom::OpenGLUint v0) const;
    void uniform1uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniform1uivEXT(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniform2d(boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void uniform2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform2f(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1) const;
    void uniform2fARB(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1) const;
    void uniform2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform2fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform2i(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1) const;
    void uniform2i64ARB(boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y) const;
    void uniform2i64NV(boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y) const;
    void uniform2i64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void uniform2i64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void uniform2iARB(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1) const;
    void uniform2iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform2ivARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform2ui(boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1) const;
    void uniform2ui64ARB(boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y) const;
    void uniform2ui64NV(boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y) const;
    void uniform2ui64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniform2ui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void uniform2uiEXT(boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1) const;
    void uniform2uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniform2uivEXT(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniform3d(boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void uniform3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform3f(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void uniform3fARB(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void uniform3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform3fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform3i(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2) const;
    void uniform3i64ARB(boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y, boom::OpenGLInt64 z) const;
    void uniform3i64NV(boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z) const;
    void uniform3i64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void uniform3i64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void uniform3iARB(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2) const;
    void uniform3iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform3ivARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform3ui(boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2) const;
    void uniform3ui64ARB(boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y, boom::OpenGLUInt64 z) const;
    void uniform3ui64NV(boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z) const;
    void uniform3ui64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniform3ui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void uniform3uiEXT(boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2) const;
    void uniform3uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniform3uivEXT(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniform4d(boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void uniform4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform4f(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLFloat v3) const;
    void uniform4fARB(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLFloat v3) const;
    void uniform4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform4fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform4i(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2, boom::OpenGLInt v3) const;
    void uniform4i64ARB(boom::OpenGLInt location, boom::OpenGLInt64 x, boom::OpenGLInt64 y, boom::OpenGLInt64 z, boom::OpenGLInt64 w) const;
    void uniform4i64NV(boom::OpenGLInt location, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z, boom::OpenGLInt64EXT w) const;
    void uniform4i64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64 const* value) const;
    void uniform4i64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt64EXT const* value) const;
    void uniform4iARB(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2, boom::OpenGLInt v3) const;
    void uniform4iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform4ivARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform4ui(boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2, boom::OpenGLUint v3) const;
    void uniform4ui64ARB(boom::OpenGLInt location, boom::OpenGLUInt64 x, boom::OpenGLUInt64 y, boom::OpenGLUInt64 z, boom::OpenGLUInt64 w) const;
    void uniform4ui64NV(boom::OpenGLInt location, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z, boom::OpenGLUInt64EXT w) const;
    void uniform4ui64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniform4ui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void uniform4uiEXT(boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2, boom::OpenGLUint v3) const;
    void uniform4uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniform4uivEXT(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniformBlockBinding(boom::OpenGLUint program, boom::OpenGLUint uniformBlockIndex, boom::OpenGLUint uniformBlockBinding) const;
    void uniformBufferEXT(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint buffer) const;
    void uniformHandleui64ARB(boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void uniformHandleui64IMG(boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void uniformHandleui64NV(boom::OpenGLInt location, boom::OpenGLUInt64 value) const;
    void uniformHandleui64vARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniformHandleui64vIMG(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniformHandleui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64 const* value) const;
    void uniformMatrix2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2x3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix2x3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2x3fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2x4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix2x4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2x4fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3x2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix3x2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3x2fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3x4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix3x4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3x4fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4fvARB(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4x2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix4x2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4x2fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4x3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix4x3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4x3fvNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformSubroutinesuiv(boom::OpenGLEnum shadertype, boom::OpenGLSizei count, boom::OpenGLUint const* indices) const;
    void uniformui64NV(boom::OpenGLInt location, boom::OpenGLUInt64EXT value) const;
    void uniformui64vNV(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUInt64EXT const* value) const;
    void unlockArraysEXT() const;
    boom::OpenGLBoolean unmapBuffer(boom::OpenGLEnum target) const;
    boom::OpenGLBoolean unmapBufferARB(boom::OpenGLEnum target) const;
    boom::OpenGLBoolean unmapBufferOES(boom::OpenGLEnum target) const;
    boom::OpenGLBoolean unmapNamedBuffer(boom::OpenGLUint buffer) const;
    boom::OpenGLBoolean unmapNamedBufferEXT(boom::OpenGLUint buffer) const;
    void unmapObjectBufferATI(boom::OpenGLUint buffer) const;
    void unmapTexture2DINTEL(boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void updateObjectBufferATI(boom::OpenGLUint buffer, boom::OpenGLUint offset, boom::OpenGLSizei size, void const* pointer, boom::OpenGLEnum preserve) const;
    void uploadGpuMaskNVX(boom::OpenGLBitfield mask) const;
    void useProgram(boom::OpenGLUint program) const;
    void useProgramObjectARB(boom::OpenGLHandleARB programObj) const;
    void useProgramStages(boom::OpenGLUint pipeline, boom::OpenGLBitfield stages, boom::OpenGLUint program) const;
    void useProgramStagesEXT(boom::OpenGLUint pipeline, boom::OpenGLBitfield stages, boom::OpenGLUint program) const;
    void useShaderProgramEXT(boom::OpenGLEnum type, boom::OpenGLUint program) const;
    void validateProgram(boom::OpenGLUint program) const;
    void validateProgramARB(boom::OpenGLHandleARB programObj) const;
    void validateProgramPipeline(boom::OpenGLUint pipeline) const;
    void validateProgramPipelineEXT(boom::OpenGLUint pipeline) const;
    void variantArrayObjectATI(boom::OpenGLUint id, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLUint buffer, boom::OpenGLUint offset) const;
    void variantbvEXT(boom::OpenGLUint id, boom::OpenGLByte const* addr) const;
    void variantdvEXT(boom::OpenGLUint id, boom::OpenGLDouble const* addr) const;
    void variantfvEXT(boom::OpenGLUint id, boom::OpenGLFloat const* addr) const;
    void variantivEXT(boom::OpenGLUint id, boom::OpenGLInt const* addr) const;
    void variantPointerEXT(boom::OpenGLUint id, boom::OpenGLEnum type, boom::OpenGLUint stride, void const* addr) const;
    void variantsvEXT(boom::OpenGLUint id, boom::OpenGLShort const* addr) const;
    void variantubvEXT(boom::OpenGLUint id, boom::OpenGLUbyte const* addr) const;
    void variantuivEXT(boom::OpenGLUint id, boom::OpenGLUint const* addr) const;
    void variantusvEXT(boom::OpenGLUint id, boom::OpenGLUShort const* addr) const;
    void vDPAUFiniNV() const;
    void vDPAUGetSurfaceivNV(boom::OpenGLVDPAUSurfaceNV surface, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLInt* values) const;
    void vDPAUInitNV(void const* vdpDevice, void const* getProcAddress) const;
    boom::OpenGLBoolean vDPAUIsSurfaceNV(boom::OpenGLVDPAUSurfaceNV surface) const;
    void vDPAUMapSurfacesNV(boom::OpenGLSizei numSurfaces, boom::OpenGLVDPAUSurfaceNV const* surfaces) const;
    boom::OpenGLVDPAUSurfaceNV vDPAURegisterOutputSurfaceNV(void const* vdpSurface, boom::OpenGLEnum target, boom::OpenGLSizei numTextureNames, boom::OpenGLUint const* textureNames) const;
    boom::OpenGLVDPAUSurfaceNV vDPAURegisterVideoSurfaceNV(void const* vdpSurface, boom::OpenGLEnum target, boom::OpenGLSizei numTextureNames, boom::OpenGLUint const* textureNames) const;
    boom::OpenGLVDPAUSurfaceNV vDPAURegisterVideoSurfaceWithPictureStructureNV(void const* vdpSurface, boom::OpenGLEnum target, boom::OpenGLSizei numTextureNames, boom::OpenGLUint const* textureNames, boom::OpenGLBoolean isFrameStructure) const;
    void vDPAUSurfaceAccessNV(boom::OpenGLVDPAUSurfaceNV surface, boom::OpenGLEnum access) const;
    void vDPAUUnmapSurfacesNV(boom::OpenGLSizei numSurface, boom::OpenGLVDPAUSurfaceNV const* surfaces) const;
    void vDPAUUnregisterSurfaceNV(boom::OpenGLVDPAUSurfaceNV surface) const;
    void vertex2bOES(boom::OpenGLByte x, boom::OpenGLByte y) const;
    void vertex2bvOES(boom::OpenGLByte const* coords) const;
    void vertex2d(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertex2dv(boom::OpenGLDouble const* v) const;
    void vertex2f(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertex2fv(boom::OpenGLFloat const* v) const;
    void vertex2hNV(boom::OpenGLHalfNV x, boom::OpenGLHalfNV y) const;
    void vertex2hvNV(boom::OpenGLHalfNV const* v) const;
    void vertex2i(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void vertex2iv(boom::OpenGLInt const* v) const;
    void vertex2s(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertex2sv(boom::OpenGLShort const* v) const;
    void vertex2xOES(boom::OpenGLFixed x) const;
    void vertex2xvOES(boom::OpenGLFixed const* coords) const;
    void vertex3bOES(boom::OpenGLByte x, boom::OpenGLByte y, boom::OpenGLByte z) const;
    void vertex3bvOES(boom::OpenGLByte const* coords) const;
    void vertex3d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertex3dv(boom::OpenGLDouble const* v) const;
    void vertex3f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertex3fv(boom::OpenGLFloat const* v) const;
    void vertex3hNV(boom::OpenGLHalfNV x, boom::OpenGLHalfNV y, boom::OpenGLHalfNV z) const;
    void vertex3hvNV(boom::OpenGLHalfNV const* v) const;
    void vertex3i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void vertex3iv(boom::OpenGLInt const* v) const;
    void vertex3s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertex3sv(boom::OpenGLShort const* v) const;
    void vertex3xOES(boom::OpenGLFixed x, boom::OpenGLFixed y) const;
    void vertex3xvOES(boom::OpenGLFixed const* coords) const;
    void vertex4bOES(boom::OpenGLByte x, boom::OpenGLByte y, boom::OpenGLByte z, boom::OpenGLByte w) const;
    void vertex4bvOES(boom::OpenGLByte const* coords) const;
    void vertex4d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertex4dv(boom::OpenGLDouble const* v) const;
    void vertex4f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertex4fv(boom::OpenGLFloat const* v) const;
    void vertex4hNV(boom::OpenGLHalfNV x, boom::OpenGLHalfNV y, boom::OpenGLHalfNV z, boom::OpenGLHalfNV w) const;
    void vertex4hvNV(boom::OpenGLHalfNV const* v) const;
    void vertex4i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void vertex4iv(boom::OpenGLInt const* v) const;
    void vertex4s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertex4sv(boom::OpenGLShort const* v) const;
    void vertex4xOES(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void vertex4xvOES(boom::OpenGLFixed const* coords) const;
    void vertexArrayAttribBinding(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLUint bindingindex) const;
    void vertexArrayAttribFormat(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint relativeoffset) const;
    void vertexArrayAttribIFormat(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUint relativeoffset) const;
    void vertexArrayAttribLFormat(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUint relativeoffset) const;
    void vertexArrayBindingDivisor(boom::OpenGLUint vaobj, boom::OpenGLUint bindingindex, boom::OpenGLUint divisor) const;
    void vertexArrayBindVertexBufferEXT(boom::OpenGLUint vaobj, boom::OpenGLUint bindingindex, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizei stride) const;
    void vertexArrayColorOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayEdgeFlagOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayElementBuffer(boom::OpenGLUint vaobj, boom::OpenGLUint buffer) const;
    void vertexArrayFogCoordOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayIndexOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayMultiTexCoordOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLEnum texunit, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayNormalOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayParameteriAPPLE(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void vertexArrayRangeAPPLE(boom::OpenGLSizei length, void* pointer) const;
    void vertexArrayRangeNV(boom::OpenGLSizei length, void const* pointer) const;
    void vertexArraySecondaryColorOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayTexCoordOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayVertexAttribBindingEXT(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLUint bindingindex) const;
    void vertexArrayVertexAttribDivisorEXT(boom::OpenGLUint vaobj, boom::OpenGLUint index, boom::OpenGLUint divisor) const;
    void vertexArrayVertexAttribFormatEXT(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint relativeoffset) const;
    void vertexArrayVertexAttribIFormatEXT(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUint relativeoffset) const;
    void vertexArrayVertexAttribIOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayVertexAttribLFormatEXT(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUint relativeoffset) const;
    void vertexArrayVertexAttribLOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayVertexAttribOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexArrayVertexBindingDivisorEXT(boom::OpenGLUint vaobj, boom::OpenGLUint bindingindex, boom::OpenGLUint divisor) const;
    void vertexArrayVertexBuffer(boom::OpenGLUint vaobj, boom::OpenGLUint bindingindex, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizei stride) const;
    void vertexArrayVertexBuffers(boom::OpenGLUint vaobj, boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* buffers, boom::OpenGLIntptr const* offsets, boom::OpenGLSizei const* strides) const;
    void vertexArrayVertexOffsetEXT(boom::OpenGLUint vaobj, boom::OpenGLUint buffer, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLIntptr offset) const;
    void vertexAttrib1d(boom::OpenGLUint index, boom::OpenGLDouble x) const;
    void vertexAttrib1dARB(boom::OpenGLUint index, boom::OpenGLDouble x) const;
    void vertexAttrib1dNV(boom::OpenGLUint index, boom::OpenGLDouble x) const;
    void vertexAttrib1dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib1dvARB(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib1dvNV(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib1f(boom::OpenGLUint index, boom::OpenGLFloat x) const;
    void vertexAttrib1fARB(boom::OpenGLUint index, boom::OpenGLFloat x) const;
    void vertexAttrib1fNV(boom::OpenGLUint index, boom::OpenGLFloat x) const;
    void vertexAttrib1fv(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib1fvARB(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib1fvNV(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib1hNV(boom::OpenGLUint index, boom::OpenGLHalfNV x) const;
    void vertexAttrib1hvNV(boom::OpenGLUint index, boom::OpenGLHalfNV const* v) const;
    void vertexAttrib1s(boom::OpenGLUint index, boom::OpenGLShort x) const;
    void vertexAttrib1sARB(boom::OpenGLUint index, boom::OpenGLShort x) const;
    void vertexAttrib1sNV(boom::OpenGLUint index, boom::OpenGLShort x) const;
    void vertexAttrib1sv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib1svARB(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib1svNV(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib2d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttrib2dARB(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttrib2dNV(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttrib2dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib2dvARB(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib2dvNV(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib2f(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertexAttrib2fARB(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertexAttrib2fNV(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertexAttrib2fv(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib2fvARB(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib2fvNV(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib2hNV(boom::OpenGLUint index, boom::OpenGLHalfNV x, boom::OpenGLHalfNV y) const;
    void vertexAttrib2hvNV(boom::OpenGLUint index, boom::OpenGLHalfNV const* v) const;
    void vertexAttrib2s(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertexAttrib2sARB(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertexAttrib2sNV(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertexAttrib2sv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib2svARB(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib2svNV(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib3d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttrib3dARB(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttrib3dNV(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttrib3dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib3dvARB(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib3dvNV(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib3f(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertexAttrib3fARB(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertexAttrib3fNV(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertexAttrib3fv(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib3fvARB(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib3fvNV(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib3hNV(boom::OpenGLUint index, boom::OpenGLHalfNV x, boom::OpenGLHalfNV y, boom::OpenGLHalfNV z) const;
    void vertexAttrib3hvNV(boom::OpenGLUint index, boom::OpenGLHalfNV const* v) const;
    void vertexAttrib3s(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertexAttrib3sARB(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertexAttrib3sNV(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertexAttrib3sv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib3svARB(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib3svNV(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib4bv(boom::OpenGLUint index, boom::OpenGLByte const* v) const;
    void vertexAttrib4bvARB(boom::OpenGLUint index, boom::OpenGLByte const* v) const;
    void vertexAttrib4d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttrib4dARB(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttrib4dNV(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttrib4dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib4dvARB(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib4dvNV(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib4f(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertexAttrib4fARB(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertexAttrib4fNV(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertexAttrib4fv(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib4fvARB(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib4fvNV(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib4hNV(boom::OpenGLUint index, boom::OpenGLHalfNV x, boom::OpenGLHalfNV y, boom::OpenGLHalfNV z, boom::OpenGLHalfNV w) const;
    void vertexAttrib4hvNV(boom::OpenGLUint index, boom::OpenGLHalfNV const* v) const;
    void vertexAttrib4iv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttrib4ivARB(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttrib4Nbv(boom::OpenGLUint index, boom::OpenGLByte const* v) const;
    void vertexAttrib4NbvARB(boom::OpenGLUint index, boom::OpenGLByte const* v) const;
    void vertexAttrib4Niv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttrib4NivARB(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttrib4Nsv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib4NsvARB(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib4Nub(boom::OpenGLUint index, boom::OpenGLUbyte x, boom::OpenGLUbyte y, boom::OpenGLUbyte z, boom::OpenGLUbyte w) const;
    void vertexAttrib4NubARB(boom::OpenGLUint index, boom::OpenGLUbyte x, boom::OpenGLUbyte y, boom::OpenGLUbyte z, boom::OpenGLUbyte w) const;
    void vertexAttrib4Nubv(boom::OpenGLUint index, boom::OpenGLUbyte const* v) const;
    void vertexAttrib4NubvARB(boom::OpenGLUint index, boom::OpenGLUbyte const* v) const;
    void vertexAttrib4Nuiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttrib4NuivARB(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttrib4Nusv(boom::OpenGLUint index, boom::OpenGLUShort const* v) const;
    void vertexAttrib4NusvARB(boom::OpenGLUint index, boom::OpenGLUShort const* v) const;
    void vertexAttrib4s(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertexAttrib4sARB(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertexAttrib4sNV(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertexAttrib4sv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib4svARB(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib4svNV(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib4ubNV(boom::OpenGLUint index, boom::OpenGLUbyte x, boom::OpenGLUbyte y, boom::OpenGLUbyte z, boom::OpenGLUbyte w) const;
    void vertexAttrib4ubv(boom::OpenGLUint index, boom::OpenGLUbyte const* v) const;
    void vertexAttrib4ubvARB(boom::OpenGLUint index, boom::OpenGLUbyte const* v) const;
    void vertexAttrib4ubvNV(boom::OpenGLUint index, boom::OpenGLUbyte const* v) const;
    void vertexAttrib4uiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttrib4uivARB(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttrib4usv(boom::OpenGLUint index, boom::OpenGLUShort const* v) const;
    void vertexAttrib4usvARB(boom::OpenGLUint index, boom::OpenGLUShort const* v) const;
    void vertexAttribArrayObjectATI(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLSizei stride, boom::OpenGLUint buffer, boom::OpenGLUint offset) const;
    void vertexAttribBinding(boom::OpenGLUint attribindex, boom::OpenGLUint bindingindex) const;
    void vertexAttribDivisor(boom::OpenGLUint index, boom::OpenGLUint divisor) const;
    void vertexAttribDivisorANGLE(boom::OpenGLUint index, boom::OpenGLUint divisor) const;
    void vertexAttribDivisorARB(boom::OpenGLUint index, boom::OpenGLUint divisor) const;
    void vertexAttribDivisorEXT(boom::OpenGLUint index, boom::OpenGLUint divisor) const;
    void vertexAttribDivisorNV(boom::OpenGLUint index, boom::OpenGLUint divisor) const;
    void vertexAttribFormat(boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint relativeoffset) const;
    void vertexAttribFormatNV(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLSizei stride) const;
    void vertexAttribI1i(boom::OpenGLUint index, boom::OpenGLInt x) const;
    void vertexAttribI1iEXT(boom::OpenGLUint index, boom::OpenGLInt x) const;
    void vertexAttribI1iv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI1ivEXT(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI1ui(boom::OpenGLUint index, boom::OpenGLUint x) const;
    void vertexAttribI1uiEXT(boom::OpenGLUint index, boom::OpenGLUint x) const;
    void vertexAttribI1uiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI1uivEXT(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI2i(boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y) const;
    void vertexAttribI2iEXT(boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y) const;
    void vertexAttribI2iv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI2ivEXT(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI2ui(boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y) const;
    void vertexAttribI2uiEXT(boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y) const;
    void vertexAttribI2uiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI2uivEXT(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI3i(boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void vertexAttribI3iEXT(boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void vertexAttribI3iv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI3ivEXT(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI3ui(boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y, boom::OpenGLUint z) const;
    void vertexAttribI3uiEXT(boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y, boom::OpenGLUint z) const;
    void vertexAttribI3uiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI3uivEXT(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI4bv(boom::OpenGLUint index, boom::OpenGLByte const* v) const;
    void vertexAttribI4bvEXT(boom::OpenGLUint index, boom::OpenGLByte const* v) const;
    void vertexAttribI4i(boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void vertexAttribI4iEXT(boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void vertexAttribI4iv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI4ivEXT(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI4sv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttribI4svEXT(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttribI4ubv(boom::OpenGLUint index, boom::OpenGLUbyte const* v) const;
    void vertexAttribI4ubvEXT(boom::OpenGLUint index, boom::OpenGLUbyte const* v) const;
    void vertexAttribI4ui(boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y, boom::OpenGLUint z, boom::OpenGLUint w) const;
    void vertexAttribI4uiEXT(boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y, boom::OpenGLUint z, boom::OpenGLUint w) const;
    void vertexAttribI4uiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI4uivEXT(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI4usv(boom::OpenGLUint index, boom::OpenGLUShort const* v) const;
    void vertexAttribI4usvEXT(boom::OpenGLUint index, boom::OpenGLUShort const* v) const;
    void vertexAttribIFormat(boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUint relativeoffset) const;
    void vertexAttribIFormatNV(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void vertexAttribIPointer(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribIPointerEXT(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribL1d(boom::OpenGLUint index, boom::OpenGLDouble x) const;
    void vertexAttribL1dEXT(boom::OpenGLUint index, boom::OpenGLDouble x) const;
    void vertexAttribL1dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribL1dvEXT(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribL1i64NV(boom::OpenGLUint index, boom::OpenGLInt64EXT x) const;
    void vertexAttribL1i64vNV(boom::OpenGLUint index, boom::OpenGLInt64EXT const* v) const;
    void vertexAttribL1ui64ARB(boom::OpenGLUint index, boom::OpenGLUInt64EXT x) const;
    void vertexAttribL1ui64NV(boom::OpenGLUint index, boom::OpenGLUInt64EXT x) const;
    void vertexAttribL1ui64vARB(boom::OpenGLUint index, boom::OpenGLUInt64EXT const* v) const;
    void vertexAttribL1ui64vNV(boom::OpenGLUint index, boom::OpenGLUInt64EXT const* v) const;
    void vertexAttribL2d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttribL2dEXT(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttribL2dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribL2dvEXT(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribL2i64NV(boom::OpenGLUint index, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y) const;
    void vertexAttribL2i64vNV(boom::OpenGLUint index, boom::OpenGLInt64EXT const* v) const;
    void vertexAttribL2ui64NV(boom::OpenGLUint index, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y) const;
    void vertexAttribL2ui64vNV(boom::OpenGLUint index, boom::OpenGLUInt64EXT const* v) const;
    void vertexAttribL3d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttribL3dEXT(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttribL3dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribL3dvEXT(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribL3i64NV(boom::OpenGLUint index, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z) const;
    void vertexAttribL3i64vNV(boom::OpenGLUint index, boom::OpenGLInt64EXT const* v) const;
    void vertexAttribL3ui64NV(boom::OpenGLUint index, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z) const;
    void vertexAttribL3ui64vNV(boom::OpenGLUint index, boom::OpenGLUInt64EXT const* v) const;
    void vertexAttribL4d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttribL4dEXT(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttribL4dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribL4dvEXT(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribL4i64NV(boom::OpenGLUint index, boom::OpenGLInt64EXT x, boom::OpenGLInt64EXT y, boom::OpenGLInt64EXT z, boom::OpenGLInt64EXT w) const;
    void vertexAttribL4i64vNV(boom::OpenGLUint index, boom::OpenGLInt64EXT const* v) const;
    void vertexAttribL4ui64NV(boom::OpenGLUint index, boom::OpenGLUInt64EXT x, boom::OpenGLUInt64EXT y, boom::OpenGLUInt64EXT z, boom::OpenGLUInt64EXT w) const;
    void vertexAttribL4ui64vNV(boom::OpenGLUint index, boom::OpenGLUInt64EXT const* v) const;
    void vertexAttribLFormat(boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUint relativeoffset) const;
    void vertexAttribLFormatNV(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void vertexAttribLPointer(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribLPointerEXT(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribP1ui(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint value) const;
    void vertexAttribP1uiv(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint const* value) const;
    void vertexAttribP2ui(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint value) const;
    void vertexAttribP2uiv(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint const* value) const;
    void vertexAttribP3ui(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint value) const;
    void vertexAttribP3uiv(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint const* value) const;
    void vertexAttribP4ui(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint value) const;
    void vertexAttribP4uiv(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint const* value) const;
    void vertexAttribParameteriAMD(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void vertexAttribPointer(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribPointerARB(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribPointerNV(boom::OpenGLUint index, boom::OpenGLInt fsize, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribs1dvNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void vertexAttribs1fvNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void vertexAttribs1hvNV(boom::OpenGLUint index, boom::OpenGLSizei n, boom::OpenGLHalfNV const* v) const;
    void vertexAttribs1svNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLShort const* v) const;
    void vertexAttribs2dvNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void vertexAttribs2fvNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void vertexAttribs2hvNV(boom::OpenGLUint index, boom::OpenGLSizei n, boom::OpenGLHalfNV const* v) const;
    void vertexAttribs2svNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLShort const* v) const;
    void vertexAttribs3dvNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void vertexAttribs3fvNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void vertexAttribs3hvNV(boom::OpenGLUint index, boom::OpenGLSizei n, boom::OpenGLHalfNV const* v) const;
    void vertexAttribs3svNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLShort const* v) const;
    void vertexAttribs4dvNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void vertexAttribs4fvNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void vertexAttribs4hvNV(boom::OpenGLUint index, boom::OpenGLSizei n, boom::OpenGLHalfNV const* v) const;
    void vertexAttribs4svNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLShort const* v) const;
    void vertexAttribs4ubvNV(boom::OpenGLUint index, boom::OpenGLSizei count, boom::OpenGLUbyte const* v) const;
    void vertexBindingDivisor(boom::OpenGLUint bindingindex, boom::OpenGLUint divisor) const;
    void vertexBlendARB(boom::OpenGLInt count) const;
    void vertexBlendEnvfATI(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void vertexBlendEnviATI(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void vertexFormatNV(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride) const;
    void vertexP2ui(boom::OpenGLEnum type, boom::OpenGLUint value) const;
    void vertexP2uiv(boom::OpenGLEnum type, boom::OpenGLUint const* value) const;
    void vertexP3ui(boom::OpenGLEnum type, boom::OpenGLUint value) const;
    void vertexP3uiv(boom::OpenGLEnum type, boom::OpenGLUint const* value) const;
    void vertexP4ui(boom::OpenGLEnum type, boom::OpenGLUint value) const;
    void vertexP4uiv(boom::OpenGLEnum type, boom::OpenGLUint const* value) const;
    void vertexPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexPointerEXT(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, boom::OpenGLSizei count, void const* pointer) const;
    void vertexPointerListIBM(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLInt stride, void const** pointer, boom::OpenGLInt ptrstride) const;
    void vertexPointervINTEL(boom::OpenGLInt size, boom::OpenGLEnum type, void const** pointer) const;
    void vertexStream1dATI(boom::OpenGLEnum stream, boom::OpenGLDouble x) const;
    void vertexStream1dvATI(boom::OpenGLEnum stream, boom::OpenGLDouble const* coords) const;
    void vertexStream1fATI(boom::OpenGLEnum stream, boom::OpenGLFloat x) const;
    void vertexStream1fvATI(boom::OpenGLEnum stream, boom::OpenGLFloat const* coords) const;
    void vertexStream1iATI(boom::OpenGLEnum stream, boom::OpenGLInt x) const;
    void vertexStream1ivATI(boom::OpenGLEnum stream, boom::OpenGLInt const* coords) const;
    void vertexStream1sATI(boom::OpenGLEnum stream, boom::OpenGLShort x) const;
    void vertexStream1svATI(boom::OpenGLEnum stream, boom::OpenGLShort const* coords) const;
    void vertexStream2dATI(boom::OpenGLEnum stream, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexStream2dvATI(boom::OpenGLEnum stream, boom::OpenGLDouble const* coords) const;
    void vertexStream2fATI(boom::OpenGLEnum stream, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertexStream2fvATI(boom::OpenGLEnum stream, boom::OpenGLFloat const* coords) const;
    void vertexStream2iATI(boom::OpenGLEnum stream, boom::OpenGLInt x, boom::OpenGLInt y) const;
    void vertexStream2ivATI(boom::OpenGLEnum stream, boom::OpenGLInt const* coords) const;
    void vertexStream2sATI(boom::OpenGLEnum stream, boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertexStream2svATI(boom::OpenGLEnum stream, boom::OpenGLShort const* coords) const;
    void vertexStream3dATI(boom::OpenGLEnum stream, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexStream3dvATI(boom::OpenGLEnum stream, boom::OpenGLDouble const* coords) const;
    void vertexStream3fATI(boom::OpenGLEnum stream, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertexStream3fvATI(boom::OpenGLEnum stream, boom::OpenGLFloat const* coords) const;
    void vertexStream3iATI(boom::OpenGLEnum stream, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void vertexStream3ivATI(boom::OpenGLEnum stream, boom::OpenGLInt const* coords) const;
    void vertexStream3sATI(boom::OpenGLEnum stream, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertexStream3svATI(boom::OpenGLEnum stream, boom::OpenGLShort const* coords) const;
    void vertexStream4dATI(boom::OpenGLEnum stream, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexStream4dvATI(boom::OpenGLEnum stream, boom::OpenGLDouble const* coords) const;
    void vertexStream4fATI(boom::OpenGLEnum stream, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertexStream4fvATI(boom::OpenGLEnum stream, boom::OpenGLFloat const* coords) const;
    void vertexStream4iATI(boom::OpenGLEnum stream, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void vertexStream4ivATI(boom::OpenGLEnum stream, boom::OpenGLInt const* coords) const;
    void vertexStream4sATI(boom::OpenGLEnum stream, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertexStream4svATI(boom::OpenGLEnum stream, boom::OpenGLShort const* coords) const;
    void vertexWeightfEXT(boom::OpenGLFloat weight) const;
    void vertexWeightfvEXT(boom::OpenGLFloat const* weight) const;
    void vertexWeighthNV(boom::OpenGLHalfNV weight) const;
    void vertexWeighthvNV(boom::OpenGLHalfNV const* weight) const;
    void vertexWeightPointerEXT(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    boom::OpenGLEnum videoCaptureNV(boom::OpenGLUint video_capture_slot, boom::OpenGLUint* sequence_num, boom::OpenGLUInt64EXT* capture_time) const;
    void videoCaptureStreamParameterdvNV(boom::OpenGLUint video_capture_slot, boom::OpenGLUint stream, boom::OpenGLEnum pname, boom::OpenGLDouble const* params) const;
    void videoCaptureStreamParameterfvNV(boom::OpenGLUint video_capture_slot, boom::OpenGLUint stream, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void videoCaptureStreamParameterivNV(boom::OpenGLUint video_capture_slot, boom::OpenGLUint stream, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void viewport(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void viewportArrayv(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void viewportArrayvNV(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void viewportArrayvOES(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void viewportIndexedf(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat w, boom::OpenGLFloat h) const;
    void viewportIndexedfNV(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat w, boom::OpenGLFloat h) const;
    void viewportIndexedfOES(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat w, boom::OpenGLFloat h) const;
    void viewportIndexedfv(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void viewportIndexedfvNV(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void viewportIndexedfvOES(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void viewportPositionWScaleNV(boom::OpenGLUint index, boom::OpenGLFloat xcoeff, boom::OpenGLFloat ycoeff) const;
    void viewportSwizzleNV(boom::OpenGLUint index, boom::OpenGLEnum swizzlex, boom::OpenGLEnum swizzley, boom::OpenGLEnum swizzlez, boom::OpenGLEnum swizzlew) const;
    void waitSemaphoreEXT(boom::OpenGLUint semaphore, boom::OpenGLUint numBufferBarriers, boom::OpenGLUint const* buffers, boom::OpenGLUint numTextureBarriers, boom::OpenGLUint const* textures, boom::OpenGLEnum const* srcLayouts) const;
    void waitSemaphoreui64NVX(boom::OpenGLUint waitGpu, boom::OpenGLSizei fenceObjectCount, boom::OpenGLUint const* semaphoreArray, boom::OpenGLUInt64 const* fenceValueArray) const;
    void waitSync(boom::OpenGLSync sync, boom::OpenGLBitfield flags, boom::OpenGLUInt64 timeout) const;
    void waitSyncAPPLE(boom::OpenGLSync sync, boom::OpenGLBitfield flags, boom::OpenGLUInt64 timeout) const;
    void waitVkSemaphoreNV(boom::OpenGLUInt64 vkSemaphore) const;
    void weightbvARB(boom::OpenGLInt size, boom::OpenGLByte const* weights) const;
    void weightdvARB(boom::OpenGLInt size, boom::OpenGLDouble const* weights) const;
    void weightfvARB(boom::OpenGLInt size, boom::OpenGLFloat const* weights) const;
    void weightivARB(boom::OpenGLInt size, boom::OpenGLInt const* weights) const;
    void weightPathsNV(boom::OpenGLUint resultPath, boom::OpenGLSizei numPaths, boom::OpenGLUint const* paths, boom::OpenGLFloat const* weights) const;
    void weightPointerARB(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void weightPointerOES(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void weightsvARB(boom::OpenGLInt size, boom::OpenGLShort const* weights) const;
    void weightubvARB(boom::OpenGLInt size, boom::OpenGLUbyte const* weights) const;
    void weightuivARB(boom::OpenGLInt size, boom::OpenGLUint const* weights) const;
    void weightusvARB(boom::OpenGLInt size, boom::OpenGLUShort const* weights) const;
    void windowPos2d(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void windowPos2dARB(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void windowPos2dMESA(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void windowPos2dv(boom::OpenGLDouble const* v) const;
    void windowPos2dvARB(boom::OpenGLDouble const* v) const;
    void windowPos2dvMESA(boom::OpenGLDouble const* v) const;
    void windowPos2f(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void windowPos2fARB(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void windowPos2fMESA(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void windowPos2fv(boom::OpenGLFloat const* v) const;
    void windowPos2fvARB(boom::OpenGLFloat const* v) const;
    void windowPos2fvMESA(boom::OpenGLFloat const* v) const;
    void windowPos2i(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void windowPos2iARB(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void windowPos2iMESA(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void windowPos2iv(boom::OpenGLInt const* v) const;
    void windowPos2ivARB(boom::OpenGLInt const* v) const;
    void windowPos2ivMESA(boom::OpenGLInt const* v) const;
    void windowPos2s(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void windowPos2sARB(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void windowPos2sMESA(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void windowPos2sv(boom::OpenGLShort const* v) const;
    void windowPos2svARB(boom::OpenGLShort const* v) const;
    void windowPos2svMESA(boom::OpenGLShort const* v) const;
    void windowPos3d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void windowPos3dARB(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void windowPos3dMESA(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void windowPos3dv(boom::OpenGLDouble const* v) const;
    void windowPos3dvARB(boom::OpenGLDouble const* v) const;
    void windowPos3dvMESA(boom::OpenGLDouble const* v) const;
    void windowPos3f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void windowPos3fARB(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void windowPos3fMESA(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void windowPos3fv(boom::OpenGLFloat const* v) const;
    void windowPos3fvARB(boom::OpenGLFloat const* v) const;
    void windowPos3fvMESA(boom::OpenGLFloat const* v) const;
    void windowPos3i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void windowPos3iARB(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void windowPos3iMESA(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void windowPos3iv(boom::OpenGLInt const* v) const;
    void windowPos3ivARB(boom::OpenGLInt const* v) const;
    void windowPos3ivMESA(boom::OpenGLInt const* v) const;
    void windowPos3s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void windowPos3sARB(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void windowPos3sMESA(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void windowPos3sv(boom::OpenGLShort const* v) const;
    void windowPos3svARB(boom::OpenGLShort const* v) const;
    void windowPos3svMESA(boom::OpenGLShort const* v) const;
    void windowPos4dMESA(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void windowPos4dvMESA(boom::OpenGLDouble const* v) const;
    void windowPos4fMESA(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void windowPos4fvMESA(boom::OpenGLFloat const* v) const;
    void windowPos4iMESA(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void windowPos4ivMESA(boom::OpenGLInt const* v) const;
    void windowPos4sMESA(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void windowPos4svMESA(boom::OpenGLShort const* v) const;
    void windowRectanglesEXT(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLInt const* box) const;
    void writeMaskEXT(boom::OpenGLUint res, boom::OpenGLUint in, boom::OpenGLEnum outX, boom::OpenGLEnum outY, boom::OpenGLEnum outZ, boom::OpenGLEnum outW) const;
    void swap() const;
    virtual ~OpenGL();
private:
    void (*_accum)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_accumxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    boom::OpenGLBoolean (*_acquireKeyedMutexWin32EXT)(boom::OpenGLUint, boom::OpenGLUInt64, boom::OpenGLUint);
    void (*_activeProgramEXT)(boom::OpenGLUint);
    void (*_activeShaderProgram)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_activeShaderProgramEXT)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_activeStencilFaceEXT)(boom::OpenGLEnum);
    void (*_activeTexture)(boom::OpenGLEnum);
    void (*_activeTextureARB)(boom::OpenGLEnum);
    void (*_activeVaryingNV)(boom::OpenGLUint, boom::OpenGLChar const*);
    void (*_alphaFragmentOp1ATI)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_alphaFragmentOp2ATI)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_alphaFragmentOp3ATI)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_alphaFunc)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_alphaFuncQCOM)(boom::OpenGLEnum, boom::OpenGLClampf);
    void (*_alphaFuncx)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_alphaFuncxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_alphaToCoverageDitherControlNV)(boom::OpenGLEnum);
    void (*_applyFramebufferAttachmentCMAAINTEL)();
    void (*_applyTextureEXT)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_areProgramsResidentNV)(boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLBoolean*);
    boom::OpenGLBoolean (*_areTexturesResident)(boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLBoolean*);
    boom::OpenGLBoolean (*_areTexturesResidentEXT)(boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLBoolean*);
    void (*_arrayElement)(boom::OpenGLInt);
    void (*_arrayElementEXT)(boom::OpenGLInt);
    void (*_arrayObjectATI)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLUint);
    boom::OpenGLUint (*_asyncCopyBufferSubDataNVX)(boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLUInt64 const*, boom::OpenGLUint, boom::OpenGLBitfield, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLUInt64 const*);
    boom::OpenGLUint (*_asyncCopyImageSubDataNVX)(boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLUInt64 const*, boom::OpenGLUint, boom::OpenGLBitfield, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLUInt64 const*);
    void (*_asyncMarkerSGIX)(boom::OpenGLUint);
    void (*_attachObjectARB)(boom::OpenGLHandleARB, boom::OpenGLHandleARB);
    void (*_attachShader)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_begin)(boom::OpenGLEnum);
    void (*_beginConditionalRender)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_beginConditionalRenderNV)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_beginConditionalRenderNVX)(boom::OpenGLUint);
    void (*_beginFragmentShaderATI)();
    void (*_beginOcclusionQueryNV)(boom::OpenGLUint);
    void (*_beginPerfMonitorAMD)(boom::OpenGLUint);
    void (*_beginPerfQueryINTEL)(boom::OpenGLUint);
    void (*_beginQuery)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_beginQueryARB)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_beginQueryEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_beginQueryIndexed)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint);
    void (*_beginTransformFeedback)(boom::OpenGLEnum);
    void (*_beginTransformFeedbackEXT)(boom::OpenGLEnum);
    void (*_beginTransformFeedbackNV)(boom::OpenGLEnum);
    void (*_beginVertexShaderEXT)();
    void (*_beginVideoCaptureNV)(boom::OpenGLUint);
    void (*_bindAttribLocation)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLChar const*);
    void (*_bindAttribLocationARB)(boom::OpenGLHandleARB, boom::OpenGLUint, boom::OpenGLCharARB const*);
    void (*_bindBuffer)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindBufferARB)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindBufferBase)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint);
    void (*_bindBufferBaseEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint);
    void (*_bindBufferBaseNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint);
    void (*_bindBufferOffsetEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr);
    void (*_bindBufferOffsetNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr);
    void (*_bindBufferRange)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_bindBufferRangeEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_bindBufferRangeNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_bindBuffersBase)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_bindBuffersRange)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLIntptr const*, boom::OpenGLSizeiptr const*);
    void (*_bindFragDataLocation)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLChar const*);
    void (*_bindFragDataLocationEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLChar const*);
    void (*_bindFragDataLocationIndexed)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLChar const*);
    void (*_bindFragDataLocationIndexedEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLChar const*);
    void (*_bindFragmentShaderATI)(boom::OpenGLUint);
    void (*_bindFramebuffer)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindFramebufferEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindFramebufferOES)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindImageTexture)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLBoolean, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_bindImageTextureEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLBoolean, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_bindImageTextures)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*);
    boom::OpenGLUint (*_bindLightParameterEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    boom::OpenGLUint (*_bindMaterialParameterEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_bindMultiTextureEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    boom::OpenGLUint (*_bindParameterEXT)(boom::OpenGLEnum);
    void (*_bindProgramARB)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindProgramNV)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindProgramPipeline)(boom::OpenGLUint);
    void (*_bindProgramPipelineEXT)(boom::OpenGLUint);
    void (*_bindRenderbuffer)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindRenderbufferEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindRenderbufferOES)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindSampler)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_bindSamplers)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_bindShadingRateImageNV)(boom::OpenGLUint);
    boom::OpenGLUint (*_bindTexGenParameterEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_bindTexture)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindTextureEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindTextures)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_bindTextureUnit)(boom::OpenGLUint, boom::OpenGLUint);
    boom::OpenGLUint (*_bindTextureUnitParameterEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_bindTransformFeedback)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindTransformFeedbackNV)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_bindVertexArray)(boom::OpenGLUint);
    void (*_bindVertexArrayAPPLE)(boom::OpenGLUint);
    void (*_bindVertexArrayOES)(boom::OpenGLUint);
    void (*_bindVertexBuffer)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizei);
    void (*_bindVertexBuffers)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLIntptr const*, boom::OpenGLSizei const*);
    void (*_bindVertexShaderEXT)(boom::OpenGLUint);
    void (*_bindVideoCaptureStreamBufferNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLIntptrARB);
    void (*_bindVideoCaptureStreamTextureNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_binormal3bEXT)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_binormal3bvEXT)(boom::OpenGLByte const*);
    void (*_binormal3dEXT)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_binormal3dvEXT)(boom::OpenGLDouble const*);
    void (*_binormal3fEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_binormal3fvEXT)(boom::OpenGLFloat const*);
    void (*_binormal3iEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_binormal3ivEXT)(boom::OpenGLInt const*);
    void (*_binormal3sEXT)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_binormal3svEXT)(boom::OpenGLShort const*);
    void (*_binormalPointerEXT)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_bitmap)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLUbyte const*);
    void (*_bitmapxOES)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLUbyte const*);
    void (*_blendBarrier)();
    void (*_blendBarrierKHR)();
    void (*_blendBarrierNV)();
    void (*_blendColor)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_blendColorEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_blendColorxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_blendEquation)(boom::OpenGLEnum);
    void (*_blendEquationEXT)(boom::OpenGLEnum);
    void (*_blendEquationi)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_blendEquationiARB)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_blendEquationiEXT)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_blendEquationIndexedAMD)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_blendEquationiOES)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_blendEquationOES)(boom::OpenGLEnum);
    void (*_blendEquationSeparate)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparatei)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateiARB)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateiEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateIndexedAMD)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateiOES)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendEquationSeparateOES)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFunc)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFunci)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFunciARB)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFunciEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncIndexedAMD)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFunciOES)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparate)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparatei)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateiARB)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateiEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateIndexedAMD)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateINGR)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateiOES)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendFuncSeparateOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_blendParameteriNV)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_blitFramebuffer)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_blitFramebufferANGLE)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_blitFramebufferEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_blitFramebufferNV)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_blitNamedFramebuffer)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_bufferAddressRangeNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUInt64EXT, boom::OpenGLSizeiptr);
    void (*_bufferAttachMemoryNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_bufferData)(boom::OpenGLEnum, boom::OpenGLSizeiptr, void const*, boom::OpenGLEnum);
    void (*_bufferDataARB)(boom::OpenGLEnum, boom::OpenGLSizeiptrARB, void const*, boom::OpenGLEnum);
    void (*_bufferPageCommitmentARB)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBoolean);
    void (*_bufferPageCommitmentMemNV)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLUint, boom::OpenGLUInt64, boom::OpenGLBoolean);
    void (*_bufferParameteriAPPLE)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_bufferStorage)(boom::OpenGLEnum, boom::OpenGLSizeiptr, void const*, boom::OpenGLBitfield);
    void (*_bufferStorageEXT)(boom::OpenGLEnum, boom::OpenGLSizeiptr, void const*, boom::OpenGLBitfield);
    void (*_bufferStorageExternalEXT)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLEGLClientBufferEXT, boom::OpenGLBitfield);
    void (*_bufferStorageMemEXT)(boom::OpenGLEnum, boom::OpenGLSizeiptr, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_bufferSubData)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void const*);
    void (*_bufferSubDataARB)(boom::OpenGLEnum, boom::OpenGLIntptrARB, boom::OpenGLSizeiptrARB, void const*);
    void (*_callCommandListNV)(boom::OpenGLUint);
    void (*_callList)(boom::OpenGLUint);
    void (*_callLists)(boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    boom::OpenGLEnum (*_checkFramebufferStatus)(boom::OpenGLEnum);
    boom::OpenGLEnum (*_checkFramebufferStatusEXT)(boom::OpenGLEnum);
    boom::OpenGLEnum (*_checkFramebufferStatusOES)(boom::OpenGLEnum);
    boom::OpenGLEnum (*_checkNamedFramebufferStatus)(boom::OpenGLUint, boom::OpenGLEnum);
    boom::OpenGLEnum (*_checkNamedFramebufferStatusEXT)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_clampColor)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_clampColorARB)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_clear)(boom::OpenGLBitfield);
    void (*_clearAccum)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_clearAccumxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_clearBufferData)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearBufferfi)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLInt);
    void (*_clearBufferfv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_clearBufferiv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt const*);
    void (*_clearBufferSubData)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearBufferuiv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUint const*);
    void (*_clearColor)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_clearColorIiEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_clearColorIuiEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_clearColorx)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_clearColorxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_clearDepth)(boom::OpenGLDouble);
    void (*_clearDepthdNV)(boom::OpenGLDouble);
    void (*_clearDepthf)(boom::OpenGLFloat);
    void (*_clearDepthfOES)(boom::OpenGLClampf);
    void (*_clearDepthx)(boom::OpenGLFixed);
    void (*_clearDepthxOES)(boom::OpenGLFixed);
    void (*_clearIndex)(boom::OpenGLFloat);
    void (*_clearNamedBufferData)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearNamedBufferDataEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearNamedBufferSubData)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearNamedBufferSubDataEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizeiptr, boom::OpenGLSizeiptr, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearNamedFramebufferfi)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLInt);
    void (*_clearNamedFramebufferfv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_clearNamedFramebufferiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt const*);
    void (*_clearNamedFramebufferuiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUint const*);
    void (*_clearPixelLocalStorageuiEXT)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_clearStencil)(boom::OpenGLInt);
    void (*_clearTexImage)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearTexImageEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearTexSubImage)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clearTexSubImageEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_clientActiveTexture)(boom::OpenGLEnum);
    void (*_clientActiveTextureARB)(boom::OpenGLEnum);
    void (*_clientActiveVertexStreamATI)(boom::OpenGLEnum);
    void (*_clientAttribDefaultEXT)(boom::OpenGLBitfield);
    void (*_clientWaitSemaphoreui64NVX)(boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLUInt64 const*);
    boom::OpenGLEnum (*_clientWaitSync)(boom::OpenGLSync, boom::OpenGLBitfield, boom::OpenGLUInt64);
    boom::OpenGLEnum (*_clientWaitSyncAPPLE)(boom::OpenGLSync, boom::OpenGLBitfield, boom::OpenGLUInt64);
    void (*_clipControl)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_clipControlEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_clipPlane)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_clipPlanef)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_clipPlanefIMG)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_clipPlanefOES)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_clipPlanex)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_clipPlanexIMG)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_clipPlanexOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_color3b)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_color3bv)(boom::OpenGLByte const*);
    void (*_color3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_color3dv)(boom::OpenGLDouble const*);
    void (*_color3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color3fv)(boom::OpenGLFloat const*);
    void (*_color3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_color3hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_color3hvNV)(boom::OpenGLHalfNV const*);
    void (*_color3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_color3iv)(boom::OpenGLInt const*);
    void (*_color3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_color3sv)(boom::OpenGLShort const*);
    void (*_color3ub)(boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte);
    void (*_color3ubv)(boom::OpenGLUbyte const*);
    void (*_color3ui)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_color3uiv)(boom::OpenGLUint const*);
    void (*_color3us)(boom::OpenGLUShort, boom::OpenGLUShort, boom::OpenGLUShort);
    void (*_color3usv)(boom::OpenGLUShort const*);
    void (*_color3xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_color3xvOES)(boom::OpenGLFixed const*);
    void (*_color4b)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_color4bv)(boom::OpenGLByte const*);
    void (*_color4d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_color4dv)(boom::OpenGLDouble const*);
    void (*_color4f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color4fNormal3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color4fNormal3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_color4fv)(boom::OpenGLFloat const*);
    void (*_color4hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_color4hvNV)(boom::OpenGLHalfNV const*);
    void (*_color4i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_color4iv)(boom::OpenGLInt const*);
    void (*_color4s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_color4sv)(boom::OpenGLShort const*);
    void (*_color4ub)(boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte);
    void (*_color4ubv)(boom::OpenGLUbyte const*);
    void (*_color4ubVertex2fSUN)(boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color4ubVertex2fvSUN)(boom::OpenGLUbyte const*, boom::OpenGLFloat const*);
    void (*_color4ubVertex3fSUN)(boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_color4ubVertex3fvSUN)(boom::OpenGLUbyte const*, boom::OpenGLFloat const*);
    void (*_color4ui)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_color4uiv)(boom::OpenGLUint const*);
    void (*_color4us)(boom::OpenGLUShort, boom::OpenGLUShort, boom::OpenGLUShort, boom::OpenGLUShort);
    void (*_color4usv)(boom::OpenGLUShort const*);
    void (*_color4x)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_color4xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_color4xvOES)(boom::OpenGLFixed const*);
    void (*_colorFormatNV)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_colorFragmentOp1ATI)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_colorFragmentOp2ATI)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_colorFragmentOp3ATI)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_colorMask)(boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_colorMaski)(boom::OpenGLUint, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_colorMaskiEXT)(boom::OpenGLUint, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_colorMaskIndexedEXT)(boom::OpenGLUint, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_colorMaskiOES)(boom::OpenGLUint, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_colorMaterial)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_colorP3ui)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_colorP3uiv)(boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_colorP4ui)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_colorP4uiv)(boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_colorPointer)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_colorPointerEXT)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, void const*);
    void (*_colorPointerListIBM)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_colorPointervINTEL)(boom::OpenGLInt, boom::OpenGLEnum, void const**);
    void (*_colorSubTable)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_colorSubTableEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_colorTable)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_colorTableEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_colorTableParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_colorTableParameterfvSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_colorTableParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_colorTableParameterivSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_colorTableSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_combinerInputNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_combinerOutputNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_combinerParameterfNV)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_combinerParameterfvNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_combinerParameteriNV)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_combinerParameterivNV)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_combinerStageParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_commandListSegmentsNV)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_compileCommandListNV)(boom::OpenGLUint);
    void (*_compileShader)(boom::OpenGLUint);
    void (*_compileShaderARB)(boom::OpenGLHandleARB);
    void (*_compileShaderIncludeARB)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLChar const* const*, boom::OpenGLInt const*);
    void (*_compressedMultiTexImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedMultiTexImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedMultiTexImage3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedMultiTexSubImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedMultiTexSubImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedMultiTexSubImage3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage1DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage2DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage3D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage3DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexImage3DOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage1DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage2DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage3D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage3DARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTexSubImage3DOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureImage1DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTextureImage2DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTextureImage3DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage1D)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage1DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage2D)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage2DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage3D)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_compressedTextureSubImage3DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_conservativeRasterParameterfNV)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_conservativeRasterParameteriNV)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_convolutionFilter1D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_convolutionFilter1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_convolutionFilter2D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_convolutionFilter2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_convolutionParameterf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_convolutionParameterfEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_convolutionParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_convolutionParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_convolutionParameteri)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_convolutionParameteriEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_convolutionParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_convolutionParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_convolutionParameterxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_convolutionParameterxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_copyBufferSubData)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_copyBufferSubDataNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_copyColorSubTable)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyColorSubTableEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyColorTable)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyColorTableSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyConvolutionFilter1D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyConvolutionFilter1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyConvolutionFilter2D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyConvolutionFilter2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyImageSubData)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyImageSubDataEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyImageSubDataNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyImageSubDataOES)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyMultiTexImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyMultiTexImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyMultiTexSubImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyMultiTexSubImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyMultiTexSubImage3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyNamedBufferSubData)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_copyPathNV)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_copyPixels)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum);
    void (*_copyTexImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTexImage1DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTexImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTexImage2DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTexSubImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyTexSubImage1DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyTexSubImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTexSubImage2DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTexSubImage3D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTexSubImage3DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTexSubImage3DOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTextureImage1DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTextureImage2DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_copyTextureLevelsAPPLE)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyTextureSubImage1D)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyTextureSubImage1DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_copyTextureSubImage2D)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTextureSubImage2DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTextureSubImage3D)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_copyTextureSubImage3DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_coverageMaskNV)(boom::OpenGLBoolean);
    void (*_coverageModulationNV)(boom::OpenGLEnum);
    void (*_coverageModulationTableNV)(boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_coverageOperationNV)(boom::OpenGLEnum);
    void (*_coverFillPathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_coverFillPathNV)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_coverStrokePathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_coverStrokePathNV)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_createBuffers)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_createCommandListsNV)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_createFramebuffers)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_createMemoryObjectsEXT)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_createPerfQueryINTEL)(boom::OpenGLUint, boom::OpenGLUint*);
    boom::OpenGLUint (*_createProgram)();
    boom::OpenGLHandleARB (*_createProgramObjectARB)();
    void (*_createProgramPipelines)(boom::OpenGLSizei, boom::OpenGLUint*);
    boom::OpenGLUint (*_createProgressFenceNVX)();
    void (*_createQueries)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_createRenderbuffers)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_createSamplers)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_createSemaphoresNV)(boom::OpenGLSizei, boom::OpenGLUint*);
    boom::OpenGLUint (*_createShader)(boom::OpenGLEnum);
    boom::OpenGLHandleARB (*_createShaderObjectARB)(boom::OpenGLEnum);
    boom::OpenGLUint (*_createShaderProgramEXT)(boom::OpenGLEnum, boom::OpenGLChar const*);
    boom::OpenGLUint (*_createShaderProgramv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const* const*);
    boom::OpenGLUint (*_createShaderProgramvEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const* const*);
    void (*_createStatesNV)(boom::OpenGLSizei, boom::OpenGLUint*);
    boom::OpenGLSync (*_createSyncFromCLeventARB)(void**, void**, boom::OpenGLBitfield);
    void (*_createTextures)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_createTransformFeedbacks)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_createVertexArrays)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_cullFace)(boom::OpenGLEnum);
    void (*_cullParameterdvEXT)(boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_cullParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_currentPaletteMatrixARB)(boom::OpenGLInt);
    void (*_currentPaletteMatrixOES)(boom::OpenGLUint);
    void (*_debugMessageCallback)(boom::OpenGLDebugProc, void const*);
    void (*_debugMessageCallbackAMD)(boom::OpenGLDebugProcAMD, void*);
    void (*_debugMessageCallbackARB)(boom::OpenGLDebugProcARB, void const*);
    void (*_debugMessageCallbackKHR)(boom::OpenGLDebugProcKHR, void const*);
    void (*_debugMessageControl)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLBoolean);
    void (*_debugMessageControlARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLBoolean);
    void (*_debugMessageControlKHR)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLBoolean);
    void (*_debugMessageEnableAMD)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLBoolean);
    void (*_debugMessageInsert)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_debugMessageInsertAMD)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_debugMessageInsertARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_debugMessageInsertKHR)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_deformationMap3dSGIX)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_deformationMap3fSGIX)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_deformSGIX)(boom::OpenGLBitfield);
    void (*_deleteAsyncMarkersSGIX)(boom::OpenGLUint, boom::OpenGLSizei);
    void (*_deleteBuffers)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteBuffersARB)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteCommandListsNV)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteFencesAPPLE)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteFencesNV)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteFragmentShaderATI)(boom::OpenGLUint);
    void (*_deleteFramebuffers)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteFramebuffersEXT)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteFramebuffersOES)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteLists)(boom::OpenGLUint, boom::OpenGLSizei);
    void (*_deleteMemoryObjectsEXT)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteNamedStringARB)(boom::OpenGLInt, boom::OpenGLChar const*);
    void (*_deleteNamesAMD)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_deleteObjectARB)(boom::OpenGLHandleARB);
    void (*_deleteOcclusionQueriesNV)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deletePathsNV)(boom::OpenGLUint, boom::OpenGLSizei);
    void (*_deletePerfMonitorsAMD)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_deletePerfQueryINTEL)(boom::OpenGLUint);
    void (*_deleteProgram)(boom::OpenGLUint);
    void (*_deleteProgramPipelines)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteProgramPipelinesEXT)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteProgramsARB)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteProgramsNV)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteQueries)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteQueriesARB)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteQueriesEXT)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteQueryResourceTagNV)(boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_deleteRenderbuffers)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteRenderbuffersEXT)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteRenderbuffersOES)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteSamplers)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteSemaphoresEXT)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteShader)(boom::OpenGLUint);
    void (*_deleteStatesNV)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteSync)(boom::OpenGLSync);
    void (*_deleteSyncAPPLE)(boom::OpenGLSync);
    void (*_deleteTextures)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteTexturesEXT)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteTransformFeedbacks)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteTransformFeedbacksNV)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteVertexArrays)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteVertexArraysAPPLE)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteVertexArraysOES)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_deleteVertexShaderEXT)(boom::OpenGLUint);
    void (*_depthBoundsdNV)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_depthBoundsEXT)(boom::OpenGLClampd, boom::OpenGLClampd);
    void (*_depthFunc)(boom::OpenGLEnum);
    void (*_depthMask)(boom::OpenGLBoolean);
    void (*_depthRange)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_depthRangeArraydvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_depthRangeArrayfvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_depthRangeArrayfvOES)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_depthRangeArrayv)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_depthRangedNV)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_depthRangef)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_depthRangefOES)(boom::OpenGLClampf, boom::OpenGLClampf);
    void (*_depthRangeIndexed)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_depthRangeIndexeddNV)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_depthRangeIndexedfNV)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_depthRangeIndexedfOES)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_depthRangex)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_depthRangexOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_detachObjectARB)(boom::OpenGLHandleARB, boom::OpenGLHandleARB);
    void (*_detachShader)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_detailTexFuncSGIS)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_disable)(boom::OpenGLEnum);
    void (*_disableClientState)(boom::OpenGLEnum);
    void (*_disableClientStateiEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_disableClientStateIndexedEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_disableDriverControlQCOM)(boom::OpenGLUint);
    void (*_disablei)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_disableiEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_disableIndexedEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_disableiNV)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_disableiOES)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_disableVariantClientStateEXT)(boom::OpenGLUint);
    void (*_disableVertexArrayAttrib)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_disableVertexArrayAttribEXT)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_disableVertexArrayEXT)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_disableVertexAttribAPPLE)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_disableVertexAttribArray)(boom::OpenGLUint);
    void (*_disableVertexAttribArrayARB)(boom::OpenGLUint);
    void (*_discardFramebufferEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_dispatchCompute)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_dispatchComputeGroupSizeARB)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_dispatchComputeIndirect)(boom::OpenGLIntptr);
    void (*_drawArrays)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_drawArraysEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_drawArraysIndirect)(boom::OpenGLEnum, void const*);
    void (*_drawArraysInstanced)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawArraysInstancedANGLE)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawArraysInstancedARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawArraysInstancedBaseInstance)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUint);
    void (*_drawArraysInstancedBaseInstanceEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUint);
    void (*_drawArraysInstancedEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawArraysInstancedNV)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawBuffer)(boom::OpenGLEnum);
    void (*_drawBuffers)(boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_drawBuffersARB)(boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_drawBuffersATI)(boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_drawBuffersEXT)(boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_drawBuffersIndexedEXT)(boom::OpenGLInt, boom::OpenGLEnum const*, boom::OpenGLInt const*);
    void (*_drawBuffersNV)(boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_drawCommandsAddressNV)(boom::OpenGLEnum, boom::OpenGLUInt64 const*, boom::OpenGLSizei const*, boom::OpenGLUint);
    void (*_drawCommandsNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLIntptr const*, boom::OpenGLSizei const*, boom::OpenGLUint);
    void (*_drawCommandsStatesAddressNV)(boom::OpenGLUInt64 const*, boom::OpenGLSizei const*, boom::OpenGLUint const*, boom::OpenGLUint const*, boom::OpenGLUint);
    void (*_drawCommandsStatesNV)(boom::OpenGLUint, boom::OpenGLIntptr const*, boom::OpenGLSizei const*, boom::OpenGLUint const*, boom::OpenGLUint const*, boom::OpenGLUint);
    void (*_drawElementArrayAPPLE)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_drawElementArrayATI)(boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_drawElements)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_drawElementsBaseVertex)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawElementsBaseVertexEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawElementsBaseVertexOES)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawElementsIndirect)(boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_drawElementsInstanced)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_drawElementsInstancedANGLE)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_drawElementsInstancedARB)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_drawElementsInstancedBaseInstance)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLUint);
    void (*_drawElementsInstancedBaseInstanceEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLUint);
    void (*_drawElementsInstancedBaseVertex)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_drawElementsInstancedBaseVertexBaseInstance)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLUint);
    void (*_drawElementsInstancedBaseVertexBaseInstanceEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLUint);
    void (*_drawElementsInstancedBaseVertexEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_drawElementsInstancedBaseVertexOES)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_drawElementsInstancedEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_drawElementsInstancedNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_drawMeshArraysSUN)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_drawMeshTasksIndirectNV)(boom::OpenGLIntptr);
    void (*_drawMeshTasksNV)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_drawPixels)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_drawRangeElementArrayAPPLE)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_drawRangeElementArrayATI)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei);
    void (*_drawRangeElements)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_drawRangeElementsBaseVertex)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawRangeElementsBaseVertexEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawRangeElementsBaseVertexOES)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_drawRangeElementsEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_drawTexfOES)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_drawTexfvOES)(boom::OpenGLFloat const*);
    void (*_drawTexiOES)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_drawTexivOES)(boom::OpenGLInt const*);
    void (*_drawTexsOES)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_drawTexsvOES)(boom::OpenGLShort const*);
    void (*_drawTextureNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_drawTexxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_drawTexxvOES)(boom::OpenGLFixed const*);
    void (*_drawTransformFeedback)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_drawTransformFeedbackEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_drawTransformFeedbackInstanced)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei);
    void (*_drawTransformFeedbackInstancedEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei);
    void (*_drawTransformFeedbackNV)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_drawTransformFeedbackStream)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint);
    void (*_drawTransformFeedbackStreamInstanced)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei);
    void (*_drawVkImageNV)(boom::OpenGLUInt64, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_edgeFlag)(boom::OpenGLBoolean);
    void (*_edgeFlagFormatNV)(boom::OpenGLSizei);
    void (*_edgeFlagPointer)(boom::OpenGLSizei, void const*);
    void (*_edgeFlagPointerEXT)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean const*);
    void (*_edgeFlagPointerListIBM)(boom::OpenGLInt, boom::OpenGLBoolean const**, boom::OpenGLInt);
    void (*_edgeFlagv)(boom::OpenGLBoolean const*);
    void (*_eGLImageTargetRenderbufferStorageOES)(boom::OpenGLEnum, boom::OpenGLEGLImageOES);
    void (*_eGLImageTargetTexStorageEXT)(boom::OpenGLEnum, boom::OpenGLEGLImageOES, boom::OpenGLInt const*);
    void (*_eGLImageTargetTexture2DOES)(boom::OpenGLEnum, boom::OpenGLEGLImageOES);
    void (*_eGLImageTargetTextureStorageEXT)(boom::OpenGLUint, boom::OpenGLEGLImageOES, boom::OpenGLInt const*);
    void (*_elementPointerAPPLE)(boom::OpenGLEnum, void const*);
    void (*_elementPointerATI)(boom::OpenGLEnum, void const*);
    void (*_enable)(boom::OpenGLEnum);
    void (*_enableClientState)(boom::OpenGLEnum);
    void (*_enableClientStateiEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_enableClientStateIndexedEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_enableDriverControlQCOM)(boom::OpenGLUint);
    void (*_enablei)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_enableiEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_enableIndexedEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_enableiNV)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_enableiOES)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_enableVariantClientStateEXT)(boom::OpenGLUint);
    void (*_enableVertexArrayAttrib)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_enableVertexArrayAttribEXT)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_enableVertexArrayEXT)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_enableVertexAttribAPPLE)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_enableVertexAttribArray)(boom::OpenGLUint);
    void (*_enableVertexAttribArrayARB)(boom::OpenGLUint);
    void (*_end)();
    void (*_endConditionalRender)();
    void (*_endConditionalRenderNV)();
    void (*_endConditionalRenderNVX)();
    void (*_endFragmentShaderATI)();
    void (*_endList)();
    void (*_endOcclusionQueryNV)();
    void (*_endPerfMonitorAMD)(boom::OpenGLUint);
    void (*_endPerfQueryINTEL)(boom::OpenGLUint);
    void (*_endQuery)(boom::OpenGLEnum);
    void (*_endQueryARB)(boom::OpenGLEnum);
    void (*_endQueryEXT)(boom::OpenGLEnum);
    void (*_endQueryIndexed)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_endTilingQCOM)(boom::OpenGLBitfield);
    void (*_endTransformFeedback)();
    void (*_endTransformFeedbackEXT)();
    void (*_endTransformFeedbackNV)();
    void (*_endVertexShaderEXT)();
    void (*_endVideoCaptureNV)(boom::OpenGLUint);
    void (*_evalCoord1d)(boom::OpenGLDouble);
    void (*_evalCoord1dv)(boom::OpenGLDouble const*);
    void (*_evalCoord1f)(boom::OpenGLFloat);
    void (*_evalCoord1fv)(boom::OpenGLFloat const*);
    void (*_evalCoord1xOES)(boom::OpenGLFixed);
    void (*_evalCoord1xvOES)(boom::OpenGLFixed const*);
    void (*_evalCoord2d)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_evalCoord2dv)(boom::OpenGLDouble const*);
    void (*_evalCoord2f)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_evalCoord2fv)(boom::OpenGLFloat const*);
    void (*_evalCoord2xOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_evalCoord2xvOES)(boom::OpenGLFixed const*);
    void (*_evalMapsNV)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_evalMesh1)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt);
    void (*_evalMesh2)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_evalPoint1)(boom::OpenGLInt);
    void (*_evalPoint2)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_evaluateDepthValuesARB)();
    void (*_executeProgramNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_extGetBufferPointervQCOM)(boom::OpenGLEnum, void**);
    void (*_extGetBuffersQCOM)(boom::OpenGLUint*, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_extGetFramebuffersQCOM)(boom::OpenGLUint*, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_extGetProgramBinarySourceQCOM)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLChar*, boom::OpenGLInt*);
    void (*_extGetProgramsQCOM)(boom::OpenGLUint*, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_extGetRenderbuffersQCOM)(boom::OpenGLUint*, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_extGetShadersQCOM)(boom::OpenGLUint*, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_extGetTexLevelParameterivQCOM)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_extGetTexSubImageQCOM)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_extGetTexturesQCOM)(boom::OpenGLUint*, boom::OpenGLInt, boom::OpenGLInt*);
    boom::OpenGLBoolean (*_extIsProgramBinaryQCOM)(boom::OpenGLUint);
    void (*_extractComponentEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_extrapolateTex2DQCOM)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLFloat);
    void (*_extTexObjectStateOverrideiQCOM)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_feedbackBuffer)(boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_feedbackBufferxOES)(boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLFixed const*);
    boom::OpenGLSync (*_fenceSync)(boom::OpenGLEnum, boom::OpenGLBitfield);
    boom::OpenGLSync (*_fenceSyncAPPLE)(boom::OpenGLEnum, boom::OpenGLBitfield);
    void (*_finalCombinerInputNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_finish)();
    boom::OpenGLInt (*_finishAsyncSGIX)(boom::OpenGLUint*);
    void (*_finishFenceAPPLE)(boom::OpenGLUint);
    void (*_finishFenceNV)(boom::OpenGLUint);
    void (*_finishObjectAPPLE)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_finishTextureSUNX)();
    void (*_flush)();
    void (*_flushMappedBufferRange)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_flushMappedBufferRangeAPPLE)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_flushMappedBufferRangeEXT)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_flushMappedNamedBufferRange)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_flushMappedNamedBufferRangeEXT)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_flushPixelDataRangeNV)(boom::OpenGLEnum);
    void (*_flushRasterSGIX)();
    void (*_flushStaticDataIBM)(boom::OpenGLEnum);
    void (*_flushVertexArrayRangeAPPLE)(boom::OpenGLSizei, void*);
    void (*_flushVertexArrayRangeNV)();
    void (*_fogCoordd)(boom::OpenGLDouble);
    void (*_fogCoorddEXT)(boom::OpenGLDouble);
    void (*_fogCoorddv)(boom::OpenGLDouble const*);
    void (*_fogCoorddvEXT)(boom::OpenGLDouble const*);
    void (*_fogCoordf)(boom::OpenGLFloat);
    void (*_fogCoordfEXT)(boom::OpenGLFloat);
    void (*_fogCoordFormatNV)(boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_fogCoordfv)(boom::OpenGLFloat const*);
    void (*_fogCoordfvEXT)(boom::OpenGLFloat const*);
    void (*_fogCoordhNV)(boom::OpenGLHalfNV);
    void (*_fogCoordhvNV)(boom::OpenGLHalfNV const*);
    void (*_fogCoordPointer)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_fogCoordPointerEXT)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_fogCoordPointerListIBM)(boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_fogf)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_fogFuncSGIS)(boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_fogfv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_fogi)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_fogiv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_fogx)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_fogxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_fogxv)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_fogxvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_fragmentColorMaterialSGIX)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_fragmentCoverageColorNV)(boom::OpenGLUint);
    void (*_fragmentLightfSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_fragmentLightfvSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_fragmentLightiSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_fragmentLightivSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_fragmentLightModelfSGIX)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_fragmentLightModelfvSGIX)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_fragmentLightModeliSGIX)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_fragmentLightModelivSGIX)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_fragmentMaterialfSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_fragmentMaterialfvSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_fragmentMaterialiSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_fragmentMaterialivSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_framebufferDrawBufferEXT)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_framebufferDrawBuffersEXT)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_framebufferFetchBarrierEXT)();
    void (*_framebufferFetchBarrierQCOM)();
    void (*_framebufferFoveationConfigQCOM)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint*);
    void (*_framebufferFoveationParametersQCOM)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_framebufferParameteri)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_framebufferParameteriMESA)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_framebufferPixelLocalStorageSizeEXT)(boom::OpenGLUint, boom::OpenGLSizei);
    void (*_framebufferReadBufferEXT)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_framebufferRenderbuffer)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_framebufferRenderbufferEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_framebufferRenderbufferOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_framebufferSampleLocationsfvARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_framebufferSampleLocationsfvNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_framebufferSamplePositionsfvAMD)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_framebufferShadingRateEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_framebufferTexture)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_framebufferTexture1D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_framebufferTexture1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_framebufferTexture2D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_framebufferTexture2DDownsampleIMG)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTexture2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_framebufferTexture2DMultisampleEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_framebufferTexture2DMultisampleIMG)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_framebufferTexture2DOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_framebufferTexture3D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTexture3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTexture3DOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTextureARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_framebufferTextureEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_framebufferTextureFaceARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum);
    void (*_framebufferTextureFaceEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum);
    void (*_framebufferTextureLayer)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTextureLayerARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTextureLayerDownsampleIMG)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTextureLayerEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_framebufferTextureMultisampleMultiviewOVR)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_framebufferTextureMultiviewOVR)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei);
    void (*_framebufferTextureOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_frameTerminatorGREMEDY)();
    void (*_frameZoomSGIX)(boom::OpenGLInt);
    void (*_freeObjectBufferATI)(boom::OpenGLUint);
    void (*_frontFace)(boom::OpenGLEnum);
    void (*_frustum)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_frustumf)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_frustumfOES)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_frustumx)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_frustumxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    boom::OpenGLUint (*_genAsyncMarkersSGIX)(boom::OpenGLSizei);
    void (*_genBuffers)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genBuffersARB)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_generateMipmap)(boom::OpenGLEnum);
    void (*_generateMipmapEXT)(boom::OpenGLEnum);
    void (*_generateMipmapOES)(boom::OpenGLEnum);
    void (*_generateMultiTexMipmapEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_generateTextureMipmap)(boom::OpenGLUint);
    void (*_generateTextureMipmapEXT)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_genFencesAPPLE)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genFencesNV)(boom::OpenGLSizei, boom::OpenGLUint*);
    boom::OpenGLUint (*_genFragmentShadersATI)(boom::OpenGLUint);
    void (*_genFramebuffers)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genFramebuffersEXT)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genFramebuffersOES)(boom::OpenGLSizei, boom::OpenGLUint*);
    boom::OpenGLUint (*_genLists)(boom::OpenGLSizei);
    void (*_genNamesAMD)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint*);
    void (*_genOcclusionQueriesNV)(boom::OpenGLSizei, boom::OpenGLUint*);
    boom::OpenGLUint (*_genPathsNV)(boom::OpenGLSizei);
    void (*_genPerfMonitorsAMD)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genProgramPipelines)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genProgramPipelinesEXT)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genProgramsARB)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genProgramsNV)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genQueries)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genQueriesARB)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genQueriesEXT)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genQueryResourceTagNV)(boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_genRenderbuffers)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genRenderbuffersEXT)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genRenderbuffersOES)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genSamplers)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genSemaphoresEXT)(boom::OpenGLSizei, boom::OpenGLUint*);
    boom::OpenGLUint (*_genSymbolsEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_genTextures)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genTexturesEXT)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genTransformFeedbacks)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genTransformFeedbacksNV)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genVertexArrays)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genVertexArraysAPPLE)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_genVertexArraysOES)(boom::OpenGLSizei, boom::OpenGLUint*);
    boom::OpenGLUint (*_genVertexShadersEXT)(boom::OpenGLUint);
    void (*_getActiveAtomicCounterBufferiv)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getActiveAttrib)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*, boom::OpenGLEnum*, boom::OpenGLChar*);
    void (*_getActiveAttribARB)(boom::OpenGLHandleARB, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*, boom::OpenGLEnum*, boom::OpenGLCharARB*);
    void (*_getActiveSubroutineName)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getActiveSubroutineUniformiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getActiveSubroutineUniformName)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getActiveUniform)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*, boom::OpenGLEnum*, boom::OpenGLChar*);
    void (*_getActiveUniformARB)(boom::OpenGLHandleARB, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*, boom::OpenGLEnum*, boom::OpenGLCharARB*);
    void (*_getActiveUniformBlockiv)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getActiveUniformBlockName)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getActiveUniformName)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getActiveUniformsiv)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getActiveVaryingNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLSizei*, boom::OpenGLEnum*, boom::OpenGLChar*);
    void (*_getArrayObjectfvATI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getArrayObjectivATI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getAttachedObjectsARB)(boom::OpenGLHandleARB, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLHandleARB*);
    void (*_getAttachedShaders)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLUint*);
    boom::OpenGLInt (*_getAttribLocation)(boom::OpenGLUint, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getAttribLocationARB)(boom::OpenGLHandleARB, boom::OpenGLCharARB const*);
    void (*_getBooleanIndexedvEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLBoolean*);
    void (*_getBooleani_v)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLBoolean*);
    void (*_getBooleanv)(boom::OpenGLEnum, boom::OpenGLBoolean*);
    void (*_getBufferParameteri64v)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getBufferParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getBufferParameterivARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getBufferParameterui64vNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getBufferPointerv)(boom::OpenGLEnum, boom::OpenGLEnum, void**);
    void (*_getBufferPointervARB)(boom::OpenGLEnum, boom::OpenGLEnum, void**);
    void (*_getBufferPointervOES)(boom::OpenGLEnum, boom::OpenGLEnum, void**);
    void (*_getBufferSubData)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void*);
    void (*_getBufferSubDataARB)(boom::OpenGLEnum, boom::OpenGLIntptrARB, boom::OpenGLSizeiptrARB, void*);
    void (*_getClipPlane)(boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getClipPlanef)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getClipPlanefOES)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getClipPlanex)(boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getClipPlanexOES)(boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getColorTable)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getColorTableEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getColorTableParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getColorTableParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getColorTableParameterfvSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getColorTableParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getColorTableParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getColorTableParameterivSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getColorTableSGI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getCombinerInputParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getCombinerInputParameterivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getCombinerOutputParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getCombinerOutputParameterivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getCombinerStageParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    boom::OpenGLUint (*_getCommandHeaderNV)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_getCompressedMultiTexImageEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, void*);
    void (*_getCompressedTexImage)(boom::OpenGLEnum, boom::OpenGLInt, void*);
    void (*_getCompressedTexImageARB)(boom::OpenGLEnum, boom::OpenGLInt, void*);
    void (*_getCompressedTextureImage)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, void*);
    void (*_getCompressedTextureImageEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, void*);
    void (*_getCompressedTextureSubImage)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, void*);
    void (*_getConvolutionFilter)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getConvolutionFilterEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getConvolutionParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getConvolutionParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getConvolutionParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getConvolutionParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getConvolutionParameterxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getCoverageModulationTableNV)(boom::OpenGLSizei, boom::OpenGLFloat*);
    boom::OpenGLUint (*_getDebugMessageLog)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum*, boom::OpenGLEnum*, boom::OpenGLUint*, boom::OpenGLEnum*, boom::OpenGLSizei*, boom::OpenGLChar*);
    boom::OpenGLUint (*_getDebugMessageLogAMD)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum*, boom::OpenGLEnum*, boom::OpenGLUint*, boom::OpenGLSizei*, boom::OpenGLChar*);
    boom::OpenGLUint (*_getDebugMessageLogARB)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum*, boom::OpenGLEnum*, boom::OpenGLUint*, boom::OpenGLEnum*, boom::OpenGLSizei*, boom::OpenGLChar*);
    boom::OpenGLUint (*_getDebugMessageLogKHR)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum*, boom::OpenGLEnum*, boom::OpenGLUint*, boom::OpenGLEnum*, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getDetailTexFuncSGIS)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getDoubleIndexedvEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble*);
    void (*_getDoublei_v)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble*);
    void (*_getDoublei_vEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble*);
    void (*_getDoublev)(boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getDriverControlsQCOM)(boom::OpenGLInt*, boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_getDriverControlStringQCOM)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    boom::OpenGLEnum (*_getError)();
    void (*_getFenceivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFinalCombinerInputParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getFinalCombinerInputParameterivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFirstPerfQueryIdINTEL)(boom::OpenGLUint*);
    void (*_getFixedv)(boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getFixedvOES)(boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getFloatIndexedvEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat*);
    void (*_getFloati_v)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat*);
    void (*_getFloati_vEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat*);
    void (*_getFloati_vNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat*);
    void (*_getFloati_vOES)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat*);
    void (*_getFloatv)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getFogFuncSGIS)(boom::OpenGLFloat*);
    boom::OpenGLInt (*_getFragDataIndex)(boom::OpenGLUint, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getFragDataIndexEXT)(boom::OpenGLUint, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getFragDataLocation)(boom::OpenGLUint, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getFragDataLocationEXT)(boom::OpenGLUint, boom::OpenGLChar const*);
    void (*_getFragmentLightfvSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getFragmentLightivSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFragmentMaterialfvSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getFragmentMaterialivSGIX)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFragmentShadingRatesEXT)(boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLEnum*);
    void (*_getFramebufferAttachmentParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFramebufferAttachmentParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFramebufferAttachmentParameterivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFramebufferParameterfvAMD)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getFramebufferParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFramebufferParameterivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getFramebufferParameterivMESA)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    boom::OpenGLSizei (*_getFramebufferPixelLocalStorageSizeEXT)(boom::OpenGLUint);
    boom::OpenGLEnum (*_getGraphicsResetStatus)();
    boom::OpenGLEnum (*_getGraphicsResetStatusARB)();
    boom::OpenGLEnum (*_getGraphicsResetStatusEXT)();
    boom::OpenGLEnum (*_getGraphicsResetStatusKHR)();
    boom::OpenGLHandleARB (*_getHandleARB)(boom::OpenGLEnum);
    void (*_getHistogram)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getHistogramEXT)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getHistogramParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getHistogramParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getHistogramParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getHistogramParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getHistogramParameterxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    boom::OpenGLUInt64 (*_getImageHandleARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLBoolean, boom::OpenGLInt, boom::OpenGLEnum);
    boom::OpenGLUInt64 (*_getImageHandleNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLBoolean, boom::OpenGLInt, boom::OpenGLEnum);
    void (*_getImageTransformParameterfvHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getImageTransformParameterivHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getInfoLogARB)(boom::OpenGLHandleARB, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLCharARB*);
    boom::OpenGLInt (*_getInstrumentsSGIX)();
    void (*_getInteger64i_v)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt64*);
    void (*_getInteger64v)(boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getInteger64vAPPLE)(boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getInteger64vEXT)(boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getIntegerIndexedvEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt*);
    void (*_getIntegeri_v)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt*);
    void (*_getIntegeri_vEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt*);
    void (*_getIntegerui64i_vNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUInt64EXT*);
    void (*_getIntegerui64vNV)(boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getIntegerv)(boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getInternalformati64v)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt64*);
    void (*_getInternalformativ)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getInternalformatSampleivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getInvariantBooleanvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLBoolean*);
    void (*_getInvariantFloatvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getInvariantIntegervEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getLightfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getLightiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getLightxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getLightxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getLightxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getListParameterfvSGIX)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getListParameterivSGIX)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getLocalConstantBooleanvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLBoolean*);
    void (*_getLocalConstantFloatvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getLocalConstantIntegervEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMapAttribParameterfvNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMapAttribParameterivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMapControlPointsNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean, void*);
    void (*_getMapdv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getMapfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMapiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMapParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMapParameterivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMapxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getMaterialfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMaterialiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMaterialxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_getMaterialxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getMaterialxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getMemoryObjectDetachedResourcesuivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_getMemoryObjectParameterivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMinmax)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getMinmaxEXT)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getMinmaxParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMinmaxParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMinmaxParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMinmaxParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMultisamplefv)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat*);
    void (*_getMultisamplefvNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat*);
    void (*_getMultiTexEnvfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMultiTexEnvivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMultiTexGendvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getMultiTexGenfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMultiTexGenivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMultiTexImageEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getMultiTexLevelParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMultiTexLevelParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMultiTexParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getMultiTexParameterIivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getMultiTexParameterIuivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getMultiTexParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedBufferParameteri64v)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getNamedBufferParameteriv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedBufferParameterivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedBufferParameterui64vNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getNamedBufferPointerv)(boom::OpenGLUint, boom::OpenGLEnum, void**);
    void (*_getNamedBufferPointervEXT)(boom::OpenGLUint, boom::OpenGLEnum, void**);
    void (*_getNamedBufferSubData)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void*);
    void (*_getNamedBufferSubDataEXT)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void*);
    void (*_getNamedFramebufferAttachmentParameteriv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedFramebufferAttachmentParameterivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedFramebufferParameterfvAMD)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getNamedFramebufferParameteriv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedFramebufferParameterivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedProgramivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedProgramLocalParameterdvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble*);
    void (*_getNamedProgramLocalParameterfvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat*);
    void (*_getNamedProgramLocalParameterIivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt*);
    void (*_getNamedProgramLocalParameterIuivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint*);
    void (*_getNamedProgramStringEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getNamedRenderbufferParameteriv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedRenderbufferParameterivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getNamedStringARB)(boom::OpenGLInt, boom::OpenGLChar const*, boom::OpenGLSizei, boom::OpenGLInt*, boom::OpenGLChar*);
    void (*_getNamedStringivARB)(boom::OpenGLInt, boom::OpenGLChar const*, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getnColorTable)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnColorTableARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnCompressedTexImage)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, void*);
    void (*_getnCompressedTexImageARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLSizei, void*);
    void (*_getnConvolutionFilter)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnConvolutionFilterARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getNextPerfQueryIdINTEL)(boom::OpenGLUint, boom::OpenGLUint*);
    void (*_getnHistogram)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnHistogramARB)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnMapdv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLDouble*);
    void (*_getnMapdvARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLDouble*);
    void (*_getnMapfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnMapfvARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnMapiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnMapivARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnMinmax)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnMinmaxARB)(boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnPixelMapfv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnPixelMapfvARB)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnPixelMapuiv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_getnPixelMapuivARB)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_getnPixelMapusv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUShort*);
    void (*_getnPixelMapusvARB)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUShort*);
    void (*_getnPolygonStipple)(boom::OpenGLSizei, boom::OpenGLUbyte*);
    void (*_getnPolygonStippleARB)(boom::OpenGLSizei, boom::OpenGLUbyte*);
    void (*_getnSeparableFilter)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*, boom::OpenGLSizei, void*, void*);
    void (*_getnSeparableFilterARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*, boom::OpenGLSizei, void*, void*);
    void (*_getnTexImage)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnTexImageARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getnUniformdv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble*);
    void (*_getnUniformdvARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble*);
    void (*_getnUniformfv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnUniformfvARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnUniformfvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnUniformfvKHR)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getnUniformi64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64*);
    void (*_getnUniformiv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnUniformivARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnUniformivEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnUniformivKHR)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_getnUniformui64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64*);
    void (*_getnUniformuiv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_getnUniformuivARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_getnUniformuivKHR)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_getObjectBufferfvATI)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getObjectBufferivATI)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getObjectLabel)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getObjectLabelEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getObjectLabelKHR)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getObjectParameterfvARB)(boom::OpenGLHandleARB, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getObjectParameterivAPPLE)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getObjectParameterivARB)(boom::OpenGLHandleARB, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getObjectPtrLabel)(void const*, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getObjectPtrLabelKHR)(void const*, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getOcclusionQueryivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getOcclusionQueryuivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getPathColorGenfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPathColorGenivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getPathCommandsNV)(boom::OpenGLUint, boom::OpenGLUbyte*);
    void (*_getPathCoordsNV)(boom::OpenGLUint, boom::OpenGLFloat*);
    void (*_getPathDashArrayNV)(boom::OpenGLUint, boom::OpenGLFloat*);
    boom::OpenGLFloat (*_getPathLengthNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_getPathMetricRangeNV)(boom::OpenGLBitfield, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getPathMetricsNV)(boom::OpenGLBitfield, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat*);
    void (*_getPathParameterfvNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPathParameterivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getPathSpacingNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPathTexGenfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPathTexGenivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getPerfCounterInfoINTEL)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLChar*, boom::OpenGLUint, boom::OpenGLChar*, boom::OpenGLUint*, boom::OpenGLUint*, boom::OpenGLUint*, boom::OpenGLUint*, boom::OpenGLUInt64*);
    void (*_getPerfMonitorCounterDataAMD)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint*, boom::OpenGLInt*);
    void (*_getPerfMonitorCounterInfoAMD)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, void*);
    void (*_getPerfMonitorCountersAMD)(boom::OpenGLUint, boom::OpenGLInt*, boom::OpenGLInt*, boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_getPerfMonitorCounterStringAMD)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getPerfMonitorGroupsAMD)(boom::OpenGLInt*, boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_getPerfMonitorGroupStringAMD)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getPerfQueryDataINTEL)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, void*, boom::OpenGLUint*);
    void (*_getPerfQueryIdByNameINTEL)(boom::OpenGLChar*, boom::OpenGLUint*);
    void (*_getPerfQueryInfoINTEL)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLChar*, boom::OpenGLUint*, boom::OpenGLUint*, boom::OpenGLUint*, boom::OpenGLUint*);
    void (*_getPixelMapfv)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPixelMapuiv)(boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getPixelMapusv)(boom::OpenGLEnum, boom::OpenGLUShort*);
    void (*_getPixelMapxv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFixed*);
    void (*_getPixelTexGenParameterfvSGIS)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPixelTexGenParameterivSGIS)(boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getPixelTransformParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getPixelTransformParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getPointerIndexedvEXT)(boom::OpenGLEnum, boom::OpenGLUint, void**);
    void (*_getPointeri_vEXT)(boom::OpenGLEnum, boom::OpenGLUint, void**);
    void (*_getPointerv)(boom::OpenGLEnum, void**);
    void (*_getPointervEXT)(boom::OpenGLEnum, void**);
    void (*_getPointervKHR)(boom::OpenGLEnum, void**);
    void (*_getPolygonStipple)(boom::OpenGLUbyte*);
    void (*_getProgramBinary)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLEnum*, void*);
    void (*_getProgramBinaryOES)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLEnum*, void*);
    void (*_getProgramEnvParameterdvARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble*);
    void (*_getProgramEnvParameterfvARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat*);
    void (*_getProgramEnvParameterIivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt*);
    void (*_getProgramEnvParameterIuivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint*);
    void (*_getProgramInfoLog)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getProgramInterfaceiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramivARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramLocalParameterdvARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble*);
    void (*_getProgramLocalParameterfvARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat*);
    void (*_getProgramLocalParameterIivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt*);
    void (*_getProgramLocalParameterIuivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint*);
    void (*_getProgramNamedParameterdvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUbyte const*, boom::OpenGLDouble*);
    void (*_getProgramNamedParameterfvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUbyte const*, boom::OpenGLFloat*);
    void (*_getProgramParameterdvNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getProgramParameterfvNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getProgramPipelineInfoLog)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getProgramPipelineInfoLogEXT)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getProgramPipelineiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramPipelineivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramResourcefvNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum const*, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLFloat*);
    boom::OpenGLUint (*_getProgramResourceIndex)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLChar const*);
    void (*_getProgramResourceiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum const*, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*);
    boom::OpenGLInt (*_getProgramResourceLocation)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getProgramResourceLocationIndex)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getProgramResourceLocationIndexEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLChar const*);
    void (*_getProgramResourceName)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getProgramStageiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getProgramStringARB)(boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getProgramStringNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUbyte*);
    void (*_getProgramSubroutineParameteruivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint*);
    void (*_getQueryBufferObjecti64v)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLIntptr);
    void (*_getQueryBufferObjectiv)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLIntptr);
    void (*_getQueryBufferObjectui64v)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLIntptr);
    void (*_getQueryBufferObjectuiv)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLIntptr);
    void (*_getQueryIndexediv)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryivARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryObjecti64v)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getQueryObjecti64vEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getQueryObjectiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryObjectivARB)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryObjectivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getQueryObjectui64v)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUInt64*);
    void (*_getQueryObjectui64vEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUInt64*);
    void (*_getQueryObjectuiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getQueryObjectuivARB)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getQueryObjectuivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getRenderbufferParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getRenderbufferParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getRenderbufferParameterivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSamplerParameterfv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getSamplerParameterIiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSamplerParameterIivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSamplerParameterIivOES)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSamplerParameterIuiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getSamplerParameterIuivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getSamplerParameterIuivOES)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getSamplerParameteriv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSemaphoreParameterivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getSemaphoreParameterui64vEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUInt64*);
    void (*_getSeparableFilter)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*, void*, void*);
    void (*_getSeparableFilterEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, void*, void*, void*);
    void (*_getShaderInfoLog)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getShaderiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getShaderPrecisionFormat)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*, boom::OpenGLInt*);
    void (*_getShaderSource)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    void (*_getShaderSourceARB)(boom::OpenGLHandleARB, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLCharARB*);
    void (*_getShadingRateImagePaletteNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum*);
    void (*_getShadingRateSampleLocationivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt*);
    void (*_getSharpenTexFuncSGIS)(boom::OpenGLEnum, boom::OpenGLFloat*);
    boom::OpenGLUShort (*_getStageIndexNV)(boom::OpenGLEnum);
    boom::OpenGLUbyte const* (*_getString)(boom::OpenGLEnum);
    boom::OpenGLUbyte const* (*_getStringi)(boom::OpenGLEnum, boom::OpenGLUint);
    boom::OpenGLUint (*_getSubroutineIndex)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getSubroutineUniformLocation)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLChar const*);
    void (*_getSynciv)(boom::OpenGLSync, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*);
    void (*_getSyncivAPPLE)(boom::OpenGLSync, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*);
    void (*_getTexBumpParameterfvATI)(boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexBumpParameterivATI)(boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexEnvfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexEnviv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexEnvxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getTexEnvxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getTexFilterFuncSGIS)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexGendv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getTexGenfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexGenfvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexGeniv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexGenivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexGenxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getTexImage)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getTexLevelParameterfv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexLevelParameteriv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexLevelParameterxvOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getTexParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTexParameterIiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexParameterIivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexParameterIivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexParameterIuiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getTexParameterIuivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getTexParameterIuivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getTexParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTexParameterPointervAPPLE)(boom::OpenGLEnum, boom::OpenGLEnum, void**);
    void (*_getTexParameterxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    void (*_getTexParameterxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed*);
    boom::OpenGLUInt64 (*_getTextureHandleARB)(boom::OpenGLUint);
    boom::OpenGLUInt64 (*_getTextureHandleIMG)(boom::OpenGLUint);
    boom::OpenGLUInt64 (*_getTextureHandleNV)(boom::OpenGLUint);
    void (*_getTextureImage)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getTextureImageEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_getTextureLevelParameterfv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTextureLevelParameterfvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTextureLevelParameteriv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTextureLevelParameterivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTextureParameterfv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTextureParameterfvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getTextureParameterIiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTextureParameterIivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTextureParameterIuiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getTextureParameterIuivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getTextureParameteriv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTextureParameterivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt*);
    boom::OpenGLUInt64 (*_getTextureSamplerHandleARB)(boom::OpenGLUint, boom::OpenGLUint);
    boom::OpenGLUInt64 (*_getTextureSamplerHandleIMG)(boom::OpenGLUint, boom::OpenGLUint);
    boom::OpenGLUInt64 (*_getTextureSamplerHandleNV)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_getTextureSubImage)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_getTrackMatrixivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTransformFeedbacki64_v)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt64*);
    void (*_getTransformFeedbackiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getTransformFeedbacki_v)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt*);
    void (*_getTransformFeedbackVarying)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLSizei*, boom::OpenGLEnum*, boom::OpenGLChar*);
    void (*_getTransformFeedbackVaryingEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLSizei*, boom::OpenGLEnum*, boom::OpenGLChar*);
    void (*_getTransformFeedbackVaryingNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt*);
    void (*_getTranslatedShaderSourceANGLE)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLChar*);
    boom::OpenGLUint (*_getUniformBlockIndex)(boom::OpenGLUint, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getUniformBufferSizeEXT)(boom::OpenGLUint, boom::OpenGLInt);
    void (*_getUniformdv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLDouble*);
    void (*_getUniformfv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLFloat*);
    void (*_getUniformfvARB)(boom::OpenGLHandleARB, boom::OpenGLInt, boom::OpenGLFloat*);
    void (*_getUniformi64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt64*);
    void (*_getUniformi64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt64EXT*);
    void (*_getUniformIndices)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLChar const* const*, boom::OpenGLUint*);
    void (*_getUniformiv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt*);
    void (*_getUniformivARB)(boom::OpenGLHandleARB, boom::OpenGLInt, boom::OpenGLInt*);
    boom::OpenGLInt (*_getUniformLocation)(boom::OpenGLUint, boom::OpenGLChar const*);
    boom::OpenGLInt (*_getUniformLocationARB)(boom::OpenGLHandleARB, boom::OpenGLCharARB const*);
    boom::OpenGLIntptr (*_getUniformOffsetEXT)(boom::OpenGLUint, boom::OpenGLInt);
    void (*_getUniformSubroutineuiv)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUint*);
    void (*_getUniformui64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64*);
    void (*_getUniformui64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64EXT*);
    void (*_getUniformuiv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint*);
    void (*_getUniformuivEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint*);
    void (*_getUnsignedBytei_vEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUbyte*);
    void (*_getUnsignedBytevEXT)(boom::OpenGLEnum, boom::OpenGLUbyte*);
    void (*_getVariantArrayObjectfvATI)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVariantArrayObjectivATI)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVariantBooleanvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLBoolean*);
    void (*_getVariantFloatvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVariantIntegervEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVariantPointervEXT)(boom::OpenGLUint, boom::OpenGLEnum, void**);
    boom::OpenGLInt (*_getVaryingLocationNV)(boom::OpenGLUint, boom::OpenGLChar const*);
    void (*_getVertexArrayIndexed64iv)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_getVertexArrayIndexediv)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexArrayIntegeri_vEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexArrayIntegervEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexArrayiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexArrayPointeri_vEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, void**);
    void (*_getVertexArrayPointervEXT)(boom::OpenGLUint, boom::OpenGLEnum, void**);
    void (*_getVertexAttribArrayObjectfvATI)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVertexAttribArrayObjectivATI)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribdv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVertexAttribdvARB)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVertexAttribdvNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVertexAttribfv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVertexAttribfvARB)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVertexAttribfvNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVertexAttribIiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribIivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribIuiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getVertexAttribIuivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_getVertexAttribiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribivARB)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVertexAttribLdv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVertexAttribLdvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVertexAttribLi64vNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt64EXT*);
    void (*_getVertexAttribLui64vARB)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getVertexAttribLui64vNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getVertexAttribPointerv)(boom::OpenGLUint, boom::OpenGLEnum, void**);
    void (*_getVertexAttribPointervARB)(boom::OpenGLUint, boom::OpenGLEnum, void**);
    void (*_getVertexAttribPointervNV)(boom::OpenGLUint, boom::OpenGLEnum, void**);
    void (*_getVideoCaptureivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVideoCaptureStreamdvNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLDouble*);
    void (*_getVideoCaptureStreamfvNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat*);
    void (*_getVideoCaptureStreamivNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVideoi64vNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt64EXT*);
    void (*_getVideoivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_getVideoui64vNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUInt64EXT*);
    void (*_getVideouivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    boom::OpenGLVulkanProcNV (*_getVkProcAddrNV)(boom::OpenGLChar const*);
    void (*_globalAlphaFactorbSUN)(boom::OpenGLByte);
    void (*_globalAlphaFactordSUN)(boom::OpenGLDouble);
    void (*_globalAlphaFactorfSUN)(boom::OpenGLFloat);
    void (*_globalAlphaFactoriSUN)(boom::OpenGLInt);
    void (*_globalAlphaFactorsSUN)(boom::OpenGLShort);
    void (*_globalAlphaFactorubSUN)(boom::OpenGLUbyte);
    void (*_globalAlphaFactoruiSUN)(boom::OpenGLUint);
    void (*_globalAlphaFactorusSUN)(boom::OpenGLUShort);
    void (*_hint)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_hintPGI)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_histogram)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLBoolean);
    void (*_histogramEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLBoolean);
    void (*_iglooInterfaceSGIX)(boom::OpenGLEnum, void const*);
    void (*_imageTransformParameterfHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_imageTransformParameterfvHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_imageTransformParameteriHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_imageTransformParameterivHP)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_importMemoryFdEXT)(boom::OpenGLUint, boom::OpenGLUInt64, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_importMemoryWin32HandleEXT)(boom::OpenGLUint, boom::OpenGLUInt64, boom::OpenGLEnum, void*);
    void (*_importMemoryWin32NameEXT)(boom::OpenGLUint, boom::OpenGLUInt64, boom::OpenGLEnum, void const*);
    void (*_importSemaphoreFdEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_importSemaphoreWin32HandleEXT)(boom::OpenGLUint, boom::OpenGLEnum, void*);
    void (*_importSemaphoreWin32NameEXT)(boom::OpenGLUint, boom::OpenGLEnum, void const*);
    boom::OpenGLSync (*_importSyncEXT)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLBitfield);
    void (*_indexd)(boom::OpenGLDouble);
    void (*_indexdv)(boom::OpenGLDouble const*);
    void (*_indexf)(boom::OpenGLFloat);
    void (*_indexFormatNV)(boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_indexFuncEXT)(boom::OpenGLEnum, boom::OpenGLClampf);
    void (*_indexfv)(boom::OpenGLFloat const*);
    void (*_indexi)(boom::OpenGLInt);
    void (*_indexiv)(boom::OpenGLInt const*);
    void (*_indexMask)(boom::OpenGLUint);
    void (*_indexMaterialEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_indexPointer)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_indexPointerEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, void const*);
    void (*_indexPointerListIBM)(boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_indexs)(boom::OpenGLShort);
    void (*_indexsv)(boom::OpenGLShort const*);
    void (*_indexub)(boom::OpenGLUbyte);
    void (*_indexubv)(boom::OpenGLUbyte const*);
    void (*_indexxOES)(boom::OpenGLFixed);
    void (*_indexxvOES)(boom::OpenGLFixed const*);
    void (*_initNames)();
    void (*_insertComponentEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_insertEventMarkerEXT)(boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_instrumentsBufferSGIX)(boom::OpenGLSizei, boom::OpenGLInt*);
    void (*_interleavedArrays)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_interpolatePathsNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLFloat);
    void (*_invalidateBufferData)(boom::OpenGLUint);
    void (*_invalidateBufferSubData)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_invalidateFramebuffer)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_invalidateNamedFramebufferData)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_invalidateNamedFramebufferSubData)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum const*, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_invalidateSubFramebuffer)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum const*, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_invalidateTexImage)(boom::OpenGLUint, boom::OpenGLInt);
    void (*_invalidateTexSubImage)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    boom::OpenGLBoolean (*_isAsyncMarkerSGIX)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isBuffer)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isBufferARB)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isBufferResidentNV)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_isCommandListNV)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isEnabled)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_isEnabledi)(boom::OpenGLEnum, boom::OpenGLUint);
    boom::OpenGLBoolean (*_isEnablediEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    boom::OpenGLBoolean (*_isEnabledIndexedEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    boom::OpenGLBoolean (*_isEnablediNV)(boom::OpenGLEnum, boom::OpenGLUint);
    boom::OpenGLBoolean (*_isEnablediOES)(boom::OpenGLEnum, boom::OpenGLUint);
    boom::OpenGLBoolean (*_isFenceAPPLE)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isFenceNV)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isFramebuffer)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isFramebufferEXT)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isFramebufferOES)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isImageHandleResidentARB)(boom::OpenGLUInt64);
    boom::OpenGLBoolean (*_isImageHandleResidentNV)(boom::OpenGLUInt64);
    boom::OpenGLBoolean (*_isList)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isMemoryObjectEXT)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isNameAMD)(boom::OpenGLEnum, boom::OpenGLUint);
    boom::OpenGLBoolean (*_isNamedBufferResidentNV)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isNamedStringARB)(boom::OpenGLInt, boom::OpenGLChar const*);
    boom::OpenGLBoolean (*_isObjectBufferATI)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isOcclusionQueryNV)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isPathNV)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isPointInFillPathNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat);
    boom::OpenGLBoolean (*_isPointInStrokePathNV)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat);
    boom::OpenGLBoolean (*_isProgram)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isProgramARB)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isProgramNV)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isProgramPipeline)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isProgramPipelineEXT)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isQuery)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isQueryARB)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isQueryEXT)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isRenderbuffer)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isRenderbufferEXT)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isRenderbufferOES)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isSampler)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isSemaphoreEXT)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isShader)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isStateNV)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isSync)(boom::OpenGLSync);
    boom::OpenGLBoolean (*_isSyncAPPLE)(boom::OpenGLSync);
    boom::OpenGLBoolean (*_isTexture)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isTextureEXT)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isTextureHandleResidentARB)(boom::OpenGLUInt64);
    boom::OpenGLBoolean (*_isTextureHandleResidentNV)(boom::OpenGLUInt64);
    boom::OpenGLBoolean (*_isTransformFeedback)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isTransformFeedbackNV)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isVariantEnabledEXT)(boom::OpenGLUint, boom::OpenGLEnum);
    boom::OpenGLBoolean (*_isVertexArray)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isVertexArrayAPPLE)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isVertexArrayOES)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_isVertexAttribEnabledAPPLE)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_labelObjectEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_lGPUCopyImageSubDataNVX)(boom::OpenGLUint, boom::OpenGLBitfield, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_lGPUInterlockNVX)();
    void (*_lGPUNamedBufferSubDataNVX)(boom::OpenGLBitfield, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void const*);
    void (*_lightEnviSGIX)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_lightf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_lightfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_lighti)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_lightiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_lightModelf)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_lightModelfv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_lightModeli)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_lightModeliv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_lightModelx)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_lightModelxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_lightModelxv)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_lightModelxvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_lightx)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_lightxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_lightxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_lightxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_lineStipple)(boom::OpenGLInt, boom::OpenGLUShort);
    void (*_lineWidth)(boom::OpenGLFloat);
    void (*_lineWidthx)(boom::OpenGLFixed);
    void (*_lineWidthxOES)(boom::OpenGLFixed);
    void (*_linkProgram)(boom::OpenGLUint);
    void (*_linkProgramARB)(boom::OpenGLHandleARB);
    void (*_listBase)(boom::OpenGLUint);
    void (*_listDrawCommandsStatesClientNV)(boom::OpenGLUint, boom::OpenGLUint, void const**, boom::OpenGLSizei const*, boom::OpenGLUint const*, boom::OpenGLUint const*, boom::OpenGLUint);
    void (*_listParameterfSGIX)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_listParameterfvSGIX)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_listParameteriSGIX)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_listParameterivSGIX)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_loadIdentity)();
    void (*_loadIdentityDeformationMapSGIX)(boom::OpenGLBitfield);
    void (*_loadMatrixd)(boom::OpenGLDouble const*);
    void (*_loadMatrixf)(boom::OpenGLFloat const*);
    void (*_loadMatrixx)(boom::OpenGLFixed const*);
    void (*_loadMatrixxOES)(boom::OpenGLFixed const*);
    void (*_loadName)(boom::OpenGLUint);
    void (*_loadPaletteFromModelViewMatrixOES)();
    void (*_loadProgramNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUbyte const*);
    void (*_loadTransposeMatrixd)(boom::OpenGLDouble const*);
    void (*_loadTransposeMatrixdARB)(boom::OpenGLDouble const*);
    void (*_loadTransposeMatrixf)(boom::OpenGLFloat const*);
    void (*_loadTransposeMatrixfARB)(boom::OpenGLFloat const*);
    void (*_loadTransposeMatrixxOES)(boom::OpenGLFixed const*);
    void (*_lockArraysEXT)(boom::OpenGLInt, boom::OpenGLSizei);
    void (*_logicOp)(boom::OpenGLEnum);
    void (*_makeBufferNonResidentNV)(boom::OpenGLEnum);
    void (*_makeBufferResidentNV)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_makeImageHandleNonResidentARB)(boom::OpenGLUInt64);
    void (*_makeImageHandleNonResidentNV)(boom::OpenGLUInt64);
    void (*_makeImageHandleResidentARB)(boom::OpenGLUInt64, boom::OpenGLEnum);
    void (*_makeImageHandleResidentNV)(boom::OpenGLUInt64, boom::OpenGLEnum);
    void (*_makeNamedBufferNonResidentNV)(boom::OpenGLUint);
    void (*_makeNamedBufferResidentNV)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_makeTextureHandleNonResidentARB)(boom::OpenGLUInt64);
    void (*_makeTextureHandleNonResidentNV)(boom::OpenGLUInt64);
    void (*_makeTextureHandleResidentARB)(boom::OpenGLUInt64);
    void (*_makeTextureHandleResidentNV)(boom::OpenGLUInt64);
    void (*_map1d)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_map1f)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_map1xOES)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFixed);
    void (*_map2d)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_map2f)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_map2xOES)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFixed);
    void* (*_mapBuffer)(boom::OpenGLEnum, boom::OpenGLEnum);
    void* (*_mapBufferARB)(boom::OpenGLEnum, boom::OpenGLEnum);
    void* (*_mapBufferOES)(boom::OpenGLEnum, boom::OpenGLEnum);
    void* (*_mapBufferRange)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBitfield);
    void* (*_mapBufferRangeEXT)(boom::OpenGLEnum, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBitfield);
    void (*_mapControlPointsNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBoolean, void const*);
    void (*_mapGrid1d)(boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_mapGrid1f)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_mapGrid1xOES)(boom::OpenGLInt, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_mapGrid2d)(boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_mapGrid2f)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_mapGrid2xOES)(boom::OpenGLInt, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void* (*_mapNamedBuffer)(boom::OpenGLUint, boom::OpenGLEnum);
    void* (*_mapNamedBufferEXT)(boom::OpenGLUint, boom::OpenGLEnum);
    void* (*_mapNamedBufferRange)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBitfield);
    void* (*_mapNamedBufferRangeEXT)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBitfield);
    void* (*_mapObjectBufferATI)(boom::OpenGLUint);
    void (*_mapParameterfvNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_mapParameterivNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void* (*_mapTexture2DINTEL)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLInt*, boom::OpenGLEnum*);
    void (*_mapVertexAttrib1dAPPLE)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_mapVertexAttrib1fAPPLE)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_mapVertexAttrib2dAPPLE)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_mapVertexAttrib2fAPPLE)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_materialf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_materialfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_materiali)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_materialiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_materialx)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_materialxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_materialxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_materialxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_matrixFrustumEXT)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_matrixIndexPointerARB)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_matrixIndexPointerOES)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_matrixIndexubvARB)(boom::OpenGLInt, boom::OpenGLUbyte const*);
    void (*_matrixIndexuivARB)(boom::OpenGLInt, boom::OpenGLUint const*);
    void (*_matrixIndexusvARB)(boom::OpenGLInt, boom::OpenGLUShort const*);
    void (*_matrixLoad3x2fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixLoad3x3fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixLoaddEXT)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_matrixLoadfEXT)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixLoadIdentityEXT)(boom::OpenGLEnum);
    void (*_matrixLoadTranspose3x3fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixLoadTransposedEXT)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_matrixLoadTransposefEXT)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixMode)(boom::OpenGLEnum);
    void (*_matrixMult3x2fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixMult3x3fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixMultdEXT)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_matrixMultfEXT)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixMultTranspose3x3fNV)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixMultTransposedEXT)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_matrixMultTransposefEXT)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_matrixOrthoEXT)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_matrixPopEXT)(boom::OpenGLEnum);
    void (*_matrixPushEXT)(boom::OpenGLEnum);
    void (*_matrixRotatedEXT)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_matrixRotatefEXT)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_matrixScaledEXT)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_matrixScalefEXT)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_matrixTranslatedEXT)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_matrixTranslatefEXT)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_maxShaderCompilerThreadsARB)(boom::OpenGLUint);
    void (*_maxShaderCompilerThreadsKHR)(boom::OpenGLUint);
    void (*_memoryBarrier)(boom::OpenGLBitfield);
    void (*_memoryBarrierByRegion)(boom::OpenGLBitfield);
    void (*_memoryBarrierEXT)(boom::OpenGLBitfield);
    void (*_memoryObjectParameterivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_minmax)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLBoolean);
    void (*_minmaxEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLBoolean);
    void (*_minSampleShading)(boom::OpenGLFloat);
    void (*_minSampleShadingARB)(boom::OpenGLFloat);
    void (*_minSampleShadingOES)(boom::OpenGLFloat);
    void (*_multicastBarrierNV)();
    void (*_multicastBlitFramebufferNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLBitfield, boom::OpenGLEnum);
    void (*_multicastBufferSubDataNV)(boom::OpenGLBitfield, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void const*);
    void (*_multicastCopyBufferSubDataNV)(boom::OpenGLUint, boom::OpenGLBitfield, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_multicastCopyImageSubDataNV)(boom::OpenGLUint, boom::OpenGLBitfield, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multicastFramebufferSampleLocationsfvNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_multicastGetQueryObjecti64vNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt64*);
    void (*_multicastGetQueryObjectivNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt*);
    void (*_multicastGetQueryObjectui64vNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUInt64*);
    void (*_multicastGetQueryObjectuivNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint*);
    void (*_multicastScissorArrayvNVX)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_multicastViewportArrayvNVX)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_multicastViewportPositionWScaleNVX)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multicastWaitSyncNV)(boom::OpenGLUint, boom::OpenGLBitfield);
    void (*_multiDrawArrays)(boom::OpenGLEnum, boom::OpenGLInt const*, boom::OpenGLSizei const*, boom::OpenGLSizei);
    void (*_multiDrawArraysEXT)(boom::OpenGLEnum, boom::OpenGLInt const*, boom::OpenGLSizei const*, boom::OpenGLSizei);
    void (*_multiDrawArraysIndirect)(boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawArraysIndirectAMD)(boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawArraysIndirectBindlessCountNV)(boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiDrawArraysIndirectBindlessNV)(boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiDrawArraysIndirectCount)(boom::OpenGLEnum, void const*, boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawArraysIndirectCountARB)(boom::OpenGLEnum, void const*, boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawArraysIndirectEXT)(boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawElementArrayAPPLE)(boom::OpenGLEnum, boom::OpenGLInt const*, boom::OpenGLSizei const*, boom::OpenGLSizei);
    void (*_multiDrawElements)(boom::OpenGLEnum, boom::OpenGLSizei const*, boom::OpenGLEnum, void const* const*, boom::OpenGLSizei);
    void (*_multiDrawElementsBaseVertex)(boom::OpenGLEnum, boom::OpenGLSizei const*, boom::OpenGLEnum, void const* const*, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_multiDrawElementsBaseVertexEXT)(boom::OpenGLEnum, boom::OpenGLSizei const*, boom::OpenGLEnum, void const* const*, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_multiDrawElementsEXT)(boom::OpenGLEnum, boom::OpenGLSizei const*, boom::OpenGLEnum, void const* const*, boom::OpenGLSizei);
    void (*_multiDrawElementsIndirect)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawElementsIndirectAMD)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawElementsIndirectBindlessCountNV)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiDrawElementsIndirectBindlessNV)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiDrawElementsIndirectCount)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawElementsIndirectCountARB)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawElementsIndirectEXT)(boom::OpenGLEnum, boom::OpenGLEnum, void const*, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawMeshTasksIndirectCountNV)(boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawMeshTasksIndirectNV)(boom::OpenGLIntptr, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_multiDrawRangeElementArrayAPPLE)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt const*, boom::OpenGLSizei const*, boom::OpenGLSizei);
    void (*_multiModeDrawArraysIBM)(boom::OpenGLEnum const*, boom::OpenGLInt const*, boom::OpenGLSizei const*, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiModeDrawElementsIBM)(boom::OpenGLEnum const*, boom::OpenGLSizei const*, boom::OpenGLEnum, void const* const*, boom::OpenGLSizei, boom::OpenGLInt);
    void (*_multiTexBufferEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_multiTexCoord1bOES)(boom::OpenGLEnum, boom::OpenGLByte);
    void (*_multiTexCoord1bvOES)(boom::OpenGLEnum, boom::OpenGLByte const*);
    void (*_multiTexCoord1d)(boom::OpenGLEnum, boom::OpenGLDouble);
    void (*_multiTexCoord1dARB)(boom::OpenGLEnum, boom::OpenGLDouble);
    void (*_multiTexCoord1dv)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord1dvARB)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord1f)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_multiTexCoord1fARB)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_multiTexCoord1fv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord1fvARB)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord1hNV)(boom::OpenGLEnum, boom::OpenGLHalfNV);
    void (*_multiTexCoord1hvNV)(boom::OpenGLEnum, boom::OpenGLHalfNV const*);
    void (*_multiTexCoord1i)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_multiTexCoord1iARB)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_multiTexCoord1iv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord1ivARB)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord1s)(boom::OpenGLEnum, boom::OpenGLShort);
    void (*_multiTexCoord1sARB)(boom::OpenGLEnum, boom::OpenGLShort);
    void (*_multiTexCoord1sv)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord1svARB)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord1xOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_multiTexCoord1xvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_multiTexCoord2bOES)(boom::OpenGLEnum, boom::OpenGLByte, boom::OpenGLByte);
    void (*_multiTexCoord2bvOES)(boom::OpenGLEnum, boom::OpenGLByte const*);
    void (*_multiTexCoord2d)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord2dARB)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord2dv)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord2dvARB)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord2f)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord2fARB)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord2fv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord2fvARB)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord2hNV)(boom::OpenGLEnum, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_multiTexCoord2hvNV)(boom::OpenGLEnum, boom::OpenGLHalfNV const*);
    void (*_multiTexCoord2i)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord2iARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord2iv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord2ivARB)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord2s)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord2sARB)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord2sv)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord2svARB)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord2xOES)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_multiTexCoord2xvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_multiTexCoord3bOES)(boom::OpenGLEnum, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_multiTexCoord3bvOES)(boom::OpenGLEnum, boom::OpenGLByte const*);
    void (*_multiTexCoord3d)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord3dARB)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord3dv)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord3dvARB)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord3f)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord3fARB)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord3fv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord3fvARB)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord3hNV)(boom::OpenGLEnum, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_multiTexCoord3hvNV)(boom::OpenGLEnum, boom::OpenGLHalfNV const*);
    void (*_multiTexCoord3i)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord3iARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord3iv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord3ivARB)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord3s)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord3sARB)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord3sv)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord3svARB)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord3xOES)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_multiTexCoord3xvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_multiTexCoord4bOES)(boom::OpenGLEnum, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_multiTexCoord4bvOES)(boom::OpenGLEnum, boom::OpenGLByte const*);
    void (*_multiTexCoord4d)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord4dARB)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_multiTexCoord4dv)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord4dvARB)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexCoord4f)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord4fARB)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_multiTexCoord4fv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord4fvARB)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexCoord4hNV)(boom::OpenGLEnum, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_multiTexCoord4hvNV)(boom::OpenGLEnum, boom::OpenGLHalfNV const*);
    void (*_multiTexCoord4i)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord4iARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_multiTexCoord4iv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord4ivARB)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexCoord4s)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord4sARB)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_multiTexCoord4sv)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord4svARB)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_multiTexCoord4x)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_multiTexCoord4xOES)(boom::OpenGLEnum, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_multiTexCoord4xvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_multiTexCoordP1ui)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_multiTexCoordP1uiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_multiTexCoordP2ui)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_multiTexCoordP2uiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_multiTexCoordP3ui)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_multiTexCoordP3uiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_multiTexCoordP4ui)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_multiTexCoordP4uiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_multiTexCoordPointerEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_multiTexEnvfEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_multiTexEnvfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexEnviEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_multiTexEnvivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexGendEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble);
    void (*_multiTexGendvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_multiTexGenfEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_multiTexGenfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexGeniEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_multiTexGenivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multiTexImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multiTexImage3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multiTexParameterfEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_multiTexParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_multiTexParameteriEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_multiTexParameterIivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexParameterIuivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_multiTexParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_multiTexRenderbufferEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_multiTexSubImage1DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multiTexSubImage2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multiTexSubImage3DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_multMatrixd)(boom::OpenGLDouble const*);
    void (*_multMatrixf)(boom::OpenGLFloat const*);
    void (*_multMatrixx)(boom::OpenGLFixed const*);
    void (*_multMatrixxOES)(boom::OpenGLFixed const*);
    void (*_multTransposeMatrixd)(boom::OpenGLDouble const*);
    void (*_multTransposeMatrixdARB)(boom::OpenGLDouble const*);
    void (*_multTransposeMatrixf)(boom::OpenGLFloat const*);
    void (*_multTransposeMatrixfARB)(boom::OpenGLFloat const*);
    void (*_multTransposeMatrixxOES)(boom::OpenGLFixed const*);
    void (*_namedBufferAttachMemoryNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_namedBufferData)(boom::OpenGLUint, boom::OpenGLSizeiptr, void const*, boom::OpenGLEnum);
    void (*_namedBufferDataEXT)(boom::OpenGLUint, boom::OpenGLSizeiptr, void const*, boom::OpenGLEnum);
    void (*_namedBufferPageCommitmentARB)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBoolean);
    void (*_namedBufferPageCommitmentEXT)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLBoolean);
    void (*_namedBufferPageCommitmentMemNV)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLUint, boom::OpenGLUInt64, boom::OpenGLBoolean);
    void (*_namedBufferStorage)(boom::OpenGLUint, boom::OpenGLSizeiptr, void const*, boom::OpenGLBitfield);
    void (*_namedBufferStorageEXT)(boom::OpenGLUint, boom::OpenGLSizeiptr, void const*, boom::OpenGLBitfield);
    void (*_namedBufferStorageExternalEXT)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, boom::OpenGLEGLClientBufferEXT, boom::OpenGLBitfield);
    void (*_namedBufferStorageMemEXT)(boom::OpenGLUint, boom::OpenGLSizeiptr, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_namedBufferSubData)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void const*);
    void (*_namedBufferSubDataEXT)(boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr, void const*);
    void (*_namedCopyBufferSubDataEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_namedFramebufferDrawBuffer)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_namedFramebufferDrawBuffers)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_namedFramebufferParameteri)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_namedFramebufferParameteriEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_namedFramebufferReadBuffer)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_namedFramebufferRenderbuffer)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_namedFramebufferRenderbufferEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_namedFramebufferSampleLocationsfvARB)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_namedFramebufferSampleLocationsfvNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_namedFramebufferSamplePositionsfvAMD)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_namedFramebufferTexture)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_namedFramebufferTexture1DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_namedFramebufferTexture2DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_namedFramebufferTexture3DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_namedFramebufferTextureEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt);
    void (*_namedFramebufferTextureFaceEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum);
    void (*_namedFramebufferTextureLayer)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_namedFramebufferTextureLayerEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_namedProgramLocalParameter4dEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_namedProgramLocalParameter4dvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_namedProgramLocalParameter4fEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_namedProgramLocalParameter4fvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_namedProgramLocalParameterI4iEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_namedProgramLocalParameterI4ivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_namedProgramLocalParameterI4uiEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_namedProgramLocalParameterI4uivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_namedProgramLocalParameters4fvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_namedProgramLocalParametersI4ivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_namedProgramLocalParametersI4uivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_namedProgramStringEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_namedRenderbufferStorage)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedRenderbufferStorageEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedRenderbufferStorageMultisample)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedRenderbufferStorageMultisampleAdvancedAMD)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedRenderbufferStorageMultisampleCoverageEXT)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedRenderbufferStorageMultisampleEXT)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_namedStringARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLChar const*, boom::OpenGLInt, boom::OpenGLChar const*);
    void (*_newList)(boom::OpenGLUint, boom::OpenGLEnum);
    boom::OpenGLUint (*_newObjectBufferATI)(boom::OpenGLSizei, void const*, boom::OpenGLEnum);
    void (*_normal3b)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_normal3bv)(boom::OpenGLByte const*);
    void (*_normal3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_normal3dv)(boom::OpenGLDouble const*);
    void (*_normal3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_normal3fv)(boom::OpenGLFloat const*);
    void (*_normal3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_normal3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_normal3hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_normal3hvNV)(boom::OpenGLHalfNV const*);
    void (*_normal3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_normal3iv)(boom::OpenGLInt const*);
    void (*_normal3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_normal3sv)(boom::OpenGLShort const*);
    void (*_normal3x)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_normal3xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_normal3xvOES)(boom::OpenGLFixed const*);
    void (*_normalFormatNV)(boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_normalP3ui)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_normalP3uiv)(boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_normalPointer)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_normalPointerEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, void const*);
    void (*_normalPointerListIBM)(boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_normalPointervINTEL)(boom::OpenGLEnum, void const**);
    void (*_normalStream3bATI)(boom::OpenGLEnum, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_normalStream3bvATI)(boom::OpenGLEnum, boom::OpenGLByte const*);
    void (*_normalStream3dATI)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_normalStream3dvATI)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_normalStream3fATI)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_normalStream3fvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_normalStream3iATI)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_normalStream3ivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_normalStream3sATI)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_normalStream3svATI)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_objectLabel)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_objectLabelKHR)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_objectPtrLabel)(void const*, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_objectPtrLabelKHR)(void const*, boom::OpenGLSizei, boom::OpenGLChar const*);
    boom::OpenGLEnum (*_objectPurgeableAPPLE)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum);
    boom::OpenGLEnum (*_objectUnpurgeableAPPLE)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum);
    void (*_ortho)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_orthof)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_orthofOES)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_orthox)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_orthoxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_passTexCoordATI)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum);
    void (*_passThrough)(boom::OpenGLFloat);
    void (*_passThroughxOES)(boom::OpenGLFixed);
    void (*_patchParameterfv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_patchParameteri)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_patchParameteriEXT)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_patchParameteriOES)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pathColorGenNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pathCommandsNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUbyte const*, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_pathCoordsNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_pathCoverDepthFuncNV)(boom::OpenGLEnum);
    void (*_pathDashArrayNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_pathFogGenNV)(boom::OpenGLEnum);
    boom::OpenGLEnum (*_pathGlyphIndexArrayNV)(boom::OpenGLUint, boom::OpenGLEnum, void const*, boom::OpenGLBitfield, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLFloat);
    boom::OpenGLEnum (*_pathGlyphIndexRangeNV)(boom::OpenGLEnum, void const*, boom::OpenGLBitfield, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLUint*);
    void (*_pathGlyphRangeNV)(boom::OpenGLUint, boom::OpenGLEnum, void const*, boom::OpenGLBitfield, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat);
    void (*_pathGlyphsNV)(boom::OpenGLUint, boom::OpenGLEnum, void const*, boom::OpenGLBitfield, boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat);
    boom::OpenGLEnum (*_pathMemoryGlyphIndexArrayNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizeiptr, void const*, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLFloat);
    void (*_pathParameterfNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pathParameterfvNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pathParameteriNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pathParameterivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_pathStencilDepthOffsetNV)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_pathStencilFuncNV)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUint);
    void (*_pathStringNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_pathSubCommandsNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUbyte const*, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_pathSubCoordsNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, void const*);
    void (*_pathTexGenNV)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_pauseTransformFeedback)();
    void (*_pauseTransformFeedbackNV)();
    void (*_pixelDataRangeNV)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_pixelMapfv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_pixelMapuiv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_pixelMapusv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUShort const*);
    void (*_pixelMapx)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFixed const*);
    void (*_pixelStoref)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pixelStorei)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pixelStorex)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_pixelTexGenParameterfSGIS)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pixelTexGenParameterfvSGIS)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pixelTexGenParameteriSGIS)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pixelTexGenParameterivSGIS)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_pixelTexGenSGIX)(boom::OpenGLEnum);
    void (*_pixelTransferf)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pixelTransferi)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pixelTransferxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_pixelTransformParameterfEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pixelTransformParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pixelTransformParameteriEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pixelTransformParameterivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_pixelZoom)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_pixelZoomxOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_pNTrianglesfATI)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pNTrianglesiATI)(boom::OpenGLEnum, boom::OpenGLInt);
    boom::OpenGLBoolean (*_pointAlongPathNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLFloat, boom::OpenGLFloat*, boom::OpenGLFloat*, boom::OpenGLFloat*, boom::OpenGLFloat*);
    void (*_pointParameterf)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pointParameterfARB)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pointParameterfEXT)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pointParameterfSGIS)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_pointParameterfv)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pointParameterfvARB)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pointParameterfvEXT)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pointParameterfvSGIS)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_pointParameteri)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pointParameteriNV)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_pointParameteriv)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_pointParameterivNV)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_pointParameterx)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_pointParameterxOES)(boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_pointParameterxv)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_pointParameterxvOES)(boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_pointSize)(boom::OpenGLFloat);
    void (*_pointSizePointerOES)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_pointSizex)(boom::OpenGLFixed);
    void (*_pointSizexOES)(boom::OpenGLFixed);
    boom::OpenGLInt (*_pollAsyncSGIX)(boom::OpenGLUint*);
    boom::OpenGLInt (*_pollInstrumentsSGIX)(boom::OpenGLInt*);
    void (*_polygonMode)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_polygonModeNV)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_polygonOffset)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_polygonOffsetClamp)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_polygonOffsetClampEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_polygonOffsetEXT)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_polygonOffsetx)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_polygonOffsetxOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_polygonStipple)(boom::OpenGLUbyte const*);
    void (*_popAttrib)();
    void (*_popClientAttrib)();
    void (*_popDebugGroup)();
    void (*_popDebugGroupKHR)();
    void (*_popGroupMarkerEXT)();
    void (*_popMatrix)();
    void (*_popName)();
    void (*_presentFrameDualFillNV)(boom::OpenGLUint, boom::OpenGLUInt64EXT, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_presentFrameKeyedNV)(boom::OpenGLUint, boom::OpenGLUInt64EXT, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint);
    void (*_primitiveBoundingBox)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_primitiveBoundingBoxARB)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_primitiveBoundingBoxEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_primitiveBoundingBoxOES)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_primitiveRestartIndex)(boom::OpenGLUint);
    void (*_primitiveRestartIndexNV)(boom::OpenGLUint);
    void (*_primitiveRestartNV)();
    void (*_prioritizeTextures)(boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLFloat const*);
    void (*_prioritizeTexturesEXT)(boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLClampf const*);
    void (*_prioritizeTexturesxOES)(boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLFixed const*);
    void (*_programBinary)(boom::OpenGLUint, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_programBinaryOES)(boom::OpenGLUint, boom::OpenGLEnum, void const*, boom::OpenGLInt);
    void (*_programBufferParametersfvNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programBufferParametersIivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programBufferParametersIuivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programEnvParameter4dARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programEnvParameter4dvARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_programEnvParameter4fARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programEnvParameter4fvARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_programEnvParameterI4iNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programEnvParameterI4ivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_programEnvParameterI4uiNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_programEnvParameterI4uivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_programEnvParameters4fvEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programEnvParametersI4ivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programEnvParametersI4uivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programLocalParameter4dARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programLocalParameter4dvARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_programLocalParameter4fARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programLocalParameter4fvARB)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_programLocalParameterI4iNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programLocalParameterI4ivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_programLocalParameterI4uiNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_programLocalParameterI4uivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_programLocalParameters4fvEXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programLocalParametersI4ivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programLocalParametersI4uivNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programNamedParameter4dNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUbyte const*, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programNamedParameter4dvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUbyte const*, boom::OpenGLDouble const*);
    void (*_programNamedParameter4fNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUbyte const*, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programNamedParameter4fvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUbyte const*, boom::OpenGLFloat const*);
    void (*_programParameter4dNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programParameter4dvNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_programParameter4fNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programParameter4fvNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_programParameteri)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_programParameteriARB)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_programParameteriEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_programParameters4dvNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programParameters4fvNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programPathFragmentInputGenNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_programStringARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_programSubroutineParametersuivNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programUniform1d)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLDouble);
    void (*_programUniform1dEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLDouble);
    void (*_programUniform1dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform1dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform1f)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLFloat);
    void (*_programUniform1fEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLFloat);
    void (*_programUniform1fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform1fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform1i)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform1i64ARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt64);
    void (*_programUniform1i64NV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt64EXT);
    void (*_programUniform1i64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_programUniform1i64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_programUniform1iEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform1iv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform1ivEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform1ui)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint);
    void (*_programUniform1ui64ARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_programUniform1ui64NV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64EXT);
    void (*_programUniform1ui64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniform1ui64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_programUniform1uiEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint);
    void (*_programUniform1uiv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programUniform1uivEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programUniform2d)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform2dEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform2dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform2dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform2f)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform2fEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform2fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform2fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform2i)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform2i64ARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_programUniform2i64NV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_programUniform2i64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_programUniform2i64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_programUniform2iEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform2iv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform2ivEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform2ui)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint);
    void (*_programUniform2ui64ARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_programUniform2ui64NV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_programUniform2ui64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniform2ui64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_programUniform2uiEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint);
    void (*_programUniform2uiv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programUniform2uivEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programUniform3d)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform3dEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform3dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform3dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform3f)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform3fEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform3fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform3fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform3i)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform3i64ARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_programUniform3i64NV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_programUniform3i64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_programUniform3i64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_programUniform3iEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform3iv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform3ivEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform3ui)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_programUniform3ui64ARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_programUniform3ui64NV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_programUniform3ui64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniform3ui64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_programUniform3uiEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_programUniform3uiv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programUniform3uivEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programUniform4d)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform4dEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_programUniform4dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform4dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_programUniform4f)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform4fEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_programUniform4fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform4fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_programUniform4i)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform4i64ARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_programUniform4i64NV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_programUniform4i64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_programUniform4i64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_programUniform4iEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_programUniform4iv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform4ivEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_programUniform4ui)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_programUniform4ui64ARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_programUniform4ui64NV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_programUniform4ui64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniform4ui64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_programUniform4uiEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_programUniform4uiv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programUniform4uivEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_programUniformHandleui64ARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_programUniformHandleui64IMG)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_programUniformHandleui64NV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_programUniformHandleui64vARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniformHandleui64vIMG)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniformHandleui64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_programUniformMatrix2dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix2fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix2x3dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2x3dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2x3fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix2x3fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix2x4dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2x4dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix2x4fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix2x4fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3x2dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3x2dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3x2fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3x2fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3x4dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3x4dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix3x4fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix3x4fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4x2dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4x2dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4x2fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4x2fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4x3dv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4x3dvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_programUniformMatrix4x3fv)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformMatrix4x3fvEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_programUniformui64NV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUInt64EXT);
    void (*_programUniformui64vNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_programVertexLimitNV)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_provokingVertex)(boom::OpenGLEnum);
    void (*_provokingVertexEXT)(boom::OpenGLEnum);
    void (*_pushAttrib)(boom::OpenGLBitfield);
    void (*_pushClientAttrib)(boom::OpenGLBitfield);
    void (*_pushClientAttribDefaultEXT)(boom::OpenGLBitfield);
    void (*_pushDebugGroup)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_pushDebugGroupKHR)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_pushGroupMarkerEXT)(boom::OpenGLSizei, boom::OpenGLChar const*);
    void (*_pushMatrix)();
    void (*_pushName)(boom::OpenGLUint);
    void (*_queryCounter)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_queryCounterEXT)(boom::OpenGLUint, boom::OpenGLEnum);
    boom::OpenGLBitfield (*_queryMatrixxOES)(boom::OpenGLFixed*, boom::OpenGLInt*);
    void (*_queryObjectParameteruiAMD)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint);
    boom::OpenGLInt (*_queryResourceNV)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLInt*);
    void (*_queryResourceTagNV)(boom::OpenGLInt, boom::OpenGLChar const*);
    void (*_rasterPos2d)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_rasterPos2dv)(boom::OpenGLDouble const*);
    void (*_rasterPos2f)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_rasterPos2fv)(boom::OpenGLFloat const*);
    void (*_rasterPos2i)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_rasterPos2iv)(boom::OpenGLInt const*);
    void (*_rasterPos2s)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_rasterPos2sv)(boom::OpenGLShort const*);
    void (*_rasterPos2xOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_rasterPos2xvOES)(boom::OpenGLFixed const*);
    void (*_rasterPos3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_rasterPos3dv)(boom::OpenGLDouble const*);
    void (*_rasterPos3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_rasterPos3fv)(boom::OpenGLFloat const*);
    void (*_rasterPos3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_rasterPos3iv)(boom::OpenGLInt const*);
    void (*_rasterPos3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_rasterPos3sv)(boom::OpenGLShort const*);
    void (*_rasterPos3xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_rasterPos3xvOES)(boom::OpenGLFixed const*);
    void (*_rasterPos4d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_rasterPos4dv)(boom::OpenGLDouble const*);
    void (*_rasterPos4f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_rasterPos4fv)(boom::OpenGLFloat const*);
    void (*_rasterPos4i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_rasterPos4iv)(boom::OpenGLInt const*);
    void (*_rasterPos4s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_rasterPos4sv)(boom::OpenGLShort const*);
    void (*_rasterPos4xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_rasterPos4xvOES)(boom::OpenGLFixed const*);
    void (*_rasterSamplesEXT)(boom::OpenGLUint, boom::OpenGLBoolean);
    void (*_readBuffer)(boom::OpenGLEnum);
    void (*_readBufferIndexedEXT)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_readBufferNV)(boom::OpenGLEnum);
    void (*_readInstrumentsSGIX)(boom::OpenGLInt);
    void (*_readnPixels)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_readnPixelsARB)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_readnPixelsEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_readnPixelsKHR)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, void*);
    void (*_readPixels)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void*);
    void (*_rectd)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_rectdv)(boom::OpenGLDouble const*, boom::OpenGLDouble const*);
    void (*_rectf)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_rectfv)(boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_recti)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_rectiv)(boom::OpenGLInt const*, boom::OpenGLInt const*);
    void (*_rects)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_rectsv)(boom::OpenGLShort const*, boom::OpenGLShort const*);
    void (*_rectxOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_rectxvOES)(boom::OpenGLFixed const*, boom::OpenGLFixed const*);
    void (*_referencePlaneSGIX)(boom::OpenGLDouble const*);
    boom::OpenGLBoolean (*_releaseKeyedMutexWin32EXT)(boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_releaseShaderCompiler)();
    void (*_renderbufferStorage)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisample)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleAdvancedAMD)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleANGLE)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleAPPLE)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleCoverageNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleIMG)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageMultisampleNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderbufferStorageOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_renderGpuMaskNV)(boom::OpenGLBitfield);
    boom::OpenGLInt (*_renderMode)(boom::OpenGLEnum);
    void (*_replacementCodePointerSUN)(boom::OpenGLEnum, boom::OpenGLSizei, void const**);
    void (*_replacementCodeubSUN)(boom::OpenGLUbyte);
    void (*_replacementCodeubvSUN)(boom::OpenGLUbyte const*);
    void (*_replacementCodeuiColor3fVertex3fSUN)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiColor3fVertex3fvSUN)(boom::OpenGLUint const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiColor4fNormal3fVertex3fSUN)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiColor4fNormal3fVertex3fvSUN)(boom::OpenGLUint const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiColor4ubVertex3fSUN)(boom::OpenGLUint, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiColor4ubVertex3fvSUN)(boom::OpenGLUint const*, boom::OpenGLUbyte const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiNormal3fVertex3fSUN)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiNormal3fVertex3fvSUN)(boom::OpenGLUint const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiSUN)(boom::OpenGLUint);
    void (*_replacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN)(boom::OpenGLUint const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiTexCoord2fNormal3fVertex3fSUN)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiTexCoord2fNormal3fVertex3fvSUN)(boom::OpenGLUint const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiTexCoord2fVertex3fSUN)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiTexCoord2fVertex3fvSUN)(boom::OpenGLUint const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuiVertex3fSUN)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_replacementCodeuiVertex3fvSUN)(boom::OpenGLUint const*, boom::OpenGLFloat const*);
    void (*_replacementCodeuivSUN)(boom::OpenGLUint const*);
    void (*_replacementCodeusSUN)(boom::OpenGLUShort);
    void (*_replacementCodeusvSUN)(boom::OpenGLUShort const*);
    void (*_requestResidentProgramsNV)(boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_resetHistogram)(boom::OpenGLEnum);
    void (*_resetHistogramEXT)(boom::OpenGLEnum);
    void (*_resetMemoryObjectParameterNV)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_resetMinmax)(boom::OpenGLEnum);
    void (*_resetMinmaxEXT)(boom::OpenGLEnum);
    void (*_resizeBuffersMESA)();
    void (*_resolveDepthValuesNV)();
    void (*_resolveMultisampleFramebufferAPPLE)();
    void (*_resumeTransformFeedback)();
    void (*_resumeTransformFeedbackNV)();
    void (*_rotated)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_rotatef)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_rotatex)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_rotatexOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_sampleCoverage)(boom::OpenGLFloat, boom::OpenGLBoolean);
    void (*_sampleCoverageARB)(boom::OpenGLFloat, boom::OpenGLBoolean);
    void (*_sampleCoveragex)(boom::OpenGLClampx, boom::OpenGLBoolean);
    void (*_sampleCoveragexOES)(boom::OpenGLClampx, boom::OpenGLBoolean);
    void (*_sampleMapATI)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum);
    void (*_sampleMaskEXT)(boom::OpenGLClampf, boom::OpenGLBoolean);
    void (*_sampleMaski)(boom::OpenGLUint, boom::OpenGLBitfield);
    void (*_sampleMaskIndexedNV)(boom::OpenGLUint, boom::OpenGLBitfield);
    void (*_sampleMaskSGIS)(boom::OpenGLClampf, boom::OpenGLBoolean);
    void (*_samplePatternEXT)(boom::OpenGLEnum);
    void (*_samplePatternSGIS)(boom::OpenGLEnum);
    void (*_samplerParameterf)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_samplerParameterfv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_samplerParameteri)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_samplerParameterIiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_samplerParameterIivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_samplerParameterIivOES)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_samplerParameterIuiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_samplerParameterIuivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_samplerParameterIuivOES)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_samplerParameteriv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_scaled)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_scalef)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_scalex)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_scalexOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_scissor)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_scissorArrayv)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_scissorArrayvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_scissorArrayvOES)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_scissorExclusiveArrayvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_scissorExclusiveNV)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_scissorIndexed)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_scissorIndexedNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_scissorIndexedOES)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_scissorIndexedv)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_scissorIndexedvNV)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_scissorIndexedvOES)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_secondaryColor3b)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_secondaryColor3bEXT)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_secondaryColor3bv)(boom::OpenGLByte const*);
    void (*_secondaryColor3bvEXT)(boom::OpenGLByte const*);
    void (*_secondaryColor3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_secondaryColor3dEXT)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_secondaryColor3dv)(boom::OpenGLDouble const*);
    void (*_secondaryColor3dvEXT)(boom::OpenGLDouble const*);
    void (*_secondaryColor3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_secondaryColor3fEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_secondaryColor3fv)(boom::OpenGLFloat const*);
    void (*_secondaryColor3fvEXT)(boom::OpenGLFloat const*);
    void (*_secondaryColor3hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_secondaryColor3hvNV)(boom::OpenGLHalfNV const*);
    void (*_secondaryColor3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_secondaryColor3iEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_secondaryColor3iv)(boom::OpenGLInt const*);
    void (*_secondaryColor3ivEXT)(boom::OpenGLInt const*);
    void (*_secondaryColor3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_secondaryColor3sEXT)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_secondaryColor3sv)(boom::OpenGLShort const*);
    void (*_secondaryColor3svEXT)(boom::OpenGLShort const*);
    void (*_secondaryColor3ub)(boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte);
    void (*_secondaryColor3ubEXT)(boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte);
    void (*_secondaryColor3ubv)(boom::OpenGLUbyte const*);
    void (*_secondaryColor3ubvEXT)(boom::OpenGLUbyte const*);
    void (*_secondaryColor3ui)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_secondaryColor3uiEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_secondaryColor3uiv)(boom::OpenGLUint const*);
    void (*_secondaryColor3uivEXT)(boom::OpenGLUint const*);
    void (*_secondaryColor3us)(boom::OpenGLUShort, boom::OpenGLUShort, boom::OpenGLUShort);
    void (*_secondaryColor3usEXT)(boom::OpenGLUShort, boom::OpenGLUShort, boom::OpenGLUShort);
    void (*_secondaryColor3usv)(boom::OpenGLUShort const*);
    void (*_secondaryColor3usvEXT)(boom::OpenGLUShort const*);
    void (*_secondaryColorFormatNV)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_secondaryColorP3ui)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_secondaryColorP3uiv)(boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_secondaryColorPointer)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_secondaryColorPointerEXT)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_secondaryColorPointerListIBM)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_selectBuffer)(boom::OpenGLSizei, boom::OpenGLUint*);
    void (*_selectPerfMonitorCountersAMD)(boom::OpenGLUint, boom::OpenGLBoolean, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint*);
    void (*_semaphoreParameterivNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_semaphoreParameterui64vEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUInt64 const*);
    void (*_separableFilter2D)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*, void const*);
    void (*_separableFilter2DEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*, void const*);
    void (*_setFenceAPPLE)(boom::OpenGLUint);
    void (*_setFenceNV)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_setFragmentShaderConstantATI)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_setInvariantEXT)(boom::OpenGLUint, boom::OpenGLEnum, void const*);
    void (*_setLocalConstantEXT)(boom::OpenGLUint, boom::OpenGLEnum, void const*);
    void (*_setMultisamplefvAMD)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_shadeModel)(boom::OpenGLEnum);
    void (*_shaderBinary)(boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLEnum, void const*, boom::OpenGLSizei);
    void (*_shaderOp1EXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint);
    void (*_shaderOp2EXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_shaderOp3EXT)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_shaderSource)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLChar const* const*, boom::OpenGLInt const*);
    void (*_shaderSourceARB)(boom::OpenGLHandleARB, boom::OpenGLSizei, boom::OpenGLCharARB const**, boom::OpenGLInt const*);
    void (*_shaderStorageBlockBinding)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_shadingRateCombinerOpsEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_shadingRateEXT)(boom::OpenGLEnum);
    void (*_shadingRateImageBarrierNV)(boom::OpenGLBoolean);
    void (*_shadingRateImagePaletteNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum const*);
    void (*_shadingRateQCOM)(boom::OpenGLEnum);
    void (*_shadingRateSampleOrderCustomNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_shadingRateSampleOrderNV)(boom::OpenGLEnum);
    void (*_sharpenTexFuncSGIS)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_signalSemaphoreEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint const*, boom::OpenGLUint, boom::OpenGLUint const*, boom::OpenGLEnum const*);
    void (*_signalSemaphoreui64NVX)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLUInt64 const*);
    void (*_signalVkFenceNV)(boom::OpenGLUInt64);
    void (*_signalVkSemaphoreNV)(boom::OpenGLUInt64);
    void (*_specializeShader)(boom::OpenGLUint, boom::OpenGLChar const*, boom::OpenGLUint, boom::OpenGLUint const*, boom::OpenGLUint const*);
    void (*_specializeShaderARB)(boom::OpenGLUint, boom::OpenGLChar const*, boom::OpenGLUint, boom::OpenGLUint const*, boom::OpenGLUint const*);
    void (*_spriteParameterfSGIX)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_spriteParameterfvSGIX)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_spriteParameteriSGIX)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_spriteParameterivSGIX)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_startInstrumentsSGIX)();
    void (*_startTilingQCOM)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLBitfield);
    void (*_stateCaptureNV)(boom::OpenGLUint, boom::OpenGLEnum);
    void (*_stencilClearTagEXT)(boom::OpenGLSizei, boom::OpenGLUint);
    void (*_stencilFillPathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_stencilFillPathNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_stencilFunc)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUint);
    void (*_stencilFuncSeparate)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUint);
    void (*_stencilFuncSeparateATI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLUint);
    void (*_stencilMask)(boom::OpenGLUint);
    void (*_stencilMaskSeparate)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_stencilOp)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_stencilOpSeparate)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_stencilOpSeparateATI)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_stencilOpValueAMD)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_stencilStrokePathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_stencilStrokePathNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint);
    void (*_stencilThenCoverFillPathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_stencilThenCoverFillPathNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum);
    void (*_stencilThenCoverStrokePathInstancedNV)(boom::OpenGLSizei, boom::OpenGLEnum, void const*, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_stencilThenCoverStrokePathNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLEnum);
    void (*_stopInstrumentsSGIX)(boom::OpenGLInt);
    void (*_stringMarkerGREMEDY)(boom::OpenGLSizei, void const*);
    void (*_subpixelPrecisionBiasNV)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_swizzleEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_syncTextureINTEL)(boom::OpenGLUint);
    void (*_tagSampleBufferSGIX)();
    void (*_tangent3bEXT)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_tangent3bvEXT)(boom::OpenGLByte const*);
    void (*_tangent3dEXT)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_tangent3dvEXT)(boom::OpenGLDouble const*);
    void (*_tangent3fEXT)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_tangent3fvEXT)(boom::OpenGLFloat const*);
    void (*_tangent3iEXT)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_tangent3ivEXT)(boom::OpenGLInt const*);
    void (*_tangent3sEXT)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_tangent3svEXT)(boom::OpenGLShort const*);
    void (*_tangentPointerEXT)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_tbufferMask3DFX)(boom::OpenGLUint);
    void (*_tessellationFactorAMD)(boom::OpenGLFloat);
    void (*_tessellationModeAMD)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_testFenceAPPLE)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_testFenceNV)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_testObjectAPPLE)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_texAttachMemoryNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_texBuffer)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_texBufferARB)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_texBufferEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_texBufferOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_texBufferRange)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_texBufferRangeEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_texBufferRangeOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_texBumpParameterfvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_texBumpParameterivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texCoord1bOES)(boom::OpenGLByte);
    void (*_texCoord1bvOES)(boom::OpenGLByte const*);
    void (*_texCoord1d)(boom::OpenGLDouble);
    void (*_texCoord1dv)(boom::OpenGLDouble const*);
    void (*_texCoord1f)(boom::OpenGLFloat);
    void (*_texCoord1fv)(boom::OpenGLFloat const*);
    void (*_texCoord1hNV)(boom::OpenGLHalfNV);
    void (*_texCoord1hvNV)(boom::OpenGLHalfNV const*);
    void (*_texCoord1i)(boom::OpenGLInt);
    void (*_texCoord1iv)(boom::OpenGLInt const*);
    void (*_texCoord1s)(boom::OpenGLShort);
    void (*_texCoord1sv)(boom::OpenGLShort const*);
    void (*_texCoord1xOES)(boom::OpenGLFixed);
    void (*_texCoord1xvOES)(boom::OpenGLFixed const*);
    void (*_texCoord2bOES)(boom::OpenGLByte, boom::OpenGLByte);
    void (*_texCoord2bvOES)(boom::OpenGLByte const*);
    void (*_texCoord2d)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_texCoord2dv)(boom::OpenGLDouble const*);
    void (*_texCoord2f)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fColor3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fColor3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord2fColor4fNormal3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fColor4fNormal3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord2fColor4ubVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fColor4ubVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLUbyte const*, boom::OpenGLFloat const*);
    void (*_texCoord2fNormal3fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fNormal3fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord2fv)(boom::OpenGLFloat const*);
    void (*_texCoord2fVertex3fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord2fVertex3fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord2hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_texCoord2hvNV)(boom::OpenGLHalfNV const*);
    void (*_texCoord2i)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_texCoord2iv)(boom::OpenGLInt const*);
    void (*_texCoord2s)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_texCoord2sv)(boom::OpenGLShort const*);
    void (*_texCoord2xOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_texCoord2xvOES)(boom::OpenGLFixed const*);
    void (*_texCoord3bOES)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_texCoord3bvOES)(boom::OpenGLByte const*);
    void (*_texCoord3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_texCoord3dv)(boom::OpenGLDouble const*);
    void (*_texCoord3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord3fv)(boom::OpenGLFloat const*);
    void (*_texCoord3hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_texCoord3hvNV)(boom::OpenGLHalfNV const*);
    void (*_texCoord3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_texCoord3iv)(boom::OpenGLInt const*);
    void (*_texCoord3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_texCoord3sv)(boom::OpenGLShort const*);
    void (*_texCoord3xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_texCoord3xvOES)(boom::OpenGLFixed const*);
    void (*_texCoord4bOES)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_texCoord4bvOES)(boom::OpenGLByte const*);
    void (*_texCoord4d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_texCoord4dv)(boom::OpenGLDouble const*);
    void (*_texCoord4f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord4fColor4fNormal3fVertex4fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord4fColor4fNormal3fVertex4fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord4fv)(boom::OpenGLFloat const*);
    void (*_texCoord4fVertex4fSUN)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_texCoord4fVertex4fvSUN)(boom::OpenGLFloat const*, boom::OpenGLFloat const*);
    void (*_texCoord4hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_texCoord4hvNV)(boom::OpenGLHalfNV const*);
    void (*_texCoord4i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_texCoord4iv)(boom::OpenGLInt const*);
    void (*_texCoord4s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_texCoord4sv)(boom::OpenGLShort const*);
    void (*_texCoord4xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_texCoord4xvOES)(boom::OpenGLFixed const*);
    void (*_texCoordFormatNV)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_texCoordP1ui)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_texCoordP1uiv)(boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_texCoordP2ui)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_texCoordP2uiv)(boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_texCoordP3ui)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_texCoordP3uiv)(boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_texCoordP4ui)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_texCoordP4uiv)(boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_texCoordPointer)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_texCoordPointerEXT)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, void const*);
    void (*_texCoordPointerListIBM)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_texCoordPointervINTEL)(boom::OpenGLInt, boom::OpenGLEnum, void const**);
    void (*_texEnvf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_texEnvfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_texEnvi)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_texEnviv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texEnvx)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_texEnvxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_texEnvxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_texEnvxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_texEstimateMotionQCOM)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_texEstimateMotionRegionsQCOM)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_texFilterFuncSGIS)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_texGend)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble);
    void (*_texGendv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_texGenf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_texGenfOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_texGenfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_texGenfvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_texGeni)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_texGeniOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_texGeniv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texGenivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texGenxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_texGenxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_texImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texImage2DMultisample)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texImage2DMultisampleCoverageNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texImage3D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texImage3DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texImage3DMultisample)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texImage3DMultisampleCoverageNV)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texImage3DOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texImage4DSGIS)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texPageCommitmentARB)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texPageCommitmentEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texPageCommitmentMemNV)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLUInt64, boom::OpenGLBoolean);
    void (*_texParameterf)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_texParameterfv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_texParameteri)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_texParameterIiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texParameterIivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texParameterIivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texParameterIuiv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_texParameterIuivEXT)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_texParameterIuivOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_texParameteriv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_texParameterx)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_texParameterxOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed);
    void (*_texParameterxv)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_texParameterxvOES)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFixed const*);
    void (*_texRenderbufferNV)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_texStorage1D)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_texStorage1DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_texStorage2D)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_texStorage2DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_texStorage2DMultisample)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texStorage3D)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_texStorage3DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_texStorage3DMultisample)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texStorage3DMultisampleOES)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texStorageAttribs2DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_texStorageAttribs3DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_texStorageMem1DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_texStorageMem2DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_texStorageMem2DMultisampleEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_texStorageMem3DEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_texStorageMem3DMultisampleEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_texStorageSparseAMD)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBitfield);
    void (*_texSubImage1D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage1DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage2D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage2DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage3D)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage3DEXT)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage3DOES)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_texSubImage4DSGIS)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureAttachMemoryNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_textureBarrier)();
    void (*_textureBarrierNV)();
    void (*_textureBuffer)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_textureBufferEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_textureBufferRange)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_textureBufferRangeEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_textureColorMaskSGIS)(boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean, boom::OpenGLBoolean);
    void (*_textureFoveationParametersQCOM)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_textureImage1DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureImage2DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureImage2DMultisampleCoverageNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureImage2DMultisampleNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureImage3DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureImage3DMultisampleCoverageNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureImage3DMultisampleNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureLightEXT)(boom::OpenGLEnum);
    void (*_textureMaterialEXT)(boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_textureNormalEXT)(boom::OpenGLEnum);
    void (*_texturePageCommitmentEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_texturePageCommitmentMemNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLUInt64, boom::OpenGLBoolean);
    void (*_textureParameterf)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_textureParameterfEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_textureParameterfv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_textureParameterfvEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_textureParameteri)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_textureParameteriEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_textureParameterIiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_textureParameterIivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_textureParameterIuiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_textureParameterIuivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_textureParameteriv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_textureParameterivEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_textureRangeAPPLE)(boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_textureRenderbufferEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_textureStorage1D)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_textureStorage1DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_textureStorage2D)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_textureStorage2DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_textureStorage2DMultisample)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureStorage2DMultisampleEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureStorage3D)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_textureStorage3DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_textureStorage3DMultisample)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureStorage3DMultisampleEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean);
    void (*_textureStorageMem1DEXT)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_textureStorageMem2DEXT)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_textureStorageMem2DMultisampleEXT)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_textureStorageMem3DEXT)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_textureStorageMem3DMultisampleEXT)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLUint, boom::OpenGLUInt64);
    void (*_textureStorageSparseAMD)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLBitfield);
    void (*_textureSubImage1D)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureSubImage1DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureSubImage2D)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureSubImage2DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureSubImage3D)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureSubImage3DEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLSizei, boom::OpenGLEnum, boom::OpenGLEnum, void const*);
    void (*_textureView)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_textureViewEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_textureViewOES)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_trackMatrixNV)(boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_transformFeedbackAttribsNV)(boom::OpenGLSizei, boom::OpenGLInt const*, boom::OpenGLEnum);
    void (*_transformFeedbackBufferBase)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_transformFeedbackBufferRange)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizeiptr);
    void (*_transformFeedbackStreamAttribsNV)(boom::OpenGLSizei, boom::OpenGLInt const*, boom::OpenGLSizei, boom::OpenGLInt const*, boom::OpenGLEnum);
    void (*_transformFeedbackVaryings)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLChar const* const*, boom::OpenGLEnum);
    void (*_transformFeedbackVaryingsEXT)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLChar const* const*, boom::OpenGLEnum);
    void (*_transformFeedbackVaryingsNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLInt const*, boom::OpenGLEnum);
    void (*_transformPathNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_translated)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_translatef)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_translatex)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_translatexOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_uniform1d)(boom::OpenGLInt, boom::OpenGLDouble);
    void (*_uniform1dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_uniform1f)(boom::OpenGLInt, boom::OpenGLFloat);
    void (*_uniform1fARB)(boom::OpenGLInt, boom::OpenGLFloat);
    void (*_uniform1fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform1fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform1i)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform1i64ARB)(boom::OpenGLInt, boom::OpenGLInt64);
    void (*_uniform1i64NV)(boom::OpenGLInt, boom::OpenGLInt64EXT);
    void (*_uniform1i64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_uniform1i64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_uniform1iARB)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform1iv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform1ivARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform1ui)(boom::OpenGLInt, boom::OpenGLUint);
    void (*_uniform1ui64ARB)(boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_uniform1ui64NV)(boom::OpenGLInt, boom::OpenGLUInt64EXT);
    void (*_uniform1ui64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniform1ui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_uniform1uiEXT)(boom::OpenGLInt, boom::OpenGLUint);
    void (*_uniform1uiv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_uniform1uivEXT)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_uniform2d)(boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_uniform2dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_uniform2f)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform2fARB)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform2fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform2fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform2i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform2i64ARB)(boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_uniform2i64NV)(boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_uniform2i64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_uniform2i64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_uniform2iARB)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform2iv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform2ivARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform2ui)(boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint);
    void (*_uniform2ui64ARB)(boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_uniform2ui64NV)(boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_uniform2ui64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniform2ui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_uniform2uiEXT)(boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint);
    void (*_uniform2uiv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_uniform2uivEXT)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_uniform3d)(boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_uniform3dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_uniform3f)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform3fARB)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform3fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform3fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform3i64ARB)(boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_uniform3i64NV)(boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_uniform3i64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_uniform3i64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_uniform3iARB)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform3iv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform3ivARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform3ui)(boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_uniform3ui64ARB)(boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_uniform3ui64NV)(boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_uniform3ui64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniform3ui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_uniform3uiEXT)(boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_uniform3uiv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_uniform3uivEXT)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_uniform4d)(boom::OpenGLInt, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_uniform4dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_uniform4f)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform4fARB)(boom::OpenGLInt, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_uniform4fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform4fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_uniform4i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform4i64ARB)(boom::OpenGLInt, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64, boom::OpenGLInt64);
    void (*_uniform4i64NV)(boom::OpenGLInt, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_uniform4i64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64 const*);
    void (*_uniform4i64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt64EXT const*);
    void (*_uniform4iARB)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_uniform4iv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform4ivARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_uniform4ui)(boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_uniform4ui64ARB)(boom::OpenGLInt, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64, boom::OpenGLUInt64);
    void (*_uniform4ui64NV)(boom::OpenGLInt, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_uniform4ui64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniform4ui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_uniform4uiEXT)(boom::OpenGLInt, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_uniform4uiv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_uniform4uivEXT)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_uniformBlockBinding)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_uniformBufferEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLUint);
    void (*_uniformHandleui64ARB)(boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_uniformHandleui64IMG)(boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_uniformHandleui64NV)(boom::OpenGLInt, boom::OpenGLUInt64);
    void (*_uniformHandleui64vARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniformHandleui64vIMG)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniformHandleui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64 const*);
    void (*_uniformMatrix2dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix2fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix2fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix2x3dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix2x3fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix2x3fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix2x4dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix2x4fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix2x4fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix3fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3x2dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix3x2fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3x2fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3x4dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix3x4fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix3x4fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix4fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4fvARB)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4x2dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix4x2fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4x2fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4x3dv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLDouble const*);
    void (*_uniformMatrix4x3fv)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformMatrix4x3fvNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLBoolean, boom::OpenGLFloat const*);
    void (*_uniformSubroutinesuiv)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint const*);
    void (*_uniformui64NV)(boom::OpenGLInt, boom::OpenGLUInt64EXT);
    void (*_uniformui64vNV)(boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLUInt64EXT const*);
    void (*_unlockArraysEXT)();
    boom::OpenGLBoolean (*_unmapBuffer)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_unmapBufferARB)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_unmapBufferOES)(boom::OpenGLEnum);
    boom::OpenGLBoolean (*_unmapNamedBuffer)(boom::OpenGLUint);
    boom::OpenGLBoolean (*_unmapNamedBufferEXT)(boom::OpenGLUint);
    void (*_unmapObjectBufferATI)(boom::OpenGLUint);
    void (*_unmapTexture2DINTEL)(boom::OpenGLUint, boom::OpenGLInt);
    void (*_updateObjectBufferATI)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, void const*, boom::OpenGLEnum);
    void (*_uploadGpuMaskNVX)(boom::OpenGLBitfield);
    void (*_useProgram)(boom::OpenGLUint);
    void (*_useProgramObjectARB)(boom::OpenGLHandleARB);
    void (*_useProgramStages)(boom::OpenGLUint, boom::OpenGLBitfield, boom::OpenGLUint);
    void (*_useProgramStagesEXT)(boom::OpenGLUint, boom::OpenGLBitfield, boom::OpenGLUint);
    void (*_useShaderProgramEXT)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_validateProgram)(boom::OpenGLUint);
    void (*_validateProgramARB)(boom::OpenGLHandleARB);
    void (*_validateProgramPipeline)(boom::OpenGLUint);
    void (*_validateProgramPipelineEXT)(boom::OpenGLUint);
    void (*_variantArrayObjectATI)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLUint);
    void (*_variantbvEXT)(boom::OpenGLUint, boom::OpenGLByte const*);
    void (*_variantdvEXT)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_variantfvEXT)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_variantivEXT)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_variantPointerEXT)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLUint, void const*);
    void (*_variantsvEXT)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_variantubvEXT)(boom::OpenGLUint, boom::OpenGLUbyte const*);
    void (*_variantuivEXT)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_variantusvEXT)(boom::OpenGLUint, boom::OpenGLUShort const*);
    void (*_vDPAUFiniNV)();
    void (*_vDPAUGetSurfaceivNV)(boom::OpenGLVDPAUSurfaceNV, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei*, boom::OpenGLInt*);
    void (*_vDPAUInitNV)(void const*, void const*);
    boom::OpenGLBoolean (*_vDPAUIsSurfaceNV)(boom::OpenGLVDPAUSurfaceNV);
    void (*_vDPAUMapSurfacesNV)(boom::OpenGLSizei, boom::OpenGLVDPAUSurfaceNV const*);
    boom::OpenGLVDPAUSurfaceNV (*_vDPAURegisterOutputSurfaceNV)(void const*, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint const*);
    boom::OpenGLVDPAUSurfaceNV (*_vDPAURegisterVideoSurfaceNV)(void const*, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint const*);
    boom::OpenGLVDPAUSurfaceNV (*_vDPAURegisterVideoSurfaceWithPictureStructureNV)(void const*, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLBoolean);
    void (*_vDPAUSurfaceAccessNV)(boom::OpenGLVDPAUSurfaceNV, boom::OpenGLEnum);
    void (*_vDPAUUnmapSurfacesNV)(boom::OpenGLSizei, boom::OpenGLVDPAUSurfaceNV const*);
    void (*_vDPAUUnregisterSurfaceNV)(boom::OpenGLVDPAUSurfaceNV);
    void (*_vertex2bOES)(boom::OpenGLByte, boom::OpenGLByte);
    void (*_vertex2bvOES)(boom::OpenGLByte const*);
    void (*_vertex2d)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertex2dv)(boom::OpenGLDouble const*);
    void (*_vertex2f)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertex2fv)(boom::OpenGLFloat const*);
    void (*_vertex2hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertex2hvNV)(boom::OpenGLHalfNV const*);
    void (*_vertex2i)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertex2iv)(boom::OpenGLInt const*);
    void (*_vertex2s)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertex2sv)(boom::OpenGLShort const*);
    void (*_vertex2xOES)(boom::OpenGLFixed);
    void (*_vertex2xvOES)(boom::OpenGLFixed const*);
    void (*_vertex3bOES)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_vertex3bvOES)(boom::OpenGLByte const*);
    void (*_vertex3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertex3dv)(boom::OpenGLDouble const*);
    void (*_vertex3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertex3fv)(boom::OpenGLFloat const*);
    void (*_vertex3hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertex3hvNV)(boom::OpenGLHalfNV const*);
    void (*_vertex3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertex3iv)(boom::OpenGLInt const*);
    void (*_vertex3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertex3sv)(boom::OpenGLShort const*);
    void (*_vertex3xOES)(boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_vertex3xvOES)(boom::OpenGLFixed const*);
    void (*_vertex4bOES)(boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte, boom::OpenGLByte);
    void (*_vertex4bvOES)(boom::OpenGLByte const*);
    void (*_vertex4d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertex4dv)(boom::OpenGLDouble const*);
    void (*_vertex4f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertex4fv)(boom::OpenGLFloat const*);
    void (*_vertex4hNV)(boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertex4hvNV)(boom::OpenGLHalfNV const*);
    void (*_vertex4i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertex4iv)(boom::OpenGLInt const*);
    void (*_vertex4s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertex4sv)(boom::OpenGLShort const*);
    void (*_vertex4xOES)(boom::OpenGLFixed, boom::OpenGLFixed, boom::OpenGLFixed);
    void (*_vertex4xvOES)(boom::OpenGLFixed const*);
    void (*_vertexArrayAttribBinding)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexArrayAttribFormat)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUint);
    void (*_vertexArrayAttribIFormat)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_vertexArrayAttribLFormat)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_vertexArrayBindingDivisor)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexArrayBindVertexBufferEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizei);
    void (*_vertexArrayColorOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayEdgeFlagOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayElementBuffer)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexArrayFogCoordOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayIndexOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayMultiTexCoordOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayNormalOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayParameteriAPPLE)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_vertexArrayRangeAPPLE)(boom::OpenGLSizei, void*);
    void (*_vertexArrayRangeNV)(boom::OpenGLSizei, void const*);
    void (*_vertexArraySecondaryColorOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayTexCoordOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayVertexAttribBindingEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexArrayVertexAttribDivisorEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexArrayVertexAttribFormatEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUint);
    void (*_vertexArrayVertexAttribIFormatEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_vertexArrayVertexAttribIOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayVertexAttribLFormatEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_vertexArrayVertexAttribLOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayVertexAttribOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexArrayVertexBindingDivisorEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexArrayVertexBuffer)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLIntptr, boom::OpenGLSizei);
    void (*_vertexArrayVertexBuffers)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLIntptr const*, boom::OpenGLSizei const*);
    void (*_vertexArrayVertexOffsetEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLIntptr);
    void (*_vertexAttrib1d)(boom::OpenGLUint, boom::OpenGLDouble);
    void (*_vertexAttrib1dARB)(boom::OpenGLUint, boom::OpenGLDouble);
    void (*_vertexAttrib1dNV)(boom::OpenGLUint, boom::OpenGLDouble);
    void (*_vertexAttrib1dv)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib1dvARB)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib1dvNV)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib1f)(boom::OpenGLUint, boom::OpenGLFloat);
    void (*_vertexAttrib1fARB)(boom::OpenGLUint, boom::OpenGLFloat);
    void (*_vertexAttrib1fNV)(boom::OpenGLUint, boom::OpenGLFloat);
    void (*_vertexAttrib1fv)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib1fvARB)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib1fvNV)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib1hNV)(boom::OpenGLUint, boom::OpenGLHalfNV);
    void (*_vertexAttrib1hvNV)(boom::OpenGLUint, boom::OpenGLHalfNV const*);
    void (*_vertexAttrib1s)(boom::OpenGLUint, boom::OpenGLShort);
    void (*_vertexAttrib1sARB)(boom::OpenGLUint, boom::OpenGLShort);
    void (*_vertexAttrib1sNV)(boom::OpenGLUint, boom::OpenGLShort);
    void (*_vertexAttrib1sv)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib1svARB)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib1svNV)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib2d)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib2dARB)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib2dNV)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib2dv)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib2dvARB)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib2dvNV)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib2f)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib2fARB)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib2fNV)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib2fv)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib2fvARB)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib2fvNV)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib2hNV)(boom::OpenGLUint, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertexAttrib2hvNV)(boom::OpenGLUint, boom::OpenGLHalfNV const*);
    void (*_vertexAttrib2s)(boom::OpenGLUint, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib2sARB)(boom::OpenGLUint, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib2sNV)(boom::OpenGLUint, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib2sv)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib2svARB)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib2svNV)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib3d)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib3dARB)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib3dNV)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib3dv)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib3dvARB)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib3dvNV)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib3f)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib3fARB)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib3fNV)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib3fv)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib3fvARB)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib3fvNV)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib3hNV)(boom::OpenGLUint, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertexAttrib3hvNV)(boom::OpenGLUint, boom::OpenGLHalfNV const*);
    void (*_vertexAttrib3s)(boom::OpenGLUint, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib3sARB)(boom::OpenGLUint, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib3sNV)(boom::OpenGLUint, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib3sv)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib3svARB)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib3svNV)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib4bv)(boom::OpenGLUint, boom::OpenGLByte const*);
    void (*_vertexAttrib4bvARB)(boom::OpenGLUint, boom::OpenGLByte const*);
    void (*_vertexAttrib4d)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib4dARB)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib4dNV)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttrib4dv)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib4dvARB)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib4dvNV)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttrib4f)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib4fARB)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib4fNV)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexAttrib4fv)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib4fvARB)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib4fvNV)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_vertexAttrib4hNV)(boom::OpenGLUint, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV, boom::OpenGLHalfNV);
    void (*_vertexAttrib4hvNV)(boom::OpenGLUint, boom::OpenGLHalfNV const*);
    void (*_vertexAttrib4iv)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttrib4ivARB)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttrib4Nbv)(boom::OpenGLUint, boom::OpenGLByte const*);
    void (*_vertexAttrib4NbvARB)(boom::OpenGLUint, boom::OpenGLByte const*);
    void (*_vertexAttrib4Niv)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttrib4NivARB)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttrib4Nsv)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib4NsvARB)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib4Nub)(boom::OpenGLUint, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte);
    void (*_vertexAttrib4NubARB)(boom::OpenGLUint, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte);
    void (*_vertexAttrib4Nubv)(boom::OpenGLUint, boom::OpenGLUbyte const*);
    void (*_vertexAttrib4NubvARB)(boom::OpenGLUint, boom::OpenGLUbyte const*);
    void (*_vertexAttrib4Nuiv)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttrib4NuivARB)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttrib4Nusv)(boom::OpenGLUint, boom::OpenGLUShort const*);
    void (*_vertexAttrib4NusvARB)(boom::OpenGLUint, boom::OpenGLUShort const*);
    void (*_vertexAttrib4s)(boom::OpenGLUint, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib4sARB)(boom::OpenGLUint, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib4sNV)(boom::OpenGLUint, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexAttrib4sv)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib4svARB)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib4svNV)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttrib4ubNV)(boom::OpenGLUint, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte, boom::OpenGLUbyte);
    void (*_vertexAttrib4ubv)(boom::OpenGLUint, boom::OpenGLUbyte const*);
    void (*_vertexAttrib4ubvARB)(boom::OpenGLUint, boom::OpenGLUbyte const*);
    void (*_vertexAttrib4ubvNV)(boom::OpenGLUint, boom::OpenGLUbyte const*);
    void (*_vertexAttrib4uiv)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttrib4uivARB)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttrib4usv)(boom::OpenGLUint, boom::OpenGLUShort const*);
    void (*_vertexAttrib4usvARB)(boom::OpenGLUint, boom::OpenGLUShort const*);
    void (*_vertexAttribArrayObjectATI)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLSizei, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribBinding)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribDivisor)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribDivisorANGLE)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribDivisorARB)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribDivisorEXT)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribDivisorNV)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribFormat)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUint);
    void (*_vertexAttribFormatNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLSizei);
    void (*_vertexAttribI1i)(boom::OpenGLUint, boom::OpenGLInt);
    void (*_vertexAttribI1iEXT)(boom::OpenGLUint, boom::OpenGLInt);
    void (*_vertexAttribI1iv)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttribI1ivEXT)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttribI1ui)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribI1uiEXT)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribI1uiv)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttribI1uivEXT)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttribI2i)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI2iEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI2iv)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttribI2ivEXT)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttribI2ui)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribI2uiEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribI2uiv)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttribI2uivEXT)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttribI3i)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI3iEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI3iv)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttribI3ivEXT)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttribI3ui)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribI3uiEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribI3uiv)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttribI3uivEXT)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttribI4bv)(boom::OpenGLUint, boom::OpenGLByte const*);
    void (*_vertexAttribI4bvEXT)(boom::OpenGLUint, boom::OpenGLByte const*);
    void (*_vertexAttribI4i)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI4iEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexAttribI4iv)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttribI4ivEXT)(boom::OpenGLUint, boom::OpenGLInt const*);
    void (*_vertexAttribI4sv)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttribI4svEXT)(boom::OpenGLUint, boom::OpenGLShort const*);
    void (*_vertexAttribI4ubv)(boom::OpenGLUint, boom::OpenGLUbyte const*);
    void (*_vertexAttribI4ubvEXT)(boom::OpenGLUint, boom::OpenGLUbyte const*);
    void (*_vertexAttribI4ui)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribI4uiEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexAttribI4uiv)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttribI4uivEXT)(boom::OpenGLUint, boom::OpenGLUint const*);
    void (*_vertexAttribI4usv)(boom::OpenGLUint, boom::OpenGLUShort const*);
    void (*_vertexAttribI4usvEXT)(boom::OpenGLUint, boom::OpenGLUShort const*);
    void (*_vertexAttribIFormat)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_vertexAttribIFormatNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_vertexAttribIPointer)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexAttribIPointerEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexAttribL1d)(boom::OpenGLUint, boom::OpenGLDouble);
    void (*_vertexAttribL1dEXT)(boom::OpenGLUint, boom::OpenGLDouble);
    void (*_vertexAttribL1dv)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttribL1dvEXT)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttribL1i64NV)(boom::OpenGLUint, boom::OpenGLInt64EXT);
    void (*_vertexAttribL1i64vNV)(boom::OpenGLUint, boom::OpenGLInt64EXT const*);
    void (*_vertexAttribL1ui64ARB)(boom::OpenGLUint, boom::OpenGLUInt64EXT);
    void (*_vertexAttribL1ui64NV)(boom::OpenGLUint, boom::OpenGLUInt64EXT);
    void (*_vertexAttribL1ui64vARB)(boom::OpenGLUint, boom::OpenGLUInt64EXT const*);
    void (*_vertexAttribL1ui64vNV)(boom::OpenGLUint, boom::OpenGLUInt64EXT const*);
    void (*_vertexAttribL2d)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL2dEXT)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL2dv)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttribL2dvEXT)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttribL2i64NV)(boom::OpenGLUint, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_vertexAttribL2i64vNV)(boom::OpenGLUint, boom::OpenGLInt64EXT const*);
    void (*_vertexAttribL2ui64NV)(boom::OpenGLUint, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_vertexAttribL2ui64vNV)(boom::OpenGLUint, boom::OpenGLUInt64EXT const*);
    void (*_vertexAttribL3d)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL3dEXT)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL3dv)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttribL3dvEXT)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttribL3i64NV)(boom::OpenGLUint, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_vertexAttribL3i64vNV)(boom::OpenGLUint, boom::OpenGLInt64EXT const*);
    void (*_vertexAttribL3ui64NV)(boom::OpenGLUint, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_vertexAttribL3ui64vNV)(boom::OpenGLUint, boom::OpenGLUInt64EXT const*);
    void (*_vertexAttribL4d)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL4dEXT)(boom::OpenGLUint, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexAttribL4dv)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttribL4dvEXT)(boom::OpenGLUint, boom::OpenGLDouble const*);
    void (*_vertexAttribL4i64NV)(boom::OpenGLUint, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT, boom::OpenGLInt64EXT);
    void (*_vertexAttribL4i64vNV)(boom::OpenGLUint, boom::OpenGLInt64EXT const*);
    void (*_vertexAttribL4ui64NV)(boom::OpenGLUint, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT, boom::OpenGLUInt64EXT);
    void (*_vertexAttribL4ui64vNV)(boom::OpenGLUint, boom::OpenGLUInt64EXT const*);
    void (*_vertexAttribLFormat)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLUint);
    void (*_vertexAttribLFormatNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_vertexAttribLPointer)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexAttribLPointerEXT)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexAttribP1ui)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUint);
    void (*_vertexAttribP1uiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUint const*);
    void (*_vertexAttribP2ui)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUint);
    void (*_vertexAttribP2uiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUint const*);
    void (*_vertexAttribP3ui)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUint);
    void (*_vertexAttribP3uiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUint const*);
    void (*_vertexAttribP4ui)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUint);
    void (*_vertexAttribP4uiv)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLUint const*);
    void (*_vertexAttribParameteriAMD)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt);
    void (*_vertexAttribPointer)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLSizei, void const*);
    void (*_vertexAttribPointerARB)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLBoolean, boom::OpenGLSizei, void const*);
    void (*_vertexAttribPointerNV)(boom::OpenGLUint, boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexAttribs1dvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_vertexAttribs1fvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_vertexAttribs1hvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLHalfNV const*);
    void (*_vertexAttribs1svNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLShort const*);
    void (*_vertexAttribs2dvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_vertexAttribs2fvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_vertexAttribs2hvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLHalfNV const*);
    void (*_vertexAttribs2svNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLShort const*);
    void (*_vertexAttribs3dvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_vertexAttribs3fvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_vertexAttribs3hvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLHalfNV const*);
    void (*_vertexAttribs3svNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLShort const*);
    void (*_vertexAttribs4dvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLDouble const*);
    void (*_vertexAttribs4fvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_vertexAttribs4hvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLHalfNV const*);
    void (*_vertexAttribs4svNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLShort const*);
    void (*_vertexAttribs4ubvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUbyte const*);
    void (*_vertexBindingDivisor)(boom::OpenGLUint, boom::OpenGLUint);
    void (*_vertexBlendARB)(boom::OpenGLInt);
    void (*_vertexBlendEnvfATI)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_vertexBlendEnviATI)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_vertexFormatNV)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei);
    void (*_vertexP2ui)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_vertexP2uiv)(boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_vertexP3ui)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_vertexP3uiv)(boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_vertexP4ui)(boom::OpenGLEnum, boom::OpenGLUint);
    void (*_vertexP4uiv)(boom::OpenGLEnum, boom::OpenGLUint const*);
    void (*_vertexPointer)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_vertexPointerEXT)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLSizei, void const*);
    void (*_vertexPointerListIBM)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLInt, void const**, boom::OpenGLInt);
    void (*_vertexPointervINTEL)(boom::OpenGLInt, boom::OpenGLEnum, void const**);
    void (*_vertexStream1dATI)(boom::OpenGLEnum, boom::OpenGLDouble);
    void (*_vertexStream1dvATI)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_vertexStream1fATI)(boom::OpenGLEnum, boom::OpenGLFloat);
    void (*_vertexStream1fvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_vertexStream1iATI)(boom::OpenGLEnum, boom::OpenGLInt);
    void (*_vertexStream1ivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_vertexStream1sATI)(boom::OpenGLEnum, boom::OpenGLShort);
    void (*_vertexStream1svATI)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_vertexStream2dATI)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexStream2dvATI)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_vertexStream2fATI)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexStream2fvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_vertexStream2iATI)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexStream2ivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_vertexStream2sATI)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexStream2svATI)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_vertexStream3dATI)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexStream3dvATI)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_vertexStream3fATI)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexStream3fvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_vertexStream3iATI)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexStream3ivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_vertexStream3sATI)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexStream3svATI)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_vertexStream4dATI)(boom::OpenGLEnum, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_vertexStream4dvATI)(boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_vertexStream4fATI)(boom::OpenGLEnum, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_vertexStream4fvATI)(boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_vertexStream4iATI)(boom::OpenGLEnum, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_vertexStream4ivATI)(boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_vertexStream4sATI)(boom::OpenGLEnum, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_vertexStream4svATI)(boom::OpenGLEnum, boom::OpenGLShort const*);
    void (*_vertexWeightfEXT)(boom::OpenGLFloat);
    void (*_vertexWeightfvEXT)(boom::OpenGLFloat const*);
    void (*_vertexWeighthNV)(boom::OpenGLHalfNV);
    void (*_vertexWeighthvNV)(boom::OpenGLHalfNV const*);
    void (*_vertexWeightPointerEXT)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    boom::OpenGLEnum (*_videoCaptureNV)(boom::OpenGLUint, boom::OpenGLUint*, boom::OpenGLUInt64EXT*);
    void (*_videoCaptureStreamParameterdvNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLDouble const*);
    void (*_videoCaptureStreamParameterfvNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLFloat const*);
    void (*_videoCaptureStreamParameterivNV)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLInt const*);
    void (*_viewport)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLSizei, boom::OpenGLSizei);
    void (*_viewportArrayv)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_viewportArrayvNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_viewportArrayvOES)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLFloat const*);
    void (*_viewportIndexedf)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_viewportIndexedfNV)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_viewportIndexedfOES)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_viewportIndexedfv)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_viewportIndexedfvNV)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_viewportIndexedfvOES)(boom::OpenGLUint, boom::OpenGLFloat const*);
    void (*_viewportPositionWScaleNV)(boom::OpenGLUint, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_viewportSwizzleNV)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    void (*_waitSemaphoreEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLUint const*, boom::OpenGLUint, boom::OpenGLUint const*, boom::OpenGLEnum const*);
    void (*_waitSemaphoreui64NVX)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLUInt64 const*);
    void (*_waitSync)(boom::OpenGLSync, boom::OpenGLBitfield, boom::OpenGLUInt64);
    void (*_waitSyncAPPLE)(boom::OpenGLSync, boom::OpenGLBitfield, boom::OpenGLUInt64);
    void (*_waitVkSemaphoreNV)(boom::OpenGLUInt64);
    void (*_weightbvARB)(boom::OpenGLInt, boom::OpenGLByte const*);
    void (*_weightdvARB)(boom::OpenGLInt, boom::OpenGLDouble const*);
    void (*_weightfvARB)(boom::OpenGLInt, boom::OpenGLFloat const*);
    void (*_weightivARB)(boom::OpenGLInt, boom::OpenGLInt const*);
    void (*_weightPathsNV)(boom::OpenGLUint, boom::OpenGLSizei, boom::OpenGLUint const*, boom::OpenGLFloat const*);
    void (*_weightPointerARB)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_weightPointerOES)(boom::OpenGLInt, boom::OpenGLEnum, boom::OpenGLSizei, void const*);
    void (*_weightsvARB)(boom::OpenGLInt, boom::OpenGLShort const*);
    void (*_weightubvARB)(boom::OpenGLInt, boom::OpenGLUbyte const*);
    void (*_weightuivARB)(boom::OpenGLInt, boom::OpenGLUint const*);
    void (*_weightusvARB)(boom::OpenGLInt, boom::OpenGLUShort const*);
    void (*_windowPos2d)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos2dARB)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos2dMESA)(boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos2dv)(boom::OpenGLDouble const*);
    void (*_windowPos2dvARB)(boom::OpenGLDouble const*);
    void (*_windowPos2dvMESA)(boom::OpenGLDouble const*);
    void (*_windowPos2f)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos2fARB)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos2fMESA)(boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos2fv)(boom::OpenGLFloat const*);
    void (*_windowPos2fvARB)(boom::OpenGLFloat const*);
    void (*_windowPos2fvMESA)(boom::OpenGLFloat const*);
    void (*_windowPos2i)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos2iARB)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos2iMESA)(boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos2iv)(boom::OpenGLInt const*);
    void (*_windowPos2ivARB)(boom::OpenGLInt const*);
    void (*_windowPos2ivMESA)(boom::OpenGLInt const*);
    void (*_windowPos2s)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos2sARB)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos2sMESA)(boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos2sv)(boom::OpenGLShort const*);
    void (*_windowPos2svARB)(boom::OpenGLShort const*);
    void (*_windowPos2svMESA)(boom::OpenGLShort const*);
    void (*_windowPos3d)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos3dARB)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos3dMESA)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos3dv)(boom::OpenGLDouble const*);
    void (*_windowPos3dvARB)(boom::OpenGLDouble const*);
    void (*_windowPos3dvMESA)(boom::OpenGLDouble const*);
    void (*_windowPos3f)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos3fARB)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos3fMESA)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos3fv)(boom::OpenGLFloat const*);
    void (*_windowPos3fvARB)(boom::OpenGLFloat const*);
    void (*_windowPos3fvMESA)(boom::OpenGLFloat const*);
    void (*_windowPos3i)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos3iARB)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos3iMESA)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos3iv)(boom::OpenGLInt const*);
    void (*_windowPos3ivARB)(boom::OpenGLInt const*);
    void (*_windowPos3ivMESA)(boom::OpenGLInt const*);
    void (*_windowPos3s)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos3sARB)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos3sMESA)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos3sv)(boom::OpenGLShort const*);
    void (*_windowPos3svARB)(boom::OpenGLShort const*);
    void (*_windowPos3svMESA)(boom::OpenGLShort const*);
    void (*_windowPos4dMESA)(boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble, boom::OpenGLDouble);
    void (*_windowPos4dvMESA)(boom::OpenGLDouble const*);
    void (*_windowPos4fMESA)(boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat, boom::OpenGLFloat);
    void (*_windowPos4fvMESA)(boom::OpenGLFloat const*);
    void (*_windowPos4iMESA)(boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt, boom::OpenGLInt);
    void (*_windowPos4ivMESA)(boom::OpenGLInt const*);
    void (*_windowPos4sMESA)(boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort, boom::OpenGLShort);
    void (*_windowPos4svMESA)(boom::OpenGLShort const*);
    void (*_windowRectanglesEXT)(boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLInt const*);
    void (*_writeMaskEXT)(boom::OpenGLUint, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLEnum);
    bool _accumAvailable;
    bool _accumxOESAvailable;
    bool _acquireKeyedMutexWin32EXTAvailable;
    bool _activeProgramEXTAvailable;
    bool _activeShaderProgramAvailable;
    bool _activeShaderProgramEXTAvailable;
    bool _activeStencilFaceEXTAvailable;
    bool _activeTextureAvailable;
    bool _activeTextureARBAvailable;
    bool _activeVaryingNVAvailable;
    bool _alphaFragmentOp1ATIAvailable;
    bool _alphaFragmentOp2ATIAvailable;
    bool _alphaFragmentOp3ATIAvailable;
    bool _alphaFuncAvailable;
    bool _alphaFuncQCOMAvailable;
    bool _alphaFuncxAvailable;
    bool _alphaFuncxOESAvailable;
    bool _alphaToCoverageDitherControlNVAvailable;
    bool _applyFramebufferAttachmentCMAAINTELAvailable;
    bool _applyTextureEXTAvailable;
    bool _areProgramsResidentNVAvailable;
    bool _areTexturesResidentAvailable;
    bool _areTexturesResidentEXTAvailable;
    bool _arrayElementAvailable;
    bool _arrayElementEXTAvailable;
    bool _arrayObjectATIAvailable;
    bool _asyncCopyBufferSubDataNVXAvailable;
    bool _asyncCopyImageSubDataNVXAvailable;
    bool _asyncMarkerSGIXAvailable;
    bool _attachObjectARBAvailable;
    bool _attachShaderAvailable;
    bool _beginAvailable;
    bool _beginConditionalRenderAvailable;
    bool _beginConditionalRenderNVAvailable;
    bool _beginConditionalRenderNVXAvailable;
    bool _beginFragmentShaderATIAvailable;
    bool _beginOcclusionQueryNVAvailable;
    bool _beginPerfMonitorAMDAvailable;
    bool _beginPerfQueryINTELAvailable;
    bool _beginQueryAvailable;
    bool _beginQueryARBAvailable;
    bool _beginQueryEXTAvailable;
    bool _beginQueryIndexedAvailable;
    bool _beginTransformFeedbackAvailable;
    bool _beginTransformFeedbackEXTAvailable;
    bool _beginTransformFeedbackNVAvailable;
    bool _beginVertexShaderEXTAvailable;
    bool _beginVideoCaptureNVAvailable;
    bool _bindAttribLocationAvailable;
    bool _bindAttribLocationARBAvailable;
    bool _bindBufferAvailable;
    bool _bindBufferARBAvailable;
    bool _bindBufferBaseAvailable;
    bool _bindBufferBaseEXTAvailable;
    bool _bindBufferBaseNVAvailable;
    bool _bindBufferOffsetEXTAvailable;
    bool _bindBufferOffsetNVAvailable;
    bool _bindBufferRangeAvailable;
    bool _bindBufferRangeEXTAvailable;
    bool _bindBufferRangeNVAvailable;
    bool _bindBuffersBaseAvailable;
    bool _bindBuffersRangeAvailable;
    bool _bindFragDataLocationAvailable;
    bool _bindFragDataLocationEXTAvailable;
    bool _bindFragDataLocationIndexedAvailable;
    bool _bindFragDataLocationIndexedEXTAvailable;
    bool _bindFragmentShaderATIAvailable;
    bool _bindFramebufferAvailable;
    bool _bindFramebufferEXTAvailable;
    bool _bindFramebufferOESAvailable;
    bool _bindImageTextureAvailable;
    bool _bindImageTextureEXTAvailable;
    bool _bindImageTexturesAvailable;
    bool _bindLightParameterEXTAvailable;
    bool _bindMaterialParameterEXTAvailable;
    bool _bindMultiTextureEXTAvailable;
    bool _bindParameterEXTAvailable;
    bool _bindProgramARBAvailable;
    bool _bindProgramNVAvailable;
    bool _bindProgramPipelineAvailable;
    bool _bindProgramPipelineEXTAvailable;
    bool _bindRenderbufferAvailable;
    bool _bindRenderbufferEXTAvailable;
    bool _bindRenderbufferOESAvailable;
    bool _bindSamplerAvailable;
    bool _bindSamplersAvailable;
    bool _bindShadingRateImageNVAvailable;
    bool _bindTexGenParameterEXTAvailable;
    bool _bindTextureAvailable;
    bool _bindTextureEXTAvailable;
    bool _bindTexturesAvailable;
    bool _bindTextureUnitAvailable;
    bool _bindTextureUnitParameterEXTAvailable;
    bool _bindTransformFeedbackAvailable;
    bool _bindTransformFeedbackNVAvailable;
    bool _bindVertexArrayAvailable;
    bool _bindVertexArrayAPPLEAvailable;
    bool _bindVertexArrayOESAvailable;
    bool _bindVertexBufferAvailable;
    bool _bindVertexBuffersAvailable;
    bool _bindVertexShaderEXTAvailable;
    bool _bindVideoCaptureStreamBufferNVAvailable;
    bool _bindVideoCaptureStreamTextureNVAvailable;
    bool _binormal3bEXTAvailable;
    bool _binormal3bvEXTAvailable;
    bool _binormal3dEXTAvailable;
    bool _binormal3dvEXTAvailable;
    bool _binormal3fEXTAvailable;
    bool _binormal3fvEXTAvailable;
    bool _binormal3iEXTAvailable;
    bool _binormal3ivEXTAvailable;
    bool _binormal3sEXTAvailable;
    bool _binormal3svEXTAvailable;
    bool _binormalPointerEXTAvailable;
    bool _bitmapAvailable;
    bool _bitmapxOESAvailable;
    bool _blendBarrierAvailable;
    bool _blendBarrierKHRAvailable;
    bool _blendBarrierNVAvailable;
    bool _blendColorAvailable;
    bool _blendColorEXTAvailable;
    bool _blendColorxOESAvailable;
    bool _blendEquationAvailable;
    bool _blendEquationEXTAvailable;
    bool _blendEquationiAvailable;
    bool _blendEquationiARBAvailable;
    bool _blendEquationiEXTAvailable;
    bool _blendEquationIndexedAMDAvailable;
    bool _blendEquationiOESAvailable;
    bool _blendEquationOESAvailable;
    bool _blendEquationSeparateAvailable;
    bool _blendEquationSeparateEXTAvailable;
    bool _blendEquationSeparateiAvailable;
    bool _blendEquationSeparateiARBAvailable;
    bool _blendEquationSeparateiEXTAvailable;
    bool _blendEquationSeparateIndexedAMDAvailable;
    bool _blendEquationSeparateiOESAvailable;
    bool _blendEquationSeparateOESAvailable;
    bool _blendFuncAvailable;
    bool _blendFunciAvailable;
    bool _blendFunciARBAvailable;
    bool _blendFunciEXTAvailable;
    bool _blendFuncIndexedAMDAvailable;
    bool _blendFunciOESAvailable;
    bool _blendFuncSeparateAvailable;
    bool _blendFuncSeparateEXTAvailable;
    bool _blendFuncSeparateiAvailable;
    bool _blendFuncSeparateiARBAvailable;
    bool _blendFuncSeparateiEXTAvailable;
    bool _blendFuncSeparateIndexedAMDAvailable;
    bool _blendFuncSeparateINGRAvailable;
    bool _blendFuncSeparateiOESAvailable;
    bool _blendFuncSeparateOESAvailable;
    bool _blendParameteriNVAvailable;
    bool _blitFramebufferAvailable;
    bool _blitFramebufferANGLEAvailable;
    bool _blitFramebufferEXTAvailable;
    bool _blitFramebufferNVAvailable;
    bool _blitNamedFramebufferAvailable;
    bool _bufferAddressRangeNVAvailable;
    bool _bufferAttachMemoryNVAvailable;
    bool _bufferDataAvailable;
    bool _bufferDataARBAvailable;
    bool _bufferPageCommitmentARBAvailable;
    bool _bufferPageCommitmentMemNVAvailable;
    bool _bufferParameteriAPPLEAvailable;
    bool _bufferStorageAvailable;
    bool _bufferStorageEXTAvailable;
    bool _bufferStorageExternalEXTAvailable;
    bool _bufferStorageMemEXTAvailable;
    bool _bufferSubDataAvailable;
    bool _bufferSubDataARBAvailable;
    bool _callCommandListNVAvailable;
    bool _callListAvailable;
    bool _callListsAvailable;
    bool _checkFramebufferStatusAvailable;
    bool _checkFramebufferStatusEXTAvailable;
    bool _checkFramebufferStatusOESAvailable;
    bool _checkNamedFramebufferStatusAvailable;
    bool _checkNamedFramebufferStatusEXTAvailable;
    bool _clampColorAvailable;
    bool _clampColorARBAvailable;
    bool _clearAvailable;
    bool _clearAccumAvailable;
    bool _clearAccumxOESAvailable;
    bool _clearBufferDataAvailable;
    bool _clearBufferfiAvailable;
    bool _clearBufferfvAvailable;
    bool _clearBufferivAvailable;
    bool _clearBufferSubDataAvailable;
    bool _clearBufferuivAvailable;
    bool _clearColorAvailable;
    bool _clearColorIiEXTAvailable;
    bool _clearColorIuiEXTAvailable;
    bool _clearColorxAvailable;
    bool _clearColorxOESAvailable;
    bool _clearDepthAvailable;
    bool _clearDepthdNVAvailable;
    bool _clearDepthfAvailable;
    bool _clearDepthfOESAvailable;
    bool _clearDepthxAvailable;
    bool _clearDepthxOESAvailable;
    bool _clearIndexAvailable;
    bool _clearNamedBufferDataAvailable;
    bool _clearNamedBufferDataEXTAvailable;
    bool _clearNamedBufferSubDataAvailable;
    bool _clearNamedBufferSubDataEXTAvailable;
    bool _clearNamedFramebufferfiAvailable;
    bool _clearNamedFramebufferfvAvailable;
    bool _clearNamedFramebufferivAvailable;
    bool _clearNamedFramebufferuivAvailable;
    bool _clearPixelLocalStorageuiEXTAvailable;
    bool _clearStencilAvailable;
    bool _clearTexImageAvailable;
    bool _clearTexImageEXTAvailable;
    bool _clearTexSubImageAvailable;
    bool _clearTexSubImageEXTAvailable;
    bool _clientActiveTextureAvailable;
    bool _clientActiveTextureARBAvailable;
    bool _clientActiveVertexStreamATIAvailable;
    bool _clientAttribDefaultEXTAvailable;
    bool _clientWaitSemaphoreui64NVXAvailable;
    bool _clientWaitSyncAvailable;
    bool _clientWaitSyncAPPLEAvailable;
    bool _clipControlAvailable;
    bool _clipControlEXTAvailable;
    bool _clipPlaneAvailable;
    bool _clipPlanefAvailable;
    bool _clipPlanefIMGAvailable;
    bool _clipPlanefOESAvailable;
    bool _clipPlanexAvailable;
    bool _clipPlanexIMGAvailable;
    bool _clipPlanexOESAvailable;
    bool _color3bAvailable;
    bool _color3bvAvailable;
    bool _color3dAvailable;
    bool _color3dvAvailable;
    bool _color3fAvailable;
    bool _color3fvAvailable;
    bool _color3fVertex3fSUNAvailable;
    bool _color3fVertex3fvSUNAvailable;
    bool _color3hNVAvailable;
    bool _color3hvNVAvailable;
    bool _color3iAvailable;
    bool _color3ivAvailable;
    bool _color3sAvailable;
    bool _color3svAvailable;
    bool _color3ubAvailable;
    bool _color3ubvAvailable;
    bool _color3uiAvailable;
    bool _color3uivAvailable;
    bool _color3usAvailable;
    bool _color3usvAvailable;
    bool _color3xOESAvailable;
    bool _color3xvOESAvailable;
    bool _color4bAvailable;
    bool _color4bvAvailable;
    bool _color4dAvailable;
    bool _color4dvAvailable;
    bool _color4fAvailable;
    bool _color4fNormal3fVertex3fSUNAvailable;
    bool _color4fNormal3fVertex3fvSUNAvailable;
    bool _color4fvAvailable;
    bool _color4hNVAvailable;
    bool _color4hvNVAvailable;
    bool _color4iAvailable;
    bool _color4ivAvailable;
    bool _color4sAvailable;
    bool _color4svAvailable;
    bool _color4ubAvailable;
    bool _color4ubvAvailable;
    bool _color4ubVertex2fSUNAvailable;
    bool _color4ubVertex2fvSUNAvailable;
    bool _color4ubVertex3fSUNAvailable;
    bool _color4ubVertex3fvSUNAvailable;
    bool _color4uiAvailable;
    bool _color4uivAvailable;
    bool _color4usAvailable;
    bool _color4usvAvailable;
    bool _color4xAvailable;
    bool _color4xOESAvailable;
    bool _color4xvOESAvailable;
    bool _colorFormatNVAvailable;
    bool _colorFragmentOp1ATIAvailable;
    bool _colorFragmentOp2ATIAvailable;
    bool _colorFragmentOp3ATIAvailable;
    bool _colorMaskAvailable;
    bool _colorMaskiAvailable;
    bool _colorMaskiEXTAvailable;
    bool _colorMaskIndexedEXTAvailable;
    bool _colorMaskiOESAvailable;
    bool _colorMaterialAvailable;
    bool _colorP3uiAvailable;
    bool _colorP3uivAvailable;
    bool _colorP4uiAvailable;
    bool _colorP4uivAvailable;
    bool _colorPointerAvailable;
    bool _colorPointerEXTAvailable;
    bool _colorPointerListIBMAvailable;
    bool _colorPointervINTELAvailable;
    bool _colorSubTableAvailable;
    bool _colorSubTableEXTAvailable;
    bool _colorTableAvailable;
    bool _colorTableEXTAvailable;
    bool _colorTableParameterfvAvailable;
    bool _colorTableParameterfvSGIAvailable;
    bool _colorTableParameterivAvailable;
    bool _colorTableParameterivSGIAvailable;
    bool _colorTableSGIAvailable;
    bool _combinerInputNVAvailable;
    bool _combinerOutputNVAvailable;
    bool _combinerParameterfNVAvailable;
    bool _combinerParameterfvNVAvailable;
    bool _combinerParameteriNVAvailable;
    bool _combinerParameterivNVAvailable;
    bool _combinerStageParameterfvNVAvailable;
    bool _commandListSegmentsNVAvailable;
    bool _compileCommandListNVAvailable;
    bool _compileShaderAvailable;
    bool _compileShaderARBAvailable;
    bool _compileShaderIncludeARBAvailable;
    bool _compressedMultiTexImage1DEXTAvailable;
    bool _compressedMultiTexImage2DEXTAvailable;
    bool _compressedMultiTexImage3DEXTAvailable;
    bool _compressedMultiTexSubImage1DEXTAvailable;
    bool _compressedMultiTexSubImage2DEXTAvailable;
    bool _compressedMultiTexSubImage3DEXTAvailable;
    bool _compressedTexImage1DAvailable;
    bool _compressedTexImage1DARBAvailable;
    bool _compressedTexImage2DAvailable;
    bool _compressedTexImage2DARBAvailable;
    bool _compressedTexImage3DAvailable;
    bool _compressedTexImage3DARBAvailable;
    bool _compressedTexImage3DOESAvailable;
    bool _compressedTexSubImage1DAvailable;
    bool _compressedTexSubImage1DARBAvailable;
    bool _compressedTexSubImage2DAvailable;
    bool _compressedTexSubImage2DARBAvailable;
    bool _compressedTexSubImage3DAvailable;
    bool _compressedTexSubImage3DARBAvailable;
    bool _compressedTexSubImage3DOESAvailable;
    bool _compressedTextureImage1DEXTAvailable;
    bool _compressedTextureImage2DEXTAvailable;
    bool _compressedTextureImage3DEXTAvailable;
    bool _compressedTextureSubImage1DAvailable;
    bool _compressedTextureSubImage1DEXTAvailable;
    bool _compressedTextureSubImage2DAvailable;
    bool _compressedTextureSubImage2DEXTAvailable;
    bool _compressedTextureSubImage3DAvailable;
    bool _compressedTextureSubImage3DEXTAvailable;
    bool _conservativeRasterParameterfNVAvailable;
    bool _conservativeRasterParameteriNVAvailable;
    bool _convolutionFilter1DAvailable;
    bool _convolutionFilter1DEXTAvailable;
    bool _convolutionFilter2DAvailable;
    bool _convolutionFilter2DEXTAvailable;
    bool _convolutionParameterfAvailable;
    bool _convolutionParameterfEXTAvailable;
    bool _convolutionParameterfvAvailable;
    bool _convolutionParameterfvEXTAvailable;
    bool _convolutionParameteriAvailable;
    bool _convolutionParameteriEXTAvailable;
    bool _convolutionParameterivAvailable;
    bool _convolutionParameterivEXTAvailable;
    bool _convolutionParameterxOESAvailable;
    bool _convolutionParameterxvOESAvailable;
    bool _copyBufferSubDataAvailable;
    bool _copyBufferSubDataNVAvailable;
    bool _copyColorSubTableAvailable;
    bool _copyColorSubTableEXTAvailable;
    bool _copyColorTableAvailable;
    bool _copyColorTableSGIAvailable;
    bool _copyConvolutionFilter1DAvailable;
    bool _copyConvolutionFilter1DEXTAvailable;
    bool _copyConvolutionFilter2DAvailable;
    bool _copyConvolutionFilter2DEXTAvailable;
    bool _copyImageSubDataAvailable;
    bool _copyImageSubDataEXTAvailable;
    bool _copyImageSubDataNVAvailable;
    bool _copyImageSubDataOESAvailable;
    bool _copyMultiTexImage1DEXTAvailable;
    bool _copyMultiTexImage2DEXTAvailable;
    bool _copyMultiTexSubImage1DEXTAvailable;
    bool _copyMultiTexSubImage2DEXTAvailable;
    bool _copyMultiTexSubImage3DEXTAvailable;
    bool _copyNamedBufferSubDataAvailable;
    bool _copyPathNVAvailable;
    bool _copyPixelsAvailable;
    bool _copyTexImage1DAvailable;
    bool _copyTexImage1DEXTAvailable;
    bool _copyTexImage2DAvailable;
    bool _copyTexImage2DEXTAvailable;
    bool _copyTexSubImage1DAvailable;
    bool _copyTexSubImage1DEXTAvailable;
    bool _copyTexSubImage2DAvailable;
    bool _copyTexSubImage2DEXTAvailable;
    bool _copyTexSubImage3DAvailable;
    bool _copyTexSubImage3DEXTAvailable;
    bool _copyTexSubImage3DOESAvailable;
    bool _copyTextureImage1DEXTAvailable;
    bool _copyTextureImage2DEXTAvailable;
    bool _copyTextureLevelsAPPLEAvailable;
    bool _copyTextureSubImage1DAvailable;
    bool _copyTextureSubImage1DEXTAvailable;
    bool _copyTextureSubImage2DAvailable;
    bool _copyTextureSubImage2DEXTAvailable;
    bool _copyTextureSubImage3DAvailable;
    bool _copyTextureSubImage3DEXTAvailable;
    bool _coverageMaskNVAvailable;
    bool _coverageModulationNVAvailable;
    bool _coverageModulationTableNVAvailable;
    bool _coverageOperationNVAvailable;
    bool _coverFillPathInstancedNVAvailable;
    bool _coverFillPathNVAvailable;
    bool _coverStrokePathInstancedNVAvailable;
    bool _coverStrokePathNVAvailable;
    bool _createBuffersAvailable;
    bool _createCommandListsNVAvailable;
    bool _createFramebuffersAvailable;
    bool _createMemoryObjectsEXTAvailable;
    bool _createPerfQueryINTELAvailable;
    bool _createProgramAvailable;
    bool _createProgramObjectARBAvailable;
    bool _createProgramPipelinesAvailable;
    bool _createProgressFenceNVXAvailable;
    bool _createQueriesAvailable;
    bool _createRenderbuffersAvailable;
    bool _createSamplersAvailable;
    bool _createSemaphoresNVAvailable;
    bool _createShaderAvailable;
    bool _createShaderObjectARBAvailable;
    bool _createShaderProgramEXTAvailable;
    bool _createShaderProgramvAvailable;
    bool _createShaderProgramvEXTAvailable;
    bool _createStatesNVAvailable;
    bool _createSyncFromCLeventARBAvailable;
    bool _createTexturesAvailable;
    bool _createTransformFeedbacksAvailable;
    bool _createVertexArraysAvailable;
    bool _cullFaceAvailable;
    bool _cullParameterdvEXTAvailable;
    bool _cullParameterfvEXTAvailable;
    bool _currentPaletteMatrixARBAvailable;
    bool _currentPaletteMatrixOESAvailable;
    bool _debugMessageCallbackAvailable;
    bool _debugMessageCallbackAMDAvailable;
    bool _debugMessageCallbackARBAvailable;
    bool _debugMessageCallbackKHRAvailable;
    bool _debugMessageControlAvailable;
    bool _debugMessageControlARBAvailable;
    bool _debugMessageControlKHRAvailable;
    bool _debugMessageEnableAMDAvailable;
    bool _debugMessageInsertAvailable;
    bool _debugMessageInsertAMDAvailable;
    bool _debugMessageInsertARBAvailable;
    bool _debugMessageInsertKHRAvailable;
    bool _deformationMap3dSGIXAvailable;
    bool _deformationMap3fSGIXAvailable;
    bool _deformSGIXAvailable;
    bool _deleteAsyncMarkersSGIXAvailable;
    bool _deleteBuffersAvailable;
    bool _deleteBuffersARBAvailable;
    bool _deleteCommandListsNVAvailable;
    bool _deleteFencesAPPLEAvailable;
    bool _deleteFencesNVAvailable;
    bool _deleteFragmentShaderATIAvailable;
    bool _deleteFramebuffersAvailable;
    bool _deleteFramebuffersEXTAvailable;
    bool _deleteFramebuffersOESAvailable;
    bool _deleteListsAvailable;
    bool _deleteMemoryObjectsEXTAvailable;
    bool _deleteNamedStringARBAvailable;
    bool _deleteNamesAMDAvailable;
    bool _deleteObjectARBAvailable;
    bool _deleteOcclusionQueriesNVAvailable;
    bool _deletePathsNVAvailable;
    bool _deletePerfMonitorsAMDAvailable;
    bool _deletePerfQueryINTELAvailable;
    bool _deleteProgramAvailable;
    bool _deleteProgramPipelinesAvailable;
    bool _deleteProgramPipelinesEXTAvailable;
    bool _deleteProgramsARBAvailable;
    bool _deleteProgramsNVAvailable;
    bool _deleteQueriesAvailable;
    bool _deleteQueriesARBAvailable;
    bool _deleteQueriesEXTAvailable;
    bool _deleteQueryResourceTagNVAvailable;
    bool _deleteRenderbuffersAvailable;
    bool _deleteRenderbuffersEXTAvailable;
    bool _deleteRenderbuffersOESAvailable;
    bool _deleteSamplersAvailable;
    bool _deleteSemaphoresEXTAvailable;
    bool _deleteShaderAvailable;
    bool _deleteStatesNVAvailable;
    bool _deleteSyncAvailable;
    bool _deleteSyncAPPLEAvailable;
    bool _deleteTexturesAvailable;
    bool _deleteTexturesEXTAvailable;
    bool _deleteTransformFeedbacksAvailable;
    bool _deleteTransformFeedbacksNVAvailable;
    bool _deleteVertexArraysAvailable;
    bool _deleteVertexArraysAPPLEAvailable;
    bool _deleteVertexArraysOESAvailable;
    bool _deleteVertexShaderEXTAvailable;
    bool _depthBoundsdNVAvailable;
    bool _depthBoundsEXTAvailable;
    bool _depthFuncAvailable;
    bool _depthMaskAvailable;
    bool _depthRangeAvailable;
    bool _depthRangeArraydvNVAvailable;
    bool _depthRangeArrayfvNVAvailable;
    bool _depthRangeArrayfvOESAvailable;
    bool _depthRangeArrayvAvailable;
    bool _depthRangedNVAvailable;
    bool _depthRangefAvailable;
    bool _depthRangefOESAvailable;
    bool _depthRangeIndexedAvailable;
    bool _depthRangeIndexeddNVAvailable;
    bool _depthRangeIndexedfNVAvailable;
    bool _depthRangeIndexedfOESAvailable;
    bool _depthRangexAvailable;
    bool _depthRangexOESAvailable;
    bool _detachObjectARBAvailable;
    bool _detachShaderAvailable;
    bool _detailTexFuncSGISAvailable;
    bool _disableAvailable;
    bool _disableClientStateAvailable;
    bool _disableClientStateiEXTAvailable;
    bool _disableClientStateIndexedEXTAvailable;
    bool _disableDriverControlQCOMAvailable;
    bool _disableiAvailable;
    bool _disableiEXTAvailable;
    bool _disableIndexedEXTAvailable;
    bool _disableiNVAvailable;
    bool _disableiOESAvailable;
    bool _disableVariantClientStateEXTAvailable;
    bool _disableVertexArrayAttribAvailable;
    bool _disableVertexArrayAttribEXTAvailable;
    bool _disableVertexArrayEXTAvailable;
    bool _disableVertexAttribAPPLEAvailable;
    bool _disableVertexAttribArrayAvailable;
    bool _disableVertexAttribArrayARBAvailable;
    bool _discardFramebufferEXTAvailable;
    bool _dispatchComputeAvailable;
    bool _dispatchComputeGroupSizeARBAvailable;
    bool _dispatchComputeIndirectAvailable;
    bool _drawArraysAvailable;
    bool _drawArraysEXTAvailable;
    bool _drawArraysIndirectAvailable;
    bool _drawArraysInstancedAvailable;
    bool _drawArraysInstancedANGLEAvailable;
    bool _drawArraysInstancedARBAvailable;
    bool _drawArraysInstancedBaseInstanceAvailable;
    bool _drawArraysInstancedBaseInstanceEXTAvailable;
    bool _drawArraysInstancedEXTAvailable;
    bool _drawArraysInstancedNVAvailable;
    bool _drawBufferAvailable;
    bool _drawBuffersAvailable;
    bool _drawBuffersARBAvailable;
    bool _drawBuffersATIAvailable;
    bool _drawBuffersEXTAvailable;
    bool _drawBuffersIndexedEXTAvailable;
    bool _drawBuffersNVAvailable;
    bool _drawCommandsAddressNVAvailable;
    bool _drawCommandsNVAvailable;
    bool _drawCommandsStatesAddressNVAvailable;
    bool _drawCommandsStatesNVAvailable;
    bool _drawElementArrayAPPLEAvailable;
    bool _drawElementArrayATIAvailable;
    bool _drawElementsAvailable;
    bool _drawElementsBaseVertexAvailable;
    bool _drawElementsBaseVertexEXTAvailable;
    bool _drawElementsBaseVertexOESAvailable;
    bool _drawElementsIndirectAvailable;
    bool _drawElementsInstancedAvailable;
    bool _drawElementsInstancedANGLEAvailable;
    bool _drawElementsInstancedARBAvailable;
    bool _drawElementsInstancedBaseInstanceAvailable;
    bool _drawElementsInstancedBaseInstanceEXTAvailable;
    bool _drawElementsInstancedBaseVertexAvailable;
    bool _drawElementsInstancedBaseVertexBaseInstanceAvailable;
    bool _drawElementsInstancedBaseVertexBaseInstanceEXTAvailable;
    bool _drawElementsInstancedBaseVertexEXTAvailable;
    bool _drawElementsInstancedBaseVertexOESAvailable;
    bool _drawElementsInstancedEXTAvailable;
    bool _drawElementsInstancedNVAvailable;
    bool _drawMeshArraysSUNAvailable;
    bool _drawMeshTasksIndirectNVAvailable;
    bool _drawMeshTasksNVAvailable;
    bool _drawPixelsAvailable;
    bool _drawRangeElementArrayAPPLEAvailable;
    bool _drawRangeElementArrayATIAvailable;
    bool _drawRangeElementsAvailable;
    bool _drawRangeElementsBaseVertexAvailable;
    bool _drawRangeElementsBaseVertexEXTAvailable;
    bool _drawRangeElementsBaseVertexOESAvailable;
    bool _drawRangeElementsEXTAvailable;
    bool _drawTexfOESAvailable;
    bool _drawTexfvOESAvailable;
    bool _drawTexiOESAvailable;
    bool _drawTexivOESAvailable;
    bool _drawTexsOESAvailable;
    bool _drawTexsvOESAvailable;
    bool _drawTextureNVAvailable;
    bool _drawTexxOESAvailable;
    bool _drawTexxvOESAvailable;
    bool _drawTransformFeedbackAvailable;
    bool _drawTransformFeedbackEXTAvailable;
    bool _drawTransformFeedbackInstancedAvailable;
    bool _drawTransformFeedbackInstancedEXTAvailable;
    bool _drawTransformFeedbackNVAvailable;
    bool _drawTransformFeedbackStreamAvailable;
    bool _drawTransformFeedbackStreamInstancedAvailable;
    bool _drawVkImageNVAvailable;
    bool _edgeFlagAvailable;
    bool _edgeFlagFormatNVAvailable;
    bool _edgeFlagPointerAvailable;
    bool _edgeFlagPointerEXTAvailable;
    bool _edgeFlagPointerListIBMAvailable;
    bool _edgeFlagvAvailable;
    bool _eGLImageTargetRenderbufferStorageOESAvailable;
    bool _eGLImageTargetTexStorageEXTAvailable;
    bool _eGLImageTargetTexture2DOESAvailable;
    bool _eGLImageTargetTextureStorageEXTAvailable;
    bool _elementPointerAPPLEAvailable;
    bool _elementPointerATIAvailable;
    bool _enableAvailable;
    bool _enableClientStateAvailable;
    bool _enableClientStateiEXTAvailable;
    bool _enableClientStateIndexedEXTAvailable;
    bool _enableDriverControlQCOMAvailable;
    bool _enableiAvailable;
    bool _enableiEXTAvailable;
    bool _enableIndexedEXTAvailable;
    bool _enableiNVAvailable;
    bool _enableiOESAvailable;
    bool _enableVariantClientStateEXTAvailable;
    bool _enableVertexArrayAttribAvailable;
    bool _enableVertexArrayAttribEXTAvailable;
    bool _enableVertexArrayEXTAvailable;
    bool _enableVertexAttribAPPLEAvailable;
    bool _enableVertexAttribArrayAvailable;
    bool _enableVertexAttribArrayARBAvailable;
    bool _endAvailable;
    bool _endConditionalRenderAvailable;
    bool _endConditionalRenderNVAvailable;
    bool _endConditionalRenderNVXAvailable;
    bool _endFragmentShaderATIAvailable;
    bool _endListAvailable;
    bool _endOcclusionQueryNVAvailable;
    bool _endPerfMonitorAMDAvailable;
    bool _endPerfQueryINTELAvailable;
    bool _endQueryAvailable;
    bool _endQueryARBAvailable;
    bool _endQueryEXTAvailable;
    bool _endQueryIndexedAvailable;
    bool _endTilingQCOMAvailable;
    bool _endTransformFeedbackAvailable;
    bool _endTransformFeedbackEXTAvailable;
    bool _endTransformFeedbackNVAvailable;
    bool _endVertexShaderEXTAvailable;
    bool _endVideoCaptureNVAvailable;
    bool _evalCoord1dAvailable;
    bool _evalCoord1dvAvailable;
    bool _evalCoord1fAvailable;
    bool _evalCoord1fvAvailable;
    bool _evalCoord1xOESAvailable;
    bool _evalCoord1xvOESAvailable;
    bool _evalCoord2dAvailable;
    bool _evalCoord2dvAvailable;
    bool _evalCoord2fAvailable;
    bool _evalCoord2fvAvailable;
    bool _evalCoord2xOESAvailable;
    bool _evalCoord2xvOESAvailable;
    bool _evalMapsNVAvailable;
    bool _evalMesh1Available;
    bool _evalMesh2Available;
    bool _evalPoint1Available;
    bool _evalPoint2Available;
    bool _evaluateDepthValuesARBAvailable;
    bool _executeProgramNVAvailable;
    bool _extGetBufferPointervQCOMAvailable;
    bool _extGetBuffersQCOMAvailable;
    bool _extGetFramebuffersQCOMAvailable;
    bool _extGetProgramBinarySourceQCOMAvailable;
    bool _extGetProgramsQCOMAvailable;
    bool _extGetRenderbuffersQCOMAvailable;
    bool _extGetShadersQCOMAvailable;
    bool _extGetTexLevelParameterivQCOMAvailable;
    bool _extGetTexSubImageQCOMAvailable;
    bool _extGetTexturesQCOMAvailable;
    bool _extIsProgramBinaryQCOMAvailable;
    bool _extractComponentEXTAvailable;
    bool _extrapolateTex2DQCOMAvailable;
    bool _extTexObjectStateOverrideiQCOMAvailable;
    bool _feedbackBufferAvailable;
    bool _feedbackBufferxOESAvailable;
    bool _fenceSyncAvailable;
    bool _fenceSyncAPPLEAvailable;
    bool _finalCombinerInputNVAvailable;
    bool _finishAvailable;
    bool _finishAsyncSGIXAvailable;
    bool _finishFenceAPPLEAvailable;
    bool _finishFenceNVAvailable;
    bool _finishObjectAPPLEAvailable;
    bool _finishTextureSUNXAvailable;
    bool _flushAvailable;
    bool _flushMappedBufferRangeAvailable;
    bool _flushMappedBufferRangeAPPLEAvailable;
    bool _flushMappedBufferRangeEXTAvailable;
    bool _flushMappedNamedBufferRangeAvailable;
    bool _flushMappedNamedBufferRangeEXTAvailable;
    bool _flushPixelDataRangeNVAvailable;
    bool _flushRasterSGIXAvailable;
    bool _flushStaticDataIBMAvailable;
    bool _flushVertexArrayRangeAPPLEAvailable;
    bool _flushVertexArrayRangeNVAvailable;
    bool _fogCoorddAvailable;
    bool _fogCoorddEXTAvailable;
    bool _fogCoorddvAvailable;
    bool _fogCoorddvEXTAvailable;
    bool _fogCoordfAvailable;
    bool _fogCoordfEXTAvailable;
    bool _fogCoordFormatNVAvailable;
    bool _fogCoordfvAvailable;
    bool _fogCoordfvEXTAvailable;
    bool _fogCoordhNVAvailable;
    bool _fogCoordhvNVAvailable;
    bool _fogCoordPointerAvailable;
    bool _fogCoordPointerEXTAvailable;
    bool _fogCoordPointerListIBMAvailable;
    bool _fogfAvailable;
    bool _fogFuncSGISAvailable;
    bool _fogfvAvailable;
    bool _fogiAvailable;
    bool _fogivAvailable;
    bool _fogxAvailable;
    bool _fogxOESAvailable;
    bool _fogxvAvailable;
    bool _fogxvOESAvailable;
    bool _fragmentColorMaterialSGIXAvailable;
    bool _fragmentCoverageColorNVAvailable;
    bool _fragmentLightfSGIXAvailable;
    bool _fragmentLightfvSGIXAvailable;
    bool _fragmentLightiSGIXAvailable;
    bool _fragmentLightivSGIXAvailable;
    bool _fragmentLightModelfSGIXAvailable;
    bool _fragmentLightModelfvSGIXAvailable;
    bool _fragmentLightModeliSGIXAvailable;
    bool _fragmentLightModelivSGIXAvailable;
    bool _fragmentMaterialfSGIXAvailable;
    bool _fragmentMaterialfvSGIXAvailable;
    bool _fragmentMaterialiSGIXAvailable;
    bool _fragmentMaterialivSGIXAvailable;
    bool _framebufferDrawBufferEXTAvailable;
    bool _framebufferDrawBuffersEXTAvailable;
    bool _framebufferFetchBarrierEXTAvailable;
    bool _framebufferFetchBarrierQCOMAvailable;
    bool _framebufferFoveationConfigQCOMAvailable;
    bool _framebufferFoveationParametersQCOMAvailable;
    bool _framebufferParameteriAvailable;
    bool _framebufferParameteriMESAAvailable;
    bool _framebufferPixelLocalStorageSizeEXTAvailable;
    bool _framebufferReadBufferEXTAvailable;
    bool _framebufferRenderbufferAvailable;
    bool _framebufferRenderbufferEXTAvailable;
    bool _framebufferRenderbufferOESAvailable;
    bool _framebufferSampleLocationsfvARBAvailable;
    bool _framebufferSampleLocationsfvNVAvailable;
    bool _framebufferSamplePositionsfvAMDAvailable;
    bool _framebufferShadingRateEXTAvailable;
    bool _framebufferTextureAvailable;
    bool _framebufferTexture1DAvailable;
    bool _framebufferTexture1DEXTAvailable;
    bool _framebufferTexture2DAvailable;
    bool _framebufferTexture2DDownsampleIMGAvailable;
    bool _framebufferTexture2DEXTAvailable;
    bool _framebufferTexture2DMultisampleEXTAvailable;
    bool _framebufferTexture2DMultisampleIMGAvailable;
    bool _framebufferTexture2DOESAvailable;
    bool _framebufferTexture3DAvailable;
    bool _framebufferTexture3DEXTAvailable;
    bool _framebufferTexture3DOESAvailable;
    bool _framebufferTextureARBAvailable;
    bool _framebufferTextureEXTAvailable;
    bool _framebufferTextureFaceARBAvailable;
    bool _framebufferTextureFaceEXTAvailable;
    bool _framebufferTextureLayerAvailable;
    bool _framebufferTextureLayerARBAvailable;
    bool _framebufferTextureLayerDownsampleIMGAvailable;
    bool _framebufferTextureLayerEXTAvailable;
    bool _framebufferTextureMultisampleMultiviewOVRAvailable;
    bool _framebufferTextureMultiviewOVRAvailable;
    bool _framebufferTextureOESAvailable;
    bool _frameTerminatorGREMEDYAvailable;
    bool _frameZoomSGIXAvailable;
    bool _freeObjectBufferATIAvailable;
    bool _frontFaceAvailable;
    bool _frustumAvailable;
    bool _frustumfAvailable;
    bool _frustumfOESAvailable;
    bool _frustumxAvailable;
    bool _frustumxOESAvailable;
    bool _genAsyncMarkersSGIXAvailable;
    bool _genBuffersAvailable;
    bool _genBuffersARBAvailable;
    bool _generateMipmapAvailable;
    bool _generateMipmapEXTAvailable;
    bool _generateMipmapOESAvailable;
    bool _generateMultiTexMipmapEXTAvailable;
    bool _generateTextureMipmapAvailable;
    bool _generateTextureMipmapEXTAvailable;
    bool _genFencesAPPLEAvailable;
    bool _genFencesNVAvailable;
    bool _genFragmentShadersATIAvailable;
    bool _genFramebuffersAvailable;
    bool _genFramebuffersEXTAvailable;
    bool _genFramebuffersOESAvailable;
    bool _genListsAvailable;
    bool _genNamesAMDAvailable;
    bool _genOcclusionQueriesNVAvailable;
    bool _genPathsNVAvailable;
    bool _genPerfMonitorsAMDAvailable;
    bool _genProgramPipelinesAvailable;
    bool _genProgramPipelinesEXTAvailable;
    bool _genProgramsARBAvailable;
    bool _genProgramsNVAvailable;
    bool _genQueriesAvailable;
    bool _genQueriesARBAvailable;
    bool _genQueriesEXTAvailable;
    bool _genQueryResourceTagNVAvailable;
    bool _genRenderbuffersAvailable;
    bool _genRenderbuffersEXTAvailable;
    bool _genRenderbuffersOESAvailable;
    bool _genSamplersAvailable;
    bool _genSemaphoresEXTAvailable;
    bool _genSymbolsEXTAvailable;
    bool _genTexturesAvailable;
    bool _genTexturesEXTAvailable;
    bool _genTransformFeedbacksAvailable;
    bool _genTransformFeedbacksNVAvailable;
    bool _genVertexArraysAvailable;
    bool _genVertexArraysAPPLEAvailable;
    bool _genVertexArraysOESAvailable;
    bool _genVertexShadersEXTAvailable;
    bool _getActiveAtomicCounterBufferivAvailable;
    bool _getActiveAttribAvailable;
    bool _getActiveAttribARBAvailable;
    bool _getActiveSubroutineNameAvailable;
    bool _getActiveSubroutineUniformivAvailable;
    bool _getActiveSubroutineUniformNameAvailable;
    bool _getActiveUniformAvailable;
    bool _getActiveUniformARBAvailable;
    bool _getActiveUniformBlockivAvailable;
    bool _getActiveUniformBlockNameAvailable;
    bool _getActiveUniformNameAvailable;
    bool _getActiveUniformsivAvailable;
    bool _getActiveVaryingNVAvailable;
    bool _getArrayObjectfvATIAvailable;
    bool _getArrayObjectivATIAvailable;
    bool _getAttachedObjectsARBAvailable;
    bool _getAttachedShadersAvailable;
    bool _getAttribLocationAvailable;
    bool _getAttribLocationARBAvailable;
    bool _getBooleanIndexedvEXTAvailable;
    bool _getBooleani_vAvailable;
    bool _getBooleanvAvailable;
    bool _getBufferParameteri64vAvailable;
    bool _getBufferParameterivAvailable;
    bool _getBufferParameterivARBAvailable;
    bool _getBufferParameterui64vNVAvailable;
    bool _getBufferPointervAvailable;
    bool _getBufferPointervARBAvailable;
    bool _getBufferPointervOESAvailable;
    bool _getBufferSubDataAvailable;
    bool _getBufferSubDataARBAvailable;
    bool _getClipPlaneAvailable;
    bool _getClipPlanefAvailable;
    bool _getClipPlanefOESAvailable;
    bool _getClipPlanexAvailable;
    bool _getClipPlanexOESAvailable;
    bool _getColorTableAvailable;
    bool _getColorTableEXTAvailable;
    bool _getColorTableParameterfvAvailable;
    bool _getColorTableParameterfvEXTAvailable;
    bool _getColorTableParameterfvSGIAvailable;
    bool _getColorTableParameterivAvailable;
    bool _getColorTableParameterivEXTAvailable;
    bool _getColorTableParameterivSGIAvailable;
    bool _getColorTableSGIAvailable;
    bool _getCombinerInputParameterfvNVAvailable;
    bool _getCombinerInputParameterivNVAvailable;
    bool _getCombinerOutputParameterfvNVAvailable;
    bool _getCombinerOutputParameterivNVAvailable;
    bool _getCombinerStageParameterfvNVAvailable;
    bool _getCommandHeaderNVAvailable;
    bool _getCompressedMultiTexImageEXTAvailable;
    bool _getCompressedTexImageAvailable;
    bool _getCompressedTexImageARBAvailable;
    bool _getCompressedTextureImageAvailable;
    bool _getCompressedTextureImageEXTAvailable;
    bool _getCompressedTextureSubImageAvailable;
    bool _getConvolutionFilterAvailable;
    bool _getConvolutionFilterEXTAvailable;
    bool _getConvolutionParameterfvAvailable;
    bool _getConvolutionParameterfvEXTAvailable;
    bool _getConvolutionParameterivAvailable;
    bool _getConvolutionParameterivEXTAvailable;
    bool _getConvolutionParameterxvOESAvailable;
    bool _getCoverageModulationTableNVAvailable;
    bool _getDebugMessageLogAvailable;
    bool _getDebugMessageLogAMDAvailable;
    bool _getDebugMessageLogARBAvailable;
    bool _getDebugMessageLogKHRAvailable;
    bool _getDetailTexFuncSGISAvailable;
    bool _getDoubleIndexedvEXTAvailable;
    bool _getDoublei_vAvailable;
    bool _getDoublei_vEXTAvailable;
    bool _getDoublevAvailable;
    bool _getDriverControlsQCOMAvailable;
    bool _getDriverControlStringQCOMAvailable;
    bool _getErrorAvailable;
    bool _getFenceivNVAvailable;
    bool _getFinalCombinerInputParameterfvNVAvailable;
    bool _getFinalCombinerInputParameterivNVAvailable;
    bool _getFirstPerfQueryIdINTELAvailable;
    bool _getFixedvAvailable;
    bool _getFixedvOESAvailable;
    bool _getFloatIndexedvEXTAvailable;
    bool _getFloati_vAvailable;
    bool _getFloati_vEXTAvailable;
    bool _getFloati_vNVAvailable;
    bool _getFloati_vOESAvailable;
    bool _getFloatvAvailable;
    bool _getFogFuncSGISAvailable;
    bool _getFragDataIndexAvailable;
    bool _getFragDataIndexEXTAvailable;
    bool _getFragDataLocationAvailable;
    bool _getFragDataLocationEXTAvailable;
    bool _getFragmentLightfvSGIXAvailable;
    bool _getFragmentLightivSGIXAvailable;
    bool _getFragmentMaterialfvSGIXAvailable;
    bool _getFragmentMaterialivSGIXAvailable;
    bool _getFragmentShadingRatesEXTAvailable;
    bool _getFramebufferAttachmentParameterivAvailable;
    bool _getFramebufferAttachmentParameterivEXTAvailable;
    bool _getFramebufferAttachmentParameterivOESAvailable;
    bool _getFramebufferParameterfvAMDAvailable;
    bool _getFramebufferParameterivAvailable;
    bool _getFramebufferParameterivEXTAvailable;
    bool _getFramebufferParameterivMESAAvailable;
    bool _getFramebufferPixelLocalStorageSizeEXTAvailable;
    bool _getGraphicsResetStatusAvailable;
    bool _getGraphicsResetStatusARBAvailable;
    bool _getGraphicsResetStatusEXTAvailable;
    bool _getGraphicsResetStatusKHRAvailable;
    bool _getHandleARBAvailable;
    bool _getHistogramAvailable;
    bool _getHistogramEXTAvailable;
    bool _getHistogramParameterfvAvailable;
    bool _getHistogramParameterfvEXTAvailable;
    bool _getHistogramParameterivAvailable;
    bool _getHistogramParameterivEXTAvailable;
    bool _getHistogramParameterxvOESAvailable;
    bool _getImageHandleARBAvailable;
    bool _getImageHandleNVAvailable;
    bool _getImageTransformParameterfvHPAvailable;
    bool _getImageTransformParameterivHPAvailable;
    bool _getInfoLogARBAvailable;
    bool _getInstrumentsSGIXAvailable;
    bool _getInteger64i_vAvailable;
    bool _getInteger64vAvailable;
    bool _getInteger64vAPPLEAvailable;
    bool _getInteger64vEXTAvailable;
    bool _getIntegerIndexedvEXTAvailable;
    bool _getIntegeri_vAvailable;
    bool _getIntegeri_vEXTAvailable;
    bool _getIntegerui64i_vNVAvailable;
    bool _getIntegerui64vNVAvailable;
    bool _getIntegervAvailable;
    bool _getInternalformati64vAvailable;
    bool _getInternalformativAvailable;
    bool _getInternalformatSampleivNVAvailable;
    bool _getInvariantBooleanvEXTAvailable;
    bool _getInvariantFloatvEXTAvailable;
    bool _getInvariantIntegervEXTAvailable;
    bool _getLightfvAvailable;
    bool _getLightivAvailable;
    bool _getLightxOESAvailable;
    bool _getLightxvAvailable;
    bool _getLightxvOESAvailable;
    bool _getListParameterfvSGIXAvailable;
    bool _getListParameterivSGIXAvailable;
    bool _getLocalConstantBooleanvEXTAvailable;
    bool _getLocalConstantFloatvEXTAvailable;
    bool _getLocalConstantIntegervEXTAvailable;
    bool _getMapAttribParameterfvNVAvailable;
    bool _getMapAttribParameterivNVAvailable;
    bool _getMapControlPointsNVAvailable;
    bool _getMapdvAvailable;
    bool _getMapfvAvailable;
    bool _getMapivAvailable;
    bool _getMapParameterfvNVAvailable;
    bool _getMapParameterivNVAvailable;
    bool _getMapxvOESAvailable;
    bool _getMaterialfvAvailable;
    bool _getMaterialivAvailable;
    bool _getMaterialxOESAvailable;
    bool _getMaterialxvAvailable;
    bool _getMaterialxvOESAvailable;
    bool _getMemoryObjectDetachedResourcesuivNVAvailable;
    bool _getMemoryObjectParameterivEXTAvailable;
    bool _getMinmaxAvailable;
    bool _getMinmaxEXTAvailable;
    bool _getMinmaxParameterfvAvailable;
    bool _getMinmaxParameterfvEXTAvailable;
    bool _getMinmaxParameterivAvailable;
    bool _getMinmaxParameterivEXTAvailable;
    bool _getMultisamplefvAvailable;
    bool _getMultisamplefvNVAvailable;
    bool _getMultiTexEnvfvEXTAvailable;
    bool _getMultiTexEnvivEXTAvailable;
    bool _getMultiTexGendvEXTAvailable;
    bool _getMultiTexGenfvEXTAvailable;
    bool _getMultiTexGenivEXTAvailable;
    bool _getMultiTexImageEXTAvailable;
    bool _getMultiTexLevelParameterfvEXTAvailable;
    bool _getMultiTexLevelParameterivEXTAvailable;
    bool _getMultiTexParameterfvEXTAvailable;
    bool _getMultiTexParameterIivEXTAvailable;
    bool _getMultiTexParameterIuivEXTAvailable;
    bool _getMultiTexParameterivEXTAvailable;
    bool _getNamedBufferParameteri64vAvailable;
    bool _getNamedBufferParameterivAvailable;
    bool _getNamedBufferParameterivEXTAvailable;
    bool _getNamedBufferParameterui64vNVAvailable;
    bool _getNamedBufferPointervAvailable;
    bool _getNamedBufferPointervEXTAvailable;
    bool _getNamedBufferSubDataAvailable;
    bool _getNamedBufferSubDataEXTAvailable;
    bool _getNamedFramebufferAttachmentParameterivAvailable;
    bool _getNamedFramebufferAttachmentParameterivEXTAvailable;
    bool _getNamedFramebufferParameterfvAMDAvailable;
    bool _getNamedFramebufferParameterivAvailable;
    bool _getNamedFramebufferParameterivEXTAvailable;
    bool _getNamedProgramivEXTAvailable;
    bool _getNamedProgramLocalParameterdvEXTAvailable;
    bool _getNamedProgramLocalParameterfvEXTAvailable;
    bool _getNamedProgramLocalParameterIivEXTAvailable;
    bool _getNamedProgramLocalParameterIuivEXTAvailable;
    bool _getNamedProgramStringEXTAvailable;
    bool _getNamedRenderbufferParameterivAvailable;
    bool _getNamedRenderbufferParameterivEXTAvailable;
    bool _getNamedStringARBAvailable;
    bool _getNamedStringivARBAvailable;
    bool _getnColorTableAvailable;
    bool _getnColorTableARBAvailable;
    bool _getnCompressedTexImageAvailable;
    bool _getnCompressedTexImageARBAvailable;
    bool _getnConvolutionFilterAvailable;
    bool _getnConvolutionFilterARBAvailable;
    bool _getNextPerfQueryIdINTELAvailable;
    bool _getnHistogramAvailable;
    bool _getnHistogramARBAvailable;
    bool _getnMapdvAvailable;
    bool _getnMapdvARBAvailable;
    bool _getnMapfvAvailable;
    bool _getnMapfvARBAvailable;
    bool _getnMapivAvailable;
    bool _getnMapivARBAvailable;
    bool _getnMinmaxAvailable;
    bool _getnMinmaxARBAvailable;
    bool _getnPixelMapfvAvailable;
    bool _getnPixelMapfvARBAvailable;
    bool _getnPixelMapuivAvailable;
    bool _getnPixelMapuivARBAvailable;
    bool _getnPixelMapusvAvailable;
    bool _getnPixelMapusvARBAvailable;
    bool _getnPolygonStippleAvailable;
    bool _getnPolygonStippleARBAvailable;
    bool _getnSeparableFilterAvailable;
    bool _getnSeparableFilterARBAvailable;
    bool _getnTexImageAvailable;
    bool _getnTexImageARBAvailable;
    bool _getnUniformdvAvailable;
    bool _getnUniformdvARBAvailable;
    bool _getnUniformfvAvailable;
    bool _getnUniformfvARBAvailable;
    bool _getnUniformfvEXTAvailable;
    bool _getnUniformfvKHRAvailable;
    bool _getnUniformi64vARBAvailable;
    bool _getnUniformivAvailable;
    bool _getnUniformivARBAvailable;
    bool _getnUniformivEXTAvailable;
    bool _getnUniformivKHRAvailable;
    bool _getnUniformui64vARBAvailable;
    bool _getnUniformuivAvailable;
    bool _getnUniformuivARBAvailable;
    bool _getnUniformuivKHRAvailable;
    bool _getObjectBufferfvATIAvailable;
    bool _getObjectBufferivATIAvailable;
    bool _getObjectLabelAvailable;
    bool _getObjectLabelEXTAvailable;
    bool _getObjectLabelKHRAvailable;
    bool _getObjectParameterfvARBAvailable;
    bool _getObjectParameterivAPPLEAvailable;
    bool _getObjectParameterivARBAvailable;
    bool _getObjectPtrLabelAvailable;
    bool _getObjectPtrLabelKHRAvailable;
    bool _getOcclusionQueryivNVAvailable;
    bool _getOcclusionQueryuivNVAvailable;
    bool _getPathColorGenfvNVAvailable;
    bool _getPathColorGenivNVAvailable;
    bool _getPathCommandsNVAvailable;
    bool _getPathCoordsNVAvailable;
    bool _getPathDashArrayNVAvailable;
    bool _getPathLengthNVAvailable;
    bool _getPathMetricRangeNVAvailable;
    bool _getPathMetricsNVAvailable;
    bool _getPathParameterfvNVAvailable;
    bool _getPathParameterivNVAvailable;
    bool _getPathSpacingNVAvailable;
    bool _getPathTexGenfvNVAvailable;
    bool _getPathTexGenivNVAvailable;
    bool _getPerfCounterInfoINTELAvailable;
    bool _getPerfMonitorCounterDataAMDAvailable;
    bool _getPerfMonitorCounterInfoAMDAvailable;
    bool _getPerfMonitorCountersAMDAvailable;
    bool _getPerfMonitorCounterStringAMDAvailable;
    bool _getPerfMonitorGroupsAMDAvailable;
    bool _getPerfMonitorGroupStringAMDAvailable;
    bool _getPerfQueryDataINTELAvailable;
    bool _getPerfQueryIdByNameINTELAvailable;
    bool _getPerfQueryInfoINTELAvailable;
    bool _getPixelMapfvAvailable;
    bool _getPixelMapuivAvailable;
    bool _getPixelMapusvAvailable;
    bool _getPixelMapxvAvailable;
    bool _getPixelTexGenParameterfvSGISAvailable;
    bool _getPixelTexGenParameterivSGISAvailable;
    bool _getPixelTransformParameterfvEXTAvailable;
    bool _getPixelTransformParameterivEXTAvailable;
    bool _getPointerIndexedvEXTAvailable;
    bool _getPointeri_vEXTAvailable;
    bool _getPointervAvailable;
    bool _getPointervEXTAvailable;
    bool _getPointervKHRAvailable;
    bool _getPolygonStippleAvailable;
    bool _getProgramBinaryAvailable;
    bool _getProgramBinaryOESAvailable;
    bool _getProgramEnvParameterdvARBAvailable;
    bool _getProgramEnvParameterfvARBAvailable;
    bool _getProgramEnvParameterIivNVAvailable;
    bool _getProgramEnvParameterIuivNVAvailable;
    bool _getProgramInfoLogAvailable;
    bool _getProgramInterfaceivAvailable;
    bool _getProgramivAvailable;
    bool _getProgramivARBAvailable;
    bool _getProgramivNVAvailable;
    bool _getProgramLocalParameterdvARBAvailable;
    bool _getProgramLocalParameterfvARBAvailable;
    bool _getProgramLocalParameterIivNVAvailable;
    bool _getProgramLocalParameterIuivNVAvailable;
    bool _getProgramNamedParameterdvNVAvailable;
    bool _getProgramNamedParameterfvNVAvailable;
    bool _getProgramParameterdvNVAvailable;
    bool _getProgramParameterfvNVAvailable;
    bool _getProgramPipelineInfoLogAvailable;
    bool _getProgramPipelineInfoLogEXTAvailable;
    bool _getProgramPipelineivAvailable;
    bool _getProgramPipelineivEXTAvailable;
    bool _getProgramResourcefvNVAvailable;
    bool _getProgramResourceIndexAvailable;
    bool _getProgramResourceivAvailable;
    bool _getProgramResourceLocationAvailable;
    bool _getProgramResourceLocationIndexAvailable;
    bool _getProgramResourceLocationIndexEXTAvailable;
    bool _getProgramResourceNameAvailable;
    bool _getProgramStageivAvailable;
    bool _getProgramStringARBAvailable;
    bool _getProgramStringNVAvailable;
    bool _getProgramSubroutineParameteruivNVAvailable;
    bool _getQueryBufferObjecti64vAvailable;
    bool _getQueryBufferObjectivAvailable;
    bool _getQueryBufferObjectui64vAvailable;
    bool _getQueryBufferObjectuivAvailable;
    bool _getQueryIndexedivAvailable;
    bool _getQueryivAvailable;
    bool _getQueryivARBAvailable;
    bool _getQueryivEXTAvailable;
    bool _getQueryObjecti64vAvailable;
    bool _getQueryObjecti64vEXTAvailable;
    bool _getQueryObjectivAvailable;
    bool _getQueryObjectivARBAvailable;
    bool _getQueryObjectivEXTAvailable;
    bool _getQueryObjectui64vAvailable;
    bool _getQueryObjectui64vEXTAvailable;
    bool _getQueryObjectuivAvailable;
    bool _getQueryObjectuivARBAvailable;
    bool _getQueryObjectuivEXTAvailable;
    bool _getRenderbufferParameterivAvailable;
    bool _getRenderbufferParameterivEXTAvailable;
    bool _getRenderbufferParameterivOESAvailable;
    bool _getSamplerParameterfvAvailable;
    bool _getSamplerParameterIivAvailable;
    bool _getSamplerParameterIivEXTAvailable;
    bool _getSamplerParameterIivOESAvailable;
    bool _getSamplerParameterIuivAvailable;
    bool _getSamplerParameterIuivEXTAvailable;
    bool _getSamplerParameterIuivOESAvailable;
    bool _getSamplerParameterivAvailable;
    bool _getSemaphoreParameterivNVAvailable;
    bool _getSemaphoreParameterui64vEXTAvailable;
    bool _getSeparableFilterAvailable;
    bool _getSeparableFilterEXTAvailable;
    bool _getShaderInfoLogAvailable;
    bool _getShaderivAvailable;
    bool _getShaderPrecisionFormatAvailable;
    bool _getShaderSourceAvailable;
    bool _getShaderSourceARBAvailable;
    bool _getShadingRateImagePaletteNVAvailable;
    bool _getShadingRateSampleLocationivNVAvailable;
    bool _getSharpenTexFuncSGISAvailable;
    bool _getStageIndexNVAvailable;
    bool _getStringAvailable;
    bool _getStringiAvailable;
    bool _getSubroutineIndexAvailable;
    bool _getSubroutineUniformLocationAvailable;
    bool _getSyncivAvailable;
    bool _getSyncivAPPLEAvailable;
    bool _getTexBumpParameterfvATIAvailable;
    bool _getTexBumpParameterivATIAvailable;
    bool _getTexEnvfvAvailable;
    bool _getTexEnvivAvailable;
    bool _getTexEnvxvAvailable;
    bool _getTexEnvxvOESAvailable;
    bool _getTexFilterFuncSGISAvailable;
    bool _getTexGendvAvailable;
    bool _getTexGenfvAvailable;
    bool _getTexGenfvOESAvailable;
    bool _getTexGenivAvailable;
    bool _getTexGenivOESAvailable;
    bool _getTexGenxvOESAvailable;
    bool _getTexImageAvailable;
    bool _getTexLevelParameterfvAvailable;
    bool _getTexLevelParameterivAvailable;
    bool _getTexLevelParameterxvOESAvailable;
    bool _getTexParameterfvAvailable;
    bool _getTexParameterIivAvailable;
    bool _getTexParameterIivEXTAvailable;
    bool _getTexParameterIivOESAvailable;
    bool _getTexParameterIuivAvailable;
    bool _getTexParameterIuivEXTAvailable;
    bool _getTexParameterIuivOESAvailable;
    bool _getTexParameterivAvailable;
    bool _getTexParameterPointervAPPLEAvailable;
    bool _getTexParameterxvAvailable;
    bool _getTexParameterxvOESAvailable;
    bool _getTextureHandleARBAvailable;
    bool _getTextureHandleIMGAvailable;
    bool _getTextureHandleNVAvailable;
    bool _getTextureImageAvailable;
    bool _getTextureImageEXTAvailable;
    bool _getTextureLevelParameterfvAvailable;
    bool _getTextureLevelParameterfvEXTAvailable;
    bool _getTextureLevelParameterivAvailable;
    bool _getTextureLevelParameterivEXTAvailable;
    bool _getTextureParameterfvAvailable;
    bool _getTextureParameterfvEXTAvailable;
    bool _getTextureParameterIivAvailable;
    bool _getTextureParameterIivEXTAvailable;
    bool _getTextureParameterIuivAvailable;
    bool _getTextureParameterIuivEXTAvailable;
    bool _getTextureParameterivAvailable;
    bool _getTextureParameterivEXTAvailable;
    bool _getTextureSamplerHandleARBAvailable;
    bool _getTextureSamplerHandleIMGAvailable;
    bool _getTextureSamplerHandleNVAvailable;
    bool _getTextureSubImageAvailable;
    bool _getTrackMatrixivNVAvailable;
    bool _getTransformFeedbacki64_vAvailable;
    bool _getTransformFeedbackivAvailable;
    bool _getTransformFeedbacki_vAvailable;
    bool _getTransformFeedbackVaryingAvailable;
    bool _getTransformFeedbackVaryingEXTAvailable;
    bool _getTransformFeedbackVaryingNVAvailable;
    bool _getTranslatedShaderSourceANGLEAvailable;
    bool _getUniformBlockIndexAvailable;
    bool _getUniformBufferSizeEXTAvailable;
    bool _getUniformdvAvailable;
    bool _getUniformfvAvailable;
    bool _getUniformfvARBAvailable;
    bool _getUniformi64vARBAvailable;
    bool _getUniformi64vNVAvailable;
    bool _getUniformIndicesAvailable;
    bool _getUniformivAvailable;
    bool _getUniformivARBAvailable;
    bool _getUniformLocationAvailable;
    bool _getUniformLocationARBAvailable;
    bool _getUniformOffsetEXTAvailable;
    bool _getUniformSubroutineuivAvailable;
    bool _getUniformui64vARBAvailable;
    bool _getUniformui64vNVAvailable;
    bool _getUniformuivAvailable;
    bool _getUniformuivEXTAvailable;
    bool _getUnsignedBytei_vEXTAvailable;
    bool _getUnsignedBytevEXTAvailable;
    bool _getVariantArrayObjectfvATIAvailable;
    bool _getVariantArrayObjectivATIAvailable;
    bool _getVariantBooleanvEXTAvailable;
    bool _getVariantFloatvEXTAvailable;
    bool _getVariantIntegervEXTAvailable;
    bool _getVariantPointervEXTAvailable;
    bool _getVaryingLocationNVAvailable;
    bool _getVertexArrayIndexed64ivAvailable;
    bool _getVertexArrayIndexedivAvailable;
    bool _getVertexArrayIntegeri_vEXTAvailable;
    bool _getVertexArrayIntegervEXTAvailable;
    bool _getVertexArrayivAvailable;
    bool _getVertexArrayPointeri_vEXTAvailable;
    bool _getVertexArrayPointervEXTAvailable;
    bool _getVertexAttribArrayObjectfvATIAvailable;
    bool _getVertexAttribArrayObjectivATIAvailable;
    bool _getVertexAttribdvAvailable;
    bool _getVertexAttribdvARBAvailable;
    bool _getVertexAttribdvNVAvailable;
    bool _getVertexAttribfvAvailable;
    bool _getVertexAttribfvARBAvailable;
    bool _getVertexAttribfvNVAvailable;
    bool _getVertexAttribIivAvailable;
    bool _getVertexAttribIivEXTAvailable;
    bool _getVertexAttribIuivAvailable;
    bool _getVertexAttribIuivEXTAvailable;
    bool _getVertexAttribivAvailable;
    bool _getVertexAttribivARBAvailable;
    bool _getVertexAttribivNVAvailable;
    bool _getVertexAttribLdvAvailable;
    bool _getVertexAttribLdvEXTAvailable;
    bool _getVertexAttribLi64vNVAvailable;
    bool _getVertexAttribLui64vARBAvailable;
    bool _getVertexAttribLui64vNVAvailable;
    bool _getVertexAttribPointervAvailable;
    bool _getVertexAttribPointervARBAvailable;
    bool _getVertexAttribPointervNVAvailable;
    bool _getVideoCaptureivNVAvailable;
    bool _getVideoCaptureStreamdvNVAvailable;
    bool _getVideoCaptureStreamfvNVAvailable;
    bool _getVideoCaptureStreamivNVAvailable;
    bool _getVideoi64vNVAvailable;
    bool _getVideoivNVAvailable;
    bool _getVideoui64vNVAvailable;
    bool _getVideouivNVAvailable;
    bool _getVkProcAddrNVAvailable;
    bool _globalAlphaFactorbSUNAvailable;
    bool _globalAlphaFactordSUNAvailable;
    bool _globalAlphaFactorfSUNAvailable;
    bool _globalAlphaFactoriSUNAvailable;
    bool _globalAlphaFactorsSUNAvailable;
    bool _globalAlphaFactorubSUNAvailable;
    bool _globalAlphaFactoruiSUNAvailable;
    bool _globalAlphaFactorusSUNAvailable;
    bool _hintAvailable;
    bool _hintPGIAvailable;
    bool _histogramAvailable;
    bool _histogramEXTAvailable;
    bool _iglooInterfaceSGIXAvailable;
    bool _imageTransformParameterfHPAvailable;
    bool _imageTransformParameterfvHPAvailable;
    bool _imageTransformParameteriHPAvailable;
    bool _imageTransformParameterivHPAvailable;
    bool _importMemoryFdEXTAvailable;
    bool _importMemoryWin32HandleEXTAvailable;
    bool _importMemoryWin32NameEXTAvailable;
    bool _importSemaphoreFdEXTAvailable;
    bool _importSemaphoreWin32HandleEXTAvailable;
    bool _importSemaphoreWin32NameEXTAvailable;
    bool _importSyncEXTAvailable;
    bool _indexdAvailable;
    bool _indexdvAvailable;
    bool _indexfAvailable;
    bool _indexFormatNVAvailable;
    bool _indexFuncEXTAvailable;
    bool _indexfvAvailable;
    bool _indexiAvailable;
    bool _indexivAvailable;
    bool _indexMaskAvailable;
    bool _indexMaterialEXTAvailable;
    bool _indexPointerAvailable;
    bool _indexPointerEXTAvailable;
    bool _indexPointerListIBMAvailable;
    bool _indexsAvailable;
    bool _indexsvAvailable;
    bool _indexubAvailable;
    bool _indexubvAvailable;
    bool _indexxOESAvailable;
    bool _indexxvOESAvailable;
    bool _initNamesAvailable;
    bool _insertComponentEXTAvailable;
    bool _insertEventMarkerEXTAvailable;
    bool _instrumentsBufferSGIXAvailable;
    bool _interleavedArraysAvailable;
    bool _interpolatePathsNVAvailable;
    bool _invalidateBufferDataAvailable;
    bool _invalidateBufferSubDataAvailable;
    bool _invalidateFramebufferAvailable;
    bool _invalidateNamedFramebufferDataAvailable;
    bool _invalidateNamedFramebufferSubDataAvailable;
    bool _invalidateSubFramebufferAvailable;
    bool _invalidateTexImageAvailable;
    bool _invalidateTexSubImageAvailable;
    bool _isAsyncMarkerSGIXAvailable;
    bool _isBufferAvailable;
    bool _isBufferARBAvailable;
    bool _isBufferResidentNVAvailable;
    bool _isCommandListNVAvailable;
    bool _isEnabledAvailable;
    bool _isEnablediAvailable;
    bool _isEnablediEXTAvailable;
    bool _isEnabledIndexedEXTAvailable;
    bool _isEnablediNVAvailable;
    bool _isEnablediOESAvailable;
    bool _isFenceAPPLEAvailable;
    bool _isFenceNVAvailable;
    bool _isFramebufferAvailable;
    bool _isFramebufferEXTAvailable;
    bool _isFramebufferOESAvailable;
    bool _isImageHandleResidentARBAvailable;
    bool _isImageHandleResidentNVAvailable;
    bool _isListAvailable;
    bool _isMemoryObjectEXTAvailable;
    bool _isNameAMDAvailable;
    bool _isNamedBufferResidentNVAvailable;
    bool _isNamedStringARBAvailable;
    bool _isObjectBufferATIAvailable;
    bool _isOcclusionQueryNVAvailable;
    bool _isPathNVAvailable;
    bool _isPointInFillPathNVAvailable;
    bool _isPointInStrokePathNVAvailable;
    bool _isProgramAvailable;
    bool _isProgramARBAvailable;
    bool _isProgramNVAvailable;
    bool _isProgramPipelineAvailable;
    bool _isProgramPipelineEXTAvailable;
    bool _isQueryAvailable;
    bool _isQueryARBAvailable;
    bool _isQueryEXTAvailable;
    bool _isRenderbufferAvailable;
    bool _isRenderbufferEXTAvailable;
    bool _isRenderbufferOESAvailable;
    bool _isSamplerAvailable;
    bool _isSemaphoreEXTAvailable;
    bool _isShaderAvailable;
    bool _isStateNVAvailable;
    bool _isSyncAvailable;
    bool _isSyncAPPLEAvailable;
    bool _isTextureAvailable;
    bool _isTextureEXTAvailable;
    bool _isTextureHandleResidentARBAvailable;
    bool _isTextureHandleResidentNVAvailable;
    bool _isTransformFeedbackAvailable;
    bool _isTransformFeedbackNVAvailable;
    bool _isVariantEnabledEXTAvailable;
    bool _isVertexArrayAvailable;
    bool _isVertexArrayAPPLEAvailable;
    bool _isVertexArrayOESAvailable;
    bool _isVertexAttribEnabledAPPLEAvailable;
    bool _labelObjectEXTAvailable;
    bool _lGPUCopyImageSubDataNVXAvailable;
    bool _lGPUInterlockNVXAvailable;
    bool _lGPUNamedBufferSubDataNVXAvailable;
    bool _lightEnviSGIXAvailable;
    bool _lightfAvailable;
    bool _lightfvAvailable;
    bool _lightiAvailable;
    bool _lightivAvailable;
    bool _lightModelfAvailable;
    bool _lightModelfvAvailable;
    bool _lightModeliAvailable;
    bool _lightModelivAvailable;
    bool _lightModelxAvailable;
    bool _lightModelxOESAvailable;
    bool _lightModelxvAvailable;
    bool _lightModelxvOESAvailable;
    bool _lightxAvailable;
    bool _lightxOESAvailable;
    bool _lightxvAvailable;
    bool _lightxvOESAvailable;
    bool _lineStippleAvailable;
    bool _lineWidthAvailable;
    bool _lineWidthxAvailable;
    bool _lineWidthxOESAvailable;
    bool _linkProgramAvailable;
    bool _linkProgramARBAvailable;
    bool _listBaseAvailable;
    bool _listDrawCommandsStatesClientNVAvailable;
    bool _listParameterfSGIXAvailable;
    bool _listParameterfvSGIXAvailable;
    bool _listParameteriSGIXAvailable;
    bool _listParameterivSGIXAvailable;
    bool _loadIdentityAvailable;
    bool _loadIdentityDeformationMapSGIXAvailable;
    bool _loadMatrixdAvailable;
    bool _loadMatrixfAvailable;
    bool _loadMatrixxAvailable;
    bool _loadMatrixxOESAvailable;
    bool _loadNameAvailable;
    bool _loadPaletteFromModelViewMatrixOESAvailable;
    bool _loadProgramNVAvailable;
    bool _loadTransposeMatrixdAvailable;
    bool _loadTransposeMatrixdARBAvailable;
    bool _loadTransposeMatrixfAvailable;
    bool _loadTransposeMatrixfARBAvailable;
    bool _loadTransposeMatrixxOESAvailable;
    bool _lockArraysEXTAvailable;
    bool _logicOpAvailable;
    bool _makeBufferNonResidentNVAvailable;
    bool _makeBufferResidentNVAvailable;
    bool _makeImageHandleNonResidentARBAvailable;
    bool _makeImageHandleNonResidentNVAvailable;
    bool _makeImageHandleResidentARBAvailable;
    bool _makeImageHandleResidentNVAvailable;
    bool _makeNamedBufferNonResidentNVAvailable;
    bool _makeNamedBufferResidentNVAvailable;
    bool _makeTextureHandleNonResidentARBAvailable;
    bool _makeTextureHandleNonResidentNVAvailable;
    bool _makeTextureHandleResidentARBAvailable;
    bool _makeTextureHandleResidentNVAvailable;
    bool _map1dAvailable;
    bool _map1fAvailable;
    bool _map1xOESAvailable;
    bool _map2dAvailable;
    bool _map2fAvailable;
    bool _map2xOESAvailable;
    bool _mapBufferAvailable;
    bool _mapBufferARBAvailable;
    bool _mapBufferOESAvailable;
    bool _mapBufferRangeAvailable;
    bool _mapBufferRangeEXTAvailable;
    bool _mapControlPointsNVAvailable;
    bool _mapGrid1dAvailable;
    bool _mapGrid1fAvailable;
    bool _mapGrid1xOESAvailable;
    bool _mapGrid2dAvailable;
    bool _mapGrid2fAvailable;
    bool _mapGrid2xOESAvailable;
    bool _mapNamedBufferAvailable;
    bool _mapNamedBufferEXTAvailable;
    bool _mapNamedBufferRangeAvailable;
    bool _mapNamedBufferRangeEXTAvailable;
    bool _mapObjectBufferATIAvailable;
    bool _mapParameterfvNVAvailable;
    bool _mapParameterivNVAvailable;
    bool _mapTexture2DINTELAvailable;
    bool _mapVertexAttrib1dAPPLEAvailable;
    bool _mapVertexAttrib1fAPPLEAvailable;
    bool _mapVertexAttrib2dAPPLEAvailable;
    bool _mapVertexAttrib2fAPPLEAvailable;
    bool _materialfAvailable;
    bool _materialfvAvailable;
    bool _materialiAvailable;
    bool _materialivAvailable;
    bool _materialxAvailable;
    bool _materialxOESAvailable;
    bool _materialxvAvailable;
    bool _materialxvOESAvailable;
    bool _matrixFrustumEXTAvailable;
    bool _matrixIndexPointerARBAvailable;
    bool _matrixIndexPointerOESAvailable;
    bool _matrixIndexubvARBAvailable;
    bool _matrixIndexuivARBAvailable;
    bool _matrixIndexusvARBAvailable;
    bool _matrixLoad3x2fNVAvailable;
    bool _matrixLoad3x3fNVAvailable;
    bool _matrixLoaddEXTAvailable;
    bool _matrixLoadfEXTAvailable;
    bool _matrixLoadIdentityEXTAvailable;
    bool _matrixLoadTranspose3x3fNVAvailable;
    bool _matrixLoadTransposedEXTAvailable;
    bool _matrixLoadTransposefEXTAvailable;
    bool _matrixModeAvailable;
    bool _matrixMult3x2fNVAvailable;
    bool _matrixMult3x3fNVAvailable;
    bool _matrixMultdEXTAvailable;
    bool _matrixMultfEXTAvailable;
    bool _matrixMultTranspose3x3fNVAvailable;
    bool _matrixMultTransposedEXTAvailable;
    bool _matrixMultTransposefEXTAvailable;
    bool _matrixOrthoEXTAvailable;
    bool _matrixPopEXTAvailable;
    bool _matrixPushEXTAvailable;
    bool _matrixRotatedEXTAvailable;
    bool _matrixRotatefEXTAvailable;
    bool _matrixScaledEXTAvailable;
    bool _matrixScalefEXTAvailable;
    bool _matrixTranslatedEXTAvailable;
    bool _matrixTranslatefEXTAvailable;
    bool _maxShaderCompilerThreadsARBAvailable;
    bool _maxShaderCompilerThreadsKHRAvailable;
    bool _memoryBarrierAvailable;
    bool _memoryBarrierByRegionAvailable;
    bool _memoryBarrierEXTAvailable;
    bool _memoryObjectParameterivEXTAvailable;
    bool _minmaxAvailable;
    bool _minmaxEXTAvailable;
    bool _minSampleShadingAvailable;
    bool _minSampleShadingARBAvailable;
    bool _minSampleShadingOESAvailable;
    bool _multicastBarrierNVAvailable;
    bool _multicastBlitFramebufferNVAvailable;
    bool _multicastBufferSubDataNVAvailable;
    bool _multicastCopyBufferSubDataNVAvailable;
    bool _multicastCopyImageSubDataNVAvailable;
    bool _multicastFramebufferSampleLocationsfvNVAvailable;
    bool _multicastGetQueryObjecti64vNVAvailable;
    bool _multicastGetQueryObjectivNVAvailable;
    bool _multicastGetQueryObjectui64vNVAvailable;
    bool _multicastGetQueryObjectuivNVAvailable;
    bool _multicastScissorArrayvNVXAvailable;
    bool _multicastViewportArrayvNVXAvailable;
    bool _multicastViewportPositionWScaleNVXAvailable;
    bool _multicastWaitSyncNVAvailable;
    bool _multiDrawArraysAvailable;
    bool _multiDrawArraysEXTAvailable;
    bool _multiDrawArraysIndirectAvailable;
    bool _multiDrawArraysIndirectAMDAvailable;
    bool _multiDrawArraysIndirectBindlessCountNVAvailable;
    bool _multiDrawArraysIndirectBindlessNVAvailable;
    bool _multiDrawArraysIndirectCountAvailable;
    bool _multiDrawArraysIndirectCountARBAvailable;
    bool _multiDrawArraysIndirectEXTAvailable;
    bool _multiDrawElementArrayAPPLEAvailable;
    bool _multiDrawElementsAvailable;
    bool _multiDrawElementsBaseVertexAvailable;
    bool _multiDrawElementsBaseVertexEXTAvailable;
    bool _multiDrawElementsEXTAvailable;
    bool _multiDrawElementsIndirectAvailable;
    bool _multiDrawElementsIndirectAMDAvailable;
    bool _multiDrawElementsIndirectBindlessCountNVAvailable;
    bool _multiDrawElementsIndirectBindlessNVAvailable;
    bool _multiDrawElementsIndirectCountAvailable;
    bool _multiDrawElementsIndirectCountARBAvailable;
    bool _multiDrawElementsIndirectEXTAvailable;
    bool _multiDrawMeshTasksIndirectCountNVAvailable;
    bool _multiDrawMeshTasksIndirectNVAvailable;
    bool _multiDrawRangeElementArrayAPPLEAvailable;
    bool _multiModeDrawArraysIBMAvailable;
    bool _multiModeDrawElementsIBMAvailable;
    bool _multiTexBufferEXTAvailable;
    bool _multiTexCoord1bOESAvailable;
    bool _multiTexCoord1bvOESAvailable;
    bool _multiTexCoord1dAvailable;
    bool _multiTexCoord1dARBAvailable;
    bool _multiTexCoord1dvAvailable;
    bool _multiTexCoord1dvARBAvailable;
    bool _multiTexCoord1fAvailable;
    bool _multiTexCoord1fARBAvailable;
    bool _multiTexCoord1fvAvailable;
    bool _multiTexCoord1fvARBAvailable;
    bool _multiTexCoord1hNVAvailable;
    bool _multiTexCoord1hvNVAvailable;
    bool _multiTexCoord1iAvailable;
    bool _multiTexCoord1iARBAvailable;
    bool _multiTexCoord1ivAvailable;
    bool _multiTexCoord1ivARBAvailable;
    bool _multiTexCoord1sAvailable;
    bool _multiTexCoord1sARBAvailable;
    bool _multiTexCoord1svAvailable;
    bool _multiTexCoord1svARBAvailable;
    bool _multiTexCoord1xOESAvailable;
    bool _multiTexCoord1xvOESAvailable;
    bool _multiTexCoord2bOESAvailable;
    bool _multiTexCoord2bvOESAvailable;
    bool _multiTexCoord2dAvailable;
    bool _multiTexCoord2dARBAvailable;
    bool _multiTexCoord2dvAvailable;
    bool _multiTexCoord2dvARBAvailable;
    bool _multiTexCoord2fAvailable;
    bool _multiTexCoord2fARBAvailable;
    bool _multiTexCoord2fvAvailable;
    bool _multiTexCoord2fvARBAvailable;
    bool _multiTexCoord2hNVAvailable;
    bool _multiTexCoord2hvNVAvailable;
    bool _multiTexCoord2iAvailable;
    bool _multiTexCoord2iARBAvailable;
    bool _multiTexCoord2ivAvailable;
    bool _multiTexCoord2ivARBAvailable;
    bool _multiTexCoord2sAvailable;
    bool _multiTexCoord2sARBAvailable;
    bool _multiTexCoord2svAvailable;
    bool _multiTexCoord2svARBAvailable;
    bool _multiTexCoord2xOESAvailable;
    bool _multiTexCoord2xvOESAvailable;
    bool _multiTexCoord3bOESAvailable;
    bool _multiTexCoord3bvOESAvailable;
    bool _multiTexCoord3dAvailable;
    bool _multiTexCoord3dARBAvailable;
    bool _multiTexCoord3dvAvailable;
    bool _multiTexCoord3dvARBAvailable;
    bool _multiTexCoord3fAvailable;
    bool _multiTexCoord3fARBAvailable;
    bool _multiTexCoord3fvAvailable;
    bool _multiTexCoord3fvARBAvailable;
    bool _multiTexCoord3hNVAvailable;
    bool _multiTexCoord3hvNVAvailable;
    bool _multiTexCoord3iAvailable;
    bool _multiTexCoord3iARBAvailable;
    bool _multiTexCoord3ivAvailable;
    bool _multiTexCoord3ivARBAvailable;
    bool _multiTexCoord3sAvailable;
    bool _multiTexCoord3sARBAvailable;
    bool _multiTexCoord3svAvailable;
    bool _multiTexCoord3svARBAvailable;
    bool _multiTexCoord3xOESAvailable;
    bool _multiTexCoord3xvOESAvailable;
    bool _multiTexCoord4bOESAvailable;
    bool _multiTexCoord4bvOESAvailable;
    bool _multiTexCoord4dAvailable;
    bool _multiTexCoord4dARBAvailable;
    bool _multiTexCoord4dvAvailable;
    bool _multiTexCoord4dvARBAvailable;
    bool _multiTexCoord4fAvailable;
    bool _multiTexCoord4fARBAvailable;
    bool _multiTexCoord4fvAvailable;
    bool _multiTexCoord4fvARBAvailable;
    bool _multiTexCoord4hNVAvailable;
    bool _multiTexCoord4hvNVAvailable;
    bool _multiTexCoord4iAvailable;
    bool _multiTexCoord4iARBAvailable;
    bool _multiTexCoord4ivAvailable;
    bool _multiTexCoord4ivARBAvailable;
    bool _multiTexCoord4sAvailable;
    bool _multiTexCoord4sARBAvailable;
    bool _multiTexCoord4svAvailable;
    bool _multiTexCoord4svARBAvailable;
    bool _multiTexCoord4xAvailable;
    bool _multiTexCoord4xOESAvailable;
    bool _multiTexCoord4xvOESAvailable;
    bool _multiTexCoordP1uiAvailable;
    bool _multiTexCoordP1uivAvailable;
    bool _multiTexCoordP2uiAvailable;
    bool _multiTexCoordP2uivAvailable;
    bool _multiTexCoordP3uiAvailable;
    bool _multiTexCoordP3uivAvailable;
    bool _multiTexCoordP4uiAvailable;
    bool _multiTexCoordP4uivAvailable;
    bool _multiTexCoordPointerEXTAvailable;
    bool _multiTexEnvfEXTAvailable;
    bool _multiTexEnvfvEXTAvailable;
    bool _multiTexEnviEXTAvailable;
    bool _multiTexEnvivEXTAvailable;
    bool _multiTexGendEXTAvailable;
    bool _multiTexGendvEXTAvailable;
    bool _multiTexGenfEXTAvailable;
    bool _multiTexGenfvEXTAvailable;
    bool _multiTexGeniEXTAvailable;
    bool _multiTexGenivEXTAvailable;
    bool _multiTexImage1DEXTAvailable;
    bool _multiTexImage2DEXTAvailable;
    bool _multiTexImage3DEXTAvailable;
    bool _multiTexParameterfEXTAvailable;
    bool _multiTexParameterfvEXTAvailable;
    bool _multiTexParameteriEXTAvailable;
    bool _multiTexParameterIivEXTAvailable;
    bool _multiTexParameterIuivEXTAvailable;
    bool _multiTexParameterivEXTAvailable;
    bool _multiTexRenderbufferEXTAvailable;
    bool _multiTexSubImage1DEXTAvailable;
    bool _multiTexSubImage2DEXTAvailable;
    bool _multiTexSubImage3DEXTAvailable;
    bool _multMatrixdAvailable;
    bool _multMatrixfAvailable;
    bool _multMatrixxAvailable;
    bool _multMatrixxOESAvailable;
    bool _multTransposeMatrixdAvailable;
    bool _multTransposeMatrixdARBAvailable;
    bool _multTransposeMatrixfAvailable;
    bool _multTransposeMatrixfARBAvailable;
    bool _multTransposeMatrixxOESAvailable;
    bool _namedBufferAttachMemoryNVAvailable;
    bool _namedBufferDataAvailable;
    bool _namedBufferDataEXTAvailable;
    bool _namedBufferPageCommitmentARBAvailable;
    bool _namedBufferPageCommitmentEXTAvailable;
    bool _namedBufferPageCommitmentMemNVAvailable;
    bool _namedBufferStorageAvailable;
    bool _namedBufferStorageEXTAvailable;
    bool _namedBufferStorageExternalEXTAvailable;
    bool _namedBufferStorageMemEXTAvailable;
    bool _namedBufferSubDataAvailable;
    bool _namedBufferSubDataEXTAvailable;
    bool _namedCopyBufferSubDataEXTAvailable;
    bool _namedFramebufferDrawBufferAvailable;
    bool _namedFramebufferDrawBuffersAvailable;
    bool _namedFramebufferParameteriAvailable;
    bool _namedFramebufferParameteriEXTAvailable;
    bool _namedFramebufferReadBufferAvailable;
    bool _namedFramebufferRenderbufferAvailable;
    bool _namedFramebufferRenderbufferEXTAvailable;
    bool _namedFramebufferSampleLocationsfvARBAvailable;
    bool _namedFramebufferSampleLocationsfvNVAvailable;
    bool _namedFramebufferSamplePositionsfvAMDAvailable;
    bool _namedFramebufferTextureAvailable;
    bool _namedFramebufferTexture1DEXTAvailable;
    bool _namedFramebufferTexture2DEXTAvailable;
    bool _namedFramebufferTexture3DEXTAvailable;
    bool _namedFramebufferTextureEXTAvailable;
    bool _namedFramebufferTextureFaceEXTAvailable;
    bool _namedFramebufferTextureLayerAvailable;
    bool _namedFramebufferTextureLayerEXTAvailable;
    bool _namedProgramLocalParameter4dEXTAvailable;
    bool _namedProgramLocalParameter4dvEXTAvailable;
    bool _namedProgramLocalParameter4fEXTAvailable;
    bool _namedProgramLocalParameter4fvEXTAvailable;
    bool _namedProgramLocalParameterI4iEXTAvailable;
    bool _namedProgramLocalParameterI4ivEXTAvailable;
    bool _namedProgramLocalParameterI4uiEXTAvailable;
    bool _namedProgramLocalParameterI4uivEXTAvailable;
    bool _namedProgramLocalParameters4fvEXTAvailable;
    bool _namedProgramLocalParametersI4ivEXTAvailable;
    bool _namedProgramLocalParametersI4uivEXTAvailable;
    bool _namedProgramStringEXTAvailable;
    bool _namedRenderbufferStorageAvailable;
    bool _namedRenderbufferStorageEXTAvailable;
    bool _namedRenderbufferStorageMultisampleAvailable;
    bool _namedRenderbufferStorageMultisampleAdvancedAMDAvailable;
    bool _namedRenderbufferStorageMultisampleCoverageEXTAvailable;
    bool _namedRenderbufferStorageMultisampleEXTAvailable;
    bool _namedStringARBAvailable;
    bool _newListAvailable;
    bool _newObjectBufferATIAvailable;
    bool _normal3bAvailable;
    bool _normal3bvAvailable;
    bool _normal3dAvailable;
    bool _normal3dvAvailable;
    bool _normal3fAvailable;
    bool _normal3fvAvailable;
    bool _normal3fVertex3fSUNAvailable;
    bool _normal3fVertex3fvSUNAvailable;
    bool _normal3hNVAvailable;
    bool _normal3hvNVAvailable;
    bool _normal3iAvailable;
    bool _normal3ivAvailable;
    bool _normal3sAvailable;
    bool _normal3svAvailable;
    bool _normal3xAvailable;
    bool _normal3xOESAvailable;
    bool _normal3xvOESAvailable;
    bool _normalFormatNVAvailable;
    bool _normalP3uiAvailable;
    bool _normalP3uivAvailable;
    bool _normalPointerAvailable;
    bool _normalPointerEXTAvailable;
    bool _normalPointerListIBMAvailable;
    bool _normalPointervINTELAvailable;
    bool _normalStream3bATIAvailable;
    bool _normalStream3bvATIAvailable;
    bool _normalStream3dATIAvailable;
    bool _normalStream3dvATIAvailable;
    bool _normalStream3fATIAvailable;
    bool _normalStream3fvATIAvailable;
    bool _normalStream3iATIAvailable;
    bool _normalStream3ivATIAvailable;
    bool _normalStream3sATIAvailable;
    bool _normalStream3svATIAvailable;
    bool _objectLabelAvailable;
    bool _objectLabelKHRAvailable;
    bool _objectPtrLabelAvailable;
    bool _objectPtrLabelKHRAvailable;
    bool _objectPurgeableAPPLEAvailable;
    bool _objectUnpurgeableAPPLEAvailable;
    bool _orthoAvailable;
    bool _orthofAvailable;
    bool _orthofOESAvailable;
    bool _orthoxAvailable;
    bool _orthoxOESAvailable;
    bool _passTexCoordATIAvailable;
    bool _passThroughAvailable;
    bool _passThroughxOESAvailable;
    bool _patchParameterfvAvailable;
    bool _patchParameteriAvailable;
    bool _patchParameteriEXTAvailable;
    bool _patchParameteriOESAvailable;
    bool _pathColorGenNVAvailable;
    bool _pathCommandsNVAvailable;
    bool _pathCoordsNVAvailable;
    bool _pathCoverDepthFuncNVAvailable;
    bool _pathDashArrayNVAvailable;
    bool _pathFogGenNVAvailable;
    bool _pathGlyphIndexArrayNVAvailable;
    bool _pathGlyphIndexRangeNVAvailable;
    bool _pathGlyphRangeNVAvailable;
    bool _pathGlyphsNVAvailable;
    bool _pathMemoryGlyphIndexArrayNVAvailable;
    bool _pathParameterfNVAvailable;
    bool _pathParameterfvNVAvailable;
    bool _pathParameteriNVAvailable;
    bool _pathParameterivNVAvailable;
    bool _pathStencilDepthOffsetNVAvailable;
    bool _pathStencilFuncNVAvailable;
    bool _pathStringNVAvailable;
    bool _pathSubCommandsNVAvailable;
    bool _pathSubCoordsNVAvailable;
    bool _pathTexGenNVAvailable;
    bool _pauseTransformFeedbackAvailable;
    bool _pauseTransformFeedbackNVAvailable;
    bool _pixelDataRangeNVAvailable;
    bool _pixelMapfvAvailable;
    bool _pixelMapuivAvailable;
    bool _pixelMapusvAvailable;
    bool _pixelMapxAvailable;
    bool _pixelStorefAvailable;
    bool _pixelStoreiAvailable;
    bool _pixelStorexAvailable;
    bool _pixelTexGenParameterfSGISAvailable;
    bool _pixelTexGenParameterfvSGISAvailable;
    bool _pixelTexGenParameteriSGISAvailable;
    bool _pixelTexGenParameterivSGISAvailable;
    bool _pixelTexGenSGIXAvailable;
    bool _pixelTransferfAvailable;
    bool _pixelTransferiAvailable;
    bool _pixelTransferxOESAvailable;
    bool _pixelTransformParameterfEXTAvailable;
    bool _pixelTransformParameterfvEXTAvailable;
    bool _pixelTransformParameteriEXTAvailable;
    bool _pixelTransformParameterivEXTAvailable;
    bool _pixelZoomAvailable;
    bool _pixelZoomxOESAvailable;
    bool _pNTrianglesfATIAvailable;
    bool _pNTrianglesiATIAvailable;
    bool _pointAlongPathNVAvailable;
    bool _pointParameterfAvailable;
    bool _pointParameterfARBAvailable;
    bool _pointParameterfEXTAvailable;
    bool _pointParameterfSGISAvailable;
    bool _pointParameterfvAvailable;
    bool _pointParameterfvARBAvailable;
    bool _pointParameterfvEXTAvailable;
    bool _pointParameterfvSGISAvailable;
    bool _pointParameteriAvailable;
    bool _pointParameteriNVAvailable;
    bool _pointParameterivAvailable;
    bool _pointParameterivNVAvailable;
    bool _pointParameterxAvailable;
    bool _pointParameterxOESAvailable;
    bool _pointParameterxvAvailable;
    bool _pointParameterxvOESAvailable;
    bool _pointSizeAvailable;
    bool _pointSizePointerOESAvailable;
    bool _pointSizexAvailable;
    bool _pointSizexOESAvailable;
    bool _pollAsyncSGIXAvailable;
    bool _pollInstrumentsSGIXAvailable;
    bool _polygonModeAvailable;
    bool _polygonModeNVAvailable;
    bool _polygonOffsetAvailable;
    bool _polygonOffsetClampAvailable;
    bool _polygonOffsetClampEXTAvailable;
    bool _polygonOffsetEXTAvailable;
    bool _polygonOffsetxAvailable;
    bool _polygonOffsetxOESAvailable;
    bool _polygonStippleAvailable;
    bool _popAttribAvailable;
    bool _popClientAttribAvailable;
    bool _popDebugGroupAvailable;
    bool _popDebugGroupKHRAvailable;
    bool _popGroupMarkerEXTAvailable;
    bool _popMatrixAvailable;
    bool _popNameAvailable;
    bool _presentFrameDualFillNVAvailable;
    bool _presentFrameKeyedNVAvailable;
    bool _primitiveBoundingBoxAvailable;
    bool _primitiveBoundingBoxARBAvailable;
    bool _primitiveBoundingBoxEXTAvailable;
    bool _primitiveBoundingBoxOESAvailable;
    bool _primitiveRestartIndexAvailable;
    bool _primitiveRestartIndexNVAvailable;
    bool _primitiveRestartNVAvailable;
    bool _prioritizeTexturesAvailable;
    bool _prioritizeTexturesEXTAvailable;
    bool _prioritizeTexturesxOESAvailable;
    bool _programBinaryAvailable;
    bool _programBinaryOESAvailable;
    bool _programBufferParametersfvNVAvailable;
    bool _programBufferParametersIivNVAvailable;
    bool _programBufferParametersIuivNVAvailable;
    bool _programEnvParameter4dARBAvailable;
    bool _programEnvParameter4dvARBAvailable;
    bool _programEnvParameter4fARBAvailable;
    bool _programEnvParameter4fvARBAvailable;
    bool _programEnvParameterI4iNVAvailable;
    bool _programEnvParameterI4ivNVAvailable;
    bool _programEnvParameterI4uiNVAvailable;
    bool _programEnvParameterI4uivNVAvailable;
    bool _programEnvParameters4fvEXTAvailable;
    bool _programEnvParametersI4ivNVAvailable;
    bool _programEnvParametersI4uivNVAvailable;
    bool _programLocalParameter4dARBAvailable;
    bool _programLocalParameter4dvARBAvailable;
    bool _programLocalParameter4fARBAvailable;
    bool _programLocalParameter4fvARBAvailable;
    bool _programLocalParameterI4iNVAvailable;
    bool _programLocalParameterI4ivNVAvailable;
    bool _programLocalParameterI4uiNVAvailable;
    bool _programLocalParameterI4uivNVAvailable;
    bool _programLocalParameters4fvEXTAvailable;
    bool _programLocalParametersI4ivNVAvailable;
    bool _programLocalParametersI4uivNVAvailable;
    bool _programNamedParameter4dNVAvailable;
    bool _programNamedParameter4dvNVAvailable;
    bool _programNamedParameter4fNVAvailable;
    bool _programNamedParameter4fvNVAvailable;
    bool _programParameter4dNVAvailable;
    bool _programParameter4dvNVAvailable;
    bool _programParameter4fNVAvailable;
    bool _programParameter4fvNVAvailable;
    bool _programParameteriAvailable;
    bool _programParameteriARBAvailable;
    bool _programParameteriEXTAvailable;
    bool _programParameters4dvNVAvailable;
    bool _programParameters4fvNVAvailable;
    bool _programPathFragmentInputGenNVAvailable;
    bool _programStringARBAvailable;
    bool _programSubroutineParametersuivNVAvailable;
    bool _programUniform1dAvailable;
    bool _programUniform1dEXTAvailable;
    bool _programUniform1dvAvailable;
    bool _programUniform1dvEXTAvailable;
    bool _programUniform1fAvailable;
    bool _programUniform1fEXTAvailable;
    bool _programUniform1fvAvailable;
    bool _programUniform1fvEXTAvailable;
    bool _programUniform1iAvailable;
    bool _programUniform1i64ARBAvailable;
    bool _programUniform1i64NVAvailable;
    bool _programUniform1i64vARBAvailable;
    bool _programUniform1i64vNVAvailable;
    bool _programUniform1iEXTAvailable;
    bool _programUniform1ivAvailable;
    bool _programUniform1ivEXTAvailable;
    bool _programUniform1uiAvailable;
    bool _programUniform1ui64ARBAvailable;
    bool _programUniform1ui64NVAvailable;
    bool _programUniform1ui64vARBAvailable;
    bool _programUniform1ui64vNVAvailable;
    bool _programUniform1uiEXTAvailable;
    bool _programUniform1uivAvailable;
    bool _programUniform1uivEXTAvailable;
    bool _programUniform2dAvailable;
    bool _programUniform2dEXTAvailable;
    bool _programUniform2dvAvailable;
    bool _programUniform2dvEXTAvailable;
    bool _programUniform2fAvailable;
    bool _programUniform2fEXTAvailable;
    bool _programUniform2fvAvailable;
    bool _programUniform2fvEXTAvailable;
    bool _programUniform2iAvailable;
    bool _programUniform2i64ARBAvailable;
    bool _programUniform2i64NVAvailable;
    bool _programUniform2i64vARBAvailable;
    bool _programUniform2i64vNVAvailable;
    bool _programUniform2iEXTAvailable;
    bool _programUniform2ivAvailable;
    bool _programUniform2ivEXTAvailable;
    bool _programUniform2uiAvailable;
    bool _programUniform2ui64ARBAvailable;
    bool _programUniform2ui64NVAvailable;
    bool _programUniform2ui64vARBAvailable;
    bool _programUniform2ui64vNVAvailable;
    bool _programUniform2uiEXTAvailable;
    bool _programUniform2uivAvailable;
    bool _programUniform2uivEXTAvailable;
    bool _programUniform3dAvailable;
    bool _programUniform3dEXTAvailable;
    bool _programUniform3dvAvailable;
    bool _programUniform3dvEXTAvailable;
    bool _programUniform3fAvailable;
    bool _programUniform3fEXTAvailable;
    bool _programUniform3fvAvailable;
    bool _programUniform3fvEXTAvailable;
    bool _programUniform3iAvailable;
    bool _programUniform3i64ARBAvailable;
    bool _programUniform3i64NVAvailable;
    bool _programUniform3i64vARBAvailable;
    bool _programUniform3i64vNVAvailable;
    bool _programUniform3iEXTAvailable;
    bool _programUniform3ivAvailable;
    bool _programUniform3ivEXTAvailable;
    bool _programUniform3uiAvailable;
    bool _programUniform3ui64ARBAvailable;
    bool _programUniform3ui64NVAvailable;
    bool _programUniform3ui64vARBAvailable;
    bool _programUniform3ui64vNVAvailable;
    bool _programUniform3uiEXTAvailable;
    bool _programUniform3uivAvailable;
    bool _programUniform3uivEXTAvailable;
    bool _programUniform4dAvailable;
    bool _programUniform4dEXTAvailable;
    bool _programUniform4dvAvailable;
    bool _programUniform4dvEXTAvailable;
    bool _programUniform4fAvailable;
    bool _programUniform4fEXTAvailable;
    bool _programUniform4fvAvailable;
    bool _programUniform4fvEXTAvailable;
    bool _programUniform4iAvailable;
    bool _programUniform4i64ARBAvailable;
    bool _programUniform4i64NVAvailable;
    bool _programUniform4i64vARBAvailable;
    bool _programUniform4i64vNVAvailable;
    bool _programUniform4iEXTAvailable;
    bool _programUniform4ivAvailable;
    bool _programUniform4ivEXTAvailable;
    bool _programUniform4uiAvailable;
    bool _programUniform4ui64ARBAvailable;
    bool _programUniform4ui64NVAvailable;
    bool _programUniform4ui64vARBAvailable;
    bool _programUniform4ui64vNVAvailable;
    bool _programUniform4uiEXTAvailable;
    bool _programUniform4uivAvailable;
    bool _programUniform4uivEXTAvailable;
    bool _programUniformHandleui64ARBAvailable;
    bool _programUniformHandleui64IMGAvailable;
    bool _programUniformHandleui64NVAvailable;
    bool _programUniformHandleui64vARBAvailable;
    bool _programUniformHandleui64vIMGAvailable;
    bool _programUniformHandleui64vNVAvailable;
    bool _programUniformMatrix2dvAvailable;
    bool _programUniformMatrix2dvEXTAvailable;
    bool _programUniformMatrix2fvAvailable;
    bool _programUniformMatrix2fvEXTAvailable;
    bool _programUniformMatrix2x3dvAvailable;
    bool _programUniformMatrix2x3dvEXTAvailable;
    bool _programUniformMatrix2x3fvAvailable;
    bool _programUniformMatrix2x3fvEXTAvailable;
    bool _programUniformMatrix2x4dvAvailable;
    bool _programUniformMatrix2x4dvEXTAvailable;
    bool _programUniformMatrix2x4fvAvailable;
    bool _programUniformMatrix2x4fvEXTAvailable;
    bool _programUniformMatrix3dvAvailable;
    bool _programUniformMatrix3dvEXTAvailable;
    bool _programUniformMatrix3fvAvailable;
    bool _programUniformMatrix3fvEXTAvailable;
    bool _programUniformMatrix3x2dvAvailable;
    bool _programUniformMatrix3x2dvEXTAvailable;
    bool _programUniformMatrix3x2fvAvailable;
    bool _programUniformMatrix3x2fvEXTAvailable;
    bool _programUniformMatrix3x4dvAvailable;
    bool _programUniformMatrix3x4dvEXTAvailable;
    bool _programUniformMatrix3x4fvAvailable;
    bool _programUniformMatrix3x4fvEXTAvailable;
    bool _programUniformMatrix4dvAvailable;
    bool _programUniformMatrix4dvEXTAvailable;
    bool _programUniformMatrix4fvAvailable;
    bool _programUniformMatrix4fvEXTAvailable;
    bool _programUniformMatrix4x2dvAvailable;
    bool _programUniformMatrix4x2dvEXTAvailable;
    bool _programUniformMatrix4x2fvAvailable;
    bool _programUniformMatrix4x2fvEXTAvailable;
    bool _programUniformMatrix4x3dvAvailable;
    bool _programUniformMatrix4x3dvEXTAvailable;
    bool _programUniformMatrix4x3fvAvailable;
    bool _programUniformMatrix4x3fvEXTAvailable;
    bool _programUniformui64NVAvailable;
    bool _programUniformui64vNVAvailable;
    bool _programVertexLimitNVAvailable;
    bool _provokingVertexAvailable;
    bool _provokingVertexEXTAvailable;
    bool _pushAttribAvailable;
    bool _pushClientAttribAvailable;
    bool _pushClientAttribDefaultEXTAvailable;
    bool _pushDebugGroupAvailable;
    bool _pushDebugGroupKHRAvailable;
    bool _pushGroupMarkerEXTAvailable;
    bool _pushMatrixAvailable;
    bool _pushNameAvailable;
    bool _queryCounterAvailable;
    bool _queryCounterEXTAvailable;
    bool _queryMatrixxOESAvailable;
    bool _queryObjectParameteruiAMDAvailable;
    bool _queryResourceNVAvailable;
    bool _queryResourceTagNVAvailable;
    bool _rasterPos2dAvailable;
    bool _rasterPos2dvAvailable;
    bool _rasterPos2fAvailable;
    bool _rasterPos2fvAvailable;
    bool _rasterPos2iAvailable;
    bool _rasterPos2ivAvailable;
    bool _rasterPos2sAvailable;
    bool _rasterPos2svAvailable;
    bool _rasterPos2xOESAvailable;
    bool _rasterPos2xvOESAvailable;
    bool _rasterPos3dAvailable;
    bool _rasterPos3dvAvailable;
    bool _rasterPos3fAvailable;
    bool _rasterPos3fvAvailable;
    bool _rasterPos3iAvailable;
    bool _rasterPos3ivAvailable;
    bool _rasterPos3sAvailable;
    bool _rasterPos3svAvailable;
    bool _rasterPos3xOESAvailable;
    bool _rasterPos3xvOESAvailable;
    bool _rasterPos4dAvailable;
    bool _rasterPos4dvAvailable;
    bool _rasterPos4fAvailable;
    bool _rasterPos4fvAvailable;
    bool _rasterPos4iAvailable;
    bool _rasterPos4ivAvailable;
    bool _rasterPos4sAvailable;
    bool _rasterPos4svAvailable;
    bool _rasterPos4xOESAvailable;
    bool _rasterPos4xvOESAvailable;
    bool _rasterSamplesEXTAvailable;
    bool _readBufferAvailable;
    bool _readBufferIndexedEXTAvailable;
    bool _readBufferNVAvailable;
    bool _readInstrumentsSGIXAvailable;
    bool _readnPixelsAvailable;
    bool _readnPixelsARBAvailable;
    bool _readnPixelsEXTAvailable;
    bool _readnPixelsKHRAvailable;
    bool _readPixelsAvailable;
    bool _rectdAvailable;
    bool _rectdvAvailable;
    bool _rectfAvailable;
    bool _rectfvAvailable;
    bool _rectiAvailable;
    bool _rectivAvailable;
    bool _rectsAvailable;
    bool _rectsvAvailable;
    bool _rectxOESAvailable;
    bool _rectxvOESAvailable;
    bool _referencePlaneSGIXAvailable;
    bool _releaseKeyedMutexWin32EXTAvailable;
    bool _releaseShaderCompilerAvailable;
    bool _renderbufferStorageAvailable;
    bool _renderbufferStorageEXTAvailable;
    bool _renderbufferStorageMultisampleAvailable;
    bool _renderbufferStorageMultisampleAdvancedAMDAvailable;
    bool _renderbufferStorageMultisampleANGLEAvailable;
    bool _renderbufferStorageMultisampleAPPLEAvailable;
    bool _renderbufferStorageMultisampleCoverageNVAvailable;
    bool _renderbufferStorageMultisampleEXTAvailable;
    bool _renderbufferStorageMultisampleIMGAvailable;
    bool _renderbufferStorageMultisampleNVAvailable;
    bool _renderbufferStorageOESAvailable;
    bool _renderGpuMaskNVAvailable;
    bool _renderModeAvailable;
    bool _replacementCodePointerSUNAvailable;
    bool _replacementCodeubSUNAvailable;
    bool _replacementCodeubvSUNAvailable;
    bool _replacementCodeuiColor3fVertex3fSUNAvailable;
    bool _replacementCodeuiColor3fVertex3fvSUNAvailable;
    bool _replacementCodeuiColor4fNormal3fVertex3fSUNAvailable;
    bool _replacementCodeuiColor4fNormal3fVertex3fvSUNAvailable;
    bool _replacementCodeuiColor4ubVertex3fSUNAvailable;
    bool _replacementCodeuiColor4ubVertex3fvSUNAvailable;
    bool _replacementCodeuiNormal3fVertex3fSUNAvailable;
    bool _replacementCodeuiNormal3fVertex3fvSUNAvailable;
    bool _replacementCodeuiSUNAvailable;
    bool _replacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUNAvailable;
    bool _replacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUNAvailable;
    bool _replacementCodeuiTexCoord2fNormal3fVertex3fSUNAvailable;
    bool _replacementCodeuiTexCoord2fNormal3fVertex3fvSUNAvailable;
    bool _replacementCodeuiTexCoord2fVertex3fSUNAvailable;
    bool _replacementCodeuiTexCoord2fVertex3fvSUNAvailable;
    bool _replacementCodeuiVertex3fSUNAvailable;
    bool _replacementCodeuiVertex3fvSUNAvailable;
    bool _replacementCodeuivSUNAvailable;
    bool _replacementCodeusSUNAvailable;
    bool _replacementCodeusvSUNAvailable;
    bool _requestResidentProgramsNVAvailable;
    bool _resetHistogramAvailable;
    bool _resetHistogramEXTAvailable;
    bool _resetMemoryObjectParameterNVAvailable;
    bool _resetMinmaxAvailable;
    bool _resetMinmaxEXTAvailable;
    bool _resizeBuffersMESAAvailable;
    bool _resolveDepthValuesNVAvailable;
    bool _resolveMultisampleFramebufferAPPLEAvailable;
    bool _resumeTransformFeedbackAvailable;
    bool _resumeTransformFeedbackNVAvailable;
    bool _rotatedAvailable;
    bool _rotatefAvailable;
    bool _rotatexAvailable;
    bool _rotatexOESAvailable;
    bool _sampleCoverageAvailable;
    bool _sampleCoverageARBAvailable;
    bool _sampleCoveragexAvailable;
    bool _sampleCoveragexOESAvailable;
    bool _sampleMapATIAvailable;
    bool _sampleMaskEXTAvailable;
    bool _sampleMaskiAvailable;
    bool _sampleMaskIndexedNVAvailable;
    bool _sampleMaskSGISAvailable;
    bool _samplePatternEXTAvailable;
    bool _samplePatternSGISAvailable;
    bool _samplerParameterfAvailable;
    bool _samplerParameterfvAvailable;
    bool _samplerParameteriAvailable;
    bool _samplerParameterIivAvailable;
    bool _samplerParameterIivEXTAvailable;
    bool _samplerParameterIivOESAvailable;
    bool _samplerParameterIuivAvailable;
    bool _samplerParameterIuivEXTAvailable;
    bool _samplerParameterIuivOESAvailable;
    bool _samplerParameterivAvailable;
    bool _scaledAvailable;
    bool _scalefAvailable;
    bool _scalexAvailable;
    bool _scalexOESAvailable;
    bool _scissorAvailable;
    bool _scissorArrayvAvailable;
    bool _scissorArrayvNVAvailable;
    bool _scissorArrayvOESAvailable;
    bool _scissorExclusiveArrayvNVAvailable;
    bool _scissorExclusiveNVAvailable;
    bool _scissorIndexedAvailable;
    bool _scissorIndexedNVAvailable;
    bool _scissorIndexedOESAvailable;
    bool _scissorIndexedvAvailable;
    bool _scissorIndexedvNVAvailable;
    bool _scissorIndexedvOESAvailable;
    bool _secondaryColor3bAvailable;
    bool _secondaryColor3bEXTAvailable;
    bool _secondaryColor3bvAvailable;
    bool _secondaryColor3bvEXTAvailable;
    bool _secondaryColor3dAvailable;
    bool _secondaryColor3dEXTAvailable;
    bool _secondaryColor3dvAvailable;
    bool _secondaryColor3dvEXTAvailable;
    bool _secondaryColor3fAvailable;
    bool _secondaryColor3fEXTAvailable;
    bool _secondaryColor3fvAvailable;
    bool _secondaryColor3fvEXTAvailable;
    bool _secondaryColor3hNVAvailable;
    bool _secondaryColor3hvNVAvailable;
    bool _secondaryColor3iAvailable;
    bool _secondaryColor3iEXTAvailable;
    bool _secondaryColor3ivAvailable;
    bool _secondaryColor3ivEXTAvailable;
    bool _secondaryColor3sAvailable;
    bool _secondaryColor3sEXTAvailable;
    bool _secondaryColor3svAvailable;
    bool _secondaryColor3svEXTAvailable;
    bool _secondaryColor3ubAvailable;
    bool _secondaryColor3ubEXTAvailable;
    bool _secondaryColor3ubvAvailable;
    bool _secondaryColor3ubvEXTAvailable;
    bool _secondaryColor3uiAvailable;
    bool _secondaryColor3uiEXTAvailable;
    bool _secondaryColor3uivAvailable;
    bool _secondaryColor3uivEXTAvailable;
    bool _secondaryColor3usAvailable;
    bool _secondaryColor3usEXTAvailable;
    bool _secondaryColor3usvAvailable;
    bool _secondaryColor3usvEXTAvailable;
    bool _secondaryColorFormatNVAvailable;
    bool _secondaryColorP3uiAvailable;
    bool _secondaryColorP3uivAvailable;
    bool _secondaryColorPointerAvailable;
    bool _secondaryColorPointerEXTAvailable;
    bool _secondaryColorPointerListIBMAvailable;
    bool _selectBufferAvailable;
    bool _selectPerfMonitorCountersAMDAvailable;
    bool _semaphoreParameterivNVAvailable;
    bool _semaphoreParameterui64vEXTAvailable;
    bool _separableFilter2DAvailable;
    bool _separableFilter2DEXTAvailable;
    bool _setFenceAPPLEAvailable;
    bool _setFenceNVAvailable;
    bool _setFragmentShaderConstantATIAvailable;
    bool _setInvariantEXTAvailable;
    bool _setLocalConstantEXTAvailable;
    bool _setMultisamplefvAMDAvailable;
    bool _shadeModelAvailable;
    bool _shaderBinaryAvailable;
    bool _shaderOp1EXTAvailable;
    bool _shaderOp2EXTAvailable;
    bool _shaderOp3EXTAvailable;
    bool _shaderSourceAvailable;
    bool _shaderSourceARBAvailable;
    bool _shaderStorageBlockBindingAvailable;
    bool _shadingRateCombinerOpsEXTAvailable;
    bool _shadingRateEXTAvailable;
    bool _shadingRateImageBarrierNVAvailable;
    bool _shadingRateImagePaletteNVAvailable;
    bool _shadingRateQCOMAvailable;
    bool _shadingRateSampleOrderCustomNVAvailable;
    bool _shadingRateSampleOrderNVAvailable;
    bool _sharpenTexFuncSGISAvailable;
    bool _signalSemaphoreEXTAvailable;
    bool _signalSemaphoreui64NVXAvailable;
    bool _signalVkFenceNVAvailable;
    bool _signalVkSemaphoreNVAvailable;
    bool _specializeShaderAvailable;
    bool _specializeShaderARBAvailable;
    bool _spriteParameterfSGIXAvailable;
    bool _spriteParameterfvSGIXAvailable;
    bool _spriteParameteriSGIXAvailable;
    bool _spriteParameterivSGIXAvailable;
    bool _startInstrumentsSGIXAvailable;
    bool _startTilingQCOMAvailable;
    bool _stateCaptureNVAvailable;
    bool _stencilClearTagEXTAvailable;
    bool _stencilFillPathInstancedNVAvailable;
    bool _stencilFillPathNVAvailable;
    bool _stencilFuncAvailable;
    bool _stencilFuncSeparateAvailable;
    bool _stencilFuncSeparateATIAvailable;
    bool _stencilMaskAvailable;
    bool _stencilMaskSeparateAvailable;
    bool _stencilOpAvailable;
    bool _stencilOpSeparateAvailable;
    bool _stencilOpSeparateATIAvailable;
    bool _stencilOpValueAMDAvailable;
    bool _stencilStrokePathInstancedNVAvailable;
    bool _stencilStrokePathNVAvailable;
    bool _stencilThenCoverFillPathInstancedNVAvailable;
    bool _stencilThenCoverFillPathNVAvailable;
    bool _stencilThenCoverStrokePathInstancedNVAvailable;
    bool _stencilThenCoverStrokePathNVAvailable;
    bool _stopInstrumentsSGIXAvailable;
    bool _stringMarkerGREMEDYAvailable;
    bool _subpixelPrecisionBiasNVAvailable;
    bool _swizzleEXTAvailable;
    bool _syncTextureINTELAvailable;
    bool _tagSampleBufferSGIXAvailable;
    bool _tangent3bEXTAvailable;
    bool _tangent3bvEXTAvailable;
    bool _tangent3dEXTAvailable;
    bool _tangent3dvEXTAvailable;
    bool _tangent3fEXTAvailable;
    bool _tangent3fvEXTAvailable;
    bool _tangent3iEXTAvailable;
    bool _tangent3ivEXTAvailable;
    bool _tangent3sEXTAvailable;
    bool _tangent3svEXTAvailable;
    bool _tangentPointerEXTAvailable;
    bool _tbufferMask3DFXAvailable;
    bool _tessellationFactorAMDAvailable;
    bool _tessellationModeAMDAvailable;
    bool _testFenceAPPLEAvailable;
    bool _testFenceNVAvailable;
    bool _testObjectAPPLEAvailable;
    bool _texAttachMemoryNVAvailable;
    bool _texBufferAvailable;
    bool _texBufferARBAvailable;
    bool _texBufferEXTAvailable;
    bool _texBufferOESAvailable;
    bool _texBufferRangeAvailable;
    bool _texBufferRangeEXTAvailable;
    bool _texBufferRangeOESAvailable;
    bool _texBumpParameterfvATIAvailable;
    bool _texBumpParameterivATIAvailable;
    bool _texCoord1bOESAvailable;
    bool _texCoord1bvOESAvailable;
    bool _texCoord1dAvailable;
    bool _texCoord1dvAvailable;
    bool _texCoord1fAvailable;
    bool _texCoord1fvAvailable;
    bool _texCoord1hNVAvailable;
    bool _texCoord1hvNVAvailable;
    bool _texCoord1iAvailable;
    bool _texCoord1ivAvailable;
    bool _texCoord1sAvailable;
    bool _texCoord1svAvailable;
    bool _texCoord1xOESAvailable;
    bool _texCoord1xvOESAvailable;
    bool _texCoord2bOESAvailable;
    bool _texCoord2bvOESAvailable;
    bool _texCoord2dAvailable;
    bool _texCoord2dvAvailable;
    bool _texCoord2fAvailable;
    bool _texCoord2fColor3fVertex3fSUNAvailable;
    bool _texCoord2fColor3fVertex3fvSUNAvailable;
    bool _texCoord2fColor4fNormal3fVertex3fSUNAvailable;
    bool _texCoord2fColor4fNormal3fVertex3fvSUNAvailable;
    bool _texCoord2fColor4ubVertex3fSUNAvailable;
    bool _texCoord2fColor4ubVertex3fvSUNAvailable;
    bool _texCoord2fNormal3fVertex3fSUNAvailable;
    bool _texCoord2fNormal3fVertex3fvSUNAvailable;
    bool _texCoord2fvAvailable;
    bool _texCoord2fVertex3fSUNAvailable;
    bool _texCoord2fVertex3fvSUNAvailable;
    bool _texCoord2hNVAvailable;
    bool _texCoord2hvNVAvailable;
    bool _texCoord2iAvailable;
    bool _texCoord2ivAvailable;
    bool _texCoord2sAvailable;
    bool _texCoord2svAvailable;
    bool _texCoord2xOESAvailable;
    bool _texCoord2xvOESAvailable;
    bool _texCoord3bOESAvailable;
    bool _texCoord3bvOESAvailable;
    bool _texCoord3dAvailable;
    bool _texCoord3dvAvailable;
    bool _texCoord3fAvailable;
    bool _texCoord3fvAvailable;
    bool _texCoord3hNVAvailable;
    bool _texCoord3hvNVAvailable;
    bool _texCoord3iAvailable;
    bool _texCoord3ivAvailable;
    bool _texCoord3sAvailable;
    bool _texCoord3svAvailable;
    bool _texCoord3xOESAvailable;
    bool _texCoord3xvOESAvailable;
    bool _texCoord4bOESAvailable;
    bool _texCoord4bvOESAvailable;
    bool _texCoord4dAvailable;
    bool _texCoord4dvAvailable;
    bool _texCoord4fAvailable;
    bool _texCoord4fColor4fNormal3fVertex4fSUNAvailable;
    bool _texCoord4fColor4fNormal3fVertex4fvSUNAvailable;
    bool _texCoord4fvAvailable;
    bool _texCoord4fVertex4fSUNAvailable;
    bool _texCoord4fVertex4fvSUNAvailable;
    bool _texCoord4hNVAvailable;
    bool _texCoord4hvNVAvailable;
    bool _texCoord4iAvailable;
    bool _texCoord4ivAvailable;
    bool _texCoord4sAvailable;
    bool _texCoord4svAvailable;
    bool _texCoord4xOESAvailable;
    bool _texCoord4xvOESAvailable;
    bool _texCoordFormatNVAvailable;
    bool _texCoordP1uiAvailable;
    bool _texCoordP1uivAvailable;
    bool _texCoordP2uiAvailable;
    bool _texCoordP2uivAvailable;
    bool _texCoordP3uiAvailable;
    bool _texCoordP3uivAvailable;
    bool _texCoordP4uiAvailable;
    bool _texCoordP4uivAvailable;
    bool _texCoordPointerAvailable;
    bool _texCoordPointerEXTAvailable;
    bool _texCoordPointerListIBMAvailable;
    bool _texCoordPointervINTELAvailable;
    bool _texEnvfAvailable;
    bool _texEnvfvAvailable;
    bool _texEnviAvailable;
    bool _texEnvivAvailable;
    bool _texEnvxAvailable;
    bool _texEnvxOESAvailable;
    bool _texEnvxvAvailable;
    bool _texEnvxvOESAvailable;
    bool _texEstimateMotionQCOMAvailable;
    bool _texEstimateMotionRegionsQCOMAvailable;
    bool _texFilterFuncSGISAvailable;
    bool _texGendAvailable;
    bool _texGendvAvailable;
    bool _texGenfAvailable;
    bool _texGenfOESAvailable;
    bool _texGenfvAvailable;
    bool _texGenfvOESAvailable;
    bool _texGeniAvailable;
    bool _texGeniOESAvailable;
    bool _texGenivAvailable;
    bool _texGenivOESAvailable;
    bool _texGenxOESAvailable;
    bool _texGenxvOESAvailable;
    bool _texImage1DAvailable;
    bool _texImage2DAvailable;
    bool _texImage2DMultisampleAvailable;
    bool _texImage2DMultisampleCoverageNVAvailable;
    bool _texImage3DAvailable;
    bool _texImage3DEXTAvailable;
    bool _texImage3DMultisampleAvailable;
    bool _texImage3DMultisampleCoverageNVAvailable;
    bool _texImage3DOESAvailable;
    bool _texImage4DSGISAvailable;
    bool _texPageCommitmentARBAvailable;
    bool _texPageCommitmentEXTAvailable;
    bool _texPageCommitmentMemNVAvailable;
    bool _texParameterfAvailable;
    bool _texParameterfvAvailable;
    bool _texParameteriAvailable;
    bool _texParameterIivAvailable;
    bool _texParameterIivEXTAvailable;
    bool _texParameterIivOESAvailable;
    bool _texParameterIuivAvailable;
    bool _texParameterIuivEXTAvailable;
    bool _texParameterIuivOESAvailable;
    bool _texParameterivAvailable;
    bool _texParameterxAvailable;
    bool _texParameterxOESAvailable;
    bool _texParameterxvAvailable;
    bool _texParameterxvOESAvailable;
    bool _texRenderbufferNVAvailable;
    bool _texStorage1DAvailable;
    bool _texStorage1DEXTAvailable;
    bool _texStorage2DAvailable;
    bool _texStorage2DEXTAvailable;
    bool _texStorage2DMultisampleAvailable;
    bool _texStorage3DAvailable;
    bool _texStorage3DEXTAvailable;
    bool _texStorage3DMultisampleAvailable;
    bool _texStorage3DMultisampleOESAvailable;
    bool _texStorageAttribs2DEXTAvailable;
    bool _texStorageAttribs3DEXTAvailable;
    bool _texStorageMem1DEXTAvailable;
    bool _texStorageMem2DEXTAvailable;
    bool _texStorageMem2DMultisampleEXTAvailable;
    bool _texStorageMem3DEXTAvailable;
    bool _texStorageMem3DMultisampleEXTAvailable;
    bool _texStorageSparseAMDAvailable;
    bool _texSubImage1DAvailable;
    bool _texSubImage1DEXTAvailable;
    bool _texSubImage2DAvailable;
    bool _texSubImage2DEXTAvailable;
    bool _texSubImage3DAvailable;
    bool _texSubImage3DEXTAvailable;
    bool _texSubImage3DOESAvailable;
    bool _texSubImage4DSGISAvailable;
    bool _textureAttachMemoryNVAvailable;
    bool _textureBarrierAvailable;
    bool _textureBarrierNVAvailable;
    bool _textureBufferAvailable;
    bool _textureBufferEXTAvailable;
    bool _textureBufferRangeAvailable;
    bool _textureBufferRangeEXTAvailable;
    bool _textureColorMaskSGISAvailable;
    bool _textureFoveationParametersQCOMAvailable;
    bool _textureImage1DEXTAvailable;
    bool _textureImage2DEXTAvailable;
    bool _textureImage2DMultisampleCoverageNVAvailable;
    bool _textureImage2DMultisampleNVAvailable;
    bool _textureImage3DEXTAvailable;
    bool _textureImage3DMultisampleCoverageNVAvailable;
    bool _textureImage3DMultisampleNVAvailable;
    bool _textureLightEXTAvailable;
    bool _textureMaterialEXTAvailable;
    bool _textureNormalEXTAvailable;
    bool _texturePageCommitmentEXTAvailable;
    bool _texturePageCommitmentMemNVAvailable;
    bool _textureParameterfAvailable;
    bool _textureParameterfEXTAvailable;
    bool _textureParameterfvAvailable;
    bool _textureParameterfvEXTAvailable;
    bool _textureParameteriAvailable;
    bool _textureParameteriEXTAvailable;
    bool _textureParameterIivAvailable;
    bool _textureParameterIivEXTAvailable;
    bool _textureParameterIuivAvailable;
    bool _textureParameterIuivEXTAvailable;
    bool _textureParameterivAvailable;
    bool _textureParameterivEXTAvailable;
    bool _textureRangeAPPLEAvailable;
    bool _textureRenderbufferEXTAvailable;
    bool _textureStorage1DAvailable;
    bool _textureStorage1DEXTAvailable;
    bool _textureStorage2DAvailable;
    bool _textureStorage2DEXTAvailable;
    bool _textureStorage2DMultisampleAvailable;
    bool _textureStorage2DMultisampleEXTAvailable;
    bool _textureStorage3DAvailable;
    bool _textureStorage3DEXTAvailable;
    bool _textureStorage3DMultisampleAvailable;
    bool _textureStorage3DMultisampleEXTAvailable;
    bool _textureStorageMem1DEXTAvailable;
    bool _textureStorageMem2DEXTAvailable;
    bool _textureStorageMem2DMultisampleEXTAvailable;
    bool _textureStorageMem3DEXTAvailable;
    bool _textureStorageMem3DMultisampleEXTAvailable;
    bool _textureStorageSparseAMDAvailable;
    bool _textureSubImage1DAvailable;
    bool _textureSubImage1DEXTAvailable;
    bool _textureSubImage2DAvailable;
    bool _textureSubImage2DEXTAvailable;
    bool _textureSubImage3DAvailable;
    bool _textureSubImage3DEXTAvailable;
    bool _textureViewAvailable;
    bool _textureViewEXTAvailable;
    bool _textureViewOESAvailable;
    bool _trackMatrixNVAvailable;
    bool _transformFeedbackAttribsNVAvailable;
    bool _transformFeedbackBufferBaseAvailable;
    bool _transformFeedbackBufferRangeAvailable;
    bool _transformFeedbackStreamAttribsNVAvailable;
    bool _transformFeedbackVaryingsAvailable;
    bool _transformFeedbackVaryingsEXTAvailable;
    bool _transformFeedbackVaryingsNVAvailable;
    bool _transformPathNVAvailable;
    bool _translatedAvailable;
    bool _translatefAvailable;
    bool _translatexAvailable;
    bool _translatexOESAvailable;
    bool _uniform1dAvailable;
    bool _uniform1dvAvailable;
    bool _uniform1fAvailable;
    bool _uniform1fARBAvailable;
    bool _uniform1fvAvailable;
    bool _uniform1fvARBAvailable;
    bool _uniform1iAvailable;
    bool _uniform1i64ARBAvailable;
    bool _uniform1i64NVAvailable;
    bool _uniform1i64vARBAvailable;
    bool _uniform1i64vNVAvailable;
    bool _uniform1iARBAvailable;
    bool _uniform1ivAvailable;
    bool _uniform1ivARBAvailable;
    bool _uniform1uiAvailable;
    bool _uniform1ui64ARBAvailable;
    bool _uniform1ui64NVAvailable;
    bool _uniform1ui64vARBAvailable;
    bool _uniform1ui64vNVAvailable;
    bool _uniform1uiEXTAvailable;
    bool _uniform1uivAvailable;
    bool _uniform1uivEXTAvailable;
    bool _uniform2dAvailable;
    bool _uniform2dvAvailable;
    bool _uniform2fAvailable;
    bool _uniform2fARBAvailable;
    bool _uniform2fvAvailable;
    bool _uniform2fvARBAvailable;
    bool _uniform2iAvailable;
    bool _uniform2i64ARBAvailable;
    bool _uniform2i64NVAvailable;
    bool _uniform2i64vARBAvailable;
    bool _uniform2i64vNVAvailable;
    bool _uniform2iARBAvailable;
    bool _uniform2ivAvailable;
    bool _uniform2ivARBAvailable;
    bool _uniform2uiAvailable;
    bool _uniform2ui64ARBAvailable;
    bool _uniform2ui64NVAvailable;
    bool _uniform2ui64vARBAvailable;
    bool _uniform2ui64vNVAvailable;
    bool _uniform2uiEXTAvailable;
    bool _uniform2uivAvailable;
    bool _uniform2uivEXTAvailable;
    bool _uniform3dAvailable;
    bool _uniform3dvAvailable;
    bool _uniform3fAvailable;
    bool _uniform3fARBAvailable;
    bool _uniform3fvAvailable;
    bool _uniform3fvARBAvailable;
    bool _uniform3iAvailable;
    bool _uniform3i64ARBAvailable;
    bool _uniform3i64NVAvailable;
    bool _uniform3i64vARBAvailable;
    bool _uniform3i64vNVAvailable;
    bool _uniform3iARBAvailable;
    bool _uniform3ivAvailable;
    bool _uniform3ivARBAvailable;
    bool _uniform3uiAvailable;
    bool _uniform3ui64ARBAvailable;
    bool _uniform3ui64NVAvailable;
    bool _uniform3ui64vARBAvailable;
    bool _uniform3ui64vNVAvailable;
    bool _uniform3uiEXTAvailable;
    bool _uniform3uivAvailable;
    bool _uniform3uivEXTAvailable;
    bool _uniform4dAvailable;
    bool _uniform4dvAvailable;
    bool _uniform4fAvailable;
    bool _uniform4fARBAvailable;
    bool _uniform4fvAvailable;
    bool _uniform4fvARBAvailable;
    bool _uniform4iAvailable;
    bool _uniform4i64ARBAvailable;
    bool _uniform4i64NVAvailable;
    bool _uniform4i64vARBAvailable;
    bool _uniform4i64vNVAvailable;
    bool _uniform4iARBAvailable;
    bool _uniform4ivAvailable;
    bool _uniform4ivARBAvailable;
    bool _uniform4uiAvailable;
    bool _uniform4ui64ARBAvailable;
    bool _uniform4ui64NVAvailable;
    bool _uniform4ui64vARBAvailable;
    bool _uniform4ui64vNVAvailable;
    bool _uniform4uiEXTAvailable;
    bool _uniform4uivAvailable;
    bool _uniform4uivEXTAvailable;
    bool _uniformBlockBindingAvailable;
    bool _uniformBufferEXTAvailable;
    bool _uniformHandleui64ARBAvailable;
    bool _uniformHandleui64IMGAvailable;
    bool _uniformHandleui64NVAvailable;
    bool _uniformHandleui64vARBAvailable;
    bool _uniformHandleui64vIMGAvailable;
    bool _uniformHandleui64vNVAvailable;
    bool _uniformMatrix2dvAvailable;
    bool _uniformMatrix2fvAvailable;
    bool _uniformMatrix2fvARBAvailable;
    bool _uniformMatrix2x3dvAvailable;
    bool _uniformMatrix2x3fvAvailable;
    bool _uniformMatrix2x3fvNVAvailable;
    bool _uniformMatrix2x4dvAvailable;
    bool _uniformMatrix2x4fvAvailable;
    bool _uniformMatrix2x4fvNVAvailable;
    bool _uniformMatrix3dvAvailable;
    bool _uniformMatrix3fvAvailable;
    bool _uniformMatrix3fvARBAvailable;
    bool _uniformMatrix3x2dvAvailable;
    bool _uniformMatrix3x2fvAvailable;
    bool _uniformMatrix3x2fvNVAvailable;
    bool _uniformMatrix3x4dvAvailable;
    bool _uniformMatrix3x4fvAvailable;
    bool _uniformMatrix3x4fvNVAvailable;
    bool _uniformMatrix4dvAvailable;
    bool _uniformMatrix4fvAvailable;
    bool _uniformMatrix4fvARBAvailable;
    bool _uniformMatrix4x2dvAvailable;
    bool _uniformMatrix4x2fvAvailable;
    bool _uniformMatrix4x2fvNVAvailable;
    bool _uniformMatrix4x3dvAvailable;
    bool _uniformMatrix4x3fvAvailable;
    bool _uniformMatrix4x3fvNVAvailable;
    bool _uniformSubroutinesuivAvailable;
    bool _uniformui64NVAvailable;
    bool _uniformui64vNVAvailable;
    bool _unlockArraysEXTAvailable;
    bool _unmapBufferAvailable;
    bool _unmapBufferARBAvailable;
    bool _unmapBufferOESAvailable;
    bool _unmapNamedBufferAvailable;
    bool _unmapNamedBufferEXTAvailable;
    bool _unmapObjectBufferATIAvailable;
    bool _unmapTexture2DINTELAvailable;
    bool _updateObjectBufferATIAvailable;
    bool _uploadGpuMaskNVXAvailable;
    bool _useProgramAvailable;
    bool _useProgramObjectARBAvailable;
    bool _useProgramStagesAvailable;
    bool _useProgramStagesEXTAvailable;
    bool _useShaderProgramEXTAvailable;
    bool _validateProgramAvailable;
    bool _validateProgramARBAvailable;
    bool _validateProgramPipelineAvailable;
    bool _validateProgramPipelineEXTAvailable;
    bool _variantArrayObjectATIAvailable;
    bool _variantbvEXTAvailable;
    bool _variantdvEXTAvailable;
    bool _variantfvEXTAvailable;
    bool _variantivEXTAvailable;
    bool _variantPointerEXTAvailable;
    bool _variantsvEXTAvailable;
    bool _variantubvEXTAvailable;
    bool _variantuivEXTAvailable;
    bool _variantusvEXTAvailable;
    bool _vDPAUFiniNVAvailable;
    bool _vDPAUGetSurfaceivNVAvailable;
    bool _vDPAUInitNVAvailable;
    bool _vDPAUIsSurfaceNVAvailable;
    bool _vDPAUMapSurfacesNVAvailable;
    bool _vDPAURegisterOutputSurfaceNVAvailable;
    bool _vDPAURegisterVideoSurfaceNVAvailable;
    bool _vDPAURegisterVideoSurfaceWithPictureStructureNVAvailable;
    bool _vDPAUSurfaceAccessNVAvailable;
    bool _vDPAUUnmapSurfacesNVAvailable;
    bool _vDPAUUnregisterSurfaceNVAvailable;
    bool _vertex2bOESAvailable;
    bool _vertex2bvOESAvailable;
    bool _vertex2dAvailable;
    bool _vertex2dvAvailable;
    bool _vertex2fAvailable;
    bool _vertex2fvAvailable;
    bool _vertex2hNVAvailable;
    bool _vertex2hvNVAvailable;
    bool _vertex2iAvailable;
    bool _vertex2ivAvailable;
    bool _vertex2sAvailable;
    bool _vertex2svAvailable;
    bool _vertex2xOESAvailable;
    bool _vertex2xvOESAvailable;
    bool _vertex3bOESAvailable;
    bool _vertex3bvOESAvailable;
    bool _vertex3dAvailable;
    bool _vertex3dvAvailable;
    bool _vertex3fAvailable;
    bool _vertex3fvAvailable;
    bool _vertex3hNVAvailable;
    bool _vertex3hvNVAvailable;
    bool _vertex3iAvailable;
    bool _vertex3ivAvailable;
    bool _vertex3sAvailable;
    bool _vertex3svAvailable;
    bool _vertex3xOESAvailable;
    bool _vertex3xvOESAvailable;
    bool _vertex4bOESAvailable;
    bool _vertex4bvOESAvailable;
    bool _vertex4dAvailable;
    bool _vertex4dvAvailable;
    bool _vertex4fAvailable;
    bool _vertex4fvAvailable;
    bool _vertex4hNVAvailable;
    bool _vertex4hvNVAvailable;
    bool _vertex4iAvailable;
    bool _vertex4ivAvailable;
    bool _vertex4sAvailable;
    bool _vertex4svAvailable;
    bool _vertex4xOESAvailable;
    bool _vertex4xvOESAvailable;
    bool _vertexArrayAttribBindingAvailable;
    bool _vertexArrayAttribFormatAvailable;
    bool _vertexArrayAttribIFormatAvailable;
    bool _vertexArrayAttribLFormatAvailable;
    bool _vertexArrayBindingDivisorAvailable;
    bool _vertexArrayBindVertexBufferEXTAvailable;
    bool _vertexArrayColorOffsetEXTAvailable;
    bool _vertexArrayEdgeFlagOffsetEXTAvailable;
    bool _vertexArrayElementBufferAvailable;
    bool _vertexArrayFogCoordOffsetEXTAvailable;
    bool _vertexArrayIndexOffsetEXTAvailable;
    bool _vertexArrayMultiTexCoordOffsetEXTAvailable;
    bool _vertexArrayNormalOffsetEXTAvailable;
    bool _vertexArrayParameteriAPPLEAvailable;
    bool _vertexArrayRangeAPPLEAvailable;
    bool _vertexArrayRangeNVAvailable;
    bool _vertexArraySecondaryColorOffsetEXTAvailable;
    bool _vertexArrayTexCoordOffsetEXTAvailable;
    bool _vertexArrayVertexAttribBindingEXTAvailable;
    bool _vertexArrayVertexAttribDivisorEXTAvailable;
    bool _vertexArrayVertexAttribFormatEXTAvailable;
    bool _vertexArrayVertexAttribIFormatEXTAvailable;
    bool _vertexArrayVertexAttribIOffsetEXTAvailable;
    bool _vertexArrayVertexAttribLFormatEXTAvailable;
    bool _vertexArrayVertexAttribLOffsetEXTAvailable;
    bool _vertexArrayVertexAttribOffsetEXTAvailable;
    bool _vertexArrayVertexBindingDivisorEXTAvailable;
    bool _vertexArrayVertexBufferAvailable;
    bool _vertexArrayVertexBuffersAvailable;
    bool _vertexArrayVertexOffsetEXTAvailable;
    bool _vertexAttrib1dAvailable;
    bool _vertexAttrib1dARBAvailable;
    bool _vertexAttrib1dNVAvailable;
    bool _vertexAttrib1dvAvailable;
    bool _vertexAttrib1dvARBAvailable;
    bool _vertexAttrib1dvNVAvailable;
    bool _vertexAttrib1fAvailable;
    bool _vertexAttrib1fARBAvailable;
    bool _vertexAttrib1fNVAvailable;
    bool _vertexAttrib1fvAvailable;
    bool _vertexAttrib1fvARBAvailable;
    bool _vertexAttrib1fvNVAvailable;
    bool _vertexAttrib1hNVAvailable;
    bool _vertexAttrib1hvNVAvailable;
    bool _vertexAttrib1sAvailable;
    bool _vertexAttrib1sARBAvailable;
    bool _vertexAttrib1sNVAvailable;
    bool _vertexAttrib1svAvailable;
    bool _vertexAttrib1svARBAvailable;
    bool _vertexAttrib1svNVAvailable;
    bool _vertexAttrib2dAvailable;
    bool _vertexAttrib2dARBAvailable;
    bool _vertexAttrib2dNVAvailable;
    bool _vertexAttrib2dvAvailable;
    bool _vertexAttrib2dvARBAvailable;
    bool _vertexAttrib2dvNVAvailable;
    bool _vertexAttrib2fAvailable;
    bool _vertexAttrib2fARBAvailable;
    bool _vertexAttrib2fNVAvailable;
    bool _vertexAttrib2fvAvailable;
    bool _vertexAttrib2fvARBAvailable;
    bool _vertexAttrib2fvNVAvailable;
    bool _vertexAttrib2hNVAvailable;
    bool _vertexAttrib2hvNVAvailable;
    bool _vertexAttrib2sAvailable;
    bool _vertexAttrib2sARBAvailable;
    bool _vertexAttrib2sNVAvailable;
    bool _vertexAttrib2svAvailable;
    bool _vertexAttrib2svARBAvailable;
    bool _vertexAttrib2svNVAvailable;
    bool _vertexAttrib3dAvailable;
    bool _vertexAttrib3dARBAvailable;
    bool _vertexAttrib3dNVAvailable;
    bool _vertexAttrib3dvAvailable;
    bool _vertexAttrib3dvARBAvailable;
    bool _vertexAttrib3dvNVAvailable;
    bool _vertexAttrib3fAvailable;
    bool _vertexAttrib3fARBAvailable;
    bool _vertexAttrib3fNVAvailable;
    bool _vertexAttrib3fvAvailable;
    bool _vertexAttrib3fvARBAvailable;
    bool _vertexAttrib3fvNVAvailable;
    bool _vertexAttrib3hNVAvailable;
    bool _vertexAttrib3hvNVAvailable;
    bool _vertexAttrib3sAvailable;
    bool _vertexAttrib3sARBAvailable;
    bool _vertexAttrib3sNVAvailable;
    bool _vertexAttrib3svAvailable;
    bool _vertexAttrib3svARBAvailable;
    bool _vertexAttrib3svNVAvailable;
    bool _vertexAttrib4bvAvailable;
    bool _vertexAttrib4bvARBAvailable;
    bool _vertexAttrib4dAvailable;
    bool _vertexAttrib4dARBAvailable;
    bool _vertexAttrib4dNVAvailable;
    bool _vertexAttrib4dvAvailable;
    bool _vertexAttrib4dvARBAvailable;
    bool _vertexAttrib4dvNVAvailable;
    bool _vertexAttrib4fAvailable;
    bool _vertexAttrib4fARBAvailable;
    bool _vertexAttrib4fNVAvailable;
    bool _vertexAttrib4fvAvailable;
    bool _vertexAttrib4fvARBAvailable;
    bool _vertexAttrib4fvNVAvailable;
    bool _vertexAttrib4hNVAvailable;
    bool _vertexAttrib4hvNVAvailable;
    bool _vertexAttrib4ivAvailable;
    bool _vertexAttrib4ivARBAvailable;
    bool _vertexAttrib4NbvAvailable;
    bool _vertexAttrib4NbvARBAvailable;
    bool _vertexAttrib4NivAvailable;
    bool _vertexAttrib4NivARBAvailable;
    bool _vertexAttrib4NsvAvailable;
    bool _vertexAttrib4NsvARBAvailable;
    bool _vertexAttrib4NubAvailable;
    bool _vertexAttrib4NubARBAvailable;
    bool _vertexAttrib4NubvAvailable;
    bool _vertexAttrib4NubvARBAvailable;
    bool _vertexAttrib4NuivAvailable;
    bool _vertexAttrib4NuivARBAvailable;
    bool _vertexAttrib4NusvAvailable;
    bool _vertexAttrib4NusvARBAvailable;
    bool _vertexAttrib4sAvailable;
    bool _vertexAttrib4sARBAvailable;
    bool _vertexAttrib4sNVAvailable;
    bool _vertexAttrib4svAvailable;
    bool _vertexAttrib4svARBAvailable;
    bool _vertexAttrib4svNVAvailable;
    bool _vertexAttrib4ubNVAvailable;
    bool _vertexAttrib4ubvAvailable;
    bool _vertexAttrib4ubvARBAvailable;
    bool _vertexAttrib4ubvNVAvailable;
    bool _vertexAttrib4uivAvailable;
    bool _vertexAttrib4uivARBAvailable;
    bool _vertexAttrib4usvAvailable;
    bool _vertexAttrib4usvARBAvailable;
    bool _vertexAttribArrayObjectATIAvailable;
    bool _vertexAttribBindingAvailable;
    bool _vertexAttribDivisorAvailable;
    bool _vertexAttribDivisorANGLEAvailable;
    bool _vertexAttribDivisorARBAvailable;
    bool _vertexAttribDivisorEXTAvailable;
    bool _vertexAttribDivisorNVAvailable;
    bool _vertexAttribFormatAvailable;
    bool _vertexAttribFormatNVAvailable;
    bool _vertexAttribI1iAvailable;
    bool _vertexAttribI1iEXTAvailable;
    bool _vertexAttribI1ivAvailable;
    bool _vertexAttribI1ivEXTAvailable;
    bool _vertexAttribI1uiAvailable;
    bool _vertexAttribI1uiEXTAvailable;
    bool _vertexAttribI1uivAvailable;
    bool _vertexAttribI1uivEXTAvailable;
    bool _vertexAttribI2iAvailable;
    bool _vertexAttribI2iEXTAvailable;
    bool _vertexAttribI2ivAvailable;
    bool _vertexAttribI2ivEXTAvailable;
    bool _vertexAttribI2uiAvailable;
    bool _vertexAttribI2uiEXTAvailable;
    bool _vertexAttribI2uivAvailable;
    bool _vertexAttribI2uivEXTAvailable;
    bool _vertexAttribI3iAvailable;
    bool _vertexAttribI3iEXTAvailable;
    bool _vertexAttribI3ivAvailable;
    bool _vertexAttribI3ivEXTAvailable;
    bool _vertexAttribI3uiAvailable;
    bool _vertexAttribI3uiEXTAvailable;
    bool _vertexAttribI3uivAvailable;
    bool _vertexAttribI3uivEXTAvailable;
    bool _vertexAttribI4bvAvailable;
    bool _vertexAttribI4bvEXTAvailable;
    bool _vertexAttribI4iAvailable;
    bool _vertexAttribI4iEXTAvailable;
    bool _vertexAttribI4ivAvailable;
    bool _vertexAttribI4ivEXTAvailable;
    bool _vertexAttribI4svAvailable;
    bool _vertexAttribI4svEXTAvailable;
    bool _vertexAttribI4ubvAvailable;
    bool _vertexAttribI4ubvEXTAvailable;
    bool _vertexAttribI4uiAvailable;
    bool _vertexAttribI4uiEXTAvailable;
    bool _vertexAttribI4uivAvailable;
    bool _vertexAttribI4uivEXTAvailable;
    bool _vertexAttribI4usvAvailable;
    bool _vertexAttribI4usvEXTAvailable;
    bool _vertexAttribIFormatAvailable;
    bool _vertexAttribIFormatNVAvailable;
    bool _vertexAttribIPointerAvailable;
    bool _vertexAttribIPointerEXTAvailable;
    bool _vertexAttribL1dAvailable;
    bool _vertexAttribL1dEXTAvailable;
    bool _vertexAttribL1dvAvailable;
    bool _vertexAttribL1dvEXTAvailable;
    bool _vertexAttribL1i64NVAvailable;
    bool _vertexAttribL1i64vNVAvailable;
    bool _vertexAttribL1ui64ARBAvailable;
    bool _vertexAttribL1ui64NVAvailable;
    bool _vertexAttribL1ui64vARBAvailable;
    bool _vertexAttribL1ui64vNVAvailable;
    bool _vertexAttribL2dAvailable;
    bool _vertexAttribL2dEXTAvailable;
    bool _vertexAttribL2dvAvailable;
    bool _vertexAttribL2dvEXTAvailable;
    bool _vertexAttribL2i64NVAvailable;
    bool _vertexAttribL2i64vNVAvailable;
    bool _vertexAttribL2ui64NVAvailable;
    bool _vertexAttribL2ui64vNVAvailable;
    bool _vertexAttribL3dAvailable;
    bool _vertexAttribL3dEXTAvailable;
    bool _vertexAttribL3dvAvailable;
    bool _vertexAttribL3dvEXTAvailable;
    bool _vertexAttribL3i64NVAvailable;
    bool _vertexAttribL3i64vNVAvailable;
    bool _vertexAttribL3ui64NVAvailable;
    bool _vertexAttribL3ui64vNVAvailable;
    bool _vertexAttribL4dAvailable;
    bool _vertexAttribL4dEXTAvailable;
    bool _vertexAttribL4dvAvailable;
    bool _vertexAttribL4dvEXTAvailable;
    bool _vertexAttribL4i64NVAvailable;
    bool _vertexAttribL4i64vNVAvailable;
    bool _vertexAttribL4ui64NVAvailable;
    bool _vertexAttribL4ui64vNVAvailable;
    bool _vertexAttribLFormatAvailable;
    bool _vertexAttribLFormatNVAvailable;
    bool _vertexAttribLPointerAvailable;
    bool _vertexAttribLPointerEXTAvailable;
    bool _vertexAttribP1uiAvailable;
    bool _vertexAttribP1uivAvailable;
    bool _vertexAttribP2uiAvailable;
    bool _vertexAttribP2uivAvailable;
    bool _vertexAttribP3uiAvailable;
    bool _vertexAttribP3uivAvailable;
    bool _vertexAttribP4uiAvailable;
    bool _vertexAttribP4uivAvailable;
    bool _vertexAttribParameteriAMDAvailable;
    bool _vertexAttribPointerAvailable;
    bool _vertexAttribPointerARBAvailable;
    bool _vertexAttribPointerNVAvailable;
    bool _vertexAttribs1dvNVAvailable;
    bool _vertexAttribs1fvNVAvailable;
    bool _vertexAttribs1hvNVAvailable;
    bool _vertexAttribs1svNVAvailable;
    bool _vertexAttribs2dvNVAvailable;
    bool _vertexAttribs2fvNVAvailable;
    bool _vertexAttribs2hvNVAvailable;
    bool _vertexAttribs2svNVAvailable;
    bool _vertexAttribs3dvNVAvailable;
    bool _vertexAttribs3fvNVAvailable;
    bool _vertexAttribs3hvNVAvailable;
    bool _vertexAttribs3svNVAvailable;
    bool _vertexAttribs4dvNVAvailable;
    bool _vertexAttribs4fvNVAvailable;
    bool _vertexAttribs4hvNVAvailable;
    bool _vertexAttribs4svNVAvailable;
    bool _vertexAttribs4ubvNVAvailable;
    bool _vertexBindingDivisorAvailable;
    bool _vertexBlendARBAvailable;
    bool _vertexBlendEnvfATIAvailable;
    bool _vertexBlendEnviATIAvailable;
    bool _vertexFormatNVAvailable;
    bool _vertexP2uiAvailable;
    bool _vertexP2uivAvailable;
    bool _vertexP3uiAvailable;
    bool _vertexP3uivAvailable;
    bool _vertexP4uiAvailable;
    bool _vertexP4uivAvailable;
    bool _vertexPointerAvailable;
    bool _vertexPointerEXTAvailable;
    bool _vertexPointerListIBMAvailable;
    bool _vertexPointervINTELAvailable;
    bool _vertexStream1dATIAvailable;
    bool _vertexStream1dvATIAvailable;
    bool _vertexStream1fATIAvailable;
    bool _vertexStream1fvATIAvailable;
    bool _vertexStream1iATIAvailable;
    bool _vertexStream1ivATIAvailable;
    bool _vertexStream1sATIAvailable;
    bool _vertexStream1svATIAvailable;
    bool _vertexStream2dATIAvailable;
    bool _vertexStream2dvATIAvailable;
    bool _vertexStream2fATIAvailable;
    bool _vertexStream2fvATIAvailable;
    bool _vertexStream2iATIAvailable;
    bool _vertexStream2ivATIAvailable;
    bool _vertexStream2sATIAvailable;
    bool _vertexStream2svATIAvailable;
    bool _vertexStream3dATIAvailable;
    bool _vertexStream3dvATIAvailable;
    bool _vertexStream3fATIAvailable;
    bool _vertexStream3fvATIAvailable;
    bool _vertexStream3iATIAvailable;
    bool _vertexStream3ivATIAvailable;
    bool _vertexStream3sATIAvailable;
    bool _vertexStream3svATIAvailable;
    bool _vertexStream4dATIAvailable;
    bool _vertexStream4dvATIAvailable;
    bool _vertexStream4fATIAvailable;
    bool _vertexStream4fvATIAvailable;
    bool _vertexStream4iATIAvailable;
    bool _vertexStream4ivATIAvailable;
    bool _vertexStream4sATIAvailable;
    bool _vertexStream4svATIAvailable;
    bool _vertexWeightfEXTAvailable;
    bool _vertexWeightfvEXTAvailable;
    bool _vertexWeighthNVAvailable;
    bool _vertexWeighthvNVAvailable;
    bool _vertexWeightPointerEXTAvailable;
    bool _videoCaptureNVAvailable;
    bool _videoCaptureStreamParameterdvNVAvailable;
    bool _videoCaptureStreamParameterfvNVAvailable;
    bool _videoCaptureStreamParameterivNVAvailable;
    bool _viewportAvailable;
    bool _viewportArrayvAvailable;
    bool _viewportArrayvNVAvailable;
    bool _viewportArrayvOESAvailable;
    bool _viewportIndexedfAvailable;
    bool _viewportIndexedfNVAvailable;
    bool _viewportIndexedfOESAvailable;
    bool _viewportIndexedfvAvailable;
    bool _viewportIndexedfvNVAvailable;
    bool _viewportIndexedfvOESAvailable;
    bool _viewportPositionWScaleNVAvailable;
    bool _viewportSwizzleNVAvailable;
    bool _waitSemaphoreEXTAvailable;
    bool _waitSemaphoreui64NVXAvailable;
    bool _waitSyncAvailable;
    bool _waitSyncAPPLEAvailable;
    bool _waitVkSemaphoreNVAvailable;
    bool _weightbvARBAvailable;
    bool _weightdvARBAvailable;
    bool _weightfvARBAvailable;
    bool _weightivARBAvailable;
    bool _weightPathsNVAvailable;
    bool _weightPointerARBAvailable;
    bool _weightPointerOESAvailable;
    bool _weightsvARBAvailable;
    bool _weightubvARBAvailable;
    bool _weightuivARBAvailable;
    bool _weightusvARBAvailable;
    bool _windowPos2dAvailable;
    bool _windowPos2dARBAvailable;
    bool _windowPos2dMESAAvailable;
    bool _windowPos2dvAvailable;
    bool _windowPos2dvARBAvailable;
    bool _windowPos2dvMESAAvailable;
    bool _windowPos2fAvailable;
    bool _windowPos2fARBAvailable;
    bool _windowPos2fMESAAvailable;
    bool _windowPos2fvAvailable;
    bool _windowPos2fvARBAvailable;
    bool _windowPos2fvMESAAvailable;
    bool _windowPos2iAvailable;
    bool _windowPos2iARBAvailable;
    bool _windowPos2iMESAAvailable;
    bool _windowPos2ivAvailable;
    bool _windowPos2ivARBAvailable;
    bool _windowPos2ivMESAAvailable;
    bool _windowPos2sAvailable;
    bool _windowPos2sARBAvailable;
    bool _windowPos2sMESAAvailable;
    bool _windowPos2svAvailable;
    bool _windowPos2svARBAvailable;
    bool _windowPos2svMESAAvailable;
    bool _windowPos3dAvailable;
    bool _windowPos3dARBAvailable;
    bool _windowPos3dMESAAvailable;
    bool _windowPos3dvAvailable;
    bool _windowPos3dvARBAvailable;
    bool _windowPos3dvMESAAvailable;
    bool _windowPos3fAvailable;
    bool _windowPos3fARBAvailable;
    bool _windowPos3fMESAAvailable;
    bool _windowPos3fvAvailable;
    bool _windowPos3fvARBAvailable;
    bool _windowPos3fvMESAAvailable;
    bool _windowPos3iAvailable;
    bool _windowPos3iARBAvailable;
    bool _windowPos3iMESAAvailable;
    bool _windowPos3ivAvailable;
    bool _windowPos3ivARBAvailable;
    bool _windowPos3ivMESAAvailable;
    bool _windowPos3sAvailable;
    bool _windowPos3sARBAvailable;
    bool _windowPos3sMESAAvailable;
    bool _windowPos3svAvailable;
    bool _windowPos3svARBAvailable;
    bool _windowPos3svMESAAvailable;
    bool _windowPos4dMESAAvailable;
    bool _windowPos4dvMESAAvailable;
    bool _windowPos4fMESAAvailable;
    bool _windowPos4fvMESAAvailable;
    bool _windowPos4iMESAAvailable;
    bool _windowPos4ivMESAAvailable;
    bool _windowPos4sMESAAvailable;
    bool _windowPos4svMESAAvailable;
    bool _windowRectanglesEXTAvailable;
    bool _writeMaskEXTAvailable;
    boom::__OpenGLImpl* _impl;
    void* _getProcAddress(char const*);
    void _current() const;
    void _bootstrap_CompatibilityProfile_32();
    void _bootstrap_CompatibilityProfile_33();
    void _bootstrap_CompatibilityProfile_40();
    void _bootstrap_CompatibilityProfile_41();
    void _bootstrap_CompatibilityProfile_42();
    void _bootstrap_CompatibilityProfile_43();
    void _bootstrap_CompatibilityProfile_44();
    void _bootstrap_CompatibilityProfile_45();
    void _bootstrap_CompatibilityProfile_46();
    void _bootstrap_CoreProfile_32();
    void _bootstrap_CoreProfile_33();
    void _bootstrap_CoreProfile_40();
    void _bootstrap_CoreProfile_41();
    void _bootstrap_CoreProfile_42();
    void _bootstrap_CoreProfile_43();
    void _bootstrap_CoreProfile_44();
    void _bootstrap_CoreProfile_45();
    void _bootstrap_CoreProfile_46();
    void _bootstrap_ES_10();
    void _bootstrap_ES_20();
    void _bootstrap_ES_30();
    void _bootstrap_ES_31();
    void _bootstrap_ES_32();
    void _implInit(boom::OpenGLOptions const&);
    void _implDone();
    void* _implGetProcAddress(char const*);
    void _implSwap() const;
    void _implCurrent() const;
};

auto constexpr kOpenGLTrue = 1;
auto constexpr kOpenGLFalse = 0;
auto constexpr kOpenGL2Bytes = 0x1407;
auto constexpr kOpenGL2D = 0x0600;
auto constexpr kOpenGL3Bytes = 0x1408;
auto constexpr kOpenGL3D = 0x0601;
auto constexpr kOpenGL3DColor = 0x0602;
auto constexpr kOpenGL3DColorTexture = 0x0603;
auto constexpr kOpenGL4Bytes = 0x1409;
auto constexpr kOpenGL4dColorTexture = 0x0604;
auto constexpr kOpenGLAccum = 0x0100;
auto constexpr kOpenGLAccumAlphaBits = 0x0d5b;
auto constexpr kOpenGLAccumBlueBits = 0x0d5a;
auto constexpr kOpenGLAccumBufferBit = 0x00000200;
auto constexpr kOpenGLAccumClearValue = 0x0b80;
auto constexpr kOpenGLAccumGreenBits = 0x0d59;
auto constexpr kOpenGLAccumRedBits = 0x0d58;
auto constexpr kOpenGLActiveAtomicCounterBuffers = 0x92d9;
auto constexpr kOpenGLActiveAttributeMaxLength = 0x8b8a;
auto constexpr kOpenGLActiveAttributes = 0x8b89;
auto constexpr kOpenGLActiveProgram = 0x8259;
auto constexpr kOpenGLActiveResources = 0x92f5;
auto constexpr kOpenGLActiveSubroutineMaxLength = 0x8e48;
auto constexpr kOpenGLActiveSubroutineUniformLocations = 0x8e47;
auto constexpr kOpenGLActiveSubroutineUniformMaxLength = 0x8e49;
auto constexpr kOpenGLActiveSubroutineUniforms = 0x8de6;
auto constexpr kOpenGLActiveSubroutines = 0x8de5;
auto constexpr kOpenGLActiveTexture = 0x84e0;
auto constexpr kOpenGLActiveUniformBlockMaxNameLength = 0x8a35;
auto constexpr kOpenGLActiveUniformBlocks = 0x8a36;
auto constexpr kOpenGLActiveUniformMaxLength = 0x8b87;
auto constexpr kOpenGLActiveUniforms = 0x8b86;
auto constexpr kOpenGLActiveVariables = 0x9305;
auto constexpr kOpenGLAdd = 0x0104;
auto constexpr kOpenGLAddSigned = 0x8574;
auto constexpr kOpenGLAliasedLineWidthRange = 0x846e;
auto constexpr kOpenGLAliasedPointSizeRange = 0x846d;
auto constexpr kOpenGLAllAttribBits = 0xffffffff;
auto constexpr kOpenGLAllBarrierBits = 0xffffffff;
auto constexpr kOpenGLAllShaderBits = 0xffffffff;
auto constexpr kOpenGLAlpha = 0x1906;
auto constexpr kOpenGLAlpha12 = 0x803d;
auto constexpr kOpenGLAlpha16 = 0x803e;
auto constexpr kOpenGLAlpha4 = 0x803b;
auto constexpr kOpenGLAlpha8 = 0x803c;
auto constexpr kOpenGLAlphaBias = 0x0d1d;
auto constexpr kOpenGLAlphaBits = 0x0d55;
auto constexpr kOpenGLAlphaInteger = 0x8d97;
auto constexpr kOpenGLAlphaScale = 0x0d1c;
auto constexpr kOpenGLAlphaTest = 0x0bc0;
auto constexpr kOpenGLAlphaTestFunc = 0x0bc1;
auto constexpr kOpenGLAlphaTestRef = 0x0bc2;
auto constexpr kOpenGLAlreadySignaled = 0x911a;
auto constexpr kOpenGLAlways = 0x0207;
auto constexpr kOpenGLAmbient = 0x1200;
auto constexpr kOpenGLAmbientAndDiffuse = 0x1602;
auto constexpr kOpenGLAnd = 0x1501;
auto constexpr kOpenGLAndInverted = 0x1504;
auto constexpr kOpenGLAndReverse = 0x1502;
auto constexpr kOpenGLAnySamplesPassed = 0x8c2f;
auto constexpr kOpenGLAnySamplesPassedConservative = 0x8d6a;
auto constexpr kOpenGLArrayBuffer = 0x8892;
auto constexpr kOpenGLArrayBufferBinding = 0x8894;
auto constexpr kOpenGLArraySize = 0x92fb;
auto constexpr kOpenGLArrayStride = 0x92fe;
auto constexpr kOpenGLAtomicCounterBarrierBit = 0x00001000;
auto constexpr kOpenGLAtomicCounterBuffer = 0x92c0;
auto constexpr kOpenGLAtomicCounterBufferActiveAtomicCounterIndices = 0x92c6;
auto constexpr kOpenGLAtomicCounterBufferActiveAtomicCounters = 0x92c5;
auto constexpr kOpenGLAtomicCounterBufferBinding = 0x92c1;
auto constexpr kOpenGLAtomicCounterBufferDataSize = 0x92c4;
auto constexpr kOpenGLAtomicCounterBufferIndex = 0x9301;
auto constexpr kOpenGLAtomicCounterBufferReferencedByComputeShader = 0x90ed;
auto constexpr kOpenGLAtomicCounterBufferReferencedByFragmentShader = 0x92cb;
auto constexpr kOpenGLAtomicCounterBufferReferencedByGeometryShader = 0x92ca;
auto constexpr kOpenGLAtomicCounterBufferReferencedByTessControlShader = 0x92c8;
auto constexpr kOpenGLAtomicCounterBufferReferencedByTessEvaluationShader = 0x92c9;
auto constexpr kOpenGLAtomicCounterBufferReferencedByVertexShader = 0x92c7;
auto constexpr kOpenGLAtomicCounterBufferSize = 0x92c3;
auto constexpr kOpenGLAtomicCounterBufferStart = 0x92c2;
auto constexpr kOpenGLAttachedShaders = 0x8b85;
auto constexpr kOpenGLAttribStackDepth = 0x0bb0;
auto constexpr kOpenGLAutoGenerateMipmap = 0x8295;
auto constexpr kOpenGLAutoNormal = 0x0d80;
auto constexpr kOpenGLAux0 = 0x0409;
auto constexpr kOpenGLAux1 = 0x040a;
auto constexpr kOpenGLAux2 = 0x040b;
auto constexpr kOpenGLAux3 = 0x040c;
auto constexpr kOpenGLAuxBuffers = 0x0c00;
auto constexpr kOpenGLBGRA = 0x80e1;
auto constexpr kOpenGLBGRAInteger = 0x8d9b;
auto constexpr kOpenGLBack = 0x0405;
auto constexpr kOpenGLBackLeft = 0x0402;
auto constexpr kOpenGLBackRight = 0x0403;
auto constexpr kOpenGLBgr = 0x80e0;
auto constexpr kOpenGLBgrInteger = 0x8d9a;
auto constexpr kOpenGLBitmap = 0x1a00;
auto constexpr kOpenGLBitmapToken = 0x0704;
auto constexpr kOpenGLBlend = 0x0be2;
auto constexpr kOpenGLBlendColor = 0x8005;
auto constexpr kOpenGLBlendDst = 0x0be0;
auto constexpr kOpenGLBlendDstAlpha = 0x80ca;
auto constexpr kOpenGLBlendDstRgb = 0x80c8;
auto constexpr kOpenGLBlendEquation = 0x8009;
auto constexpr kOpenGLBlendEquationAlpha = 0x883d;
auto constexpr kOpenGLBlendEquationRgb = 0x8009;
auto constexpr kOpenGLBlendSrc = 0x0be1;
auto constexpr kOpenGLBlendSrcAlpha = 0x80cb;
auto constexpr kOpenGLBlendSrcRgb = 0x80c9;
auto constexpr kOpenGLBlockIndex = 0x92fd;
auto constexpr kOpenGLBlue = 0x1905;
auto constexpr kOpenGLBlueBias = 0x0d1b;
auto constexpr kOpenGLBlueBits = 0x0d54;
auto constexpr kOpenGLBlueInteger = 0x8d96;
auto constexpr kOpenGLBlueScale = 0x0d1a;
auto constexpr kOpenGLBool = 0x8b56;
auto constexpr kOpenGLBoolVec2 = 0x8b57;
auto constexpr kOpenGLBoolVec3 = 0x8b58;
auto constexpr kOpenGLBoolVec4 = 0x8b59;
auto constexpr kOpenGLBuffer = 0x82e0;
auto constexpr kOpenGLBufferAccess = 0x88bb;
auto constexpr kOpenGLBufferAccessFlags = 0x911f;
auto constexpr kOpenGLBufferBinding = 0x9302;
auto constexpr kOpenGLBufferDataSize = 0x9303;
auto constexpr kOpenGLBufferImmutableStorage = 0x821f;
auto constexpr kOpenGLBufferMapLength = 0x9120;
auto constexpr kOpenGLBufferMapOffset = 0x9121;
auto constexpr kOpenGLBufferMapPointer = 0x88bd;
auto constexpr kOpenGLBufferMapped = 0x88bc;
auto constexpr kOpenGLBufferSize = 0x8764;
auto constexpr kOpenGLBufferStorageFlags = 0x8220;
auto constexpr kOpenGLBufferUpdateBarrierBit = 0x00000200;
auto constexpr kOpenGLBufferUsage = 0x8765;
auto constexpr kOpenGLBufferVariable = 0x92e5;
auto constexpr kOpenGLByte = 0x1400;
auto constexpr kOpenGLC3fV3f = 0x2a24;
auto constexpr kOpenGLC4fN3fV3f = 0x2a26;
auto constexpr kOpenGLC4ubV2f = 0x2a22;
auto constexpr kOpenGLC4ubV3f = 0x2a23;
auto constexpr kOpenGLCaveatSupport = 0x82b8;
auto constexpr kOpenGLCcw = 0x0901;
auto constexpr kOpenGLClamp = 0x2900;
auto constexpr kOpenGLClampFragmentColor = 0x891b;
auto constexpr kOpenGLClampReadColor = 0x891c;
auto constexpr kOpenGLClampToBorder = 0x812d;
auto constexpr kOpenGLClampToEdge = 0x812f;
auto constexpr kOpenGLClampVertexColor = 0x891a;
auto constexpr kOpenGLClear = 0x1500;
auto constexpr kOpenGLClearBuffer = 0x82b4;
auto constexpr kOpenGLClearTexture = 0x9365;
auto constexpr kOpenGLClientActiveTexture = 0x84e1;
auto constexpr kOpenGLClientAllAttribBits = 0xffffffff;
auto constexpr kOpenGLClientAttribStackDepth = 0x0bb1;
auto constexpr kOpenGLClientMappedBufferBarrierBit = 0x00004000;
auto constexpr kOpenGLClientPixelStoreBit = 0x00000001;
auto constexpr kOpenGLClientStorageBit = 0x0200;
auto constexpr kOpenGLClientVertexArrayBit = 0x00000002;
auto constexpr kOpenGLClipDepthMode = 0x935d;
auto constexpr kOpenGLClipDistance0 = 0x3000;
auto constexpr kOpenGLClipDistance1 = 0x3001;
auto constexpr kOpenGLClipDistance2 = 0x3002;
auto constexpr kOpenGLClipDistance3 = 0x3003;
auto constexpr kOpenGLClipDistance4 = 0x3004;
auto constexpr kOpenGLClipDistance5 = 0x3005;
auto constexpr kOpenGLClipDistance6 = 0x3006;
auto constexpr kOpenGLClipDistance7 = 0x3007;
auto constexpr kOpenGLClipOrigin = 0x935c;
auto constexpr kOpenGLClipPlane0 = 0x3000;
auto constexpr kOpenGLClipPlane1 = 0x3001;
auto constexpr kOpenGLClipPlane2 = 0x3002;
auto constexpr kOpenGLClipPlane3 = 0x3003;
auto constexpr kOpenGLClipPlane4 = 0x3004;
auto constexpr kOpenGLClipPlane5 = 0x3005;
auto constexpr kOpenGLClippingInputPrimitives = 0x82f6;
auto constexpr kOpenGLClippingOutputPrimitives = 0x82f7;
auto constexpr kOpenGLCoeff = 0x0a00;
auto constexpr kOpenGLColor = 0x1800;
auto constexpr kOpenGLColorArray = 0x8076;
auto constexpr kOpenGLColorArrayBufferBinding = 0x8898;
auto constexpr kOpenGLColorArrayPointer = 0x8090;
auto constexpr kOpenGLColorArraySize = 0x8081;
auto constexpr kOpenGLColorArrayStride = 0x8083;
auto constexpr kOpenGLColorArrayType = 0x8082;
auto constexpr kOpenGLColorAttachment0 = 0x8ce0;
auto constexpr kOpenGLColorAttachment1 = 0x8ce1;
auto constexpr kOpenGLColorAttachment10 = 0x8cea;
auto constexpr kOpenGLColorAttachment11 = 0x8ceb;
auto constexpr kOpenGLColorAttachment12 = 0x8cec;
auto constexpr kOpenGLColorAttachment13 = 0x8ced;
auto constexpr kOpenGLColorAttachment14 = 0x8cee;
auto constexpr kOpenGLColorAttachment15 = 0x8cef;
auto constexpr kOpenGLColorAttachment16 = 0x8cf0;
auto constexpr kOpenGLColorAttachment17 = 0x8cf1;
auto constexpr kOpenGLColorAttachment18 = 0x8cf2;
auto constexpr kOpenGLColorAttachment19 = 0x8cf3;
auto constexpr kOpenGLColorAttachment2 = 0x8ce2;
auto constexpr kOpenGLColorAttachment20 = 0x8cf4;
auto constexpr kOpenGLColorAttachment21 = 0x8cf5;
auto constexpr kOpenGLColorAttachment22 = 0x8cf6;
auto constexpr kOpenGLColorAttachment23 = 0x8cf7;
auto constexpr kOpenGLColorAttachment24 = 0x8cf8;
auto constexpr kOpenGLColorAttachment25 = 0x8cf9;
auto constexpr kOpenGLColorAttachment26 = 0x8cfa;
auto constexpr kOpenGLColorAttachment27 = 0x8cfb;
auto constexpr kOpenGLColorAttachment28 = 0x8cfc;
auto constexpr kOpenGLColorAttachment29 = 0x8cfd;
auto constexpr kOpenGLColorAttachment3 = 0x8ce3;
auto constexpr kOpenGLColorAttachment30 = 0x8cfe;
auto constexpr kOpenGLColorAttachment31 = 0x8cff;
auto constexpr kOpenGLColorAttachment4 = 0x8ce4;
auto constexpr kOpenGLColorAttachment5 = 0x8ce5;
auto constexpr kOpenGLColorAttachment6 = 0x8ce6;
auto constexpr kOpenGLColorAttachment7 = 0x8ce7;
auto constexpr kOpenGLColorAttachment8 = 0x8ce8;
auto constexpr kOpenGLColorAttachment9 = 0x8ce9;
auto constexpr kOpenGLColorBufferBit = 0x00004000;
auto constexpr kOpenGLColorClearValue = 0x0c22;
auto constexpr kOpenGLColorComponents = 0x8283;
auto constexpr kOpenGLColorEncoding = 0x8296;
auto constexpr kOpenGLColorIndex = 0x1900;
auto constexpr kOpenGLColorIndexes = 0x1603;
auto constexpr kOpenGLColorLogicOp = 0x0bf2;
auto constexpr kOpenGLColorMaterial = 0x0b57;
auto constexpr kOpenGLColorMaterialFace = 0x0b55;
auto constexpr kOpenGLColorMaterialParameter = 0x0b56;
auto constexpr kOpenGLColorRenderable = 0x8286;
auto constexpr kOpenGLColorSum = 0x8458;
auto constexpr kOpenGLColorTable = 0x80d0;
auto constexpr kOpenGLColorWriteMask = 0x0c23;
auto constexpr kOpenGLColorburn = 0x929a;
auto constexpr kOpenGLColordodge = 0x9299;
auto constexpr kOpenGLCombine = 0x8570;
auto constexpr kOpenGLCombineAlpha = 0x8572;
auto constexpr kOpenGLCombineRgb = 0x8571;
auto constexpr kOpenGLCommandBarrierBit = 0x00000040;
auto constexpr kOpenGLCompareRToTexture = 0x884e;
auto constexpr kOpenGLCompareRefToTexture = 0x884e;
auto constexpr kOpenGLCompatibleSubroutines = 0x8e4b;
auto constexpr kOpenGLCompile = 0x1300;
auto constexpr kOpenGLCompileAndExecute = 0x1301;
auto constexpr kOpenGLCompileStatus = 0x8b81;
auto constexpr kOpenGLCompressedAlpha = 0x84e9;
auto constexpr kOpenGLCompressedIntensity = 0x84ec;
auto constexpr kOpenGLCompressedLuminance = 0x84ea;
auto constexpr kOpenGLCompressedLuminanceAlpha = 0x84eb;
auto constexpr kOpenGLCompressedR11Eac = 0x9270;
auto constexpr kOpenGLCompressedRGBA = 0x84ee;
auto constexpr kOpenGLCompressedRGBA8Etc2Eac = 0x9278;
auto constexpr kOpenGLCompressedRGBAAstc10x10 = 0x93bb;
auto constexpr kOpenGLCompressedRGBAAstc10x5 = 0x93b8;
auto constexpr kOpenGLCompressedRGBAAstc10x6 = 0x93b9;
auto constexpr kOpenGLCompressedRGBAAstc10x8 = 0x93ba;
auto constexpr kOpenGLCompressedRGBAAstc12x10 = 0x93bc;
auto constexpr kOpenGLCompressedRGBAAstc12x12 = 0x93bd;
auto constexpr kOpenGLCompressedRGBAAstc4x4 = 0x93b0;
auto constexpr kOpenGLCompressedRGBAAstc5x4 = 0x93b1;
auto constexpr kOpenGLCompressedRGBAAstc5x5 = 0x93b2;
auto constexpr kOpenGLCompressedRGBAAstc6x5 = 0x93b3;
auto constexpr kOpenGLCompressedRGBAAstc6x6 = 0x93b4;
auto constexpr kOpenGLCompressedRGBAAstc8x5 = 0x93b5;
auto constexpr kOpenGLCompressedRGBAAstc8x6 = 0x93b6;
auto constexpr kOpenGLCompressedRGBAAstc8x8 = 0x93b7;
auto constexpr kOpenGLCompressedRGBABptcUnorm = 0x8e8c;
auto constexpr kOpenGLCompressedRed = 0x8225;
auto constexpr kOpenGLCompressedRedRgtc1 = 0x8dbb;
auto constexpr kOpenGLCompressedRg = 0x8226;
auto constexpr kOpenGLCompressedRg11Eac = 0x9272;
auto constexpr kOpenGLCompressedRgRgtc2 = 0x8dbd;
auto constexpr kOpenGLCompressedRgb = 0x84ed;
auto constexpr kOpenGLCompressedRgb8Etc2 = 0x9274;
auto constexpr kOpenGLCompressedRgb8PunchthroughAlpha1Etc2 = 0x9276;
auto constexpr kOpenGLCompressedRgbBptcSignedFloat = 0x8e8e;
auto constexpr kOpenGLCompressedRgbBptcUnsignedFloat = 0x8e8f;
auto constexpr kOpenGLCompressedSRGB = 0x8c48;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc10x10 = 0x93db;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc10x5 = 0x93d8;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc10x6 = 0x93d9;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc10x8 = 0x93da;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc12x10 = 0x93dc;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc12x12 = 0x93dd;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc4x4 = 0x93d0;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc5x4 = 0x93d1;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc5x5 = 0x93d2;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc6x5 = 0x93d3;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc6x6 = 0x93d4;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc8x5 = 0x93d5;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc8x6 = 0x93d6;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc8x8 = 0x93d7;
auto constexpr kOpenGLCompressedSRGB8Alpha8Etc2Eac = 0x9279;
auto constexpr kOpenGLCompressedSRGB8Etc2 = 0x9275;
auto constexpr kOpenGLCompressedSRGB8PunchthroughAlpha1Etc2 = 0x9277;
auto constexpr kOpenGLCompressedSRGBAlpha = 0x8c49;
auto constexpr kOpenGLCompressedSRGBAlphaBptcUnorm = 0x8e8d;
auto constexpr kOpenGLCompressedSignedR11Eac = 0x9271;
auto constexpr kOpenGLCompressedSignedRedRgtc1 = 0x8dbc;
auto constexpr kOpenGLCompressedSignedRg11Eac = 0x9273;
auto constexpr kOpenGLCompressedSignedRgRgtc2 = 0x8dbe;
auto constexpr kOpenGLCompressedSluminance = 0x8c4a;
auto constexpr kOpenGLCompressedSluminanceAlpha = 0x8c4b;
auto constexpr kOpenGLCompressedTextureFormats = 0x86a3;
auto constexpr kOpenGLComputeShader = 0x91b9;
auto constexpr kOpenGLComputeShaderBit = 0x00000020;
auto constexpr kOpenGLComputeShaderInvocations = 0x82f5;
auto constexpr kOpenGLComputeSubroutine = 0x92ed;
auto constexpr kOpenGLComputeSubroutineUniform = 0x92f3;
auto constexpr kOpenGLComputeTexture = 0x82a0;
auto constexpr kOpenGLComputeWorkGroupSize = 0x8267;
auto constexpr kOpenGLConditionSatisfied = 0x911c;
auto constexpr kOpenGLConstant = 0x8576;
auto constexpr kOpenGLConstantAlpha = 0x8003;
auto constexpr kOpenGLConstantAttenuation = 0x1207;
auto constexpr kOpenGLConstantColor = 0x8001;
auto constexpr kOpenGLContextCompatibilityProfileBit = 0x00000002;
auto constexpr kOpenGLContextCoreProfileBit = 0x00000001;
auto constexpr kOpenGLContextFlagDebugBit = 0x00000002;
auto constexpr kOpenGLContextFlagForwardCompatibleBit = 0x00000001;
auto constexpr kOpenGLContextFlagNoErrorBit = 0x00000008;
auto constexpr kOpenGLContextFlagRobustAccessBit = 0x00000004;
auto constexpr kOpenGLContextFlags = 0x821e;
auto constexpr kOpenGLContextLost = 0x0507;
auto constexpr kOpenGLContextProfileMask = 0x9126;
auto constexpr kOpenGLContextReleaseBehavior = 0x82fb;
auto constexpr kOpenGLContextReleaseBehaviorFlush = 0x82fc;
auto constexpr kOpenGLContextRobustAccess = 0x90f3;
auto constexpr kOpenGLConvolution1D = 0x8010;
auto constexpr kOpenGLConvolution2D = 0x8011;
auto constexpr kOpenGLCoordReplace = 0x8862;
auto constexpr kOpenGLCopy = 0x1503;
auto constexpr kOpenGLCopyInverted = 0x150c;
auto constexpr kOpenGLCopyPixelToken = 0x0706;
auto constexpr kOpenGLCopyReadBuffer = 0x8f36;
auto constexpr kOpenGLCopyReadBufferBinding = 0x8f36;
auto constexpr kOpenGLCopyWriteBuffer = 0x8f37;
auto constexpr kOpenGLCopyWriteBufferBinding = 0x8f37;
auto constexpr kOpenGLCullFace = 0x0b44;
auto constexpr kOpenGLCullFaceMode = 0x0b45;
auto constexpr kOpenGLCurrentBit = 0x00000001;
auto constexpr kOpenGLCurrentColor = 0x0b00;
auto constexpr kOpenGLCurrentFogCoord = 0x8453;
auto constexpr kOpenGLCurrentFogCoordinate = 0x8453;
auto constexpr kOpenGLCurrentIndex = 0x0b01;
auto constexpr kOpenGLCurrentNormal = 0x0b02;
auto constexpr kOpenGLCurrentProgram = 0x8b8d;
auto constexpr kOpenGLCurrentQuery = 0x8865;
auto constexpr kOpenGLCurrentRasterColor = 0x0b04;
auto constexpr kOpenGLCurrentRasterDistance = 0x0b09;
auto constexpr kOpenGLCurrentRasterIndex = 0x0b05;
auto constexpr kOpenGLCurrentRasterPosition = 0x0b07;
auto constexpr kOpenGLCurrentRasterPositionValid = 0x0b08;
auto constexpr kOpenGLCurrentRasterSecondaryColor = 0x845f;
auto constexpr kOpenGLCurrentRasterTextureCoords = 0x0b06;
auto constexpr kOpenGLCurrentSecondaryColor = 0x8459;
auto constexpr kOpenGLCurrentTextureCoords = 0x0b03;
auto constexpr kOpenGLCurrentVertexAttrib = 0x8626;
auto constexpr kOpenGLCw = 0x0900;
auto constexpr kOpenGLDarken = 0x9297;
auto constexpr kOpenGLDebugCallbackFunction = 0x8244;
auto constexpr kOpenGLDebugCallbackUserParam = 0x8245;
auto constexpr kOpenGLDebugGroupStackDepth = 0x826d;
auto constexpr kOpenGLDebugLoggedMessages = 0x9145;
auto constexpr kOpenGLDebugNextLoggedMessageLength = 0x8243;
auto constexpr kOpenGLDebugOutput = 0x92e0;
auto constexpr kOpenGLDebugOutputSynchronous = 0x8242;
auto constexpr kOpenGLDebugSeverityHigh = 0x9146;
auto constexpr kOpenGLDebugSeverityLow = 0x9148;
auto constexpr kOpenGLDebugSeverityMedium = 0x9147;
auto constexpr kOpenGLDebugSeverityNotification = 0x826b;
auto constexpr kOpenGLDebugSourceApi = 0x8246;
auto constexpr kOpenGLDebugSourceApplication = 0x824a;
auto constexpr kOpenGLDebugSourceOther = 0x824b;
auto constexpr kOpenGLDebugSourceShaderCompiler = 0x8248;
auto constexpr kOpenGLDebugSourceThirdParty = 0x8249;
auto constexpr kOpenGLDebugSourceWindowSystem = 0x8247;
auto constexpr kOpenGLDebugTypeDeprecatedBehavior = 0x824d;
auto constexpr kOpenGLDebugTypeError = 0x824c;
auto constexpr kOpenGLDebugTypeMarker = 0x8268;
auto constexpr kOpenGLDebugTypeOther = 0x8251;
auto constexpr kOpenGLDebugTypePerformance = 0x8250;
auto constexpr kOpenGLDebugTypePopGroup = 0x826a;
auto constexpr kOpenGLDebugTypePortability = 0x824f;
auto constexpr kOpenGLDebugTypePushGroup = 0x8269;
auto constexpr kOpenGLDebugTypeUndefinedBehavior = 0x824e;
auto constexpr kOpenGLDecal = 0x2101;
auto constexpr kOpenGLDecr = 0x1e03;
auto constexpr kOpenGLDecrWrap = 0x8508;
auto constexpr kOpenGLDeleteStatus = 0x8b80;
auto constexpr kOpenGLDepth = 0x1801;
auto constexpr kOpenGLDepth24Stencil8 = 0x88f0;
auto constexpr kOpenGLDepth32fStencil8 = 0x8cad;
auto constexpr kOpenGLDepthAttachment = 0x8d00;
auto constexpr kOpenGLDepthBias = 0x0d1f;
auto constexpr kOpenGLDepthBits = 0x0d56;
auto constexpr kOpenGLDepthBufferBit = 0x00000100;
auto constexpr kOpenGLDepthClamp = 0x864f;
auto constexpr kOpenGLDepthClearValue = 0x0b73;
auto constexpr kOpenGLDepthComponent = 0x1902;
auto constexpr kOpenGLDepthComponent16 = 0x81a5;
auto constexpr kOpenGLDepthComponent24 = 0x81a6;
auto constexpr kOpenGLDepthComponent32 = 0x81a7;
auto constexpr kOpenGLDepthComponent32f = 0x8cac;
auto constexpr kOpenGLDepthComponents = 0x8284;
auto constexpr kOpenGLDepthFunc = 0x0b74;
auto constexpr kOpenGLDepthRange = 0x0b70;
auto constexpr kOpenGLDepthRenderable = 0x8287;
auto constexpr kOpenGLDepthScale = 0x0d1e;
auto constexpr kOpenGLDepthStencil = 0x84f9;
auto constexpr kOpenGLDepthStencilAttachment = 0x821a;
auto constexpr kOpenGLDepthStencilTextureMode = 0x90ea;
auto constexpr kOpenGLDepthTest = 0x0b71;
auto constexpr kOpenGLDepthTextureMode = 0x884b;
auto constexpr kOpenGLDepthWriteMask = 0x0b72;
auto constexpr kOpenGLDifference = 0x929e;
auto constexpr kOpenGLDiffuse = 0x1201;
auto constexpr kOpenGLDispatchIndirectBuffer = 0x90ee;
auto constexpr kOpenGLDispatchIndirectBufferBinding = 0x90ef;
auto constexpr kOpenGLDisplayList = 0x82e7;
auto constexpr kOpenGLDither = 0x0bd0;
auto constexpr kOpenGLDomain = 0x0a02;
auto constexpr kOpenGLDontCare = 0x1100;
auto constexpr kOpenGLDot3RGBA = 0x86af;
auto constexpr kOpenGLDot3Rgb = 0x86ae;
auto constexpr kOpenGLDouble = 0x140a;
auto constexpr kOpenGLDoubleMat2 = 0x8f46;
auto constexpr kOpenGLDoubleMat2x3 = 0x8f49;
auto constexpr kOpenGLDoubleMat2x4 = 0x8f4a;
auto constexpr kOpenGLDoubleMat3 = 0x8f47;
auto constexpr kOpenGLDoubleMat3x2 = 0x8f4b;
auto constexpr kOpenGLDoubleMat3x4 = 0x8f4c;
auto constexpr kOpenGLDoubleMat4 = 0x8f48;
auto constexpr kOpenGLDoubleMat4x2 = 0x8f4d;
auto constexpr kOpenGLDoubleMat4x3 = 0x8f4e;
auto constexpr kOpenGLDoubleVec2 = 0x8ffc;
auto constexpr kOpenGLDoubleVec3 = 0x8ffd;
auto constexpr kOpenGLDoubleVec4 = 0x8ffe;
auto constexpr kOpenGLDoublebuffer = 0x0c32;
auto constexpr kOpenGLDrawBuffer = 0x0c01;
auto constexpr kOpenGLDrawBuffer0 = 0x8825;
auto constexpr kOpenGLDrawBuffer1 = 0x8826;
auto constexpr kOpenGLDrawBuffer10 = 0x882f;
auto constexpr kOpenGLDrawBuffer11 = 0x8830;
auto constexpr kOpenGLDrawBuffer12 = 0x8831;
auto constexpr kOpenGLDrawBuffer13 = 0x8832;
auto constexpr kOpenGLDrawBuffer14 = 0x8833;
auto constexpr kOpenGLDrawBuffer15 = 0x8834;
auto constexpr kOpenGLDrawBuffer2 = 0x8827;
auto constexpr kOpenGLDrawBuffer3 = 0x8828;
auto constexpr kOpenGLDrawBuffer4 = 0x8829;
auto constexpr kOpenGLDrawBuffer5 = 0x882a;
auto constexpr kOpenGLDrawBuffer6 = 0x882b;
auto constexpr kOpenGLDrawBuffer7 = 0x882c;
auto constexpr kOpenGLDrawBuffer8 = 0x882d;
auto constexpr kOpenGLDrawBuffer9 = 0x882e;
auto constexpr kOpenGLDrawFramebuffer = 0x8ca9;
auto constexpr kOpenGLDrawFramebufferBinding = 0x8ca6;
auto constexpr kOpenGLDrawIndirectBuffer = 0x8f3f;
auto constexpr kOpenGLDrawIndirectBufferBinding = 0x8f43;
auto constexpr kOpenGLDrawPixelToken = 0x0705;
auto constexpr kOpenGLDstAlpha = 0x0304;
auto constexpr kOpenGLDstColor = 0x0306;
auto constexpr kOpenGLDynamicCopy = 0x88ea;
auto constexpr kOpenGLDynamicDraw = 0x88e8;
auto constexpr kOpenGLDynamicRead = 0x88e9;
auto constexpr kOpenGLDynamicStorageBit = 0x0100;
auto constexpr kOpenGLEdgeFlag = 0x0b43;
auto constexpr kOpenGLEdgeFlagArray = 0x8079;
auto constexpr kOpenGLEdgeFlagArrayBufferBinding = 0x889b;
auto constexpr kOpenGLEdgeFlagArrayPointer = 0x8093;
auto constexpr kOpenGLEdgeFlagArrayStride = 0x808c;
auto constexpr kOpenGLElementArrayBarrierBit = 0x00000002;
auto constexpr kOpenGLElementArrayBuffer = 0x8893;
auto constexpr kOpenGLElementArrayBufferBinding = 0x8895;
auto constexpr kOpenGLEmission = 0x1600;
auto constexpr kOpenGLEnableBit = 0x00002000;
auto constexpr kOpenGLEqual = 0x0202;
auto constexpr kOpenGLEquiv = 0x1509;
auto constexpr kOpenGLEvalBit = 0x00010000;
auto constexpr kOpenGLExclusion = 0x92a0;
auto constexpr kOpenGLExp = 0x0800;
auto constexpr kOpenGLExp2 = 0x0801;
auto constexpr kOpenGLExtensions = 0x1f03;
auto constexpr kOpenGLEyeLinear = 0x2400;
auto constexpr kOpenGLEyePlane = 0x2502;
auto constexpr kOpenGLFastest = 0x1101;
auto constexpr kOpenGLFeedback = 0x1c01;
auto constexpr kOpenGLFeedbackBufferPointer = 0x0df0;
auto constexpr kOpenGLFeedbackBufferSize = 0x0df1;
auto constexpr kOpenGLFeedbackBufferType = 0x0df2;
auto constexpr kOpenGLFill = 0x1b02;
auto constexpr kOpenGLFilter = 0x829a;
auto constexpr kOpenGLFirstVertexConvention = 0x8e4d;
auto constexpr kOpenGLFixed = 0x140c;
auto constexpr kOpenGLFixedOnly = 0x891d;
auto constexpr kOpenGLFlat = 0x1d00;
auto constexpr kOpenGLFloat = 0x1406;
auto constexpr kOpenGLFloat32UnsignedInt248Rev = 0x8dad;
auto constexpr kOpenGLFloatMat2 = 0x8b5a;
auto constexpr kOpenGLFloatMat2x3 = 0x8b65;
auto constexpr kOpenGLFloatMat2x4 = 0x8b66;
auto constexpr kOpenGLFloatMat3 = 0x8b5b;
auto constexpr kOpenGLFloatMat3x2 = 0x8b67;
auto constexpr kOpenGLFloatMat3x4 = 0x8b68;
auto constexpr kOpenGLFloatMat4 = 0x8b5c;
auto constexpr kOpenGLFloatMat4x2 = 0x8b69;
auto constexpr kOpenGLFloatMat4x3 = 0x8b6a;
auto constexpr kOpenGLFloatVec2 = 0x8b50;
auto constexpr kOpenGLFloatVec3 = 0x8b51;
auto constexpr kOpenGLFloatVec4 = 0x8b52;
auto constexpr kOpenGLFog = 0x0b60;
auto constexpr kOpenGLFogBit = 0x00000080;
auto constexpr kOpenGLFogColor = 0x0b66;
auto constexpr kOpenGLFogCoord = 0x8451;
auto constexpr kOpenGLFogCoordArray = 0x8457;
auto constexpr kOpenGLFogCoordArrayBufferBinding = 0x889d;
auto constexpr kOpenGLFogCoordArrayPointer = 0x8456;
auto constexpr kOpenGLFogCoordArrayStride = 0x8455;
auto constexpr kOpenGLFogCoordArrayType = 0x8454;
auto constexpr kOpenGLFogCoordSrc = 0x8450;
auto constexpr kOpenGLFogCoordinate = 0x8451;
auto constexpr kOpenGLFogCoordinateArray = 0x8457;
auto constexpr kOpenGLFogCoordinateArrayBufferBinding = 0x889d;
auto constexpr kOpenGLFogCoordinateArrayPointer = 0x8456;
auto constexpr kOpenGLFogCoordinateArrayStride = 0x8455;
auto constexpr kOpenGLFogCoordinateArrayType = 0x8454;
auto constexpr kOpenGLFogCoordinateSource = 0x8450;
auto constexpr kOpenGLFogDensity = 0x0b62;
auto constexpr kOpenGLFogEnd = 0x0b64;
auto constexpr kOpenGLFogHint = 0x0c54;
auto constexpr kOpenGLFogIndex = 0x0b61;
auto constexpr kOpenGLFogMode = 0x0b65;
auto constexpr kOpenGLFogStart = 0x0b63;
auto constexpr kOpenGLFractionalEven = 0x8e7c;
auto constexpr kOpenGLFractionalOdd = 0x8e7b;
auto constexpr kOpenGLFragmentDepth = 0x8452;
auto constexpr kOpenGLFragmentInterpolationOffsetBits = 0x8e5d;
auto constexpr kOpenGLFragmentShader = 0x8b30;
auto constexpr kOpenGLFragmentShaderBit = 0x00000002;
auto constexpr kOpenGLFragmentShaderDerivativeHint = 0x8b8b;
auto constexpr kOpenGLFragmentShaderInvocations = 0x82f4;
auto constexpr kOpenGLFragmentSubroutine = 0x92ec;
auto constexpr kOpenGLFragmentSubroutineUniform = 0x92f2;
auto constexpr kOpenGLFragmentTexture = 0x829f;
auto constexpr kOpenGLFramebuffer = 0x8d40;
auto constexpr kOpenGLFramebufferAttachmentAlphaSize = 0x8215;
auto constexpr kOpenGLFramebufferAttachmentBlueSize = 0x8214;
auto constexpr kOpenGLFramebufferAttachmentColorEncoding = 0x8210;
auto constexpr kOpenGLFramebufferAttachmentComponentType = 0x8211;
auto constexpr kOpenGLFramebufferAttachmentDepthSize = 0x8216;
auto constexpr kOpenGLFramebufferAttachmentGreenSize = 0x8213;
auto constexpr kOpenGLFramebufferAttachmentLayered = 0x8da7;
auto constexpr kOpenGLFramebufferAttachmentObjectName = 0x8cd1;
auto constexpr kOpenGLFramebufferAttachmentObjectType = 0x8cd0;
auto constexpr kOpenGLFramebufferAttachmentRedSize = 0x8212;
auto constexpr kOpenGLFramebufferAttachmentStencilSize = 0x8217;
auto constexpr kOpenGLFramebufferAttachmentTextureCubeMapFace = 0x8cd3;
auto constexpr kOpenGLFramebufferAttachmentTextureLayer = 0x8cd4;
auto constexpr kOpenGLFramebufferAttachmentTextureLevel = 0x8cd2;
auto constexpr kOpenGLFramebufferBarrierBit = 0x00000400;
auto constexpr kOpenGLFramebufferBinding = 0x8ca6;
auto constexpr kOpenGLFramebufferBlend = 0x828b;
auto constexpr kOpenGLFramebufferComplete = 0x8cd5;
auto constexpr kOpenGLFramebufferDefault = 0x8218;
auto constexpr kOpenGLFramebufferDefaultFixedSampleLocations = 0x9314;
auto constexpr kOpenGLFramebufferDefaultHeight = 0x9311;
auto constexpr kOpenGLFramebufferDefaultLayers = 0x9312;
auto constexpr kOpenGLFramebufferDefaultSamples = 0x9313;
auto constexpr kOpenGLFramebufferDefaultWidth = 0x9310;
auto constexpr kOpenGLFramebufferIncompleteAttachment = 0x8cd6;
auto constexpr kOpenGLFramebufferIncompleteDimensions = 0x8cd9;
auto constexpr kOpenGLFramebufferIncompleteDrawBuffer = 0x8cdb;
auto constexpr kOpenGLFramebufferIncompleteLayerTargets = 0x8da8;
auto constexpr kOpenGLFramebufferIncompleteMissingAttachment = 0x8cd7;
auto constexpr kOpenGLFramebufferIncompleteMultisample = 0x8d56;
auto constexpr kOpenGLFramebufferIncompleteReadBuffer = 0x8cdc;
auto constexpr kOpenGLFramebufferRenderable = 0x8289;
auto constexpr kOpenGLFramebufferRenderableLayered = 0x828a;
auto constexpr kOpenGLFramebufferSRGB = 0x8db9;
auto constexpr kOpenGLFramebufferUndefined = 0x8219;
auto constexpr kOpenGLFramebufferUnsupported = 0x8cdd;
auto constexpr kOpenGLFront = 0x0404;
auto constexpr kOpenGLFrontAndBack = 0x0408;
auto constexpr kOpenGLFrontFace = 0x0b46;
auto constexpr kOpenGLFrontLeft = 0x0400;
auto constexpr kOpenGLFrontRight = 0x0401;
auto constexpr kOpenGLFullSupport = 0x82b7;
auto constexpr kOpenGLFuncAdd = 0x8006;
auto constexpr kOpenGLFuncReverseSubtract = 0x800b;
auto constexpr kOpenGLFuncSubtract = 0x800a;
auto constexpr kOpenGLGenerateMipmap = 0x8191;
auto constexpr kOpenGLGenerateMipmapHint = 0x8192;
auto constexpr kOpenGLGeometryInputType = 0x8917;
auto constexpr kOpenGLGeometryOutputType = 0x8918;
auto constexpr kOpenGLGeometryShader = 0x8dd9;
auto constexpr kOpenGLGeometryShaderBit = 0x00000004;
auto constexpr kOpenGLGeometryShaderInvocations = 0x887f;
auto constexpr kOpenGLGeometryShaderPrimitivesEmitted = 0x82f3;
auto constexpr kOpenGLGeometrySubroutine = 0x92eb;
auto constexpr kOpenGLGeometrySubroutineUniform = 0x92f1;
auto constexpr kOpenGLGeometryTexture = 0x829e;
auto constexpr kOpenGLGeometryVerticesOut = 0x8916;
auto constexpr kOpenGLGequal = 0x0206;
auto constexpr kOpenGLGetTextureImageFormat = 0x8291;
auto constexpr kOpenGLGetTextureImageType = 0x8292;
auto constexpr kOpenGLGreater = 0x0204;
auto constexpr kOpenGLGreen = 0x1904;
auto constexpr kOpenGLGreenBias = 0x0d19;
auto constexpr kOpenGLGreenBits = 0x0d53;
auto constexpr kOpenGLGreenInteger = 0x8d95;
auto constexpr kOpenGLGreenScale = 0x0d18;
auto constexpr kOpenGLGuiltyContextReset = 0x8253;
auto constexpr kOpenGLHalfFloat = 0x140b;
auto constexpr kOpenGLHardlight = 0x929b;
auto constexpr kOpenGLHighFloat = 0x8df2;
auto constexpr kOpenGLHighInt = 0x8df5;
auto constexpr kOpenGLHintBit = 0x00008000;
auto constexpr kOpenGLHistogram = 0x8024;
auto constexpr kOpenGLHslColor = 0x92af;
auto constexpr kOpenGLHslHue = 0x92ad;
auto constexpr kOpenGLHslLuminosity = 0x92b0;
auto constexpr kOpenGLHslSaturation = 0x92ae;
auto constexpr kOpenGLImage1D = 0x904c;
auto constexpr kOpenGLImage1DArray = 0x9052;
auto constexpr kOpenGLImage2D = 0x904d;
auto constexpr kOpenGLImage2DArray = 0x9053;
auto constexpr kOpenGLImage2DMultisample = 0x9055;
auto constexpr kOpenGLImage2DMultisampleArray = 0x9056;
auto constexpr kOpenGLImage2DRect = 0x904f;
auto constexpr kOpenGLImage3D = 0x904e;
auto constexpr kOpenGLImageBindingAccess = 0x8f3e;
auto constexpr kOpenGLImageBindingFormat = 0x906e;
auto constexpr kOpenGLImageBindingLayer = 0x8f3d;
auto constexpr kOpenGLImageBindingLayered = 0x8f3c;
auto constexpr kOpenGLImageBindingLevel = 0x8f3b;
auto constexpr kOpenGLImageBindingName = 0x8f3a;
auto constexpr kOpenGLImageBuffer = 0x9051;
auto constexpr kOpenGLImageClass1010102 = 0x82c3;
auto constexpr kOpenGLImageClass111110 = 0x82c2;
auto constexpr kOpenGLImageClass1X16 = 0x82be;
auto constexpr kOpenGLImageClass1X32 = 0x82bb;
auto constexpr kOpenGLImageClass1X8 = 0x82c1;
auto constexpr kOpenGLImageClass2X16 = 0x82bd;
auto constexpr kOpenGLImageClass2X32 = 0x82ba;
auto constexpr kOpenGLImageClass2X8 = 0x82c0;
auto constexpr kOpenGLImageClass4X16 = 0x82bc;
auto constexpr kOpenGLImageClass4X32 = 0x82b9;
auto constexpr kOpenGLImageClass4X8 = 0x82bf;
auto constexpr kOpenGLImageCompatibilityClass = 0x82a8;
auto constexpr kOpenGLImageCube = 0x9050;
auto constexpr kOpenGLImageCubeMapArray = 0x9054;
auto constexpr kOpenGLImageFormatCompatibilityByClass = 0x90c9;
auto constexpr kOpenGLImageFormatCompatibilityBySize = 0x90c8;
auto constexpr kOpenGLImageFormatCompatibilityType = 0x90c7;
auto constexpr kOpenGLImagePixelFormat = 0x82a9;
auto constexpr kOpenGLImagePixelType = 0x82aa;
auto constexpr kOpenGLImageTexelSize = 0x82a7;
auto constexpr kOpenGLImplementationColorReadFormat = 0x8b9b;
auto constexpr kOpenGLImplementationColorReadType = 0x8b9a;
auto constexpr kOpenGLIncr = 0x1e02;
auto constexpr kOpenGLIncrWrap = 0x8507;
auto constexpr kOpenGLIndex = 0x8222;
auto constexpr kOpenGLIndexArray = 0x8077;
auto constexpr kOpenGLIndexArrayBufferBinding = 0x8899;
auto constexpr kOpenGLIndexArrayPointer = 0x8091;
auto constexpr kOpenGLIndexArrayStride = 0x8086;
auto constexpr kOpenGLIndexArrayType = 0x8085;
auto constexpr kOpenGLIndexBits = 0x0d51;
auto constexpr kOpenGLIndexClearValue = 0x0c20;
auto constexpr kOpenGLIndexLogicOp = 0x0bf1;
auto constexpr kOpenGLIndexMode = 0x0c30;
auto constexpr kOpenGLIndexOffset = 0x0d13;
auto constexpr kOpenGLIndexShift = 0x0d12;
auto constexpr kOpenGLIndexWriteMask = 0x0c21;
auto constexpr kOpenGLInfoLogLength = 0x8b84;
auto constexpr kOpenGLInnocentContextReset = 0x8254;
auto constexpr kOpenGLInt = 0x1404;
auto constexpr kOpenGLInt2101010Rev = 0x8d9f;
auto constexpr kOpenGLIntImage1D = 0x9057;
auto constexpr kOpenGLIntImage1DArray = 0x905d;
auto constexpr kOpenGLIntImage2D = 0x9058;
auto constexpr kOpenGLIntImage2DArray = 0x905e;
auto constexpr kOpenGLIntImage2DMultisample = 0x9060;
auto constexpr kOpenGLIntImage2DMultisampleArray = 0x9061;
auto constexpr kOpenGLIntImage2DRect = 0x905a;
auto constexpr kOpenGLIntImage3D = 0x9059;
auto constexpr kOpenGLIntImageBuffer = 0x905c;
auto constexpr kOpenGLIntImageCube = 0x905b;
auto constexpr kOpenGLIntImageCubeMapArray = 0x905f;
auto constexpr kOpenGLIntSampler1D = 0x8dc9;
auto constexpr kOpenGLIntSampler1DArray = 0x8dce;
auto constexpr kOpenGLIntSampler2D = 0x8dca;
auto constexpr kOpenGLIntSampler2DArray = 0x8dcf;
auto constexpr kOpenGLIntSampler2DMultisample = 0x9109;
auto constexpr kOpenGLIntSampler2DMultisampleArray = 0x910c;
auto constexpr kOpenGLIntSampler2DRect = 0x8dcd;
auto constexpr kOpenGLIntSampler3D = 0x8dcb;
auto constexpr kOpenGLIntSamplerBuffer = 0x8dd0;
auto constexpr kOpenGLIntSamplerCube = 0x8dcc;
auto constexpr kOpenGLIntSamplerCubeMapArray = 0x900e;
auto constexpr kOpenGLIntVec2 = 0x8b53;
auto constexpr kOpenGLIntVec3 = 0x8b54;
auto constexpr kOpenGLIntVec4 = 0x8b55;
auto constexpr kOpenGLIntensity = 0x8049;
auto constexpr kOpenGLIntensity12 = 0x804c;
auto constexpr kOpenGLIntensity16 = 0x804d;
auto constexpr kOpenGLIntensity4 = 0x804a;
auto constexpr kOpenGLIntensity8 = 0x804b;
auto constexpr kOpenGLInterleavedAttribs = 0x8c8c;
auto constexpr kOpenGLInternalformatAlphaSize = 0x8274;
auto constexpr kOpenGLInternalformatAlphaType = 0x827b;
auto constexpr kOpenGLInternalformatBlueSize = 0x8273;
auto constexpr kOpenGLInternalformatBlueType = 0x827a;
auto constexpr kOpenGLInternalformatDepthSize = 0x8275;
auto constexpr kOpenGLInternalformatDepthType = 0x827c;
auto constexpr kOpenGLInternalformatGreenSize = 0x8272;
auto constexpr kOpenGLInternalformatGreenType = 0x8279;
auto constexpr kOpenGLInternalformatPreferred = 0x8270;
auto constexpr kOpenGLInternalformatRedSize = 0x8271;
auto constexpr kOpenGLInternalformatRedType = 0x8278;
auto constexpr kOpenGLInternalformatSharedSize = 0x8277;
auto constexpr kOpenGLInternalformatStencilSize = 0x8276;
auto constexpr kOpenGLInternalformatStencilType = 0x827d;
auto constexpr kOpenGLInternalformatSupported = 0x826f;
auto constexpr kOpenGLInterpolate = 0x8575;
auto constexpr kOpenGLInvalidEnum = 0x0500;
auto constexpr kOpenGLInvalidFramebufferOperation = 0x0506;
auto constexpr kOpenGLInvalidIndex = 0xffffffff;
auto constexpr kOpenGLInvalidOperation = 0x0502;
auto constexpr kOpenGLInvalidValue = 0x0501;
auto constexpr kOpenGLInvert = 0x150a;
auto constexpr kOpenGLIsPerPatch = 0x92e7;
auto constexpr kOpenGLIsRowMajor = 0x9300;
auto constexpr kOpenGLIsolines = 0x8e7a;
auto constexpr kOpenGLKeep = 0x1e00;
auto constexpr kOpenGLLastVertexConvention = 0x8e4e;
auto constexpr kOpenGLLayerProvokingVertex = 0x825e;
auto constexpr kOpenGLLeft = 0x0406;
auto constexpr kOpenGLLequal = 0x0203;
auto constexpr kOpenGLLess = 0x0201;
auto constexpr kOpenGLLight0 = 0x4000;
auto constexpr kOpenGLLight1 = 0x4001;
auto constexpr kOpenGLLight2 = 0x4002;
auto constexpr kOpenGLLight3 = 0x4003;
auto constexpr kOpenGLLight4 = 0x4004;
auto constexpr kOpenGLLight5 = 0x4005;
auto constexpr kOpenGLLight6 = 0x4006;
auto constexpr kOpenGLLight7 = 0x4007;
auto constexpr kOpenGLLightModelAmbient = 0x0b53;
auto constexpr kOpenGLLightModelColorControl = 0x81f8;
auto constexpr kOpenGLLightModelLocalViewer = 0x0b51;
auto constexpr kOpenGLLightModelTwoSide = 0x0b52;
auto constexpr kOpenGLLighten = 0x9298;
auto constexpr kOpenGLLighting = 0x0b50;
auto constexpr kOpenGLLightingBit = 0x00000040;
auto constexpr kOpenGLLine = 0x1b01;
auto constexpr kOpenGLLineBit = 0x00000004;
auto constexpr kOpenGLLineLoop = 0x0002;
auto constexpr kOpenGLLineResetToken = 0x0707;
auto constexpr kOpenGLLineSmooth = 0x0b20;
auto constexpr kOpenGLLineSmoothHint = 0x0c52;
auto constexpr kOpenGLLineStipple = 0x0b24;
auto constexpr kOpenGLLineStipplePattern = 0x0b25;
auto constexpr kOpenGLLineStippleRepeat = 0x0b26;
auto constexpr kOpenGLLineStrip = 0x0003;
auto constexpr kOpenGLLineStripAdjacency = 0x000b;
auto constexpr kOpenGLLineToken = 0x0702;
auto constexpr kOpenGLLineWidth = 0x0b21;
auto constexpr kOpenGLLineWidthGranularity = 0x0b23;
auto constexpr kOpenGLLineWidthRange = 0x0b22;
auto constexpr kOpenGLLinear = 0x2601;
auto constexpr kOpenGLLinearAttenuation = 0x1208;
auto constexpr kOpenGLLinearMipmapLinear = 0x2703;
auto constexpr kOpenGLLinearMipmapNearest = 0x2701;
auto constexpr kOpenGLLines = 0x0001;
auto constexpr kOpenGLLinesAdjacency = 0x000a;
auto constexpr kOpenGLLinkStatus = 0x8b82;
auto constexpr kOpenGLListBase = 0x0b32;
auto constexpr kOpenGLListBit = 0x00020000;
auto constexpr kOpenGLListIndex = 0x0b33;
auto constexpr kOpenGLListMode = 0x0b30;
auto constexpr kOpenGLLoad = 0x0101;
auto constexpr kOpenGLLocation = 0x930e;
auto constexpr kOpenGLLocationComponent = 0x934a;
auto constexpr kOpenGLLocationIndex = 0x930f;
auto constexpr kOpenGLLogicOp = 0x0bf1;
auto constexpr kOpenGLLogicOpMode = 0x0bf0;
auto constexpr kOpenGLLoseContextOnReset = 0x8252;
auto constexpr kOpenGLLowFloat = 0x8df0;
auto constexpr kOpenGLLowInt = 0x8df3;
auto constexpr kOpenGLLowerLeft = 0x8ca1;
auto constexpr kOpenGLLuminance = 0x1909;
auto constexpr kOpenGLLuminance12 = 0x8041;
auto constexpr kOpenGLLuminance12Alpha12 = 0x8047;
auto constexpr kOpenGLLuminance12Alpha4 = 0x8046;
auto constexpr kOpenGLLuminance16 = 0x8042;
auto constexpr kOpenGLLuminance16Alpha16 = 0x8048;
auto constexpr kOpenGLLuminance4 = 0x803f;
auto constexpr kOpenGLLuminance4Alpha4 = 0x8043;
auto constexpr kOpenGLLuminance6Alpha2 = 0x8044;
auto constexpr kOpenGLLuminance8 = 0x8040;
auto constexpr kOpenGLLuminance8Alpha8 = 0x8045;
auto constexpr kOpenGLLuminanceAlpha = 0x190a;
auto constexpr kOpenGLMajorVersion = 0x821b;
auto constexpr kOpenGLManualGenerateMipmap = 0x8294;
auto constexpr kOpenGLMap1Color4 = 0x0d90;
auto constexpr kOpenGLMap1GridDomain = 0x0dd0;
auto constexpr kOpenGLMap1GridSegments = 0x0dd1;
auto constexpr kOpenGLMap1Index = 0x0d91;
auto constexpr kOpenGLMap1Normal = 0x0d92;
auto constexpr kOpenGLMap1TextureCoord1 = 0x0d93;
auto constexpr kOpenGLMap1TextureCoord2 = 0x0d94;
auto constexpr kOpenGLMap1TextureCoord3 = 0x0d95;
auto constexpr kOpenGLMap1TextureCoord4 = 0x0d96;
auto constexpr kOpenGLMap1Vertex3 = 0x0d97;
auto constexpr kOpenGLMap1Vertex4 = 0x0d98;
auto constexpr kOpenGLMap2Color4 = 0x0db0;
auto constexpr kOpenGLMap2GridDomain = 0x0dd2;
auto constexpr kOpenGLMap2GridSegments = 0x0dd3;
auto constexpr kOpenGLMap2Index = 0x0db1;
auto constexpr kOpenGLMap2Normal = 0x0db2;
auto constexpr kOpenGLMap2TextureCoord1 = 0x0db3;
auto constexpr kOpenGLMap2TextureCoord2 = 0x0db4;
auto constexpr kOpenGLMap2TextureCoord3 = 0x0db5;
auto constexpr kOpenGLMap2TextureCoord4 = 0x0db6;
auto constexpr kOpenGLMap2Vertex3 = 0x0db7;
auto constexpr kOpenGLMap2Vertex4 = 0x0db8;
auto constexpr kOpenGLMapCoherentBit = 0x0080;
auto constexpr kOpenGLMapColor = 0x0d10;
auto constexpr kOpenGLMapFlushExplicitBit = 0x0010;
auto constexpr kOpenGLMapInvalidateBufferBit = 0x0008;
auto constexpr kOpenGLMapInvalidateRangeBit = 0x0004;
auto constexpr kOpenGLMapPersistentBit = 0x0040;
auto constexpr kOpenGLMapReadBit = 0x0001;
auto constexpr kOpenGLMapStencil = 0x0d11;
auto constexpr kOpenGLMapUnsynchronizedBit = 0x0020;
auto constexpr kOpenGLMapWriteBit = 0x0002;
auto constexpr kOpenGLMatrixMode = 0x0ba0;
auto constexpr kOpenGLMatrixStride = 0x92ff;
auto constexpr kOpenGLMax = 0x8008;
auto constexpr kOpenGLMax3DTextureSize = 0x8073;
auto constexpr kOpenGLMaxArrayTextureLayers = 0x88ff;
auto constexpr kOpenGLMaxAtomicCounterBufferBindings = 0x92dc;
auto constexpr kOpenGLMaxAtomicCounterBufferSize = 0x92d8;
auto constexpr kOpenGLMaxAttribStackDepth = 0x0d35;
auto constexpr kOpenGLMaxClientAttribStackDepth = 0x0d3b;
auto constexpr kOpenGLMaxClipDistances = 0x0d32;
auto constexpr kOpenGLMaxClipPlanes = 0x0d32;
auto constexpr kOpenGLMaxColorAttachments = 0x8cdf;
auto constexpr kOpenGLMaxColorTextureSamples = 0x910e;
auto constexpr kOpenGLMaxCombinedAtomicCounterBuffers = 0x92d1;
auto constexpr kOpenGLMaxCombinedAtomicCounters = 0x92d7;
auto constexpr kOpenGLMaxCombinedClipAndCullDistances = 0x82fa;
auto constexpr kOpenGLMaxCombinedComputeUniformComponents = 0x8266;
auto constexpr kOpenGLMaxCombinedDimensions = 0x8282;
auto constexpr kOpenGLMaxCombinedFragmentUniformComponents = 0x8a33;
auto constexpr kOpenGLMaxCombinedGeometryUniformComponents = 0x8a32;
auto constexpr kOpenGLMaxCombinedImageUniforms = 0x90cf;
auto constexpr kOpenGLMaxCombinedImageUnitsAndFragmentOutputs = 0x8f39;
auto constexpr kOpenGLMaxCombinedShaderOutputResources = 0x8f39;
auto constexpr kOpenGLMaxCombinedShaderStorageBlocks = 0x90dc;
auto constexpr kOpenGLMaxCombinedTessControlUniformComponents = 0x8e1e;
auto constexpr kOpenGLMaxCombinedTessEvaluationUniformComponents = 0x8e1f;
auto constexpr kOpenGLMaxCombinedTextureImageUnits = 0x8b4d;
auto constexpr kOpenGLMaxCombinedUniformBlocks = 0x8a2e;
auto constexpr kOpenGLMaxCombinedVertexUniformComponents = 0x8a31;
auto constexpr kOpenGLMaxComputeAtomicCounterBuffers = 0x8264;
auto constexpr kOpenGLMaxComputeAtomicCounters = 0x8265;
auto constexpr kOpenGLMaxComputeImageUniforms = 0x91bd;
auto constexpr kOpenGLMaxComputeShaderStorageBlocks = 0x90db;
auto constexpr kOpenGLMaxComputeSharedMemorySize = 0x8262;
auto constexpr kOpenGLMaxComputeTextureImageUnits = 0x91bc;
auto constexpr kOpenGLMaxComputeUniformBlocks = 0x91bb;
auto constexpr kOpenGLMaxComputeUniformComponents = 0x8263;
auto constexpr kOpenGLMaxComputeWorkGroupCount = 0x91be;
auto constexpr kOpenGLMaxComputeWorkGroupInvocations = 0x90eb;
auto constexpr kOpenGLMaxComputeWorkGroupSize = 0x91bf;
auto constexpr kOpenGLMaxCubeMapTextureSize = 0x851c;
auto constexpr kOpenGLMaxCullDistances = 0x82f9;
auto constexpr kOpenGLMaxDebugGroupStackDepth = 0x826c;
auto constexpr kOpenGLMaxDebugLoggedMessages = 0x9144;
auto constexpr kOpenGLMaxDebugMessageLength = 0x9143;
auto constexpr kOpenGLMaxDepth = 0x8280;
auto constexpr kOpenGLMaxDepthTextureSamples = 0x910f;
auto constexpr kOpenGLMaxDrawBuffers = 0x8824;
auto constexpr kOpenGLMaxDualSourceDrawBuffers = 0x88fc;
auto constexpr kOpenGLMaxElementIndex = 0x8d6b;
auto constexpr kOpenGLMaxElementsIndices = 0x80e9;
auto constexpr kOpenGLMaxElementsVertices = 0x80e8;
auto constexpr kOpenGLMaxEvalOrder = 0x0d30;
auto constexpr kOpenGLMaxFragmentAtomicCounterBuffers = 0x92d0;
auto constexpr kOpenGLMaxFragmentAtomicCounters = 0x92d6;
auto constexpr kOpenGLMaxFragmentImageUniforms = 0x90ce;
auto constexpr kOpenGLMaxFragmentInputComponents = 0x9125;
auto constexpr kOpenGLMaxFragmentInterpolationOffset = 0x8e5c;
auto constexpr kOpenGLMaxFragmentShaderStorageBlocks = 0x90da;
auto constexpr kOpenGLMaxFragmentUniformBlocks = 0x8a2d;
auto constexpr kOpenGLMaxFragmentUniformComponents = 0x8b49;
auto constexpr kOpenGLMaxFragmentUniformVectors = 0x8dfd;
auto constexpr kOpenGLMaxFramebufferHeight = 0x9316;
auto constexpr kOpenGLMaxFramebufferLayers = 0x9317;
auto constexpr kOpenGLMaxFramebufferSamples = 0x9318;
auto constexpr kOpenGLMaxFramebufferWidth = 0x9315;
auto constexpr kOpenGLMaxGeometryAtomicCounterBuffers = 0x92cf;
auto constexpr kOpenGLMaxGeometryAtomicCounters = 0x92d5;
auto constexpr kOpenGLMaxGeometryImageUniforms = 0x90cd;
auto constexpr kOpenGLMaxGeometryInputComponents = 0x9123;
auto constexpr kOpenGLMaxGeometryOutputComponents = 0x9124;
auto constexpr kOpenGLMaxGeometryOutputVertices = 0x8de0;
auto constexpr kOpenGLMaxGeometryShaderInvocations = 0x8e5a;
auto constexpr kOpenGLMaxGeometryShaderStorageBlocks = 0x90d7;
auto constexpr kOpenGLMaxGeometryTextureImageUnits = 0x8c29;
auto constexpr kOpenGLMaxGeometryTotalOutputComponents = 0x8de1;
auto constexpr kOpenGLMaxGeometryUniformBlocks = 0x8a2c;
auto constexpr kOpenGLMaxGeometryUniformComponents = 0x8ddf;
auto constexpr kOpenGLMaxHeight = 0x827f;
auto constexpr kOpenGLMaxImageSamples = 0x906d;
auto constexpr kOpenGLMaxImageUnits = 0x8f38;
auto constexpr kOpenGLMaxIntegerSamples = 0x9110;
auto constexpr kOpenGLMaxLabelLength = 0x82e8;
auto constexpr kOpenGLMaxLayers = 0x8281;
auto constexpr kOpenGLMaxLights = 0x0d31;
auto constexpr kOpenGLMaxListNesting = 0x0b31;
auto constexpr kOpenGLMaxModelviewStackDepth = 0x0d36;
auto constexpr kOpenGLMaxNameLength = 0x92f6;
auto constexpr kOpenGLMaxNameStackDepth = 0x0d37;
auto constexpr kOpenGLMaxNumActiveVariables = 0x92f7;
auto constexpr kOpenGLMaxNumCompatibleSubroutines = 0x92f8;
auto constexpr kOpenGLMaxPatchVertices = 0x8e7d;
auto constexpr kOpenGLMaxPixelMapTable = 0x0d34;
auto constexpr kOpenGLMaxProgramTexelOffset = 0x8905;
auto constexpr kOpenGLMaxProgramTextureGatherOffset = 0x8e5f;
auto constexpr kOpenGLMaxProjectionStackDepth = 0x0d38;
auto constexpr kOpenGLMaxRectangleTextureSize = 0x84f8;
auto constexpr kOpenGLMaxRenderbufferSize = 0x84e8;
auto constexpr kOpenGLMaxSampleMaskWords = 0x8e59;
auto constexpr kOpenGLMaxSamples = 0x8d57;
auto constexpr kOpenGLMaxServerWaitTimeout = 0x9111;
auto constexpr kOpenGLMaxShaderStorageBlockSize = 0x90de;
auto constexpr kOpenGLMaxShaderStorageBufferBindings = 0x90dd;
auto constexpr kOpenGLMaxSubroutineUniformLocations = 0x8de8;
auto constexpr kOpenGLMaxSubroutines = 0x8de7;
auto constexpr kOpenGLMaxTessControlAtomicCounterBuffers = 0x92cd;
auto constexpr kOpenGLMaxTessControlAtomicCounters = 0x92d3;
auto constexpr kOpenGLMaxTessControlImageUniforms = 0x90cb;
auto constexpr kOpenGLMaxTessControlInputComponents = 0x886c;
auto constexpr kOpenGLMaxTessControlOutputComponents = 0x8e83;
auto constexpr kOpenGLMaxTessControlShaderStorageBlocks = 0x90d8;
auto constexpr kOpenGLMaxTessControlTextureImageUnits = 0x8e81;
auto constexpr kOpenGLMaxTessControlTotalOutputComponents = 0x8e85;
auto constexpr kOpenGLMaxTessControlUniformBlocks = 0x8e89;
auto constexpr kOpenGLMaxTessControlUniformComponents = 0x8e7f;
auto constexpr kOpenGLMaxTessEvaluationAtomicCounterBuffers = 0x92ce;
auto constexpr kOpenGLMaxTessEvaluationAtomicCounters = 0x92d4;
auto constexpr kOpenGLMaxTessEvaluationImageUniforms = 0x90cc;
auto constexpr kOpenGLMaxTessEvaluationInputComponents = 0x886d;
auto constexpr kOpenGLMaxTessEvaluationOutputComponents = 0x8e86;
auto constexpr kOpenGLMaxTessEvaluationShaderStorageBlocks = 0x90d9;
auto constexpr kOpenGLMaxTessEvaluationTextureImageUnits = 0x8e82;
auto constexpr kOpenGLMaxTessEvaluationUniformBlocks = 0x8e8a;
auto constexpr kOpenGLMaxTessEvaluationUniformComponents = 0x8e80;
auto constexpr kOpenGLMaxTessGenLevel = 0x8e7e;
auto constexpr kOpenGLMaxTessPatchComponents = 0x8e84;
auto constexpr kOpenGLMaxTextureBufferSize = 0x8c2b;
auto constexpr kOpenGLMaxTextureCoords = 0x8871;
auto constexpr kOpenGLMaxTextureImageUnits = 0x8872;
auto constexpr kOpenGLMaxTextureLodBias = 0x84fd;
auto constexpr kOpenGLMaxTextureMaxAnisotropy = 0x84ff;
auto constexpr kOpenGLMaxTextureSize = 0x0d33;
auto constexpr kOpenGLMaxTextureStackDepth = 0x0d39;
auto constexpr kOpenGLMaxTextureUnits = 0x84e2;
auto constexpr kOpenGLMaxTransformFeedbackBuffers = 0x8e70;
auto constexpr kOpenGLMaxTransformFeedbackInterleavedComponents = 0x8c8a;
auto constexpr kOpenGLMaxTransformFeedbackSeparateAttribs = 0x8c8b;
auto constexpr kOpenGLMaxTransformFeedbackSeparateComponents = 0x8c80;
auto constexpr kOpenGLMaxUniformBlockSize = 0x8a30;
auto constexpr kOpenGLMaxUniformBufferBindings = 0x8a2f;
auto constexpr kOpenGLMaxUniformLocations = 0x826e;
auto constexpr kOpenGLMaxVaryingComponents = 0x8b4b;
auto constexpr kOpenGLMaxVaryingFloats = 0x8b4b;
auto constexpr kOpenGLMaxVaryingVectors = 0x8dfc;
auto constexpr kOpenGLMaxVertexAtomicCounterBuffers = 0x92cc;
auto constexpr kOpenGLMaxVertexAtomicCounters = 0x92d2;
auto constexpr kOpenGLMaxVertexAttribBindings = 0x82da;
auto constexpr kOpenGLMaxVertexAttribRelativeOffset = 0x82d9;
auto constexpr kOpenGLMaxVertexAttribStride = 0x82e5;
auto constexpr kOpenGLMaxVertexAttribs = 0x8869;
auto constexpr kOpenGLMaxVertexImageUniforms = 0x90ca;
auto constexpr kOpenGLMaxVertexOutputComponents = 0x9122;
auto constexpr kOpenGLMaxVertexShaderStorageBlocks = 0x90d6;
auto constexpr kOpenGLMaxVertexStreams = 0x8e71;
auto constexpr kOpenGLMaxVertexTextureImageUnits = 0x8b4c;
auto constexpr kOpenGLMaxVertexUniformBlocks = 0x8a2b;
auto constexpr kOpenGLMaxVertexUniformComponents = 0x8b4a;
auto constexpr kOpenGLMaxVertexUniformVectors = 0x8dfb;
auto constexpr kOpenGLMaxViewportDims = 0x0d3a;
auto constexpr kOpenGLMaxViewports = 0x825b;
auto constexpr kOpenGLMaxWidth = 0x827e;
auto constexpr kOpenGLMediumFloat = 0x8df1;
auto constexpr kOpenGLMediumInt = 0x8df4;
auto constexpr kOpenGLMin = 0x8007;
auto constexpr kOpenGLMinFragmentInterpolationOffset = 0x8e5b;
auto constexpr kOpenGLMinMapBufferAlignment = 0x90bc;
auto constexpr kOpenGLMinProgramTexelOffset = 0x8904;
auto constexpr kOpenGLMinProgramTextureGatherOffset = 0x8e5e;
auto constexpr kOpenGLMinSampleShadingValue = 0x8c37;
auto constexpr kOpenGLMinmax = 0x802e;
auto constexpr kOpenGLMinorVersion = 0x821c;
auto constexpr kOpenGLMipmap = 0x8293;
auto constexpr kOpenGLMirrorClampToEdge = 0x8743;
auto constexpr kOpenGLMirroredRepeat = 0x8370;
auto constexpr kOpenGLModelview = 0x1700;
auto constexpr kOpenGLModelviewMatrix = 0x0ba6;
auto constexpr kOpenGLModelviewStackDepth = 0x0ba3;
auto constexpr kOpenGLModulate = 0x2100;
auto constexpr kOpenGLMult = 0x0103;
auto constexpr kOpenGLMultiply = 0x9294;
auto constexpr kOpenGLMultisample = 0x809d;
auto constexpr kOpenGLMultisampleBit = 0x20000000;
auto constexpr kOpenGLMultisampleLineWidthGranularity = 0x9382;
auto constexpr kOpenGLMultisampleLineWidthRange = 0x9381;
auto constexpr kOpenGLN3fV3f = 0x2a25;
auto constexpr kOpenGLNameLength = 0x92f9;
auto constexpr kOpenGLNameStackDepth = 0x0d70;
auto constexpr kOpenGLNand = 0x150e;
auto constexpr kOpenGLNearest = 0x2600;
auto constexpr kOpenGLNearestMipmapLinear = 0x2702;
auto constexpr kOpenGLNearestMipmapNearest = 0x2700;
auto constexpr kOpenGLNegativeOneToOne = 0x935e;
auto constexpr kOpenGLNever = 0x0200;
auto constexpr kOpenGLNicest = 0x1102;
auto constexpr kOpenGLNoResetNotification = 0x8261;
auto constexpr kOpenGLNoop = 0x1505;
auto constexpr kOpenGLNor = 0x1508;
auto constexpr kOpenGLNormalArray = 0x8075;
auto constexpr kOpenGLNormalArrayBufferBinding = 0x8897;
auto constexpr kOpenGLNormalArrayPointer = 0x808f;
auto constexpr kOpenGLNormalArrayStride = 0x807f;
auto constexpr kOpenGLNormalArrayType = 0x807e;
auto constexpr kOpenGLNormalMap = 0x8511;
auto constexpr kOpenGLNormalize = 0x0ba1;
auto constexpr kOpenGLNotequal = 0x0205;
auto constexpr kOpenGLNumActiveVariables = 0x9304;
auto constexpr kOpenGLNumCompatibleSubroutines = 0x8e4a;
auto constexpr kOpenGLNumCompressedTextureFormats = 0x86a2;
auto constexpr kOpenGLNumExtensions = 0x821d;
auto constexpr kOpenGLNumProgramBinaryFormats = 0x87fe;
auto constexpr kOpenGLNumSampleCounts = 0x9380;
auto constexpr kOpenGLNumShaderBinaryFormats = 0x8df9;
auto constexpr kOpenGLNumShadingLanguageVersions = 0x82e9;
auto constexpr kOpenGLNumSpirVExtensions = 0x9554;
auto constexpr kOpenGLObjectLinear = 0x2401;
auto constexpr kOpenGLObjectPlane = 0x2501;
auto constexpr kOpenGLObjectType = 0x9112;
auto constexpr kOpenGLOffset = 0x92fc;
auto constexpr kOpenGLOneMinusConstantAlpha = 0x8004;
auto constexpr kOpenGLOneMinusConstantColor = 0x8002;
auto constexpr kOpenGLOneMinusDstAlpha = 0x0305;
auto constexpr kOpenGLOneMinusDstColor = 0x0307;
auto constexpr kOpenGLOneMinusSrc1Alpha = 0x88fb;
auto constexpr kOpenGLOneMinusSrc1Color = 0x88fa;
auto constexpr kOpenGLOneMinusSrcAlpha = 0x0303;
auto constexpr kOpenGLOneMinusSrcColor = 0x0301;
auto constexpr kOpenGLOperand0Alpha = 0x8598;
auto constexpr kOpenGLOperand0Rgb = 0x8590;
auto constexpr kOpenGLOperand1Alpha = 0x8599;
auto constexpr kOpenGLOperand1Rgb = 0x8591;
auto constexpr kOpenGLOperand2Alpha = 0x859a;
auto constexpr kOpenGLOperand2Rgb = 0x8592;
auto constexpr kOpenGLOr = 0x1507;
auto constexpr kOpenGLOrInverted = 0x150d;
auto constexpr kOpenGLOrReverse = 0x150b;
auto constexpr kOpenGLOrder = 0x0a01;
auto constexpr kOpenGLOutOfMemory = 0x0505;
auto constexpr kOpenGLOverlay = 0x9296;
auto constexpr kOpenGLPackAlignment = 0x0d05;
auto constexpr kOpenGLPackCompressedBlockDepth = 0x912d;
auto constexpr kOpenGLPackCompressedBlockHeight = 0x912c;
auto constexpr kOpenGLPackCompressedBlockSize = 0x912e;
auto constexpr kOpenGLPackCompressedBlockWidth = 0x912b;
auto constexpr kOpenGLPackImageHeight = 0x806c;
auto constexpr kOpenGLPackLSBFirst = 0x0d01;
auto constexpr kOpenGLPackRowLength = 0x0d02;
auto constexpr kOpenGLPackSkipImages = 0x806b;
auto constexpr kOpenGLPackSkipPixels = 0x0d04;
auto constexpr kOpenGLPackSkipRows = 0x0d03;
auto constexpr kOpenGLPackSwapBytes = 0x0d00;
auto constexpr kOpenGLParameterBuffer = 0x80ee;
auto constexpr kOpenGLParameterBufferBinding = 0x80ef;
auto constexpr kOpenGLPassThroughToken = 0x0700;
auto constexpr kOpenGLPatchDefaultInnerLevel = 0x8e73;
auto constexpr kOpenGLPatchDefaultOuterLevel = 0x8e74;
auto constexpr kOpenGLPatchVertices = 0x8e72;
auto constexpr kOpenGLPatches = 0x000e;
auto constexpr kOpenGLPerspectiveCorrectionHint = 0x0c50;
auto constexpr kOpenGLPixelBufferBarrierBit = 0x00000080;
auto constexpr kOpenGLPixelMapAToA = 0x0c79;
auto constexpr kOpenGLPixelMapAToASize = 0x0cb9;
auto constexpr kOpenGLPixelMapBToB = 0x0c78;
auto constexpr kOpenGLPixelMapBToBSize = 0x0cb8;
auto constexpr kOpenGLPixelMapGToG = 0x0c77;
auto constexpr kOpenGLPixelMapGToGSize = 0x0cb7;
auto constexpr kOpenGLPixelMapIToA = 0x0c75;
auto constexpr kOpenGLPixelMapIToASize = 0x0cb5;
auto constexpr kOpenGLPixelMapIToB = 0x0c74;
auto constexpr kOpenGLPixelMapIToBSize = 0x0cb4;
auto constexpr kOpenGLPixelMapIToG = 0x0c73;
auto constexpr kOpenGLPixelMapIToGSize = 0x0cb3;
auto constexpr kOpenGLPixelMapIToI = 0x0c70;
auto constexpr kOpenGLPixelMapIToISize = 0x0cb0;
auto constexpr kOpenGLPixelMapIToR = 0x0c72;
auto constexpr kOpenGLPixelMapIToRSize = 0x0cb2;
auto constexpr kOpenGLPixelMapRToR = 0x0c76;
auto constexpr kOpenGLPixelMapRToRSize = 0x0cb6;
auto constexpr kOpenGLPixelMapSToS = 0x0c71;
auto constexpr kOpenGLPixelMapSToSSize = 0x0cb1;
auto constexpr kOpenGLPixelModeBit = 0x00000020;
auto constexpr kOpenGLPixelPackBuffer = 0x88eb;
auto constexpr kOpenGLPixelPackBufferBinding = 0x88ed;
auto constexpr kOpenGLPixelUnpackBuffer = 0x88ec;
auto constexpr kOpenGLPixelUnpackBufferBinding = 0x88ef;
auto constexpr kOpenGLPoint = 0x1b00;
auto constexpr kOpenGLPointBit = 0x00000002;
auto constexpr kOpenGLPointDistanceAttenuation = 0x8129;
auto constexpr kOpenGLPointFadeThresholdSize = 0x8128;
auto constexpr kOpenGLPointSize = 0x0b11;
auto constexpr kOpenGLPointSizeGranularity = 0x0b13;
auto constexpr kOpenGLPointSizeMax = 0x8127;
auto constexpr kOpenGLPointSizeMin = 0x8126;
auto constexpr kOpenGLPointSizeRange = 0x0b12;
auto constexpr kOpenGLPointSmooth = 0x0b10;
auto constexpr kOpenGLPointSmoothHint = 0x0c51;
auto constexpr kOpenGLPointSprite = 0x8861;
auto constexpr kOpenGLPointSpriteCoordOrigin = 0x8ca0;
auto constexpr kOpenGLPointToken = 0x0701;
auto constexpr kOpenGLPoints = 0x0000;
auto constexpr kOpenGLPolygon = 0x0009;
auto constexpr kOpenGLPolygonBit = 0x00000008;
auto constexpr kOpenGLPolygonMode = 0x0b40;
auto constexpr kOpenGLPolygonOffsetClamp = 0x8e1b;
auto constexpr kOpenGLPolygonOffsetFactor = 0x8038;
auto constexpr kOpenGLPolygonOffsetFill = 0x8037;
auto constexpr kOpenGLPolygonOffsetLine = 0x2a02;
auto constexpr kOpenGLPolygonOffsetPoint = 0x2a01;
auto constexpr kOpenGLPolygonOffsetUnits = 0x2a00;
auto constexpr kOpenGLPolygonSmooth = 0x0b41;
auto constexpr kOpenGLPolygonSmoothHint = 0x0c53;
auto constexpr kOpenGLPolygonStipple = 0x0b42;
auto constexpr kOpenGLPolygonStippleBit = 0x00000010;
auto constexpr kOpenGLPolygonToken = 0x0703;
auto constexpr kOpenGLPosition = 0x1203;
auto constexpr kOpenGLPostColorMatrixColorTable = 0x80d2;
auto constexpr kOpenGLPostConvolutionColorTable = 0x80d1;
auto constexpr kOpenGLPrevious = 0x8578;
auto constexpr kOpenGLPrimaryColor = 0x8577;
auto constexpr kOpenGLPrimitiveBoundingBox = 0x92be;
auto constexpr kOpenGLPrimitiveRestart = 0x8f9d;
auto constexpr kOpenGLPrimitiveRestartFixedIndex = 0x8d69;
auto constexpr kOpenGLPrimitiveRestartForPatchesSupported = 0x8221;
auto constexpr kOpenGLPrimitiveRestartIndex = 0x8f9e;
auto constexpr kOpenGLPrimitivesGenerated = 0x8c87;
auto constexpr kOpenGLPrimitivesSubmitted = 0x82ef;
auto constexpr kOpenGLProgram = 0x82e2;
auto constexpr kOpenGLProgramBinaryFormats = 0x87ff;
auto constexpr kOpenGLProgramBinaryLength = 0x8741;
auto constexpr kOpenGLProgramBinaryRetrievableHint = 0x8257;
auto constexpr kOpenGLProgramInput = 0x92e3;
auto constexpr kOpenGLProgramOutput = 0x92e4;
auto constexpr kOpenGLProgramPipeline = 0x82e4;
auto constexpr kOpenGLProgramPipelineBinding = 0x825a;
auto constexpr kOpenGLProgramPointSize = 0x8642;
auto constexpr kOpenGLProgramSeparable = 0x8258;
auto constexpr kOpenGLProjection = 0x1701;
auto constexpr kOpenGLProjectionMatrix = 0x0ba7;
auto constexpr kOpenGLProjectionStackDepth = 0x0ba4;
auto constexpr kOpenGLProvokingVertex = 0x8e4f;
auto constexpr kOpenGLProxyColorTable = 0x80d3;
auto constexpr kOpenGLProxyHistogram = 0x8025;
auto constexpr kOpenGLProxyPostColorMatrixColorTable = 0x80d5;
auto constexpr kOpenGLProxyPostConvolutionColorTable = 0x80d4;
auto constexpr kOpenGLProxyTexture1D = 0x8063;
auto constexpr kOpenGLProxyTexture1DArray = 0x8c19;
auto constexpr kOpenGLProxyTexture2D = 0x8064;
auto constexpr kOpenGLProxyTexture2DArray = 0x8c1b;
auto constexpr kOpenGLProxyTexture2DMultisample = 0x9101;
auto constexpr kOpenGLProxyTexture2DMultisampleArray = 0x9103;
auto constexpr kOpenGLProxyTexture3D = 0x8070;
auto constexpr kOpenGLProxyTextureCubeMap = 0x851b;
auto constexpr kOpenGLProxyTextureCubeMapArray = 0x900b;
auto constexpr kOpenGLProxyTextureRectangle = 0x84f7;
auto constexpr kOpenGLQ = 0x2003;
auto constexpr kOpenGLQuadStrip = 0x0008;
auto constexpr kOpenGLQuadraticAttenuation = 0x1209;
auto constexpr kOpenGLQuads = 0x0007;
auto constexpr kOpenGLQuadsFollowProvokingVertexConvention = 0x8e4c;
auto constexpr kOpenGLQuery = 0x82e3;
auto constexpr kOpenGLQueryBuffer = 0x9192;
auto constexpr kOpenGLQueryBufferBarrierBit = 0x00008000;
auto constexpr kOpenGLQueryBufferBinding = 0x9193;
auto constexpr kOpenGLQueryByRegionNoWait = 0x8e16;
auto constexpr kOpenGLQueryByRegionNoWaitInverted = 0x8e1a;
auto constexpr kOpenGLQueryByRegionWait = 0x8e15;
auto constexpr kOpenGLQueryByRegionWaitInverted = 0x8e19;
auto constexpr kOpenGLQueryCounterBits = 0x8864;
auto constexpr kOpenGLQueryNoWait = 0x8e14;
auto constexpr kOpenGLQueryNoWaitInverted = 0x8e18;
auto constexpr kOpenGLQueryResult = 0x8866;
auto constexpr kOpenGLQueryResultAvailable = 0x8867;
auto constexpr kOpenGLQueryResultNoWait = 0x9194;
auto constexpr kOpenGLQueryTarget = 0x82ea;
auto constexpr kOpenGLQueryWait = 0x8e13;
auto constexpr kOpenGLQueryWaitInverted = 0x8e17;
auto constexpr kOpenGLR = 0x2002;
auto constexpr kOpenGLR11fG11fB10f = 0x8c3a;
auto constexpr kOpenGLR16 = 0x822a;
auto constexpr kOpenGLR16Snorm = 0x8f98;
auto constexpr kOpenGLR16f = 0x822d;
auto constexpr kOpenGLR16i = 0x8233;
auto constexpr kOpenGLR16ui = 0x8234;
auto constexpr kOpenGLR32f = 0x822e;
auto constexpr kOpenGLR32i = 0x8235;
auto constexpr kOpenGLR32ui = 0x8236;
auto constexpr kOpenGLR3G3B2 = 0x2a10;
auto constexpr kOpenGLR8 = 0x8229;
auto constexpr kOpenGLR8Snorm = 0x8f94;
auto constexpr kOpenGLR8i = 0x8231;
auto constexpr kOpenGLR8ui = 0x8232;
auto constexpr kOpenGLRGBA = 0x1908;
auto constexpr kOpenGLRGBA12 = 0x805a;
auto constexpr kOpenGLRGBA16 = 0x805b;
auto constexpr kOpenGLRGBA16Snorm = 0x8f9b;
auto constexpr kOpenGLRGBA16f = 0x881a;
auto constexpr kOpenGLRGBA16i = 0x8d88;
auto constexpr kOpenGLRGBA16ui = 0x8d76;
auto constexpr kOpenGLRGBA2 = 0x8055;
auto constexpr kOpenGLRGBA32f = 0x8814;
auto constexpr kOpenGLRGBA32i = 0x8d82;
auto constexpr kOpenGLRGBA32ui = 0x8d70;
auto constexpr kOpenGLRGBA4 = 0x8056;
auto constexpr kOpenGLRGBA8 = 0x8058;
auto constexpr kOpenGLRGBA8Snorm = 0x8f97;
auto constexpr kOpenGLRGBA8i = 0x8d8e;
auto constexpr kOpenGLRGBA8ui = 0x8d7c;
auto constexpr kOpenGLRGBAInteger = 0x8d99;
auto constexpr kOpenGLRGBAMode = 0x0c31;
auto constexpr kOpenGLRasterizerDiscard = 0x8c89;
auto constexpr kOpenGLReadBuffer = 0x0c02;
auto constexpr kOpenGLReadFramebuffer = 0x8ca8;
auto constexpr kOpenGLReadFramebufferBinding = 0x8caa;
auto constexpr kOpenGLReadOnly = 0x88b8;
auto constexpr kOpenGLReadPixels = 0x828c;
auto constexpr kOpenGLReadPixelsFormat = 0x828d;
auto constexpr kOpenGLReadPixelsType = 0x828e;
auto constexpr kOpenGLReadWrite = 0x88ba;
auto constexpr kOpenGLRed = 0x1903;
auto constexpr kOpenGLRedBias = 0x0d15;
auto constexpr kOpenGLRedBits = 0x0d52;
auto constexpr kOpenGLRedInteger = 0x8d94;
auto constexpr kOpenGLRedScale = 0x0d14;
auto constexpr kOpenGLReferencedByComputeShader = 0x930b;
auto constexpr kOpenGLReferencedByFragmentShader = 0x930a;
auto constexpr kOpenGLReferencedByGeometryShader = 0x9309;
auto constexpr kOpenGLReferencedByTessControlShader = 0x9307;
auto constexpr kOpenGLReferencedByTessEvaluationShader = 0x9308;
auto constexpr kOpenGLReferencedByVertexShader = 0x9306;
auto constexpr kOpenGLReflectionMap = 0x8512;
auto constexpr kOpenGLRender = 0x1c00;
auto constexpr kOpenGLRenderMode = 0x0c40;
auto constexpr kOpenGLRenderbuffer = 0x8d41;
auto constexpr kOpenGLRenderbufferAlphaSize = 0x8d53;
auto constexpr kOpenGLRenderbufferBinding = 0x8ca7;
auto constexpr kOpenGLRenderbufferBlueSize = 0x8d52;
auto constexpr kOpenGLRenderbufferDepthSize = 0x8d54;
auto constexpr kOpenGLRenderbufferGreenSize = 0x8d51;
auto constexpr kOpenGLRenderbufferHeight = 0x8d43;
auto constexpr kOpenGLRenderbufferInternalFormat = 0x8d44;
auto constexpr kOpenGLRenderbufferRedSize = 0x8d50;
auto constexpr kOpenGLRenderbufferSamples = 0x8cab;
auto constexpr kOpenGLRenderbufferStencilSize = 0x8d55;
auto constexpr kOpenGLRenderbufferWidth = 0x8d42;
auto constexpr kOpenGLRenderer = 0x1f01;
auto constexpr kOpenGLRepeat = 0x2901;
auto constexpr kOpenGLReplace = 0x1e01;
auto constexpr kOpenGLRescaleNormal = 0x803a;
auto constexpr kOpenGLResetNotificationStrategy = 0x8256;
auto constexpr kOpenGLReturn = 0x0102;
auto constexpr kOpenGLRg = 0x8227;
auto constexpr kOpenGLRg16 = 0x822c;
auto constexpr kOpenGLRg16Snorm = 0x8f99;
auto constexpr kOpenGLRg16f = 0x822f;
auto constexpr kOpenGLRg16i = 0x8239;
auto constexpr kOpenGLRg16ui = 0x823a;
auto constexpr kOpenGLRg32f = 0x8230;
auto constexpr kOpenGLRg32i = 0x823b;
auto constexpr kOpenGLRg32ui = 0x823c;
auto constexpr kOpenGLRg8 = 0x822b;
auto constexpr kOpenGLRg8Snorm = 0x8f95;
auto constexpr kOpenGLRg8i = 0x8237;
auto constexpr kOpenGLRg8ui = 0x8238;
auto constexpr kOpenGLRgInteger = 0x8228;
auto constexpr kOpenGLRgb = 0x1907;
auto constexpr kOpenGLRgb10 = 0x8052;
auto constexpr kOpenGLRgb10A2 = 0x8059;
auto constexpr kOpenGLRgb10A2ui = 0x906f;
auto constexpr kOpenGLRgb12 = 0x8053;
auto constexpr kOpenGLRgb16 = 0x8054;
auto constexpr kOpenGLRgb16Snorm = 0x8f9a;
auto constexpr kOpenGLRgb16f = 0x881b;
auto constexpr kOpenGLRgb16i = 0x8d89;
auto constexpr kOpenGLRgb16ui = 0x8d77;
auto constexpr kOpenGLRgb32f = 0x8815;
auto constexpr kOpenGLRgb32i = 0x8d83;
auto constexpr kOpenGLRgb32ui = 0x8d71;
auto constexpr kOpenGLRgb4 = 0x804f;
auto constexpr kOpenGLRgb5 = 0x8050;
auto constexpr kOpenGLRgb565 = 0x8d62;
auto constexpr kOpenGLRgb5A1 = 0x8057;
auto constexpr kOpenGLRgb8 = 0x8051;
auto constexpr kOpenGLRgb8Snorm = 0x8f96;
auto constexpr kOpenGLRgb8i = 0x8d8f;
auto constexpr kOpenGLRgb8ui = 0x8d7d;
auto constexpr kOpenGLRgb9E5 = 0x8c3d;
auto constexpr kOpenGLRgbInteger = 0x8d98;
auto constexpr kOpenGLRgbScale = 0x8573;
auto constexpr kOpenGLRight = 0x0407;
auto constexpr kOpenGLS = 0x2000;
auto constexpr kOpenGLSRGB = 0x8c40;
auto constexpr kOpenGLSRGB8 = 0x8c41;
auto constexpr kOpenGLSRGB8Alpha8 = 0x8c43;
auto constexpr kOpenGLSRGBAlpha = 0x8c42;
auto constexpr kOpenGLSRGBRead = 0x8297;
auto constexpr kOpenGLSRGBWrite = 0x8298;
auto constexpr kOpenGLSampleAlphaToCoverage = 0x809e;
auto constexpr kOpenGLSampleAlphaToOne = 0x809f;
auto constexpr kOpenGLSampleBuffers = 0x80a8;
auto constexpr kOpenGLSampleCoverage = 0x80a0;
auto constexpr kOpenGLSampleCoverageInvert = 0x80ab;
auto constexpr kOpenGLSampleCoverageValue = 0x80aa;
auto constexpr kOpenGLSampleMask = 0x8e51;
auto constexpr kOpenGLSampleMaskValue = 0x8e52;
auto constexpr kOpenGLSamplePosition = 0x8e50;
auto constexpr kOpenGLSampleShading = 0x8c36;
auto constexpr kOpenGLSampler = 0x82e6;
auto constexpr kOpenGLSampler1D = 0x8b5d;
auto constexpr kOpenGLSampler1DArray = 0x8dc0;
auto constexpr kOpenGLSampler1DArrayShadow = 0x8dc3;
auto constexpr kOpenGLSampler1DShadow = 0x8b61;
auto constexpr kOpenGLSampler2D = 0x8b5e;
auto constexpr kOpenGLSampler2DArray = 0x8dc1;
auto constexpr kOpenGLSampler2DArrayShadow = 0x8dc4;
auto constexpr kOpenGLSampler2DMultisample = 0x9108;
auto constexpr kOpenGLSampler2DMultisampleArray = 0x910b;
auto constexpr kOpenGLSampler2DRect = 0x8b63;
auto constexpr kOpenGLSampler2DRectShadow = 0x8b64;
auto constexpr kOpenGLSampler2DShadow = 0x8b62;
auto constexpr kOpenGLSampler3D = 0x8b5f;
auto constexpr kOpenGLSamplerBinding = 0x8919;
auto constexpr kOpenGLSamplerBuffer = 0x8dc2;
auto constexpr kOpenGLSamplerCube = 0x8b60;
auto constexpr kOpenGLSamplerCubeMapArray = 0x900c;
auto constexpr kOpenGLSamplerCubeMapArrayShadow = 0x900d;
auto constexpr kOpenGLSamplerCubeShadow = 0x8dc5;
auto constexpr kOpenGLSamples = 0x80a9;
auto constexpr kOpenGLSamplesPassed = 0x8914;
auto constexpr kOpenGLScissorBit = 0x00080000;
auto constexpr kOpenGLScissorBox = 0x0c10;
auto constexpr kOpenGLScissorTest = 0x0c11;
auto constexpr kOpenGLScreen = 0x9295;
auto constexpr kOpenGLSecondaryColorArray = 0x845e;
auto constexpr kOpenGLSecondaryColorArrayBufferBinding = 0x889c;
auto constexpr kOpenGLSecondaryColorArrayPointer = 0x845d;
auto constexpr kOpenGLSecondaryColorArraySize = 0x845a;
auto constexpr kOpenGLSecondaryColorArrayStride = 0x845c;
auto constexpr kOpenGLSecondaryColorArrayType = 0x845b;
auto constexpr kOpenGLSelect = 0x1c02;
auto constexpr kOpenGLSelectionBufferPointer = 0x0df3;
auto constexpr kOpenGLSelectionBufferSize = 0x0df4;
auto constexpr kOpenGLSeparable2D = 0x8012;
auto constexpr kOpenGLSeparateAttribs = 0x8c8d;
auto constexpr kOpenGLSeparateSpecularColor = 0x81fa;
auto constexpr kOpenGLSet = 0x150f;
auto constexpr kOpenGLShadeModel = 0x0b54;
auto constexpr kOpenGLShader = 0x82e1;
auto constexpr kOpenGLShaderBinaryFormatSpirV = 0x9551;
auto constexpr kOpenGLShaderBinaryFormats = 0x8df8;
auto constexpr kOpenGLShaderCompiler = 0x8dfa;
auto constexpr kOpenGLShaderImageAccessBarrierBit = 0x00000020;
auto constexpr kOpenGLShaderImageAtomic = 0x82a6;
auto constexpr kOpenGLShaderImageLoad = 0x82a4;
auto constexpr kOpenGLShaderImageStore = 0x82a5;
auto constexpr kOpenGLShaderSourceLength = 0x8b88;
auto constexpr kOpenGLShaderStorageBarrierBit = 0x00002000;
auto constexpr kOpenGLShaderStorageBlock = 0x92e6;
auto constexpr kOpenGLShaderStorageBuffer = 0x90d2;
auto constexpr kOpenGLShaderStorageBufferBinding = 0x90d3;
auto constexpr kOpenGLShaderStorageBufferOffsetAlignment = 0x90df;
auto constexpr kOpenGLShaderStorageBufferSize = 0x90d5;
auto constexpr kOpenGLShaderStorageBufferStart = 0x90d4;
auto constexpr kOpenGLShaderType = 0x8b4f;
auto constexpr kOpenGLShadingLanguageVersion = 0x8b8c;
auto constexpr kOpenGLShininess = 0x1601;
auto constexpr kOpenGLShort = 0x1402;
auto constexpr kOpenGLSignaled = 0x9119;
auto constexpr kOpenGLSignedNormalized = 0x8f9c;
auto constexpr kOpenGLSimultaneousTextureAndDepthTest = 0x82ac;
auto constexpr kOpenGLSimultaneousTextureAndDepthWrite = 0x82ae;
auto constexpr kOpenGLSimultaneousTextureAndStencilTest = 0x82ad;
auto constexpr kOpenGLSimultaneousTextureAndStencilWrite = 0x82af;
auto constexpr kOpenGLSingleColor = 0x81f9;
auto constexpr kOpenGLSluminance = 0x8c46;
auto constexpr kOpenGLSluminance8 = 0x8c47;
auto constexpr kOpenGLSluminance8Alpha8 = 0x8c45;
auto constexpr kOpenGLSluminanceAlpha = 0x8c44;
auto constexpr kOpenGLSmooth = 0x1d01;
auto constexpr kOpenGLSmoothLineWidthGranularity = 0x0b23;
auto constexpr kOpenGLSmoothLineWidthRange = 0x0b22;
auto constexpr kOpenGLSmoothPointSizeGranularity = 0x0b13;
auto constexpr kOpenGLSmoothPointSizeRange = 0x0b12;
auto constexpr kOpenGLSoftlight = 0x929c;
auto constexpr kOpenGLSource0Alpha = 0x8588;
auto constexpr kOpenGLSource0Rgb = 0x8580;
auto constexpr kOpenGLSource1Alpha = 0x8589;
auto constexpr kOpenGLSource1Rgb = 0x8581;
auto constexpr kOpenGLSource2Alpha = 0x858a;
auto constexpr kOpenGLSource2Rgb = 0x8582;
auto constexpr kOpenGLSpecular = 0x1202;
auto constexpr kOpenGLSphereMap = 0x2402;
auto constexpr kOpenGLSpirVBinary = 0x9552;
auto constexpr kOpenGLSpirVExtensions = 0x9553;
auto constexpr kOpenGLSpotCutoff = 0x1206;
auto constexpr kOpenGLSpotDirection = 0x1204;
auto constexpr kOpenGLSpotExponent = 0x1205;
auto constexpr kOpenGLSrc0Alpha = 0x8588;
auto constexpr kOpenGLSrc0Rgb = 0x8580;
auto constexpr kOpenGLSrc1Alpha = 0x8589;
auto constexpr kOpenGLSrc1Color = 0x88f9;
auto constexpr kOpenGLSrc1Rgb = 0x8581;
auto constexpr kOpenGLSrc2Alpha = 0x858a;
auto constexpr kOpenGLSrc2Rgb = 0x8582;
auto constexpr kOpenGLSrcAlpha = 0x0302;
auto constexpr kOpenGLSrcAlphaSaturate = 0x0308;
auto constexpr kOpenGLSrcColor = 0x0300;
auto constexpr kOpenGLStackOverflow = 0x0503;
auto constexpr kOpenGLStackUnderflow = 0x0504;
auto constexpr kOpenGLStaticCopy = 0x88e6;
auto constexpr kOpenGLStaticDraw = 0x88e4;
auto constexpr kOpenGLStaticRead = 0x88e5;
auto constexpr kOpenGLStencil = 0x1802;
auto constexpr kOpenGLStencilAttachment = 0x8d20;
auto constexpr kOpenGLStencilBackFail = 0x8801;
auto constexpr kOpenGLStencilBackFunc = 0x8800;
auto constexpr kOpenGLStencilBackPassDepthFail = 0x8802;
auto constexpr kOpenGLStencilBackPassDepthPass = 0x8803;
auto constexpr kOpenGLStencilBackRef = 0x8ca3;
auto constexpr kOpenGLStencilBackValueMask = 0x8ca4;
auto constexpr kOpenGLStencilBackWriteMask = 0x8ca5;
auto constexpr kOpenGLStencilBits = 0x0d57;
auto constexpr kOpenGLStencilBufferBit = 0x00000400;
auto constexpr kOpenGLStencilClearValue = 0x0b91;
auto constexpr kOpenGLStencilComponents = 0x8285;
auto constexpr kOpenGLStencilFail = 0x0b94;
auto constexpr kOpenGLStencilFunc = 0x0b92;
auto constexpr kOpenGLStencilIndex = 0x1901;
auto constexpr kOpenGLStencilIndex1 = 0x8d46;
auto constexpr kOpenGLStencilIndex16 = 0x8d49;
auto constexpr kOpenGLStencilIndex4 = 0x8d47;
auto constexpr kOpenGLStencilIndex8 = 0x8d48;
auto constexpr kOpenGLStencilPassDepthFail = 0x0b95;
auto constexpr kOpenGLStencilPassDepthPass = 0x0b96;
auto constexpr kOpenGLStencilRef = 0x0b97;
auto constexpr kOpenGLStencilRenderable = 0x8288;
auto constexpr kOpenGLStencilTest = 0x0b90;
auto constexpr kOpenGLStencilValueMask = 0x0b93;
auto constexpr kOpenGLStencilWriteMask = 0x0b98;
auto constexpr kOpenGLStereo = 0x0c33;
auto constexpr kOpenGLStreamCopy = 0x88e2;
auto constexpr kOpenGLStreamDraw = 0x88e0;
auto constexpr kOpenGLStreamRead = 0x88e1;
auto constexpr kOpenGLSubpixelBits = 0x0d50;
auto constexpr kOpenGLSubtract = 0x84e7;
auto constexpr kOpenGLSyncCondition = 0x9113;
auto constexpr kOpenGLSyncFence = 0x9116;
auto constexpr kOpenGLSyncFlags = 0x9115;
auto constexpr kOpenGLSyncFlushCommandsBit = 0x00000001;
auto constexpr kOpenGLSyncGpuCommandsComplete = 0x9117;
auto constexpr kOpenGLSyncStatus = 0x9114;
auto constexpr kOpenGLT = 0x2001;
auto constexpr kOpenGLT2fC3fV3f = 0x2a2a;
auto constexpr kOpenGLT2fC4fN3fV3f = 0x2a2c;
auto constexpr kOpenGLT2fC4ubV3f = 0x2a29;
auto constexpr kOpenGLT2fN3fV3f = 0x2a2b;
auto constexpr kOpenGLT2fV3f = 0x2a27;
auto constexpr kOpenGLT4fC4fN3fV4f = 0x2a2d;
auto constexpr kOpenGLT4fV4f = 0x2a28;
auto constexpr kOpenGLTessControlOutputVertices = 0x8e75;
auto constexpr kOpenGLTessControlShader = 0x8e88;
auto constexpr kOpenGLTessControlShaderBit = 0x00000008;
auto constexpr kOpenGLTessControlShaderPatches = 0x82f1;
auto constexpr kOpenGLTessControlSubroutine = 0x92e9;
auto constexpr kOpenGLTessControlSubroutineUniform = 0x92ef;
auto constexpr kOpenGLTessControlTexture = 0x829c;
auto constexpr kOpenGLTessEvaluationShader = 0x8e87;
auto constexpr kOpenGLTessEvaluationShaderBit = 0x00000010;
auto constexpr kOpenGLTessEvaluationShaderInvocations = 0x82f2;
auto constexpr kOpenGLTessEvaluationSubroutine = 0x92ea;
auto constexpr kOpenGLTessEvaluationSubroutineUniform = 0x92f0;
auto constexpr kOpenGLTessEvaluationTexture = 0x829d;
auto constexpr kOpenGLTessGenMode = 0x8e76;
auto constexpr kOpenGLTessGenPointMode = 0x8e79;
auto constexpr kOpenGLTessGenSpacing = 0x8e77;
auto constexpr kOpenGLTessGenVertexOrder = 0x8e78;
auto constexpr kOpenGLTexture = 0x1702;
auto constexpr kOpenGLTexture0 = 0x84c0;
auto constexpr kOpenGLTexture1 = 0x84c1;
auto constexpr kOpenGLTexture10 = 0x84ca;
auto constexpr kOpenGLTexture11 = 0x84cb;
auto constexpr kOpenGLTexture12 = 0x84cc;
auto constexpr kOpenGLTexture13 = 0x84cd;
auto constexpr kOpenGLTexture14 = 0x84ce;
auto constexpr kOpenGLTexture15 = 0x84cf;
auto constexpr kOpenGLTexture16 = 0x84d0;
auto constexpr kOpenGLTexture17 = 0x84d1;
auto constexpr kOpenGLTexture18 = 0x84d2;
auto constexpr kOpenGLTexture19 = 0x84d3;
auto constexpr kOpenGLTexture1D = 0x0de0;
auto constexpr kOpenGLTexture1DArray = 0x8c18;
auto constexpr kOpenGLTexture2 = 0x84c2;
auto constexpr kOpenGLTexture20 = 0x84d4;
auto constexpr kOpenGLTexture21 = 0x84d5;
auto constexpr kOpenGLTexture22 = 0x84d6;
auto constexpr kOpenGLTexture23 = 0x84d7;
auto constexpr kOpenGLTexture24 = 0x84d8;
auto constexpr kOpenGLTexture25 = 0x84d9;
auto constexpr kOpenGLTexture26 = 0x84da;
auto constexpr kOpenGLTexture27 = 0x84db;
auto constexpr kOpenGLTexture28 = 0x84dc;
auto constexpr kOpenGLTexture29 = 0x84dd;
auto constexpr kOpenGLTexture2D = 0x0de1;
auto constexpr kOpenGLTexture2DArray = 0x8c1a;
auto constexpr kOpenGLTexture2DMultisample = 0x9100;
auto constexpr kOpenGLTexture2DMultisampleArray = 0x9102;
auto constexpr kOpenGLTexture3 = 0x84c3;
auto constexpr kOpenGLTexture30 = 0x84de;
auto constexpr kOpenGLTexture31 = 0x84df;
auto constexpr kOpenGLTexture3D = 0x806f;
auto constexpr kOpenGLTexture4 = 0x84c4;
auto constexpr kOpenGLTexture5 = 0x84c5;
auto constexpr kOpenGLTexture6 = 0x84c6;
auto constexpr kOpenGLTexture7 = 0x84c7;
auto constexpr kOpenGLTexture8 = 0x84c8;
auto constexpr kOpenGLTexture9 = 0x84c9;
auto constexpr kOpenGLTextureAlphaSize = 0x805f;
auto constexpr kOpenGLTextureAlphaType = 0x8c13;
auto constexpr kOpenGLTextureBaseLevel = 0x813c;
auto constexpr kOpenGLTextureBinding1D = 0x8068;
auto constexpr kOpenGLTextureBinding1DArray = 0x8c1c;
auto constexpr kOpenGLTextureBinding2D = 0x8069;
auto constexpr kOpenGLTextureBinding2DArray = 0x8c1d;
auto constexpr kOpenGLTextureBinding2DMultisample = 0x9104;
auto constexpr kOpenGLTextureBinding2DMultisampleArray = 0x9105;
auto constexpr kOpenGLTextureBinding3D = 0x806a;
auto constexpr kOpenGLTextureBindingBuffer = 0x8c2c;
auto constexpr kOpenGLTextureBindingCubeMap = 0x8514;
auto constexpr kOpenGLTextureBindingCubeMapArray = 0x900a;
auto constexpr kOpenGLTextureBindingRectangle = 0x84f6;
auto constexpr kOpenGLTextureBit = 0x00040000;
auto constexpr kOpenGLTextureBlueSize = 0x805e;
auto constexpr kOpenGLTextureBlueType = 0x8c12;
auto constexpr kOpenGLTextureBorder = 0x1005;
auto constexpr kOpenGLTextureBorderColor = 0x1004;
auto constexpr kOpenGLTextureBuffer = 0x8c2a;
auto constexpr kOpenGLTextureBufferBinding = 0x8c2a;
auto constexpr kOpenGLTextureBufferDataStoreBinding = 0x8c2d;
auto constexpr kOpenGLTextureBufferOffset = 0x919d;
auto constexpr kOpenGLTextureBufferOffsetAlignment = 0x919f;
auto constexpr kOpenGLTextureBufferSize = 0x919e;
auto constexpr kOpenGLTextureCompareFunc = 0x884d;
auto constexpr kOpenGLTextureCompareMode = 0x884c;
auto constexpr kOpenGLTextureComponents = 0x1003;
auto constexpr kOpenGLTextureCompressed = 0x86a1;
auto constexpr kOpenGLTextureCompressedBlockHeight = 0x82b2;
auto constexpr kOpenGLTextureCompressedBlockSize = 0x82b3;
auto constexpr kOpenGLTextureCompressedBlockWidth = 0x82b1;
auto constexpr kOpenGLTextureCompressedImageSize = 0x86a0;
auto constexpr kOpenGLTextureCompressionHint = 0x84ef;
auto constexpr kOpenGLTextureCoordArray = 0x8078;
auto constexpr kOpenGLTextureCoordArrayBufferBinding = 0x889a;
auto constexpr kOpenGLTextureCoordArrayPointer = 0x8092;
auto constexpr kOpenGLTextureCoordArraySize = 0x8088;
auto constexpr kOpenGLTextureCoordArrayStride = 0x808a;
auto constexpr kOpenGLTextureCoordArrayType = 0x8089;
auto constexpr kOpenGLTextureCubeMap = 0x8513;
auto constexpr kOpenGLTextureCubeMapArray = 0x9009;
auto constexpr kOpenGLTextureCubeMapNegativeX = 0x8516;
auto constexpr kOpenGLTextureCubeMapNegativeY = 0x8518;
auto constexpr kOpenGLTextureCubeMapNegativeZ = 0x851a;
auto constexpr kOpenGLTextureCubeMapPositiveX = 0x8515;
auto constexpr kOpenGLTextureCubeMapPositiveY = 0x8517;
auto constexpr kOpenGLTextureCubeMapPositiveZ = 0x8519;
auto constexpr kOpenGLTextureCubeMapSeamless = 0x884f;
auto constexpr kOpenGLTextureDepth = 0x8071;
auto constexpr kOpenGLTextureDepthSize = 0x884a;
auto constexpr kOpenGLTextureDepthType = 0x8c16;
auto constexpr kOpenGLTextureEnv = 0x2300;
auto constexpr kOpenGLTextureEnvColor = 0x2201;
auto constexpr kOpenGLTextureEnvMode = 0x2200;
auto constexpr kOpenGLTextureFetchBarrierBit = 0x00000008;
auto constexpr kOpenGLTextureFilterControl = 0x8500;
auto constexpr kOpenGLTextureFixedSampleLocations = 0x9107;
auto constexpr kOpenGLTextureGather = 0x82a2;
auto constexpr kOpenGLTextureGatherShadow = 0x82a3;
auto constexpr kOpenGLTextureGenMode = 0x2500;
auto constexpr kOpenGLTextureGenQ = 0x0c63;
auto constexpr kOpenGLTextureGenR = 0x0c62;
auto constexpr kOpenGLTextureGenS = 0x0c60;
auto constexpr kOpenGLTextureGenT = 0x0c61;
auto constexpr kOpenGLTextureGreenSize = 0x805d;
auto constexpr kOpenGLTextureGreenType = 0x8c11;
auto constexpr kOpenGLTextureHeight = 0x1001;
auto constexpr kOpenGLTextureImageFormat = 0x828f;
auto constexpr kOpenGLTextureImageType = 0x8290;
auto constexpr kOpenGLTextureImmutableFormat = 0x912f;
auto constexpr kOpenGLTextureImmutableLevels = 0x82df;
auto constexpr kOpenGLTextureIntensitySize = 0x8061;
auto constexpr kOpenGLTextureIntensityType = 0x8c15;
auto constexpr kOpenGLTextureInternalFormat = 0x1003;
auto constexpr kOpenGLTextureLodBias = 0x8501;
auto constexpr kOpenGLTextureLuminanceSize = 0x8060;
auto constexpr kOpenGLTextureLuminanceType = 0x8c14;
auto constexpr kOpenGLTextureMagFilter = 0x2800;
auto constexpr kOpenGLTextureMatrix = 0x0ba8;
auto constexpr kOpenGLTextureMaxAnisotropy = 0x84fe;
auto constexpr kOpenGLTextureMaxLevel = 0x813d;
auto constexpr kOpenGLTextureMaxLod = 0x813b;
auto constexpr kOpenGLTextureMinFilter = 0x2801;
auto constexpr kOpenGLTextureMinLod = 0x813a;
auto constexpr kOpenGLTexturePriority = 0x8066;
auto constexpr kOpenGLTextureRectangle = 0x84f5;
auto constexpr kOpenGLTextureRedSize = 0x805c;
auto constexpr kOpenGLTextureRedType = 0x8c10;
auto constexpr kOpenGLTextureResident = 0x8067;
auto constexpr kOpenGLTextureSamples = 0x9106;
auto constexpr kOpenGLTextureShadow = 0x82a1;
auto constexpr kOpenGLTextureSharedSize = 0x8c3f;
auto constexpr kOpenGLTextureStackDepth = 0x0ba5;
auto constexpr kOpenGLTextureStencilSize = 0x88f1;
auto constexpr kOpenGLTextureSwizzleA = 0x8e45;
auto constexpr kOpenGLTextureSwizzleB = 0x8e44;
auto constexpr kOpenGLTextureSwizzleG = 0x8e43;
auto constexpr kOpenGLTextureSwizzleR = 0x8e42;
auto constexpr kOpenGLTextureSwizzleRGBA = 0x8e46;
auto constexpr kOpenGLTextureTarget = 0x1006;
auto constexpr kOpenGLTextureUpdateBarrierBit = 0x00000100;
auto constexpr kOpenGLTextureView = 0x82b5;
auto constexpr kOpenGLTextureViewMinLayer = 0x82dd;
auto constexpr kOpenGLTextureViewMinLevel = 0x82db;
auto constexpr kOpenGLTextureViewNumLayers = 0x82de;
auto constexpr kOpenGLTextureViewNumLevels = 0x82dc;
auto constexpr kOpenGLTextureWidth = 0x1000;
auto constexpr kOpenGLTextureWrapR = 0x8072;
auto constexpr kOpenGLTextureWrapS = 0x2802;
auto constexpr kOpenGLTextureWrapT = 0x2803;
auto constexpr kOpenGLTimeElapsed = 0x88bf;
auto constexpr kOpenGLTimeoutExpired = 0x911b;
auto constexpr kOpenGLTimeoutIgnored = 0xffffffffffffffff;
auto constexpr kOpenGLTimestamp = 0x8e28;
auto constexpr kOpenGLTopLevelArraySize = 0x930c;
auto constexpr kOpenGLTopLevelArrayStride = 0x930d;
auto constexpr kOpenGLTransformBit = 0x00001000;
auto constexpr kOpenGLTransformFeedback = 0x8e22;
auto constexpr kOpenGLTransformFeedbackActive = 0x8e24;
auto constexpr kOpenGLTransformFeedbackBarrierBit = 0x00000800;
auto constexpr kOpenGLTransformFeedbackBinding = 0x8e25;
auto constexpr kOpenGLTransformFeedbackBuffer = 0x8c8e;
auto constexpr kOpenGLTransformFeedbackBufferActive = 0x8e24;
auto constexpr kOpenGLTransformFeedbackBufferBinding = 0x8c8f;
auto constexpr kOpenGLTransformFeedbackBufferIndex = 0x934b;
auto constexpr kOpenGLTransformFeedbackBufferMode = 0x8c7f;
auto constexpr kOpenGLTransformFeedbackBufferPaused = 0x8e23;
auto constexpr kOpenGLTransformFeedbackBufferSize = 0x8c85;
auto constexpr kOpenGLTransformFeedbackBufferStart = 0x8c84;
auto constexpr kOpenGLTransformFeedbackBufferStride = 0x934c;
auto constexpr kOpenGLTransformFeedbackOverflow = 0x82ec;
auto constexpr kOpenGLTransformFeedbackPaused = 0x8e23;
auto constexpr kOpenGLTransformFeedbackPrimitivesWritten = 0x8c88;
auto constexpr kOpenGLTransformFeedbackStreamOverflow = 0x82ed;
auto constexpr kOpenGLTransformFeedbackVarying = 0x92f4;
auto constexpr kOpenGLTransformFeedbackVaryingMaxLength = 0x8c76;
auto constexpr kOpenGLTransformFeedbackVaryings = 0x8c83;
auto constexpr kOpenGLTransposeColorMatrix = 0x84e6;
auto constexpr kOpenGLTransposeModelviewMatrix = 0x84e3;
auto constexpr kOpenGLTransposeProjectionMatrix = 0x84e4;
auto constexpr kOpenGLTransposeTextureMatrix = 0x84e5;
auto constexpr kOpenGLTriangleFan = 0x0006;
auto constexpr kOpenGLTriangleStrip = 0x0005;
auto constexpr kOpenGLTriangleStripAdjacency = 0x000d;
auto constexpr kOpenGLTriangles = 0x0004;
auto constexpr kOpenGLTrianglesAdjacency = 0x000c;
auto constexpr kOpenGLType = 0x92fa;
auto constexpr kOpenGLUndefinedVertex = 0x8260;
auto constexpr kOpenGLUniform = 0x92e1;
auto constexpr kOpenGLUniformArrayStride = 0x8a3c;
auto constexpr kOpenGLUniformAtomicCounterBufferIndex = 0x92da;
auto constexpr kOpenGLUniformBarrierBit = 0x00000004;
auto constexpr kOpenGLUniformBlock = 0x92e2;
auto constexpr kOpenGLUniformBlockActiveUniformIndices = 0x8a43;
auto constexpr kOpenGLUniformBlockActiveUniforms = 0x8a42;
auto constexpr kOpenGLUniformBlockBinding = 0x8a3f;
auto constexpr kOpenGLUniformBlockDataSize = 0x8a40;
auto constexpr kOpenGLUniformBlockIndex = 0x8a3a;
auto constexpr kOpenGLUniformBlockNameLength = 0x8a41;
auto constexpr kOpenGLUniformBlockReferencedByComputeShader = 0x90ec;
auto constexpr kOpenGLUniformBlockReferencedByFragmentShader = 0x8a46;
auto constexpr kOpenGLUniformBlockReferencedByGeometryShader = 0x8a45;
auto constexpr kOpenGLUniformBlockReferencedByTessControlShader = 0x84f0;
auto constexpr kOpenGLUniformBlockReferencedByTessEvaluationShader = 0x84f1;
auto constexpr kOpenGLUniformBlockReferencedByVertexShader = 0x8a44;
auto constexpr kOpenGLUniformBuffer = 0x8a11;
auto constexpr kOpenGLUniformBufferBinding = 0x8a28;
auto constexpr kOpenGLUniformBufferOffsetAlignment = 0x8a34;
auto constexpr kOpenGLUniformBufferSize = 0x8a2a;
auto constexpr kOpenGLUniformBufferStart = 0x8a29;
auto constexpr kOpenGLUniformIsRowMajor = 0x8a3e;
auto constexpr kOpenGLUniformMatrixStride = 0x8a3d;
auto constexpr kOpenGLUniformNameLength = 0x8a39;
auto constexpr kOpenGLUniformOffset = 0x8a3b;
auto constexpr kOpenGLUniformSize = 0x8a38;
auto constexpr kOpenGLUniformType = 0x8a37;
auto constexpr kOpenGLUnknownContextReset = 0x8255;
auto constexpr kOpenGLUnpackAlignment = 0x0cf5;
auto constexpr kOpenGLUnpackCompressedBlockDepth = 0x9129;
auto constexpr kOpenGLUnpackCompressedBlockHeight = 0x9128;
auto constexpr kOpenGLUnpackCompressedBlockSize = 0x912a;
auto constexpr kOpenGLUnpackCompressedBlockWidth = 0x9127;
auto constexpr kOpenGLUnpackImageHeight = 0x806e;
auto constexpr kOpenGLUnpackLSBFirst = 0x0cf1;
auto constexpr kOpenGLUnpackRowLength = 0x0cf2;
auto constexpr kOpenGLUnpackSkipImages = 0x806d;
auto constexpr kOpenGLUnpackSkipPixels = 0x0cf4;
auto constexpr kOpenGLUnpackSkipRows = 0x0cf3;
auto constexpr kOpenGLUnpackSwapBytes = 0x0cf0;
auto constexpr kOpenGLUnsignaled = 0x9118;
auto constexpr kOpenGLUnsignedByte = 0x1401;
auto constexpr kOpenGLUnsignedByte233Rev = 0x8362;
auto constexpr kOpenGLUnsignedByte332 = 0x8032;
auto constexpr kOpenGLUnsignedInt = 0x1405;
auto constexpr kOpenGLUnsignedInt1010102 = 0x8036;
auto constexpr kOpenGLUnsignedInt10f11f11fRev = 0x8c3b;
auto constexpr kOpenGLUnsignedInt2101010Rev = 0x8368;
auto constexpr kOpenGLUnsignedInt248 = 0x84fa;
auto constexpr kOpenGLUnsignedInt5999Rev = 0x8c3e;
auto constexpr kOpenGLUnsignedInt8888 = 0x8035;
auto constexpr kOpenGLUnsignedInt8888Rev = 0x8367;
auto constexpr kOpenGLUnsignedIntAtomicCounter = 0x92db;
auto constexpr kOpenGLUnsignedIntImage1D = 0x9062;
auto constexpr kOpenGLUnsignedIntImage1DArray = 0x9068;
auto constexpr kOpenGLUnsignedIntImage2D = 0x9063;
auto constexpr kOpenGLUnsignedIntImage2DArray = 0x9069;
auto constexpr kOpenGLUnsignedIntImage2DMultisample = 0x906b;
auto constexpr kOpenGLUnsignedIntImage2DMultisampleArray = 0x906c;
auto constexpr kOpenGLUnsignedIntImage2DRect = 0x9065;
auto constexpr kOpenGLUnsignedIntImage3D = 0x9064;
auto constexpr kOpenGLUnsignedIntImageBuffer = 0x9067;
auto constexpr kOpenGLUnsignedIntImageCube = 0x9066;
auto constexpr kOpenGLUnsignedIntImageCubeMapArray = 0x906a;
auto constexpr kOpenGLUnsignedIntSampler1D = 0x8dd1;
auto constexpr kOpenGLUnsignedIntSampler1DArray = 0x8dd6;
auto constexpr kOpenGLUnsignedIntSampler2D = 0x8dd2;
auto constexpr kOpenGLUnsignedIntSampler2DArray = 0x8dd7;
auto constexpr kOpenGLUnsignedIntSampler2DMultisample = 0x910a;
auto constexpr kOpenGLUnsignedIntSampler2DMultisampleArray = 0x910d;
auto constexpr kOpenGLUnsignedIntSampler2DRect = 0x8dd5;
auto constexpr kOpenGLUnsignedIntSampler3D = 0x8dd3;
auto constexpr kOpenGLUnsignedIntSamplerBuffer = 0x8dd8;
auto constexpr kOpenGLUnsignedIntSamplerCube = 0x8dd4;
auto constexpr kOpenGLUnsignedIntSamplerCubeMapArray = 0x900f;
auto constexpr kOpenGLUnsignedIntVec2 = 0x8dc6;
auto constexpr kOpenGLUnsignedIntVec3 = 0x8dc7;
auto constexpr kOpenGLUnsignedIntVec4 = 0x8dc8;
auto constexpr kOpenGLUnsignedNormalized = 0x8c17;
auto constexpr kOpenGLUnsignedShort = 0x1403;
auto constexpr kOpenGLUnsignedShort1555Rev = 0x8366;
auto constexpr kOpenGLUnsignedShort4444 = 0x8033;
auto constexpr kOpenGLUnsignedShort4444Rev = 0x8365;
auto constexpr kOpenGLUnsignedShort5551 = 0x8034;
auto constexpr kOpenGLUnsignedShort565 = 0x8363;
auto constexpr kOpenGLUnsignedShort565Rev = 0x8364;
auto constexpr kOpenGLUpperLeft = 0x8ca2;
auto constexpr kOpenGLV2f = 0x2a20;
auto constexpr kOpenGLV3f = 0x2a21;
auto constexpr kOpenGLValidateStatus = 0x8b83;
auto constexpr kOpenGLVendor = 0x1f00;
auto constexpr kOpenGLVersion = 0x1f02;
auto constexpr kOpenGLVertexArray = 0x8074;
auto constexpr kOpenGLVertexArrayBinding = 0x85b5;
auto constexpr kOpenGLVertexArrayBufferBinding = 0x8896;
auto constexpr kOpenGLVertexArrayPointer = 0x808e;
auto constexpr kOpenGLVertexArraySize = 0x807a;
auto constexpr kOpenGLVertexArrayStride = 0x807c;
auto constexpr kOpenGLVertexArrayType = 0x807b;
auto constexpr kOpenGLVertexAttribArrayBarrierBit = 0x00000001;
auto constexpr kOpenGLVertexAttribArrayBufferBinding = 0x889f;
auto constexpr kOpenGLVertexAttribArrayDivisor = 0x88fe;
auto constexpr kOpenGLVertexAttribArrayEnabled = 0x8622;
auto constexpr kOpenGLVertexAttribArrayInteger = 0x88fd;
auto constexpr kOpenGLVertexAttribArrayLong = 0x874e;
auto constexpr kOpenGLVertexAttribArrayNormalized = 0x886a;
auto constexpr kOpenGLVertexAttribArrayPointer = 0x8645;
auto constexpr kOpenGLVertexAttribArraySize = 0x8623;
auto constexpr kOpenGLVertexAttribArrayStride = 0x8624;
auto constexpr kOpenGLVertexAttribArrayType = 0x8625;
auto constexpr kOpenGLVertexAttribBinding = 0x82d4;
auto constexpr kOpenGLVertexAttribRelativeOffset = 0x82d5;
auto constexpr kOpenGLVertexBindingBuffer = 0x8f4f;
auto constexpr kOpenGLVertexBindingDivisor = 0x82d6;
auto constexpr kOpenGLVertexBindingOffset = 0x82d7;
auto constexpr kOpenGLVertexBindingStride = 0x82d8;
auto constexpr kOpenGLVertexProgramPointSize = 0x8642;
auto constexpr kOpenGLVertexProgramTwoSide = 0x8643;
auto constexpr kOpenGLVertexShader = 0x8b31;
auto constexpr kOpenGLVertexShaderBit = 0x00000001;
auto constexpr kOpenGLVertexShaderInvocations = 0x82f0;
auto constexpr kOpenGLVertexSubroutine = 0x92e8;
auto constexpr kOpenGLVertexSubroutineUniform = 0x92ee;
auto constexpr kOpenGLVertexTexture = 0x829b;
auto constexpr kOpenGLVerticesSubmitted = 0x82ee;
auto constexpr kOpenGLViewClass128Bits = 0x82c4;
auto constexpr kOpenGLViewClass16Bits = 0x82ca;
auto constexpr kOpenGLViewClass24Bits = 0x82c9;
auto constexpr kOpenGLViewClass32Bits = 0x82c8;
auto constexpr kOpenGLViewClass48Bits = 0x82c7;
auto constexpr kOpenGLViewClass64Bits = 0x82c6;
auto constexpr kOpenGLViewClass8Bits = 0x82cb;
auto constexpr kOpenGLViewClass96Bits = 0x82c5;
auto constexpr kOpenGLViewClassBptcFloat = 0x82d3;
auto constexpr kOpenGLViewClassBptcUnorm = 0x82d2;
auto constexpr kOpenGLViewClassRgtc1Red = 0x82d0;
auto constexpr kOpenGLViewClassRgtc2Rg = 0x82d1;
auto constexpr kOpenGLViewClassS3tcDxt1RGBA = 0x82cd;
auto constexpr kOpenGLViewClassS3tcDxt1Rgb = 0x82cc;
auto constexpr kOpenGLViewClassS3tcDxt3RGBA = 0x82ce;
auto constexpr kOpenGLViewClassS3tcDxt5RGBA = 0x82cf;
auto constexpr kOpenGLViewCompatibilityClass = 0x82b6;
auto constexpr kOpenGLViewport = 0x0ba2;
auto constexpr kOpenGLViewportBit = 0x00000800;
auto constexpr kOpenGLViewportBoundsRange = 0x825d;
auto constexpr kOpenGLViewportIndexProvokingVertex = 0x825f;
auto constexpr kOpenGLViewportSubpixelBits = 0x825c;
auto constexpr kOpenGLWaitFailed = 0x911d;
auto constexpr kOpenGLWeightArrayBufferBinding = 0x889e;
auto constexpr kOpenGLWriteOnly = 0x88b9;
auto constexpr kOpenGLXor = 0x1506;
auto constexpr kOpenGLZeroToOne = 0x935f;
auto constexpr kOpenGLZoomX = 0x0d16;
auto constexpr kOpenGLZoomY = 0x0d17;

} /* namespace boom */