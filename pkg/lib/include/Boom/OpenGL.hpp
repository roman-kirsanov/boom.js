#pragma once

#include <optional>
#include <Boom/Memory.hpp>

namespace boom {

struct __OpenGLImpl;

class View;
class OpenGL;

using OpenGLEnum = std::uint32_t;
using OpenGLBoolean = std::uint8_t;
using OpenGLBitfield = std::uint32_t;
using OpenGLVoid = void;
using OpenGLByte = std::int8_t;
using OpenGLUbyte = std::uint8_t;
using OpenGLShort = std::int16_t;
using OpenGLUShort = std::uint16_t;
using OpenGLInt = int;
using OpenGLUint = std::uint32_t;
using OpenGLClampx = std::int32_t;
using OpenGLSizei = int;
using OpenGLFloat = float;
using OpenGLClampf = float;
using OpenGLDouble = double;
using OpenGLClampd = double;
using OpenGLEGLClientBufferEXT = void*;
using OpenGLEGLImageOES = void*;
using OpenGLChar = char;
using OpenGLCharARB = char;
#ifdef __APPLE__
using OpenGLHandleARB = void*;
#else
using OpenGLHandleARB = std::uint32_t;
#endif
using OpenGLHalf = std::uint16_t;
using OpenGLHalfARB = std::uint16_t;
using OpenGLFixed = std::int32_t;
using OpenGLIntptr = std::intptr_t;
using OpenGLIntptrARB = std::intptr_t;
#if defined(_WIN64)
using OpenGLSizeiptr = std::int64_t;
#else
using OpenGLSizeiptr = long;
#endif
using OpenGLSizeiptrARB = std::int64_t;
using OpenGLInt64 = std::int64_t;
using OpenGLInt64EXT = std::int64_t;
using OpenGLUInt64 = std::uint64_t;
using OpenGLUInt64EXT = std::uint64_t;
using OpenGLSync = struct __GLsync*;
using OpenGLDebugProc = void (*)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void const*);
using OpenGLDebugProcARB = void (*)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void const*);
using OpenGLDebugProcKHR = void (*)(boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void const*);
using OpenGLDebugProcAMD = void (*)(boom::OpenGLUint, boom::OpenGLEnum, boom::OpenGLEnum, boom::OpenGLSizei, boom::OpenGLChar const*, void*);
using OpenGLHalfNV = std::uint16_t;
using OpenGLVDPAUSurfaceNV = boom::OpenGLIntptr;
using OpenGLVulkanProcNV = void (*)(void);

struct OpenGLOptions {
    std::optional<std::shared_ptr<boom::OpenGL const>> shared;
    std::optional<std::shared_ptr<boom::View const>> view;
    std::optional<std::int32_t> majorVersion;
    std::optional<std::int32_t> minorVersion;
    std::optional<bool> debug;
};

class OpenGL : public boom::Shared {
public:
    OpenGL(boom::OpenGLOptions const& = {});
    void accum(boom::OpenGLEnum op, boom::OpenGLFloat value) const;
    void activeShaderProgram(boom::OpenGLUint pipeline, boom::OpenGLUint program) const;
    void activeTexture(boom::OpenGLEnum texture) const;
    void alphaFunc(boom::OpenGLEnum func, boom::OpenGLFloat ref) const;
    void alphaFuncx(boom::OpenGLEnum func, boom::OpenGLFixed ref) const;
    boom::OpenGLBoolean areTexturesResident(boom::OpenGLSizei n, boom::OpenGLUint const* textures, boom::OpenGLBoolean* residences) const;
    void arrayElement(boom::OpenGLInt i) const;
    void attachShader(boom::OpenGLUint program, boom::OpenGLUint shader) const;
    void begin(boom::OpenGLEnum mode) const;
    void beginConditionalRender(boom::OpenGLUint id, boom::OpenGLEnum mode) const;
    void beginQuery(boom::OpenGLEnum target, boom::OpenGLUint id) const;
    void beginQueryIndexed(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint id) const;
    void beginTransformFeedback(boom::OpenGLEnum primitiveMode) const;
    void bindAttribLocation(boom::OpenGLUint program, boom::OpenGLUint index, boom::OpenGLChar const* name) const;
    void bindBuffer(boom::OpenGLEnum target, boom::OpenGLUint buffer) const;
    void bindBufferBase(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint buffer) const;
    void bindBufferRange(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void bindBuffersBase(boom::OpenGLEnum target, boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* buffers) const;
    void bindBuffersRange(boom::OpenGLEnum target, boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* buffers, boom::OpenGLIntptr const* offsets, boom::OpenGLSizeiptr const* sizes) const;
    void bindFragDataLocation(boom::OpenGLUint program, boom::OpenGLUint color, boom::OpenGLChar const* name) const;
    void bindFragDataLocationIndexed(boom::OpenGLUint program, boom::OpenGLUint colorNumber, boom::OpenGLUint index, boom::OpenGLChar const* name) const;
    void bindFramebuffer(boom::OpenGLEnum target, boom::OpenGLUint framebuffer) const;
    void bindImageTexture(boom::OpenGLUint unit, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLBoolean layered, boom::OpenGLInt layer, boom::OpenGLEnum access, boom::OpenGLEnum format) const;
    void bindImageTextures(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* textures) const;
    void bindProgramPipeline(boom::OpenGLUint pipeline) const;
    void bindRenderbuffer(boom::OpenGLEnum target, boom::OpenGLUint renderbuffer) const;
    void bindSampler(boom::OpenGLUint unit, boom::OpenGLUint sampler) const;
    void bindSamplers(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* samplers) const;
    void bindTexture(boom::OpenGLEnum target, boom::OpenGLUint texture) const;
    void bindTextureUnit(boom::OpenGLUint unit, boom::OpenGLUint texture) const;
    void bindTextures(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* textures) const;
    void bindTransformFeedback(boom::OpenGLEnum target, boom::OpenGLUint id) const;
    void bindVertexArray(boom::OpenGLUint array) const;
    void bindVertexBuffer(boom::OpenGLUint bindingindex, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizei stride) const;
    void bindVertexBuffers(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* buffers, boom::OpenGLIntptr const* offsets, boom::OpenGLSizei const* strides) const;
    void bitmap(boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLFloat xorig, boom::OpenGLFloat yorig, boom::OpenGLFloat xmove, boom::OpenGLFloat ymove, boom::OpenGLUbyte const* bitmap) const;
    void blendBarrier() const;
    void blendColor(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void blendEquation(boom::OpenGLEnum mode) const;
    void blendEquationSeparate(boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationSeparatei(boom::OpenGLUint buf, boom::OpenGLEnum modeRGB, boom::OpenGLEnum modeAlpha) const;
    void blendEquationi(boom::OpenGLUint buf, boom::OpenGLEnum mode) const;
    void blendFunc(boom::OpenGLEnum sfactor, boom::OpenGLEnum dfactor) const;
    void blendFuncSeparate(boom::OpenGLEnum sfactorRGB, boom::OpenGLEnum dfactorRGB, boom::OpenGLEnum sfactorAlpha, boom::OpenGLEnum dfactorAlpha) const;
    void blendFuncSeparatei(boom::OpenGLUint buf, boom::OpenGLEnum srcRGB, boom::OpenGLEnum dstRGB, boom::OpenGLEnum srcAlpha, boom::OpenGLEnum dstAlpha) const;
    void blendFunci(boom::OpenGLUint buf, boom::OpenGLEnum src, boom::OpenGLEnum dst) const;
    void blitFramebuffer(boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void blitNamedFramebuffer(boom::OpenGLUint readFramebuffer, boom::OpenGLUint drawFramebuffer, boom::OpenGLInt srcX0, boom::OpenGLInt srcY0, boom::OpenGLInt srcX1, boom::OpenGLInt srcY1, boom::OpenGLInt dstX0, boom::OpenGLInt dstY0, boom::OpenGLInt dstX1, boom::OpenGLInt dstY1, boom::OpenGLBitfield mask, boom::OpenGLEnum filter) const;
    void bufferData(boom::OpenGLEnum target, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLEnum usage) const;
    void bufferStorage(boom::OpenGLEnum target, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLBitfield flags) const;
    void bufferSubData(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void callList(boom::OpenGLUint list) const;
    void callLists(boom::OpenGLSizei n, boom::OpenGLEnum type, void const* lists) const;
    boom::OpenGLEnum checkFramebufferStatus(boom::OpenGLEnum target) const;
    boom::OpenGLEnum checkNamedFramebufferStatus(boom::OpenGLUint framebuffer, boom::OpenGLEnum target) const;
    void clampColor(boom::OpenGLEnum target, boom::OpenGLEnum clamp) const;
    void clear(boom::OpenGLBitfield mask) const;
    void clearAccum(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void clearBufferData(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearBufferSubData(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearBufferfi(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat depth, boom::OpenGLInt stencil) const;
    void clearBufferfv(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat const* value) const;
    void clearBufferiv(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLInt const* value) const;
    void clearBufferuiv(boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLUint const* value) const;
    void clearColor(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void clearColorx(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void clearDepth(boom::OpenGLDouble depth) const;
    void clearDepthf(boom::OpenGLFloat d) const;
    void clearDepthx(boom::OpenGLFixed depth) const;
    void clearIndex(boom::OpenGLFloat c) const;
    void clearNamedBufferData(boom::OpenGLUint buffer, boom::OpenGLEnum internalformat, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearNamedBufferSubData(boom::OpenGLUint buffer, boom::OpenGLEnum internalformat, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearNamedFramebufferfi(boom::OpenGLUint framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat depth, boom::OpenGLInt stencil) const;
    void clearNamedFramebufferfv(boom::OpenGLUint framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLFloat const* value) const;
    void clearNamedFramebufferiv(boom::OpenGLUint framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLInt const* value) const;
    void clearNamedFramebufferuiv(boom::OpenGLUint framebuffer, boom::OpenGLEnum buffer, boom::OpenGLInt drawbuffer, boom::OpenGLUint const* value) const;
    void clearStencil(boom::OpenGLInt s) const;
    void clearTexImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clearTexSubImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* data) const;
    void clientActiveTexture(boom::OpenGLEnum texture) const;
    boom::OpenGLEnum clientWaitSync(boom::OpenGLSync sync, boom::OpenGLBitfield flags, boom::OpenGLUInt64 timeout) const;
    void clipControl(boom::OpenGLEnum origin, boom::OpenGLEnum depth) const;
    void clipPlane(boom::OpenGLEnum plane, boom::OpenGLDouble const* equation) const;
    void clipPlanef(boom::OpenGLEnum p, boom::OpenGLFloat const* eqn) const;
    void clipPlanex(boom::OpenGLEnum plane, boom::OpenGLFixed const* equation) const;
    void color3b(boom::OpenGLByte red, boom::OpenGLByte green, boom::OpenGLByte blue) const;
    void color3bv(boom::OpenGLByte const* v) const;
    void color3d(boom::OpenGLDouble red, boom::OpenGLDouble green, boom::OpenGLDouble blue) const;
    void color3dv(boom::OpenGLDouble const* v) const;
    void color3f(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue) const;
    void color3fv(boom::OpenGLFloat const* v) const;
    void color3i(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue) const;
    void color3iv(boom::OpenGLInt const* v) const;
    void color3s(boom::OpenGLShort red, boom::OpenGLShort green, boom::OpenGLShort blue) const;
    void color3sv(boom::OpenGLShort const* v) const;
    void color3ub(boom::OpenGLUbyte red, boom::OpenGLUbyte green, boom::OpenGLUbyte blue) const;
    void color3ubv(boom::OpenGLUbyte const* v) const;
    void color3ui(boom::OpenGLUint red, boom::OpenGLUint green, boom::OpenGLUint blue) const;
    void color3uiv(boom::OpenGLUint const* v) const;
    void color3us(boom::OpenGLUShort red, boom::OpenGLUShort green, boom::OpenGLUShort blue) const;
    void color3usv(boom::OpenGLUShort const* v) const;
    void color4b(boom::OpenGLByte red, boom::OpenGLByte green, boom::OpenGLByte blue, boom::OpenGLByte alpha) const;
    void color4bv(boom::OpenGLByte const* v) const;
    void color4d(boom::OpenGLDouble red, boom::OpenGLDouble green, boom::OpenGLDouble blue, boom::OpenGLDouble alpha) const;
    void color4dv(boom::OpenGLDouble const* v) const;
    void color4f(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue, boom::OpenGLFloat alpha) const;
    void color4fv(boom::OpenGLFloat const* v) const;
    void color4i(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue, boom::OpenGLInt alpha) const;
    void color4iv(boom::OpenGLInt const* v) const;
    void color4s(boom::OpenGLShort red, boom::OpenGLShort green, boom::OpenGLShort blue, boom::OpenGLShort alpha) const;
    void color4sv(boom::OpenGLShort const* v) const;
    void color4ub(boom::OpenGLUbyte red, boom::OpenGLUbyte green, boom::OpenGLUbyte blue, boom::OpenGLUbyte alpha) const;
    void color4ubv(boom::OpenGLUbyte const* v) const;
    void color4ui(boom::OpenGLUint red, boom::OpenGLUint green, boom::OpenGLUint blue, boom::OpenGLUint alpha) const;
    void color4uiv(boom::OpenGLUint const* v) const;
    void color4us(boom::OpenGLUShort red, boom::OpenGLUShort green, boom::OpenGLUShort blue, boom::OpenGLUShort alpha) const;
    void color4usv(boom::OpenGLUShort const* v) const;
    void color4x(boom::OpenGLFixed red, boom::OpenGLFixed green, boom::OpenGLFixed blue, boom::OpenGLFixed alpha) const;
    void colorMask(boom::OpenGLBoolean red, boom::OpenGLBoolean green, boom::OpenGLBoolean blue, boom::OpenGLBoolean alpha) const;
    void colorMaski(boom::OpenGLUint index, boom::OpenGLBoolean r, boom::OpenGLBoolean g, boom::OpenGLBoolean b, boom::OpenGLBoolean a) const;
    void colorMaterial(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void colorP3ui(boom::OpenGLEnum type, boom::OpenGLUint color) const;
    void colorP3uiv(boom::OpenGLEnum type, boom::OpenGLUint const* color) const;
    void colorP4ui(boom::OpenGLEnum type, boom::OpenGLUint color) const;
    void colorP4uiv(boom::OpenGLEnum type, boom::OpenGLUint const* color) const;
    void colorPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void compileShader(boom::OpenGLUint shader) const;
    void compressedTexImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTexSubImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTextureSubImage1D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTextureSubImage2D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void compressedTextureSubImage3D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLSizei imageSize, void const* data) const;
    void copyBufferSubData(boom::OpenGLEnum readTarget, boom::OpenGLEnum writeTarget, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void copyImageSubData(boom::OpenGLUint srcName, boom::OpenGLEnum srcTarget, boom::OpenGLInt srcLevel, boom::OpenGLInt srcX, boom::OpenGLInt srcY, boom::OpenGLInt srcZ, boom::OpenGLUint dstName, boom::OpenGLEnum dstTarget, boom::OpenGLInt dstLevel, boom::OpenGLInt dstX, boom::OpenGLInt dstY, boom::OpenGLInt dstZ, boom::OpenGLSizei srcWidth, boom::OpenGLSizei srcHeight, boom::OpenGLSizei srcDepth) const;
    void copyNamedBufferSubData(boom::OpenGLUint readBuffer, boom::OpenGLUint writeBuffer, boom::OpenGLIntptr readOffset, boom::OpenGLIntptr writeOffset, boom::OpenGLSizeiptr size) const;
    void copyPixels(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum type) const;
    void copyTexImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLInt border) const;
    void copyTexImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum internalformat, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border) const;
    void copyTexSubImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyTexSubImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTexSubImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTextureSubImage1D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width) const;
    void copyTextureSubImage2D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void copyTextureSubImage3D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void createBuffers(boom::OpenGLSizei n, boom::OpenGLUint* buffers) const;
    void createFramebuffers(boom::OpenGLSizei n, boom::OpenGLUint* framebuffers) const;
    boom::OpenGLUint createProgram() const;
    void createProgramPipelines(boom::OpenGLSizei n, boom::OpenGLUint* pipelines) const;
    void createQueries(boom::OpenGLEnum target, boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    void createRenderbuffers(boom::OpenGLSizei n, boom::OpenGLUint* renderbuffers) const;
    void createSamplers(boom::OpenGLSizei n, boom::OpenGLUint* samplers) const;
    boom::OpenGLUint createShader(boom::OpenGLEnum type) const;
    boom::OpenGLUint createShaderProgramv(boom::OpenGLEnum type, boom::OpenGLSizei count, boom::OpenGLChar const* const* strings) const;
    void createTextures(boom::OpenGLEnum target, boom::OpenGLSizei n, boom::OpenGLUint* textures) const;
    void createTransformFeedbacks(boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    void createVertexArrays(boom::OpenGLSizei n, boom::OpenGLUint* arrays) const;
    void cullFace(boom::OpenGLEnum mode) const;
    void debugMessageCallback(boom::OpenGLDebugProc callback, void const* userParam) const;
    void debugMessageControl(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLEnum severity, boom::OpenGLSizei count, boom::OpenGLUint const* ids, boom::OpenGLBoolean enabled) const;
    void debugMessageInsert(boom::OpenGLEnum source, boom::OpenGLEnum type, boom::OpenGLUint id, boom::OpenGLEnum severity, boom::OpenGLSizei length, boom::OpenGLChar const* buf) const;
    void deleteBuffers(boom::OpenGLSizei n, boom::OpenGLUint const* buffers) const;
    void deleteFramebuffers(boom::OpenGLSizei n, boom::OpenGLUint const* framebuffers) const;
    void deleteLists(boom::OpenGLUint list, boom::OpenGLSizei range) const;
    void deleteProgram(boom::OpenGLUint program) const;
    void deleteProgramPipelines(boom::OpenGLSizei n, boom::OpenGLUint const* pipelines) const;
    void deleteQueries(boom::OpenGLSizei n, boom::OpenGLUint const* ids) const;
    void deleteRenderbuffers(boom::OpenGLSizei n, boom::OpenGLUint const* renderbuffers) const;
    void deleteSamplers(boom::OpenGLSizei count, boom::OpenGLUint const* samplers) const;
    void deleteShader(boom::OpenGLUint shader) const;
    void deleteSync(boom::OpenGLSync sync) const;
    void deleteTextures(boom::OpenGLSizei n, boom::OpenGLUint const* textures) const;
    void deleteTransformFeedbacks(boom::OpenGLSizei n, boom::OpenGLUint const* ids) const;
    void deleteVertexArrays(boom::OpenGLSizei n, boom::OpenGLUint const* arrays) const;
    void depthFunc(boom::OpenGLEnum func) const;
    void depthMask(boom::OpenGLBoolean flag) const;
    void depthRange(boom::OpenGLDouble n, boom::OpenGLDouble f) const;
    void depthRangeArrayv(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLDouble const* v) const;
    void depthRangeIndexed(boom::OpenGLUint index, boom::OpenGLDouble n, boom::OpenGLDouble f) const;
    void depthRangef(boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void depthRangex(boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void detachShader(boom::OpenGLUint program, boom::OpenGLUint shader) const;
    void disable(boom::OpenGLEnum cap) const;
    void disableClientState(boom::OpenGLEnum array) const;
    void disableVertexArrayAttrib(boom::OpenGLUint vaobj, boom::OpenGLUint index) const;
    void disableVertexAttribArray(boom::OpenGLUint index) const;
    void disablei(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void dispatchCompute(boom::OpenGLUint num_groups_x, boom::OpenGLUint num_groups_y, boom::OpenGLUint num_groups_z) const;
    void dispatchComputeIndirect(boom::OpenGLIntptr indirect) const;
    void drawArrays(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count) const;
    void drawArraysIndirect(boom::OpenGLEnum mode, void const* indirect) const;
    void drawArraysInstanced(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei instancecount) const;
    void drawArraysInstancedBaseInstance(boom::OpenGLEnum mode, boom::OpenGLInt first, boom::OpenGLSizei count, boom::OpenGLSizei instancecount, boom::OpenGLUint baseinstance) const;
    void drawBuffer(boom::OpenGLEnum buf) const;
    void drawBuffers(boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void drawElements(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices) const;
    void drawElementsBaseVertex(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawElementsIndirect(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect) const;
    void drawElementsInstanced(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount) const;
    void drawElementsInstancedBaseInstance(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLUint baseinstance) const;
    void drawElementsInstancedBaseVertex(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex) const;
    void drawElementsInstancedBaseVertexBaseInstance(boom::OpenGLEnum mode, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLSizei instancecount, boom::OpenGLInt basevertex, boom::OpenGLUint baseinstance) const;
    void drawPixels(boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void drawRangeElements(boom::OpenGLEnum mode, boom::OpenGLUint start, boom::OpenGLUint end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices) const;
    void drawRangeElementsBaseVertex(boom::OpenGLEnum mode, boom::OpenGLUint start, boom::OpenGLUint end, boom::OpenGLSizei count, boom::OpenGLEnum type, void const* indices, boom::OpenGLInt basevertex) const;
    void drawTransformFeedback(boom::OpenGLEnum mode, boom::OpenGLUint id) const;
    void drawTransformFeedbackInstanced(boom::OpenGLEnum mode, boom::OpenGLUint id, boom::OpenGLSizei instancecount) const;
    void drawTransformFeedbackStream(boom::OpenGLEnum mode, boom::OpenGLUint id, boom::OpenGLUint stream) const;
    void drawTransformFeedbackStreamInstanced(boom::OpenGLEnum mode, boom::OpenGLUint id, boom::OpenGLUint stream, boom::OpenGLSizei instancecount) const;
    void edgeFlag(boom::OpenGLBoolean flag) const;
    void edgeFlagPointer(boom::OpenGLSizei stride, void const* pointer) const;
    void edgeFlagv(boom::OpenGLBoolean const* flag) const;
    void enable(boom::OpenGLEnum cap) const;
    void enableClientState(boom::OpenGLEnum array) const;
    void enableVertexArrayAttrib(boom::OpenGLUint vaobj, boom::OpenGLUint index) const;
    void enableVertexAttribArray(boom::OpenGLUint index) const;
    void enablei(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void end() const;
    void endConditionalRender() const;
    void endList() const;
    void endQuery(boom::OpenGLEnum target) const;
    void endQueryIndexed(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    void endTransformFeedback() const;
    void evalCoord1d(boom::OpenGLDouble u) const;
    void evalCoord1dv(boom::OpenGLDouble const* u) const;
    void evalCoord1f(boom::OpenGLFloat u) const;
    void evalCoord1fv(boom::OpenGLFloat const* u) const;
    void evalCoord2d(boom::OpenGLDouble u, boom::OpenGLDouble v) const;
    void evalCoord2dv(boom::OpenGLDouble const* u) const;
    void evalCoord2f(boom::OpenGLFloat u, boom::OpenGLFloat v) const;
    void evalCoord2fv(boom::OpenGLFloat const* u) const;
    void evalMesh1(boom::OpenGLEnum mode, boom::OpenGLInt i1, boom::OpenGLInt i2) const;
    void evalMesh2(boom::OpenGLEnum mode, boom::OpenGLInt i1, boom::OpenGLInt i2, boom::OpenGLInt j1, boom::OpenGLInt j2) const;
    void evalPoint1(boom::OpenGLInt i) const;
    void evalPoint2(boom::OpenGLInt i, boom::OpenGLInt j) const;
    void feedbackBuffer(boom::OpenGLSizei size, boom::OpenGLEnum type, boom::OpenGLFloat* buffer) const;
    boom::OpenGLSync fenceSync(boom::OpenGLEnum condition, boom::OpenGLBitfield flags) const;
    void finish() const;
    void flush() const;
    void flushMappedBufferRange(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void flushMappedNamedBufferRange(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void fogCoordPointer(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void fogCoordd(boom::OpenGLDouble coord) const;
    void fogCoorddv(boom::OpenGLDouble const* coord) const;
    void fogCoordf(boom::OpenGLFloat coord) const;
    void fogCoordfv(boom::OpenGLFloat const* coord) const;
    void fogf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void fogfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void fogi(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void fogiv(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void fogx(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void fogxv(boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void framebufferParameteri(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void framebufferRenderbuffer(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUint renderbuffer) const;
    void framebufferTexture(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void framebufferTexture1D(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void framebufferTexture2D(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void framebufferTexture3D(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum textarget, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt zoffset) const;
    void framebufferTextureLayer(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void frontFace(boom::OpenGLEnum mode) const;
    void frustum(boom::OpenGLDouble left, boom::OpenGLDouble right, boom::OpenGLDouble bottom, boom::OpenGLDouble top, boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void frustumf(boom::OpenGLFloat l, boom::OpenGLFloat r, boom::OpenGLFloat b, boom::OpenGLFloat t, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void frustumx(boom::OpenGLFixed l, boom::OpenGLFixed r, boom::OpenGLFixed b, boom::OpenGLFixed t, boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void genBuffers(boom::OpenGLSizei n, boom::OpenGLUint* buffers) const;
    void genFramebuffers(boom::OpenGLSizei n, boom::OpenGLUint* framebuffers) const;
    boom::OpenGLUint genLists(boom::OpenGLSizei range) const;
    void genProgramPipelines(boom::OpenGLSizei n, boom::OpenGLUint* pipelines) const;
    void genQueries(boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    void genRenderbuffers(boom::OpenGLSizei n, boom::OpenGLUint* renderbuffers) const;
    void genSamplers(boom::OpenGLSizei count, boom::OpenGLUint* samplers) const;
    void genTextures(boom::OpenGLSizei n, boom::OpenGLUint* textures) const;
    void genTransformFeedbacks(boom::OpenGLSizei n, boom::OpenGLUint* ids) const;
    void genVertexArrays(boom::OpenGLSizei n, boom::OpenGLUint* arrays) const;
    void generateMipmap(boom::OpenGLEnum target) const;
    void generateTextureMipmap(boom::OpenGLUint texture) const;
    void getActiveAtomicCounterBufferiv(boom::OpenGLUint program, boom::OpenGLUint bufferIndex, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getActiveAttrib(boom::OpenGLUint program, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLInt* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getActiveSubroutineName(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* name) const;
    void getActiveSubroutineUniformName(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* name) const;
    void getActiveSubroutineUniformiv(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* values) const;
    void getActiveUniform(boom::OpenGLUint program, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLInt* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getActiveUniformBlockName(boom::OpenGLUint program, boom::OpenGLUint uniformBlockIndex, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* uniformBlockName) const;
    void getActiveUniformBlockiv(boom::OpenGLUint program, boom::OpenGLUint uniformBlockIndex, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getActiveUniformName(boom::OpenGLUint program, boom::OpenGLUint uniformIndex, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* uniformName) const;
    void getActiveUniformsiv(boom::OpenGLUint program, boom::OpenGLSizei uniformCount, boom::OpenGLUint const* uniformIndices, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getAttachedShaders(boom::OpenGLUint program, boom::OpenGLSizei maxCount, boom::OpenGLSizei* count, boom::OpenGLUint* shaders) const;
    boom::OpenGLInt getAttribLocation(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    void getBooleani_v(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLBoolean* data) const;
    void getBooleanv(boom::OpenGLEnum pname, boom::OpenGLBoolean* data) const;
    void getBufferParameteri64v(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getBufferParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getBufferPointerv(boom::OpenGLEnum target, boom::OpenGLEnum pname, void** params) const;
    void getBufferSubData(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void* data) const;
    void getClipPlane(boom::OpenGLEnum plane, boom::OpenGLDouble* equation) const;
    void getClipPlanef(boom::OpenGLEnum plane, boom::OpenGLFloat* equation) const;
    void getClipPlanex(boom::OpenGLEnum plane, boom::OpenGLFixed* equation) const;
    void getCompressedTexImage(boom::OpenGLEnum target, boom::OpenGLInt level, void* img) const;
    void getCompressedTextureImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLSizei bufSize, void* pixels) const;
    void getCompressedTextureSubImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLSizei bufSize, void* pixels) const;
    boom::OpenGLUint getDebugMessageLog(boom::OpenGLUint count, boom::OpenGLSizei bufSize, boom::OpenGLEnum* sources, boom::OpenGLEnum* types, boom::OpenGLUint* ids, boom::OpenGLEnum* severities, boom::OpenGLSizei* lengths, boom::OpenGLChar* messageLog) const;
    void getDoublei_v(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLDouble* data) const;
    void getDoublev(boom::OpenGLEnum pname, boom::OpenGLDouble* data) const;
    boom::OpenGLEnum getError() const;
    void getFixedv(boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getFloati_v(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLFloat* data) const;
    void getFloatv(boom::OpenGLEnum pname, boom::OpenGLFloat* data) const;
    boom::OpenGLInt getFragDataIndex(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getFragDataLocation(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    void getFramebufferAttachmentParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getFramebufferParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    boom::OpenGLEnum getGraphicsResetStatus() const;
    void getInteger64i_v(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt64* data) const;
    void getInteger64v(boom::OpenGLEnum pname, boom::OpenGLInt64* data) const;
    void getIntegeri_v(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLInt* data) const;
    void getIntegerv(boom::OpenGLEnum pname, boom::OpenGLInt* data) const;
    void getInternalformati64v(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLInt64* params) const;
    void getInternalformativ(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLInt* params) const;
    void getLightfv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getLightiv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getLightxv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getMapdv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLDouble* v) const;
    void getMapfv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLFloat* v) const;
    void getMapiv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLInt* v) const;
    void getMaterialfv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getMaterialiv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getMaterialxv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getMultisamplefv(boom::OpenGLEnum pname, boom::OpenGLUint index, boom::OpenGLFloat* val) const;
    void getNamedBufferParameteri64v(boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getNamedBufferParameteriv(boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedBufferPointerv(boom::OpenGLUint buffer, boom::OpenGLEnum pname, void** params) const;
    void getNamedBufferSubData(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void* data) const;
    void getNamedFramebufferAttachmentParameteriv(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getNamedFramebufferParameteriv(boom::OpenGLUint framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getNamedRenderbufferParameteriv(boom::OpenGLUint renderbuffer, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getObjectLabel(boom::OpenGLEnum identifier, boom::OpenGLUint name, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getObjectPtrLabel(void const* ptr, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* label) const;
    void getPixelMapfv(boom::OpenGLEnum map, boom::OpenGLFloat* values) const;
    void getPixelMapuiv(boom::OpenGLEnum map, boom::OpenGLUint* values) const;
    void getPixelMapusv(boom::OpenGLEnum map, boom::OpenGLUShort* values) const;
    void getPointerv(boom::OpenGLEnum pname, void** params) const;
    void getPolygonStipple(boom::OpenGLUbyte* mask) const;
    void getProgramBinary(boom::OpenGLUint program, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLEnum* binaryFormat, void* binary) const;
    void getProgramInfoLog(boom::OpenGLUint program, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* infoLog) const;
    void getProgramInterfaceiv(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getProgramPipelineInfoLog(boom::OpenGLUint pipeline, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* infoLog) const;
    void getProgramPipelineiv(boom::OpenGLUint pipeline, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    boom::OpenGLUint getProgramResourceIndex(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getProgramResourceLocation(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getProgramResourceLocationIndex(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLChar const* name) const;
    void getProgramResourceName(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* name) const;
    void getProgramResourceiv(boom::OpenGLUint program, boom::OpenGLEnum programInterface, boom::OpenGLUint index, boom::OpenGLSizei propCount, boom::OpenGLEnum const* props, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLInt* params) const;
    void getProgramStageiv(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLEnum pname, boom::OpenGLInt* values) const;
    void getProgramiv(boom::OpenGLUint program, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryBufferObjecti64v(boom::OpenGLUint id, boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryBufferObjectiv(boom::OpenGLUint id, boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryBufferObjectui64v(boom::OpenGLUint id, boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryBufferObjectuiv(boom::OpenGLUint id, boom::OpenGLUint buffer, boom::OpenGLEnum pname, boom::OpenGLIntptr offset) const;
    void getQueryIndexediv(boom::OpenGLEnum target, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryObjecti64v(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt64* params) const;
    void getQueryObjectiv(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getQueryObjectui64v(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUInt64* params) const;
    void getQueryObjectuiv(boom::OpenGLUint id, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getQueryiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getRenderbufferParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSamplerParameterIiv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getSamplerParameterIuiv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getSamplerParameterfv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getSamplerParameteriv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getShaderInfoLog(boom::OpenGLUint shader, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* infoLog) const;
    void getShaderPrecisionFormat(boom::OpenGLEnum shadertype, boom::OpenGLEnum precisiontype, boom::OpenGLInt* range, boom::OpenGLInt* precision) const;
    void getShaderSource(boom::OpenGLUint shader, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLChar* source) const;
    void getShaderiv(boom::OpenGLUint shader, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    boom::OpenGLUbyte const* getString(boom::OpenGLEnum name) const;
    boom::OpenGLUbyte const* getStringi(boom::OpenGLEnum name, boom::OpenGLUint index) const;
    boom::OpenGLUint getSubroutineIndex(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLChar const* name) const;
    boom::OpenGLInt getSubroutineUniformLocation(boom::OpenGLUint program, boom::OpenGLEnum shadertype, boom::OpenGLChar const* name) const;
    void getSynciv(boom::OpenGLSync sync, boom::OpenGLEnum pname, boom::OpenGLSizei count, boom::OpenGLSizei* length, boom::OpenGLInt* values) const;
    void getTexEnvfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexEnviv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexEnvxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTexGendv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getTexGenfv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexGeniv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexImage(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, void* pixels) const;
    void getTexLevelParameterfv(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexLevelParameteriv(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexParameterIiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexParameterIuiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getTexParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTexParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTexParameterxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed* params) const;
    void getTextureImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* pixels) const;
    void getTextureLevelParameterfv(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTextureLevelParameteriv(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureParameterIiv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureParameterIuiv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getTextureParameterfv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getTextureParameteriv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getTextureSubImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* pixels) const;
    void getTransformFeedbackVarying(boom::OpenGLUint program, boom::OpenGLUint index, boom::OpenGLSizei bufSize, boom::OpenGLSizei* length, boom::OpenGLSizei* size, boom::OpenGLEnum* type, boom::OpenGLChar* name) const;
    void getTransformFeedbacki64_v(boom::OpenGLUint xfb, boom::OpenGLEnum pname, boom::OpenGLUint index, boom::OpenGLInt64* param) const;
    void getTransformFeedbacki_v(boom::OpenGLUint xfb, boom::OpenGLEnum pname, boom::OpenGLUint index, boom::OpenGLInt* param) const;
    void getTransformFeedbackiv(boom::OpenGLUint xfb, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    boom::OpenGLUint getUniformBlockIndex(boom::OpenGLUint program, boom::OpenGLChar const* uniformBlockName) const;
    void getUniformIndices(boom::OpenGLUint program, boom::OpenGLSizei uniformCount, boom::OpenGLChar const* const* uniformNames, boom::OpenGLUint* uniformIndices) const;
    boom::OpenGLInt getUniformLocation(boom::OpenGLUint program, boom::OpenGLChar const* name) const;
    void getUniformSubroutineuiv(boom::OpenGLEnum shadertype, boom::OpenGLInt location, boom::OpenGLUint* params) const;
    void getUniformdv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble* params) const;
    void getUniformfv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat* params) const;
    void getUniformiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt* params) const;
    void getUniformuiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint* params) const;
    void getVertexArrayIndexed64iv(boom::OpenGLUint vaobj, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt64* param) const;
    void getVertexArrayIndexediv(boom::OpenGLUint vaobj, boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getVertexArrayiv(boom::OpenGLUint vaobj, boom::OpenGLEnum pname, boom::OpenGLInt* param) const;
    void getVertexAttribIiv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getVertexAttribIuiv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLUint* params) const;
    void getVertexAttribLdv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribPointerv(boom::OpenGLUint index, boom::OpenGLEnum pname, void** pointer) const;
    void getVertexAttribdv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLDouble* params) const;
    void getVertexAttribfv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLFloat* params) const;
    void getVertexAttribiv(boom::OpenGLUint index, boom::OpenGLEnum pname, boom::OpenGLInt* params) const;
    void getnColorTable(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* table) const;
    void getnCompressedTexImage(boom::OpenGLEnum target, boom::OpenGLInt lod, boom::OpenGLSizei bufSize, void* pixels) const;
    void getnConvolutionFilter(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* image) const;
    void getnHistogram(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* values) const;
    void getnMapdv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLDouble* v) const;
    void getnMapfv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLFloat* v) const;
    void getnMapiv(boom::OpenGLEnum target, boom::OpenGLEnum query, boom::OpenGLSizei bufSize, boom::OpenGLInt* v) const;
    void getnMinmax(boom::OpenGLEnum target, boom::OpenGLBoolean reset, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* values) const;
    void getnPixelMapfv(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLFloat* values) const;
    void getnPixelMapuiv(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLUint* values) const;
    void getnPixelMapusv(boom::OpenGLEnum map, boom::OpenGLSizei bufSize, boom::OpenGLUShort* values) const;
    void getnPolygonStipple(boom::OpenGLSizei bufSize, boom::OpenGLUbyte* pattern) const;
    void getnSeparableFilter(boom::OpenGLEnum target, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei rowBufSize, void* row, boom::OpenGLSizei columnBufSize, void* column, void* span) const;
    void getnTexImage(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* pixels) const;
    void getnUniformdv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLDouble* params) const;
    void getnUniformfv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLFloat* params) const;
    void getnUniformiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLInt* params) const;
    void getnUniformuiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei bufSize, boom::OpenGLUint* params) const;
    void hint(boom::OpenGLEnum target, boom::OpenGLEnum mode) const;
    void indexMask(boom::OpenGLUint mask) const;
    void indexPointer(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void indexd(boom::OpenGLDouble c) const;
    void indexdv(boom::OpenGLDouble const* c) const;
    void indexf(boom::OpenGLFloat c) const;
    void indexfv(boom::OpenGLFloat const* c) const;
    void indexi(boom::OpenGLInt c) const;
    void indexiv(boom::OpenGLInt const* c) const;
    void indexs(boom::OpenGLShort c) const;
    void indexsv(boom::OpenGLShort const* c) const;
    void indexub(boom::OpenGLUbyte c) const;
    void indexubv(boom::OpenGLUbyte const* c) const;
    void initNames() const;
    void interleavedArrays(boom::OpenGLEnum format, boom::OpenGLSizei stride, void const* pointer) const;
    void invalidateBufferData(boom::OpenGLUint buffer) const;
    void invalidateBufferSubData(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length) const;
    void invalidateFramebuffer(boom::OpenGLEnum target, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments) const;
    void invalidateNamedFramebufferData(boom::OpenGLUint framebuffer, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments) const;
    void invalidateNamedFramebufferSubData(boom::OpenGLUint framebuffer, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void invalidateSubFramebuffer(boom::OpenGLEnum target, boom::OpenGLSizei numAttachments, boom::OpenGLEnum const* attachments, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void invalidateTexImage(boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void invalidateTexSubImage(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    boom::OpenGLBoolean isBuffer(boom::OpenGLUint buffer) const;
    boom::OpenGLBoolean isEnabled(boom::OpenGLEnum cap) const;
    boom::OpenGLBoolean isEnabledi(boom::OpenGLEnum target, boom::OpenGLUint index) const;
    boom::OpenGLBoolean isFramebuffer(boom::OpenGLUint framebuffer) const;
    boom::OpenGLBoolean isList(boom::OpenGLUint list) const;
    boom::OpenGLBoolean isProgram(boom::OpenGLUint program) const;
    boom::OpenGLBoolean isProgramPipeline(boom::OpenGLUint pipeline) const;
    boom::OpenGLBoolean isQuery(boom::OpenGLUint id) const;
    boom::OpenGLBoolean isRenderbuffer(boom::OpenGLUint renderbuffer) const;
    boom::OpenGLBoolean isSampler(boom::OpenGLUint sampler) const;
    boom::OpenGLBoolean isShader(boom::OpenGLUint shader) const;
    boom::OpenGLBoolean isSync(boom::OpenGLSync sync) const;
    boom::OpenGLBoolean isTexture(boom::OpenGLUint texture) const;
    boom::OpenGLBoolean isTransformFeedback(boom::OpenGLUint id) const;
    boom::OpenGLBoolean isVertexArray(boom::OpenGLUint array) const;
    void lightModelf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void lightModelfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void lightModeli(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void lightModeliv(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void lightModelx(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void lightModelxv(boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void lightf(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void lightfv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void lighti(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void lightiv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void lightx(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void lightxv(boom::OpenGLEnum light, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void lineStipple(boom::OpenGLInt factor, boom::OpenGLUShort pattern) const;
    void lineWidth(boom::OpenGLFloat width) const;
    void lineWidthx(boom::OpenGLFixed width) const;
    void linkProgram(boom::OpenGLUint program) const;
    void listBase(boom::OpenGLUint base) const;
    void loadIdentity() const;
    void loadMatrixd(boom::OpenGLDouble const* m) const;
    void loadMatrixf(boom::OpenGLFloat const* m) const;
    void loadMatrixx(boom::OpenGLFixed const* m) const;
    void loadName(boom::OpenGLUint name) const;
    void loadTransposeMatrixd(boom::OpenGLDouble const* m) const;
    void loadTransposeMatrixf(boom::OpenGLFloat const* m) const;
    void logicOp(boom::OpenGLEnum opcode) const;
    void map1d(boom::OpenGLEnum target, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLDouble const* points) const;
    void map1f(boom::OpenGLEnum target, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt stride, boom::OpenGLInt order, boom::OpenGLFloat const* points) const;
    void map2d(boom::OpenGLEnum target, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLDouble v1, boom::OpenGLDouble v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLDouble const* points) const;
    void map2f(boom::OpenGLEnum target, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt ustride, boom::OpenGLInt uorder, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLInt vstride, boom::OpenGLInt vorder, boom::OpenGLFloat const* points) const;
    void* mapBuffer(boom::OpenGLEnum target, boom::OpenGLEnum access) const;
    void* mapBufferRange(boom::OpenGLEnum target, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length, boom::OpenGLBitfield access) const;
    void mapGrid1d(boom::OpenGLInt un, boom::OpenGLDouble u1, boom::OpenGLDouble u2) const;
    void mapGrid1f(boom::OpenGLInt un, boom::OpenGLFloat u1, boom::OpenGLFloat u2) const;
    void mapGrid2d(boom::OpenGLInt un, boom::OpenGLDouble u1, boom::OpenGLDouble u2, boom::OpenGLInt vn, boom::OpenGLDouble v1, boom::OpenGLDouble v2) const;
    void mapGrid2f(boom::OpenGLInt un, boom::OpenGLFloat u1, boom::OpenGLFloat u2, boom::OpenGLInt vn, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void* mapNamedBuffer(boom::OpenGLUint buffer, boom::OpenGLEnum access) const;
    void* mapNamedBufferRange(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr length, boom::OpenGLBitfield access) const;
    void materialf(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void materialfv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void materiali(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void materialiv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void materialx(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void materialxv(boom::OpenGLEnum face, boom::OpenGLEnum pname, boom::OpenGLFixed const* param) const;
    void matrixMode(boom::OpenGLEnum mode) const;
    void memoryBarrier(boom::OpenGLBitfield barriers) const;
    void memoryBarrierByRegion(boom::OpenGLBitfield barriers) const;
    void minSampleShading(boom::OpenGLFloat value) const;
    void multMatrixd(boom::OpenGLDouble const* m) const;
    void multMatrixf(boom::OpenGLFloat const* m) const;
    void multMatrixx(boom::OpenGLFixed const* m) const;
    void multTransposeMatrixd(boom::OpenGLDouble const* m) const;
    void multTransposeMatrixf(boom::OpenGLFloat const* m) const;
    void multiDrawArrays(boom::OpenGLEnum mode, boom::OpenGLInt const* first, boom::OpenGLSizei const* count, boom::OpenGLSizei drawcount) const;
    void multiDrawArraysIndirect(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawArraysIndirectCount(boom::OpenGLEnum mode, void const* indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiDrawElements(boom::OpenGLEnum mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei drawcount) const;
    void multiDrawElementsBaseVertex(boom::OpenGLEnum mode, boom::OpenGLSizei const* count, boom::OpenGLEnum type, void const* const* indices, boom::OpenGLSizei drawcount, boom::OpenGLInt const* basevertex) const;
    void multiDrawElementsIndirect(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLSizei drawcount, boom::OpenGLSizei stride) const;
    void multiDrawElementsIndirectCount(boom::OpenGLEnum mode, boom::OpenGLEnum type, void const* indirect, boom::OpenGLIntptr drawcount, boom::OpenGLSizei maxdrawcount, boom::OpenGLSizei stride) const;
    void multiTexCoord1d(boom::OpenGLEnum target, boom::OpenGLDouble s) const;
    void multiTexCoord1dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord1f(boom::OpenGLEnum target, boom::OpenGLFloat s) const;
    void multiTexCoord1fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord1i(boom::OpenGLEnum target, boom::OpenGLInt s) const;
    void multiTexCoord1iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord1s(boom::OpenGLEnum target, boom::OpenGLShort s) const;
    void multiTexCoord1sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord2d(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t) const;
    void multiTexCoord2dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord2f(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t) const;
    void multiTexCoord2fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord2i(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t) const;
    void multiTexCoord2iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord2s(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t) const;
    void multiTexCoord2sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord3d(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r) const;
    void multiTexCoord3dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord3f(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r) const;
    void multiTexCoord3fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord3i(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r) const;
    void multiTexCoord3iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord3s(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r) const;
    void multiTexCoord3sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord4d(boom::OpenGLEnum target, boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r, boom::OpenGLDouble q) const;
    void multiTexCoord4dv(boom::OpenGLEnum target, boom::OpenGLDouble const* v) const;
    void multiTexCoord4f(boom::OpenGLEnum target, boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat q) const;
    void multiTexCoord4fv(boom::OpenGLEnum target, boom::OpenGLFloat const* v) const;
    void multiTexCoord4i(boom::OpenGLEnum target, boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r, boom::OpenGLInt q) const;
    void multiTexCoord4iv(boom::OpenGLEnum target, boom::OpenGLInt const* v) const;
    void multiTexCoord4s(boom::OpenGLEnum target, boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r, boom::OpenGLShort q) const;
    void multiTexCoord4sv(boom::OpenGLEnum target, boom::OpenGLShort const* v) const;
    void multiTexCoord4x(boom::OpenGLEnum texture, boom::OpenGLFixed s, boom::OpenGLFixed t, boom::OpenGLFixed r, boom::OpenGLFixed q) const;
    void multiTexCoordP1ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void multiTexCoordP1uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void multiTexCoordP2ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void multiTexCoordP2uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void multiTexCoordP3ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void multiTexCoordP3uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void multiTexCoordP4ui(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void multiTexCoordP4uiv(boom::OpenGLEnum texture, boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void namedBufferData(boom::OpenGLUint buffer, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLEnum usage) const;
    void namedBufferStorage(boom::OpenGLUint buffer, boom::OpenGLSizeiptr size, void const* data, boom::OpenGLBitfield flags) const;
    void namedBufferSubData(boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size, void const* data) const;
    void namedFramebufferDrawBuffer(boom::OpenGLUint framebuffer, boom::OpenGLEnum buf) const;
    void namedFramebufferDrawBuffers(boom::OpenGLUint framebuffer, boom::OpenGLSizei n, boom::OpenGLEnum const* bufs) const;
    void namedFramebufferParameteri(boom::OpenGLUint framebuffer, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void namedFramebufferReadBuffer(boom::OpenGLUint framebuffer, boom::OpenGLEnum src) const;
    void namedFramebufferRenderbuffer(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLEnum renderbuffertarget, boom::OpenGLUint renderbuffer) const;
    void namedFramebufferTexture(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level) const;
    void namedFramebufferTextureLayer(boom::OpenGLUint framebuffer, boom::OpenGLEnum attachment, boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt layer) const;
    void namedRenderbufferStorage(boom::OpenGLUint renderbuffer, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void namedRenderbufferStorageMultisample(boom::OpenGLUint renderbuffer, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void newList(boom::OpenGLUint list, boom::OpenGLEnum mode) const;
    void normal3b(boom::OpenGLByte nx, boom::OpenGLByte ny, boom::OpenGLByte nz) const;
    void normal3bv(boom::OpenGLByte const* v) const;
    void normal3d(boom::OpenGLDouble nx, boom::OpenGLDouble ny, boom::OpenGLDouble nz) const;
    void normal3dv(boom::OpenGLDouble const* v) const;
    void normal3f(boom::OpenGLFloat nx, boom::OpenGLFloat ny, boom::OpenGLFloat nz) const;
    void normal3fv(boom::OpenGLFloat const* v) const;
    void normal3i(boom::OpenGLInt nx, boom::OpenGLInt ny, boom::OpenGLInt nz) const;
    void normal3iv(boom::OpenGLInt const* v) const;
    void normal3s(boom::OpenGLShort nx, boom::OpenGLShort ny, boom::OpenGLShort nz) const;
    void normal3sv(boom::OpenGLShort const* v) const;
    void normal3x(boom::OpenGLFixed nx, boom::OpenGLFixed ny, boom::OpenGLFixed nz) const;
    void normalP3ui(boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void normalP3uiv(boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void normalPointer(boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void objectLabel(boom::OpenGLEnum identifier, boom::OpenGLUint name, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    void objectPtrLabel(void const* ptr, boom::OpenGLSizei length, boom::OpenGLChar const* label) const;
    void ortho(boom::OpenGLDouble left, boom::OpenGLDouble right, boom::OpenGLDouble bottom, boom::OpenGLDouble top, boom::OpenGLDouble zNear, boom::OpenGLDouble zFar) const;
    void orthof(boom::OpenGLFloat l, boom::OpenGLFloat r, boom::OpenGLFloat b, boom::OpenGLFloat t, boom::OpenGLFloat n, boom::OpenGLFloat f) const;
    void orthox(boom::OpenGLFixed l, boom::OpenGLFixed r, boom::OpenGLFixed b, boom::OpenGLFixed t, boom::OpenGLFixed n, boom::OpenGLFixed f) const;
    void passThrough(boom::OpenGLFloat token) const;
    void patchParameterfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* values) const;
    void patchParameteri(boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void pauseTransformFeedback() const;
    void pixelMapfv(boom::OpenGLEnum map, boom::OpenGLSizei mapsize, boom::OpenGLFloat const* values) const;
    void pixelMapuiv(boom::OpenGLEnum map, boom::OpenGLSizei mapsize, boom::OpenGLUint const* values) const;
    void pixelMapusv(boom::OpenGLEnum map, boom::OpenGLSizei mapsize, boom::OpenGLUShort const* values) const;
    void pixelStoref(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pixelStorei(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pixelTransferf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pixelTransferi(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pixelZoom(boom::OpenGLFloat xfactor, boom::OpenGLFloat yfactor) const;
    void pointParameterf(boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void pointParameterfv(boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void pointParameteri(boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void pointParameteriv(boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void pointParameterx(boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void pointParameterxv(boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void pointSize(boom::OpenGLFloat size) const;
    void pointSizex(boom::OpenGLFixed size) const;
    void polygonMode(boom::OpenGLEnum face, boom::OpenGLEnum mode) const;
    void polygonOffset(boom::OpenGLFloat factor, boom::OpenGLFloat units) const;
    void polygonOffsetClamp(boom::OpenGLFloat factor, boom::OpenGLFloat units, boom::OpenGLFloat clamp) const;
    void polygonOffsetx(boom::OpenGLFixed factor, boom::OpenGLFixed units) const;
    void polygonStipple(boom::OpenGLUbyte const* mask) const;
    void popAttrib() const;
    void popClientAttrib() const;
    void popDebugGroup() const;
    void popMatrix() const;
    void popName() const;
    void primitiveBoundingBox(boom::OpenGLFloat minX, boom::OpenGLFloat minY, boom::OpenGLFloat minZ, boom::OpenGLFloat minW, boom::OpenGLFloat maxX, boom::OpenGLFloat maxY, boom::OpenGLFloat maxZ, boom::OpenGLFloat maxW) const;
    void primitiveRestartIndex(boom::OpenGLUint index) const;
    void prioritizeTextures(boom::OpenGLSizei n, boom::OpenGLUint const* textures, boom::OpenGLFloat const* priorities) const;
    void programBinary(boom::OpenGLUint program, boom::OpenGLEnum binaryFormat, void const* binary, boom::OpenGLSizei length) const;
    void programParameteri(boom::OpenGLUint program, boom::OpenGLEnum pname, boom::OpenGLInt value) const;
    void programUniform1d(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble v0) const;
    void programUniform1dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform1f(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0) const;
    void programUniform1fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform1i(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0) const;
    void programUniform1iv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform1ui(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0) const;
    void programUniform1uiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniform2d(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble v0, boom::OpenGLDouble v1) const;
    void programUniform2dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform2f(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1) const;
    void programUniform2fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform2i(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1) const;
    void programUniform2iv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform2ui(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1) const;
    void programUniform2uiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniform3d(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble v0, boom::OpenGLDouble v1, boom::OpenGLDouble v2) const;
    void programUniform3dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform3f(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void programUniform3fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform3i(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2) const;
    void programUniform3iv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform3ui(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2) const;
    void programUniform3uiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniform4d(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLDouble v0, boom::OpenGLDouble v1, boom::OpenGLDouble v2, boom::OpenGLDouble v3) const;
    void programUniform4dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void programUniform4f(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLFloat v3) const;
    void programUniform4fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void programUniform4i(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2, boom::OpenGLInt v3) const;
    void programUniform4iv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void programUniform4ui(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2, boom::OpenGLUint v3) const;
    void programUniform4uiv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void programUniformMatrix2dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2x3dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2x3fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix2x4dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix2x4fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3x2dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3x2fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix3x4dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix3x4fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4x2dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4x2fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void programUniformMatrix4x3dv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void programUniformMatrix4x3fv(boom::OpenGLUint program, boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void provokingVertex(boom::OpenGLEnum mode) const;
    void pushAttrib(boom::OpenGLBitfield mask) const;
    void pushClientAttrib(boom::OpenGLBitfield mask) const;
    void pushDebugGroup(boom::OpenGLEnum source, boom::OpenGLUint id, boom::OpenGLSizei length, boom::OpenGLChar const* message) const;
    void pushMatrix() const;
    void pushName(boom::OpenGLUint name) const;
    void queryCounter(boom::OpenGLUint id, boom::OpenGLEnum target) const;
    void rasterPos2d(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void rasterPos2dv(boom::OpenGLDouble const* v) const;
    void rasterPos2f(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void rasterPos2fv(boom::OpenGLFloat const* v) const;
    void rasterPos2i(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void rasterPos2iv(boom::OpenGLInt const* v) const;
    void rasterPos2s(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void rasterPos2sv(boom::OpenGLShort const* v) const;
    void rasterPos3d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void rasterPos3dv(boom::OpenGLDouble const* v) const;
    void rasterPos3f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void rasterPos3fv(boom::OpenGLFloat const* v) const;
    void rasterPos3i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void rasterPos3iv(boom::OpenGLInt const* v) const;
    void rasterPos3s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void rasterPos3sv(boom::OpenGLShort const* v) const;
    void rasterPos4d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void rasterPos4dv(boom::OpenGLDouble const* v) const;
    void rasterPos4f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void rasterPos4fv(boom::OpenGLFloat const* v) const;
    void rasterPos4i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void rasterPos4iv(boom::OpenGLInt const* v) const;
    void rasterPos4s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void rasterPos4sv(boom::OpenGLShort const* v) const;
    void readBuffer(boom::OpenGLEnum src) const;
    void readPixels(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void* pixels) const;
    void readnPixels(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, boom::OpenGLSizei bufSize, void* data) const;
    void rectd(boom::OpenGLDouble x1, boom::OpenGLDouble y1, boom::OpenGLDouble x2, boom::OpenGLDouble y2) const;
    void rectdv(boom::OpenGLDouble const* v1, boom::OpenGLDouble const* v2) const;
    void rectf(boom::OpenGLFloat x1, boom::OpenGLFloat y1, boom::OpenGLFloat x2, boom::OpenGLFloat y2) const;
    void rectfv(boom::OpenGLFloat const* v1, boom::OpenGLFloat const* v2) const;
    void recti(boom::OpenGLInt x1, boom::OpenGLInt y1, boom::OpenGLInt x2, boom::OpenGLInt y2) const;
    void rectiv(boom::OpenGLInt const* v1, boom::OpenGLInt const* v2) const;
    void rects(boom::OpenGLShort x1, boom::OpenGLShort y1, boom::OpenGLShort x2, boom::OpenGLShort y2) const;
    void rectsv(boom::OpenGLShort const* v1, boom::OpenGLShort const* v2) const;
    void releaseShaderCompiler() const;
    boom::OpenGLInt renderMode(boom::OpenGLEnum mode) const;
    void renderbufferStorage(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void renderbufferStorageMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void resumeTransformFeedback() const;
    void rotated(boom::OpenGLDouble angle, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void rotatef(boom::OpenGLFloat angle, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void rotatex(boom::OpenGLFixed angle, boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void sampleCoverage(boom::OpenGLFloat value, boom::OpenGLBoolean invert) const;
    void sampleCoveragex(boom::OpenGLClampx value, boom::OpenGLBoolean invert) const;
    void sampleMaski(boom::OpenGLUint maskNumber, boom::OpenGLBitfield mask) const;
    void samplerParameterIiv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void samplerParameterIuiv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLUint const* param) const;
    void samplerParameterf(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void samplerParameterfv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLFloat const* param) const;
    void samplerParameteri(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void samplerParameteriv(boom::OpenGLUint sampler, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void scaled(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void scalef(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void scalex(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void scissor(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorArrayv(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLInt const* v) const;
    void scissorIndexed(boom::OpenGLUint index, boom::OpenGLInt left, boom::OpenGLInt bottom, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void scissorIndexedv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void secondaryColor3b(boom::OpenGLByte red, boom::OpenGLByte green, boom::OpenGLByte blue) const;
    void secondaryColor3bv(boom::OpenGLByte const* v) const;
    void secondaryColor3d(boom::OpenGLDouble red, boom::OpenGLDouble green, boom::OpenGLDouble blue) const;
    void secondaryColor3dv(boom::OpenGLDouble const* v) const;
    void secondaryColor3f(boom::OpenGLFloat red, boom::OpenGLFloat green, boom::OpenGLFloat blue) const;
    void secondaryColor3fv(boom::OpenGLFloat const* v) const;
    void secondaryColor3i(boom::OpenGLInt red, boom::OpenGLInt green, boom::OpenGLInt blue) const;
    void secondaryColor3iv(boom::OpenGLInt const* v) const;
    void secondaryColor3s(boom::OpenGLShort red, boom::OpenGLShort green, boom::OpenGLShort blue) const;
    void secondaryColor3sv(boom::OpenGLShort const* v) const;
    void secondaryColor3ub(boom::OpenGLUbyte red, boom::OpenGLUbyte green, boom::OpenGLUbyte blue) const;
    void secondaryColor3ubv(boom::OpenGLUbyte const* v) const;
    void secondaryColor3ui(boom::OpenGLUint red, boom::OpenGLUint green, boom::OpenGLUint blue) const;
    void secondaryColor3uiv(boom::OpenGLUint const* v) const;
    void secondaryColor3us(boom::OpenGLUShort red, boom::OpenGLUShort green, boom::OpenGLUShort blue) const;
    void secondaryColor3usv(boom::OpenGLUShort const* v) const;
    void secondaryColorP3ui(boom::OpenGLEnum type, boom::OpenGLUint color) const;
    void secondaryColorP3uiv(boom::OpenGLEnum type, boom::OpenGLUint const* color) const;
    void secondaryColorPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void selectBuffer(boom::OpenGLSizei size, boom::OpenGLUint* buffer) const;
    void shadeModel(boom::OpenGLEnum mode) const;
    void shaderBinary(boom::OpenGLSizei count, boom::OpenGLUint const* shaders, boom::OpenGLEnum binaryFormat, void const* binary, boom::OpenGLSizei length) const;
    void shaderSource(boom::OpenGLUint shader, boom::OpenGLSizei count, boom::OpenGLChar const* const* string, boom::OpenGLInt const* length) const;
    void shaderStorageBlockBinding(boom::OpenGLUint program, boom::OpenGLUint storageBlockIndex, boom::OpenGLUint storageBlockBinding) const;
    void specializeShader(boom::OpenGLUint shader, boom::OpenGLChar const* pEntryPoint, boom::OpenGLUint numSpecializationConstants, boom::OpenGLUint const* pConstantIndex, boom::OpenGLUint const* pConstantValue) const;
    void stencilFunc(boom::OpenGLEnum func, boom::OpenGLInt ref, boom::OpenGLUint mask) const;
    void stencilFuncSeparate(boom::OpenGLEnum face, boom::OpenGLEnum func, boom::OpenGLInt ref, boom::OpenGLUint mask) const;
    void stencilMask(boom::OpenGLUint mask) const;
    void stencilMaskSeparate(boom::OpenGLEnum face, boom::OpenGLUint mask) const;
    void stencilOp(boom::OpenGLEnum fail, boom::OpenGLEnum zfail, boom::OpenGLEnum zpass) const;
    void stencilOpSeparate(boom::OpenGLEnum face, boom::OpenGLEnum sfail, boom::OpenGLEnum dpfail, boom::OpenGLEnum dppass) const;
    void texBuffer(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer) const;
    void texBufferRange(boom::OpenGLEnum target, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void texCoord1d(boom::OpenGLDouble s) const;
    void texCoord1dv(boom::OpenGLDouble const* v) const;
    void texCoord1f(boom::OpenGLFloat s) const;
    void texCoord1fv(boom::OpenGLFloat const* v) const;
    void texCoord1i(boom::OpenGLInt s) const;
    void texCoord1iv(boom::OpenGLInt const* v) const;
    void texCoord1s(boom::OpenGLShort s) const;
    void texCoord1sv(boom::OpenGLShort const* v) const;
    void texCoord2d(boom::OpenGLDouble s, boom::OpenGLDouble t) const;
    void texCoord2dv(boom::OpenGLDouble const* v) const;
    void texCoord2f(boom::OpenGLFloat s, boom::OpenGLFloat t) const;
    void texCoord2fv(boom::OpenGLFloat const* v) const;
    void texCoord2i(boom::OpenGLInt s, boom::OpenGLInt t) const;
    void texCoord2iv(boom::OpenGLInt const* v) const;
    void texCoord2s(boom::OpenGLShort s, boom::OpenGLShort t) const;
    void texCoord2sv(boom::OpenGLShort const* v) const;
    void texCoord3d(boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r) const;
    void texCoord3dv(boom::OpenGLDouble const* v) const;
    void texCoord3f(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r) const;
    void texCoord3fv(boom::OpenGLFloat const* v) const;
    void texCoord3i(boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r) const;
    void texCoord3iv(boom::OpenGLInt const* v) const;
    void texCoord3s(boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r) const;
    void texCoord3sv(boom::OpenGLShort const* v) const;
    void texCoord4d(boom::OpenGLDouble s, boom::OpenGLDouble t, boom::OpenGLDouble r, boom::OpenGLDouble q) const;
    void texCoord4dv(boom::OpenGLDouble const* v) const;
    void texCoord4f(boom::OpenGLFloat s, boom::OpenGLFloat t, boom::OpenGLFloat r, boom::OpenGLFloat q) const;
    void texCoord4fv(boom::OpenGLFloat const* v) const;
    void texCoord4i(boom::OpenGLInt s, boom::OpenGLInt t, boom::OpenGLInt r, boom::OpenGLInt q) const;
    void texCoord4iv(boom::OpenGLInt const* v) const;
    void texCoord4s(boom::OpenGLShort s, boom::OpenGLShort t, boom::OpenGLShort r, boom::OpenGLShort q) const;
    void texCoord4sv(boom::OpenGLShort const* v) const;
    void texCoordP1ui(boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void texCoordP1uiv(boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void texCoordP2ui(boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void texCoordP2uiv(boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void texCoordP3ui(boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void texCoordP3uiv(boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void texCoordP4ui(boom::OpenGLEnum type, boom::OpenGLUint coords) const;
    void texCoordP4uiv(boom::OpenGLEnum type, boom::OpenGLUint const* coords) const;
    void texCoordPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void texEnvf(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void texEnvfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void texEnvi(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void texEnviv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texEnvx(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texEnvxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texGend(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble param) const;
    void texGendv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLDouble const* params) const;
    void texGenf(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void texGenfv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void texGeni(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void texGeniv(boom::OpenGLEnum coord, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLInt border, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
#ifdef __APPLE__
    void texImage2DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void texImage3DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLInt internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
#else
    void texImage2DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void texImage3DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
#endif
    void texParameterIiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texParameterIuiv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLUint const* params) const;
    void texParameterf(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void texParameterfv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFloat const* params) const;
    void texParameteri(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void texParameteriv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void texParameterx(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed param) const;
    void texParameterxv(boom::OpenGLEnum target, boom::OpenGLEnum pname, boom::OpenGLFixed const* params) const;
    void texStorage1D(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width) const;
    void texStorage2D(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void texStorage2DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void texStorage3D(boom::OpenGLEnum target, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void texStorage3DMultisample(boom::OpenGLEnum target, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void texSubImage1D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage2D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void texSubImage3D(boom::OpenGLEnum target, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureBarrier() const;
    void textureBuffer(boom::OpenGLUint texture, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer) const;
    void textureBufferRange(boom::OpenGLUint texture, boom::OpenGLEnum internalformat, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void textureParameterIiv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLInt const* params) const;
    void textureParameterIuiv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLUint const* params) const;
    void textureParameterf(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLFloat param) const;
    void textureParameterfv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLFloat const* param) const;
    void textureParameteri(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLInt param) const;
    void textureParameteriv(boom::OpenGLUint texture, boom::OpenGLEnum pname, boom::OpenGLInt const* param) const;
    void textureStorage1D(boom::OpenGLUint texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width) const;
    void textureStorage2D(boom::OpenGLUint texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void textureStorage2DMultisample(boom::OpenGLUint texture, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLBoolean fixedsamplelocations) const;
    void textureStorage3D(boom::OpenGLUint texture, boom::OpenGLSizei levels, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth) const;
    void textureStorage3DMultisample(boom::OpenGLUint texture, boom::OpenGLSizei samples, boom::OpenGLEnum internalformat, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLBoolean fixedsamplelocations) const;
    void textureSubImage1D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLSizei width, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage2D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureSubImage3D(boom::OpenGLUint texture, boom::OpenGLInt level, boom::OpenGLInt xoffset, boom::OpenGLInt yoffset, boom::OpenGLInt zoffset, boom::OpenGLSizei width, boom::OpenGLSizei height, boom::OpenGLSizei depth, boom::OpenGLEnum format, boom::OpenGLEnum type, void const* pixels) const;
    void textureView(boom::OpenGLUint texture, boom::OpenGLEnum target, boom::OpenGLUint origtexture, boom::OpenGLEnum internalformat, boom::OpenGLUint minlevel, boom::OpenGLUint numlevels, boom::OpenGLUint minlayer, boom::OpenGLUint numlayers) const;
    void transformFeedbackBufferBase(boom::OpenGLUint xfb, boom::OpenGLUint index, boom::OpenGLUint buffer) const;
    void transformFeedbackBufferRange(boom::OpenGLUint xfb, boom::OpenGLUint index, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizeiptr size) const;
    void transformFeedbackVaryings(boom::OpenGLUint program, boom::OpenGLSizei count, boom::OpenGLChar const* const* varyings, boom::OpenGLEnum bufferMode) const;
    void translated(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void translatef(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void translatex(boom::OpenGLFixed x, boom::OpenGLFixed y, boom::OpenGLFixed z) const;
    void uniform1d(boom::OpenGLInt location, boom::OpenGLDouble x) const;
    void uniform1dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform1f(boom::OpenGLInt location, boom::OpenGLFloat v0) const;
    void uniform1fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform1i(boom::OpenGLInt location, boom::OpenGLInt v0) const;
    void uniform1iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform1ui(boom::OpenGLInt location, boom::OpenGLUint v0) const;
    void uniform1uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniform2d(boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void uniform2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform2f(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1) const;
    void uniform2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform2i(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1) const;
    void uniform2iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform2ui(boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1) const;
    void uniform2uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniform3d(boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void uniform3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform3f(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2) const;
    void uniform3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform3i(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2) const;
    void uniform3iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform3ui(boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2) const;
    void uniform3uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniform4d(boom::OpenGLInt location, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void uniform4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLDouble const* value) const;
    void uniform4f(boom::OpenGLInt location, boom::OpenGLFloat v0, boom::OpenGLFloat v1, boom::OpenGLFloat v2, boom::OpenGLFloat v3) const;
    void uniform4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLFloat const* value) const;
    void uniform4i(boom::OpenGLInt location, boom::OpenGLInt v0, boom::OpenGLInt v1, boom::OpenGLInt v2, boom::OpenGLInt v3) const;
    void uniform4iv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLInt const* value) const;
    void uniform4ui(boom::OpenGLInt location, boom::OpenGLUint v0, boom::OpenGLUint v1, boom::OpenGLUint v2, boom::OpenGLUint v3) const;
    void uniform4uiv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLUint const* value) const;
    void uniformBlockBinding(boom::OpenGLUint program, boom::OpenGLUint uniformBlockIndex, boom::OpenGLUint uniformBlockBinding) const;
    void uniformMatrix2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2x3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix2x3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix2x4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix2x4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3x2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix3x2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix3x4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix3x4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix4fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4x2dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix4x2fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformMatrix4x3dv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLDouble const* value) const;
    void uniformMatrix4x3fv(boom::OpenGLInt location, boom::OpenGLSizei count, boom::OpenGLBoolean transpose, boom::OpenGLFloat const* value) const;
    void uniformSubroutinesuiv(boom::OpenGLEnum shadertype, boom::OpenGLSizei count, boom::OpenGLUint const* indices) const;
    boom::OpenGLBoolean unmapBuffer(boom::OpenGLEnum target) const;
    boom::OpenGLBoolean unmapNamedBuffer(boom::OpenGLUint buffer) const;
    void useProgram(boom::OpenGLUint program) const;
    void useProgramStages(boom::OpenGLUint pipeline, boom::OpenGLBitfield stages, boom::OpenGLUint program) const;
    void validateProgram(boom::OpenGLUint program) const;
    void validateProgramPipeline(boom::OpenGLUint pipeline) const;
    void vertex2d(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertex2dv(boom::OpenGLDouble const* v) const;
    void vertex2f(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertex2fv(boom::OpenGLFloat const* v) const;
    void vertex2i(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void vertex2iv(boom::OpenGLInt const* v) const;
    void vertex2s(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertex2sv(boom::OpenGLShort const* v) const;
    void vertex3d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertex3dv(boom::OpenGLDouble const* v) const;
    void vertex3f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertex3fv(boom::OpenGLFloat const* v) const;
    void vertex3i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void vertex3iv(boom::OpenGLInt const* v) const;
    void vertex3s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertex3sv(boom::OpenGLShort const* v) const;
    void vertex4d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertex4dv(boom::OpenGLDouble const* v) const;
    void vertex4f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertex4fv(boom::OpenGLFloat const* v) const;
    void vertex4i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void vertex4iv(boom::OpenGLInt const* v) const;
    void vertex4s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertex4sv(boom::OpenGLShort const* v) const;
    void vertexArrayAttribBinding(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLUint bindingindex) const;
    void vertexArrayAttribFormat(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint relativeoffset) const;
    void vertexArrayAttribIFormat(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUint relativeoffset) const;
    void vertexArrayAttribLFormat(boom::OpenGLUint vaobj, boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUint relativeoffset) const;
    void vertexArrayBindingDivisor(boom::OpenGLUint vaobj, boom::OpenGLUint bindingindex, boom::OpenGLUint divisor) const;
    void vertexArrayElementBuffer(boom::OpenGLUint vaobj, boom::OpenGLUint buffer) const;
    void vertexArrayVertexBuffer(boom::OpenGLUint vaobj, boom::OpenGLUint bindingindex, boom::OpenGLUint buffer, boom::OpenGLIntptr offset, boom::OpenGLSizei stride) const;
    void vertexArrayVertexBuffers(boom::OpenGLUint vaobj, boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLUint const* buffers, boom::OpenGLIntptr const* offsets, boom::OpenGLSizei const* strides) const;
    void vertexAttrib1d(boom::OpenGLUint index, boom::OpenGLDouble x) const;
    void vertexAttrib1dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib1f(boom::OpenGLUint index, boom::OpenGLFloat x) const;
    void vertexAttrib1fv(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib1s(boom::OpenGLUint index, boom::OpenGLShort x) const;
    void vertexAttrib1sv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib2d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttrib2dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib2f(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void vertexAttrib2fv(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib2s(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y) const;
    void vertexAttrib2sv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib3d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttrib3dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib3f(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void vertexAttrib3fv(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib3s(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void vertexAttrib3sv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib4Nbv(boom::OpenGLUint index, boom::OpenGLByte const* v) const;
    void vertexAttrib4Niv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttrib4Nsv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib4Nub(boom::OpenGLUint index, boom::OpenGLUbyte x, boom::OpenGLUbyte y, boom::OpenGLUbyte z, boom::OpenGLUbyte w) const;
    void vertexAttrib4Nubv(boom::OpenGLUint index, boom::OpenGLUbyte const* v) const;
    void vertexAttrib4Nuiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttrib4Nusv(boom::OpenGLUint index, boom::OpenGLUShort const* v) const;
    void vertexAttrib4bv(boom::OpenGLUint index, boom::OpenGLByte const* v) const;
    void vertexAttrib4d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttrib4dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttrib4f(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z, boom::OpenGLFloat w) const;
    void vertexAttrib4fv(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void vertexAttrib4iv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttrib4s(boom::OpenGLUint index, boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z, boom::OpenGLShort w) const;
    void vertexAttrib4sv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttrib4ubv(boom::OpenGLUint index, boom::OpenGLUbyte const* v) const;
    void vertexAttrib4uiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttrib4usv(boom::OpenGLUint index, boom::OpenGLUShort const* v) const;
    void vertexAttribBinding(boom::OpenGLUint attribindex, boom::OpenGLUint bindingindex) const;
    void vertexAttribDivisor(boom::OpenGLUint index, boom::OpenGLUint divisor) const;
    void vertexAttribFormat(boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint relativeoffset) const;
    void vertexAttribI1i(boom::OpenGLUint index, boom::OpenGLInt x) const;
    void vertexAttribI1iv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI1ui(boom::OpenGLUint index, boom::OpenGLUint x) const;
    void vertexAttribI1uiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI2i(boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y) const;
    void vertexAttribI2iv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI2ui(boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y) const;
    void vertexAttribI2uiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI3i(boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void vertexAttribI3iv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI3ui(boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y, boom::OpenGLUint z) const;
    void vertexAttribI3uiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI4bv(boom::OpenGLUint index, boom::OpenGLByte const* v) const;
    void vertexAttribI4i(boom::OpenGLUint index, boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z, boom::OpenGLInt w) const;
    void vertexAttribI4iv(boom::OpenGLUint index, boom::OpenGLInt const* v) const;
    void vertexAttribI4sv(boom::OpenGLUint index, boom::OpenGLShort const* v) const;
    void vertexAttribI4ubv(boom::OpenGLUint index, boom::OpenGLUbyte const* v) const;
    void vertexAttribI4ui(boom::OpenGLUint index, boom::OpenGLUint x, boom::OpenGLUint y, boom::OpenGLUint z, boom::OpenGLUint w) const;
    void vertexAttribI4uiv(boom::OpenGLUint index, boom::OpenGLUint const* v) const;
    void vertexAttribI4usv(boom::OpenGLUint index, boom::OpenGLUShort const* v) const;
    void vertexAttribIFormat(boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUint relativeoffset) const;
    void vertexAttribIPointer(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribL1d(boom::OpenGLUint index, boom::OpenGLDouble x) const;
    void vertexAttribL1dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribL2d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void vertexAttribL2dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribL3d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void vertexAttribL3dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribL4d(boom::OpenGLUint index, boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z, boom::OpenGLDouble w) const;
    void vertexAttribL4dv(boom::OpenGLUint index, boom::OpenGLDouble const* v) const;
    void vertexAttribLFormat(boom::OpenGLUint attribindex, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLUint relativeoffset) const;
    void vertexAttribLPointer(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexAttribP1ui(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint value) const;
    void vertexAttribP1uiv(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint const* value) const;
    void vertexAttribP2ui(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint value) const;
    void vertexAttribP2uiv(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint const* value) const;
    void vertexAttribP3ui(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint value) const;
    void vertexAttribP3uiv(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint const* value) const;
    void vertexAttribP4ui(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint value) const;
    void vertexAttribP4uiv(boom::OpenGLUint index, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLUint const* value) const;
    void vertexAttribPointer(boom::OpenGLUint index, boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLBoolean normalized, boom::OpenGLSizei stride, void const* pointer) const;
    void vertexBindingDivisor(boom::OpenGLUint bindingindex, boom::OpenGLUint divisor) const;
    void vertexP2ui(boom::OpenGLEnum type, boom::OpenGLUint value) const;
    void vertexP2uiv(boom::OpenGLEnum type, boom::OpenGLUint const* value) const;
    void vertexP3ui(boom::OpenGLEnum type, boom::OpenGLUint value) const;
    void vertexP3uiv(boom::OpenGLEnum type, boom::OpenGLUint const* value) const;
    void vertexP4ui(boom::OpenGLEnum type, boom::OpenGLUint value) const;
    void vertexP4uiv(boom::OpenGLEnum type, boom::OpenGLUint const* value) const;
    void vertexPointer(boom::OpenGLInt size, boom::OpenGLEnum type, boom::OpenGLSizei stride, void const* pointer) const;
    void viewport(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLSizei width, boom::OpenGLSizei height) const;
    void viewportArrayv(boom::OpenGLUint first, boom::OpenGLSizei count, boom::OpenGLFloat const* v) const;
    void viewportIndexedf(boom::OpenGLUint index, boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat w, boom::OpenGLFloat h) const;
    void viewportIndexedfv(boom::OpenGLUint index, boom::OpenGLFloat const* v) const;
    void waitSync(boom::OpenGLSync sync, boom::OpenGLBitfield flags, boom::OpenGLUInt64 timeout) const;
    void windowPos2d(boom::OpenGLDouble x, boom::OpenGLDouble y) const;
    void windowPos2dv(boom::OpenGLDouble const* v) const;
    void windowPos2f(boom::OpenGLFloat x, boom::OpenGLFloat y) const;
    void windowPos2fv(boom::OpenGLFloat const* v) const;
    void windowPos2i(boom::OpenGLInt x, boom::OpenGLInt y) const;
    void windowPos2iv(boom::OpenGLInt const* v) const;
    void windowPos2s(boom::OpenGLShort x, boom::OpenGLShort y) const;
    void windowPos2sv(boom::OpenGLShort const* v) const;
    void windowPos3d(boom::OpenGLDouble x, boom::OpenGLDouble y, boom::OpenGLDouble z) const;
    void windowPos3dv(boom::OpenGLDouble const* v) const;
    void windowPos3f(boom::OpenGLFloat x, boom::OpenGLFloat y, boom::OpenGLFloat z) const;
    void windowPos3fv(boom::OpenGLFloat const* v) const;
    void windowPos3i(boom::OpenGLInt x, boom::OpenGLInt y, boom::OpenGLInt z) const;
    void windowPos3iv(boom::OpenGLInt const* v) const;
    void windowPos3s(boom::OpenGLShort x, boom::OpenGLShort y, boom::OpenGLShort z) const;
    void windowPos3sv(boom::OpenGLShort const* v) const;
    void swap() const;
    virtual ~OpenGL();
private:
    boom::__OpenGLImpl* _impl;
    void _current() const;
    void _bootstrap();
    void _implInit(boom::OpenGLOptions const&);
    void _implDone();
    void _implSwap() const;
    void _implCurrent() const;
    void _implBootstrap();
};

auto constexpr kOpenGLTrue = 1;
auto constexpr kOpenGLFalse = 0;
auto constexpr kOpenGL2Bytes = 0x1407;
auto constexpr kOpenGL2D = 0x0600;
auto constexpr kOpenGL3Bytes = 0x1408;
auto constexpr kOpenGL3D = 0x0601;
auto constexpr kOpenGL3DColor = 0x0602;
auto constexpr kOpenGL3DColorTexture = 0x0603;
auto constexpr kOpenGL4Bytes = 0x1409;
auto constexpr kOpenGL4dColorTexture = 0x0604;
auto constexpr kOpenGLAccum = 0x0100;
auto constexpr kOpenGLAccumAlphaBits = 0x0d5b;
auto constexpr kOpenGLAccumBlueBits = 0x0d5a;
auto constexpr kOpenGLAccumBufferBit = 0x00000200;
auto constexpr kOpenGLAccumClearValue = 0x0b80;
auto constexpr kOpenGLAccumGreenBits = 0x0d59;
auto constexpr kOpenGLAccumRedBits = 0x0d58;
auto constexpr kOpenGLActiveAtomicCounterBuffers = 0x92d9;
auto constexpr kOpenGLActiveAttributeMaxLength = 0x8b8a;
auto constexpr kOpenGLActiveAttributes = 0x8b89;
auto constexpr kOpenGLActiveProgram = 0x8259;
auto constexpr kOpenGLActiveResources = 0x92f5;
auto constexpr kOpenGLActiveSubroutineMaxLength = 0x8e48;
auto constexpr kOpenGLActiveSubroutineUniformLocations = 0x8e47;
auto constexpr kOpenGLActiveSubroutineUniformMaxLength = 0x8e49;
auto constexpr kOpenGLActiveSubroutineUniforms = 0x8de6;
auto constexpr kOpenGLActiveSubroutines = 0x8de5;
auto constexpr kOpenGLActiveTexture = 0x84e0;
auto constexpr kOpenGLActiveUniformBlockMaxNameLength = 0x8a35;
auto constexpr kOpenGLActiveUniformBlocks = 0x8a36;
auto constexpr kOpenGLActiveUniformMaxLength = 0x8b87;
auto constexpr kOpenGLActiveUniforms = 0x8b86;
auto constexpr kOpenGLActiveVariables = 0x9305;
auto constexpr kOpenGLAdd = 0x0104;
auto constexpr kOpenGLAddSigned = 0x8574;
auto constexpr kOpenGLAliasedLineWidthRange = 0x846e;
auto constexpr kOpenGLAliasedPointSizeRange = 0x846d;
auto constexpr kOpenGLAllAttribBits = 0xffffffff;
auto constexpr kOpenGLAllBarrierBits = 0xffffffff;
auto constexpr kOpenGLAllShaderBits = 0xffffffff;
auto constexpr kOpenGLAlpha = 0x1906;
auto constexpr kOpenGLAlpha12 = 0x803d;
auto constexpr kOpenGLAlpha16 = 0x803e;
auto constexpr kOpenGLAlpha4 = 0x803b;
auto constexpr kOpenGLAlpha8 = 0x803c;
auto constexpr kOpenGLAlphaBias = 0x0d1d;
auto constexpr kOpenGLAlphaBits = 0x0d55;
auto constexpr kOpenGLAlphaInteger = 0x8d97;
auto constexpr kOpenGLAlphaScale = 0x0d1c;
auto constexpr kOpenGLAlphaTest = 0x0bc0;
auto constexpr kOpenGLAlphaTestFunc = 0x0bc1;
auto constexpr kOpenGLAlphaTestRef = 0x0bc2;
auto constexpr kOpenGLAlreadySignaled = 0x911a;
auto constexpr kOpenGLAlways = 0x0207;
auto constexpr kOpenGLAmbient = 0x1200;
auto constexpr kOpenGLAmbientAndDiffuse = 0x1602;
auto constexpr kOpenGLAnd = 0x1501;
auto constexpr kOpenGLAndInverted = 0x1504;
auto constexpr kOpenGLAndReverse = 0x1502;
auto constexpr kOpenGLAnySamplesPassed = 0x8c2f;
auto constexpr kOpenGLAnySamplesPassedConservative = 0x8d6a;
auto constexpr kOpenGLArrayBuffer = 0x8892;
auto constexpr kOpenGLArrayBufferBinding = 0x8894;
auto constexpr kOpenGLArraySize = 0x92fb;
auto constexpr kOpenGLArrayStride = 0x92fe;
auto constexpr kOpenGLAtomicCounterBarrierBit = 0x00001000;
auto constexpr kOpenGLAtomicCounterBuffer = 0x92c0;
auto constexpr kOpenGLAtomicCounterBufferActiveAtomicCounterIndices = 0x92c6;
auto constexpr kOpenGLAtomicCounterBufferActiveAtomicCounters = 0x92c5;
auto constexpr kOpenGLAtomicCounterBufferBinding = 0x92c1;
auto constexpr kOpenGLAtomicCounterBufferDataSize = 0x92c4;
auto constexpr kOpenGLAtomicCounterBufferIndex = 0x9301;
auto constexpr kOpenGLAtomicCounterBufferReferencedByComputeShader = 0x90ed;
auto constexpr kOpenGLAtomicCounterBufferReferencedByFragmentShader = 0x92cb;
auto constexpr kOpenGLAtomicCounterBufferReferencedByGeometryShader = 0x92ca;
auto constexpr kOpenGLAtomicCounterBufferReferencedByTessControlShader = 0x92c8;
auto constexpr kOpenGLAtomicCounterBufferReferencedByTessEvaluationShader = 0x92c9;
auto constexpr kOpenGLAtomicCounterBufferReferencedByVertexShader = 0x92c7;
auto constexpr kOpenGLAtomicCounterBufferSize = 0x92c3;
auto constexpr kOpenGLAtomicCounterBufferStart = 0x92c2;
auto constexpr kOpenGLAttachedShaders = 0x8b85;
auto constexpr kOpenGLAttribStackDepth = 0x0bb0;
auto constexpr kOpenGLAutoGenerateMipmap = 0x8295;
auto constexpr kOpenGLAutoNormal = 0x0d80;
auto constexpr kOpenGLAux0 = 0x0409;
auto constexpr kOpenGLAux1 = 0x040a;
auto constexpr kOpenGLAux2 = 0x040b;
auto constexpr kOpenGLAux3 = 0x040c;
auto constexpr kOpenGLAuxBuffers = 0x0c00;
auto constexpr kOpenGLBGRA = 0x80e1;
auto constexpr kOpenGLBGRAInteger = 0x8d9b;
auto constexpr kOpenGLBack = 0x0405;
auto constexpr kOpenGLBackLeft = 0x0402;
auto constexpr kOpenGLBackRight = 0x0403;
auto constexpr kOpenGLBgr = 0x80e0;
auto constexpr kOpenGLBgrInteger = 0x8d9a;
auto constexpr kOpenGLBitmap = 0x1a00;
auto constexpr kOpenGLBitmapToken = 0x0704;
auto constexpr kOpenGLBlend = 0x0be2;
auto constexpr kOpenGLBlendColor = 0x8005;
auto constexpr kOpenGLBlendDst = 0x0be0;
auto constexpr kOpenGLBlendDstAlpha = 0x80ca;
auto constexpr kOpenGLBlendDstRgb = 0x80c8;
auto constexpr kOpenGLBlendEquation = 0x8009;
auto constexpr kOpenGLBlendEquationAlpha = 0x883d;
auto constexpr kOpenGLBlendEquationRgb = 0x8009;
auto constexpr kOpenGLBlendSrc = 0x0be1;
auto constexpr kOpenGLBlendSrcAlpha = 0x80cb;
auto constexpr kOpenGLBlendSrcRgb = 0x80c9;
auto constexpr kOpenGLBlockIndex = 0x92fd;
auto constexpr kOpenGLBlue = 0x1905;
auto constexpr kOpenGLBlueBias = 0x0d1b;
auto constexpr kOpenGLBlueBits = 0x0d54;
auto constexpr kOpenGLBlueInteger = 0x8d96;
auto constexpr kOpenGLBlueScale = 0x0d1a;
auto constexpr kOpenGLBool = 0x8b56;
auto constexpr kOpenGLBoolVec2 = 0x8b57;
auto constexpr kOpenGLBoolVec3 = 0x8b58;
auto constexpr kOpenGLBoolVec4 = 0x8b59;
auto constexpr kOpenGLBuffer = 0x82e0;
auto constexpr kOpenGLBufferAccess = 0x88bb;
auto constexpr kOpenGLBufferAccessFlags = 0x911f;
auto constexpr kOpenGLBufferBinding = 0x9302;
auto constexpr kOpenGLBufferDataSize = 0x9303;
auto constexpr kOpenGLBufferImmutableStorage = 0x821f;
auto constexpr kOpenGLBufferMapLength = 0x9120;
auto constexpr kOpenGLBufferMapOffset = 0x9121;
auto constexpr kOpenGLBufferMapPointer = 0x88bd;
auto constexpr kOpenGLBufferMapped = 0x88bc;
auto constexpr kOpenGLBufferSize = 0x8764;
auto constexpr kOpenGLBufferStorageFlags = 0x8220;
auto constexpr kOpenGLBufferUpdateBarrierBit = 0x00000200;
auto constexpr kOpenGLBufferUsage = 0x8765;
auto constexpr kOpenGLBufferVariable = 0x92e5;
auto constexpr kOpenGLByte = 0x1400;
auto constexpr kOpenGLC3fV3f = 0x2a24;
auto constexpr kOpenGLC4fN3fV3f = 0x2a26;
auto constexpr kOpenGLC4ubV2f = 0x2a22;
auto constexpr kOpenGLC4ubV3f = 0x2a23;
auto constexpr kOpenGLCaveatSupport = 0x82b8;
auto constexpr kOpenGLCcw = 0x0901;
auto constexpr kOpenGLClamp = 0x2900;
auto constexpr kOpenGLClampFragmentColor = 0x891b;
auto constexpr kOpenGLClampReadColor = 0x891c;
auto constexpr kOpenGLClampToBorder = 0x812d;
auto constexpr kOpenGLClampToEdge = 0x812f;
auto constexpr kOpenGLClampVertexColor = 0x891a;
auto constexpr kOpenGLClear = 0x1500;
auto constexpr kOpenGLClearBuffer = 0x82b4;
auto constexpr kOpenGLClearTexture = 0x9365;
auto constexpr kOpenGLClientActiveTexture = 0x84e1;
auto constexpr kOpenGLClientAllAttribBits = 0xffffffff;
auto constexpr kOpenGLClientAttribStackDepth = 0x0bb1;
auto constexpr kOpenGLClientMappedBufferBarrierBit = 0x00004000;
auto constexpr kOpenGLClientPixelStoreBit = 0x00000001;
auto constexpr kOpenGLClientStorageBit = 0x0200;
auto constexpr kOpenGLClientVertexArrayBit = 0x00000002;
auto constexpr kOpenGLClipDepthMode = 0x935d;
auto constexpr kOpenGLClipDistance0 = 0x3000;
auto constexpr kOpenGLClipDistance1 = 0x3001;
auto constexpr kOpenGLClipDistance2 = 0x3002;
auto constexpr kOpenGLClipDistance3 = 0x3003;
auto constexpr kOpenGLClipDistance4 = 0x3004;
auto constexpr kOpenGLClipDistance5 = 0x3005;
auto constexpr kOpenGLClipDistance6 = 0x3006;
auto constexpr kOpenGLClipDistance7 = 0x3007;
auto constexpr kOpenGLClipOrigin = 0x935c;
auto constexpr kOpenGLClipPlane0 = 0x3000;
auto constexpr kOpenGLClipPlane1 = 0x3001;
auto constexpr kOpenGLClipPlane2 = 0x3002;
auto constexpr kOpenGLClipPlane3 = 0x3003;
auto constexpr kOpenGLClipPlane4 = 0x3004;
auto constexpr kOpenGLClipPlane5 = 0x3005;
auto constexpr kOpenGLClippingInputPrimitives = 0x82f6;
auto constexpr kOpenGLClippingOutputPrimitives = 0x82f7;
auto constexpr kOpenGLCoeff = 0x0a00;
auto constexpr kOpenGLColor = 0x1800;
auto constexpr kOpenGLColorArray = 0x8076;
auto constexpr kOpenGLColorArrayBufferBinding = 0x8898;
auto constexpr kOpenGLColorArrayPointer = 0x8090;
auto constexpr kOpenGLColorArraySize = 0x8081;
auto constexpr kOpenGLColorArrayStride = 0x8083;
auto constexpr kOpenGLColorArrayType = 0x8082;
auto constexpr kOpenGLColorAttachment0 = 0x8ce0;
auto constexpr kOpenGLColorAttachment1 = 0x8ce1;
auto constexpr kOpenGLColorAttachment10 = 0x8cea;
auto constexpr kOpenGLColorAttachment11 = 0x8ceb;
auto constexpr kOpenGLColorAttachment12 = 0x8cec;
auto constexpr kOpenGLColorAttachment13 = 0x8ced;
auto constexpr kOpenGLColorAttachment14 = 0x8cee;
auto constexpr kOpenGLColorAttachment15 = 0x8cef;
auto constexpr kOpenGLColorAttachment16 = 0x8cf0;
auto constexpr kOpenGLColorAttachment17 = 0x8cf1;
auto constexpr kOpenGLColorAttachment18 = 0x8cf2;
auto constexpr kOpenGLColorAttachment19 = 0x8cf3;
auto constexpr kOpenGLColorAttachment2 = 0x8ce2;
auto constexpr kOpenGLColorAttachment20 = 0x8cf4;
auto constexpr kOpenGLColorAttachment21 = 0x8cf5;
auto constexpr kOpenGLColorAttachment22 = 0x8cf6;
auto constexpr kOpenGLColorAttachment23 = 0x8cf7;
auto constexpr kOpenGLColorAttachment24 = 0x8cf8;
auto constexpr kOpenGLColorAttachment25 = 0x8cf9;
auto constexpr kOpenGLColorAttachment26 = 0x8cfa;
auto constexpr kOpenGLColorAttachment27 = 0x8cfb;
auto constexpr kOpenGLColorAttachment28 = 0x8cfc;
auto constexpr kOpenGLColorAttachment29 = 0x8cfd;
auto constexpr kOpenGLColorAttachment3 = 0x8ce3;
auto constexpr kOpenGLColorAttachment30 = 0x8cfe;
auto constexpr kOpenGLColorAttachment31 = 0x8cff;
auto constexpr kOpenGLColorAttachment4 = 0x8ce4;
auto constexpr kOpenGLColorAttachment5 = 0x8ce5;
auto constexpr kOpenGLColorAttachment6 = 0x8ce6;
auto constexpr kOpenGLColorAttachment7 = 0x8ce7;
auto constexpr kOpenGLColorAttachment8 = 0x8ce8;
auto constexpr kOpenGLColorAttachment9 = 0x8ce9;
auto constexpr kOpenGLColorBufferBit = 0x00004000;
auto constexpr kOpenGLColorClearValue = 0x0c22;
auto constexpr kOpenGLColorComponents = 0x8283;
auto constexpr kOpenGLColorEncoding = 0x8296;
auto constexpr kOpenGLColorIndex = 0x1900;
auto constexpr kOpenGLColorIndexes = 0x1603;
auto constexpr kOpenGLColorLogicOp = 0x0bf2;
auto constexpr kOpenGLColorMaterial = 0x0b57;
auto constexpr kOpenGLColorMaterialFace = 0x0b55;
auto constexpr kOpenGLColorMaterialParameter = 0x0b56;
auto constexpr kOpenGLColorRenderable = 0x8286;
auto constexpr kOpenGLColorSum = 0x8458;
auto constexpr kOpenGLColorTable = 0x80d0;
auto constexpr kOpenGLColorWriteMask = 0x0c23;
auto constexpr kOpenGLColorburn = 0x929a;
auto constexpr kOpenGLColordodge = 0x9299;
auto constexpr kOpenGLCombine = 0x8570;
auto constexpr kOpenGLCombineAlpha = 0x8572;
auto constexpr kOpenGLCombineRgb = 0x8571;
auto constexpr kOpenGLCommandBarrierBit = 0x00000040;
auto constexpr kOpenGLCompareRToTexture = 0x884e;
auto constexpr kOpenGLCompareRefToTexture = 0x884e;
auto constexpr kOpenGLCompatibleSubroutines = 0x8e4b;
auto constexpr kOpenGLCompile = 0x1300;
auto constexpr kOpenGLCompileAndExecute = 0x1301;
auto constexpr kOpenGLCompileStatus = 0x8b81;
auto constexpr kOpenGLCompressedAlpha = 0x84e9;
auto constexpr kOpenGLCompressedIntensity = 0x84ec;
auto constexpr kOpenGLCompressedLuminance = 0x84ea;
auto constexpr kOpenGLCompressedLuminanceAlpha = 0x84eb;
auto constexpr kOpenGLCompressedR11Eac = 0x9270;
auto constexpr kOpenGLCompressedRGBA = 0x84ee;
auto constexpr kOpenGLCompressedRGBA8Etc2Eac = 0x9278;
auto constexpr kOpenGLCompressedRGBAAstc10x10 = 0x93bb;
auto constexpr kOpenGLCompressedRGBAAstc10x5 = 0x93b8;
auto constexpr kOpenGLCompressedRGBAAstc10x6 = 0x93b9;
auto constexpr kOpenGLCompressedRGBAAstc10x8 = 0x93ba;
auto constexpr kOpenGLCompressedRGBAAstc12x10 = 0x93bc;
auto constexpr kOpenGLCompressedRGBAAstc12x12 = 0x93bd;
auto constexpr kOpenGLCompressedRGBAAstc4x4 = 0x93b0;
auto constexpr kOpenGLCompressedRGBAAstc5x4 = 0x93b1;
auto constexpr kOpenGLCompressedRGBAAstc5x5 = 0x93b2;
auto constexpr kOpenGLCompressedRGBAAstc6x5 = 0x93b3;
auto constexpr kOpenGLCompressedRGBAAstc6x6 = 0x93b4;
auto constexpr kOpenGLCompressedRGBAAstc8x5 = 0x93b5;
auto constexpr kOpenGLCompressedRGBAAstc8x6 = 0x93b6;
auto constexpr kOpenGLCompressedRGBAAstc8x8 = 0x93b7;
auto constexpr kOpenGLCompressedRGBABptcUnorm = 0x8e8c;
auto constexpr kOpenGLCompressedRed = 0x8225;
auto constexpr kOpenGLCompressedRedRgtc1 = 0x8dbb;
auto constexpr kOpenGLCompressedRg = 0x8226;
auto constexpr kOpenGLCompressedRg11Eac = 0x9272;
auto constexpr kOpenGLCompressedRgRgtc2 = 0x8dbd;
auto constexpr kOpenGLCompressedRgb = 0x84ed;
auto constexpr kOpenGLCompressedRgb8Etc2 = 0x9274;
auto constexpr kOpenGLCompressedRgb8PunchthroughAlpha1Etc2 = 0x9276;
auto constexpr kOpenGLCompressedRgbBptcSignedFloat = 0x8e8e;
auto constexpr kOpenGLCompressedRgbBptcUnsignedFloat = 0x8e8f;
auto constexpr kOpenGLCompressedSRGB = 0x8c48;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc10x10 = 0x93db;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc10x5 = 0x93d8;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc10x6 = 0x93d9;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc10x8 = 0x93da;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc12x10 = 0x93dc;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc12x12 = 0x93dd;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc4x4 = 0x93d0;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc5x4 = 0x93d1;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc5x5 = 0x93d2;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc6x5 = 0x93d3;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc6x6 = 0x93d4;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc8x5 = 0x93d5;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc8x6 = 0x93d6;
auto constexpr kOpenGLCompressedSRGB8Alpha8Astc8x8 = 0x93d7;
auto constexpr kOpenGLCompressedSRGB8Alpha8Etc2Eac = 0x9279;
auto constexpr kOpenGLCompressedSRGB8Etc2 = 0x9275;
auto constexpr kOpenGLCompressedSRGB8PunchthroughAlpha1Etc2 = 0x9277;
auto constexpr kOpenGLCompressedSRGBAlpha = 0x8c49;
auto constexpr kOpenGLCompressedSRGBAlphaBptcUnorm = 0x8e8d;
auto constexpr kOpenGLCompressedSignedR11Eac = 0x9271;
auto constexpr kOpenGLCompressedSignedRedRgtc1 = 0x8dbc;
auto constexpr kOpenGLCompressedSignedRg11Eac = 0x9273;
auto constexpr kOpenGLCompressedSignedRgRgtc2 = 0x8dbe;
auto constexpr kOpenGLCompressedSluminance = 0x8c4a;
auto constexpr kOpenGLCompressedSluminanceAlpha = 0x8c4b;
auto constexpr kOpenGLCompressedTextureFormats = 0x86a3;
auto constexpr kOpenGLComputeShader = 0x91b9;
auto constexpr kOpenGLComputeShaderBit = 0x00000020;
auto constexpr kOpenGLComputeShaderInvocations = 0x82f5;
auto constexpr kOpenGLComputeSubroutine = 0x92ed;
auto constexpr kOpenGLComputeSubroutineUniform = 0x92f3;
auto constexpr kOpenGLComputeTexture = 0x82a0;
auto constexpr kOpenGLComputeWorkGroupSize = 0x8267;
auto constexpr kOpenGLConditionSatisfied = 0x911c;
auto constexpr kOpenGLConstant = 0x8576;
auto constexpr kOpenGLConstantAlpha = 0x8003;
auto constexpr kOpenGLConstantAttenuation = 0x1207;
auto constexpr kOpenGLConstantColor = 0x8001;
auto constexpr kOpenGLContextCompatibilityProfileBit = 0x00000002;
auto constexpr kOpenGLContextCoreProfileBit = 0x00000001;
auto constexpr kOpenGLContextFlagDebugBit = 0x00000002;
auto constexpr kOpenGLContextFlagForwardCompatibleBit = 0x00000001;
auto constexpr kOpenGLContextFlagNoErrorBit = 0x00000008;
auto constexpr kOpenGLContextFlagRobustAccessBit = 0x00000004;
auto constexpr kOpenGLContextFlags = 0x821e;
auto constexpr kOpenGLContextLost = 0x0507;
auto constexpr kOpenGLContextProfileMask = 0x9126;
auto constexpr kOpenGLContextReleaseBehavior = 0x82fb;
auto constexpr kOpenGLContextReleaseBehaviorFlush = 0x82fc;
auto constexpr kOpenGLContextRobustAccess = 0x90f3;
auto constexpr kOpenGLConvolution1D = 0x8010;
auto constexpr kOpenGLConvolution2D = 0x8011;
auto constexpr kOpenGLCoordReplace = 0x8862;
auto constexpr kOpenGLCopy = 0x1503;
auto constexpr kOpenGLCopyInverted = 0x150c;
auto constexpr kOpenGLCopyPixelToken = 0x0706;
auto constexpr kOpenGLCopyReadBuffer = 0x8f36;
auto constexpr kOpenGLCopyReadBufferBinding = 0x8f36;
auto constexpr kOpenGLCopyWriteBuffer = 0x8f37;
auto constexpr kOpenGLCopyWriteBufferBinding = 0x8f37;
auto constexpr kOpenGLCullFace = 0x0b44;
auto constexpr kOpenGLCullFaceMode = 0x0b45;
auto constexpr kOpenGLCurrentBit = 0x00000001;
auto constexpr kOpenGLCurrentColor = 0x0b00;
auto constexpr kOpenGLCurrentFogCoord = 0x8453;
auto constexpr kOpenGLCurrentFogCoordinate = 0x8453;
auto constexpr kOpenGLCurrentIndex = 0x0b01;
auto constexpr kOpenGLCurrentNormal = 0x0b02;
auto constexpr kOpenGLCurrentProgram = 0x8b8d;
auto constexpr kOpenGLCurrentQuery = 0x8865;
auto constexpr kOpenGLCurrentRasterColor = 0x0b04;
auto constexpr kOpenGLCurrentRasterDistance = 0x0b09;
auto constexpr kOpenGLCurrentRasterIndex = 0x0b05;
auto constexpr kOpenGLCurrentRasterPosition = 0x0b07;
auto constexpr kOpenGLCurrentRasterPositionValid = 0x0b08;
auto constexpr kOpenGLCurrentRasterSecondaryColor = 0x845f;
auto constexpr kOpenGLCurrentRasterTextureCoords = 0x0b06;
auto constexpr kOpenGLCurrentSecondaryColor = 0x8459;
auto constexpr kOpenGLCurrentTextureCoords = 0x0b03;
auto constexpr kOpenGLCurrentVertexAttrib = 0x8626;
auto constexpr kOpenGLCw = 0x0900;
auto constexpr kOpenGLDarken = 0x9297;
auto constexpr kOpenGLDebugCallbackFunction = 0x8244;
auto constexpr kOpenGLDebugCallbackUserParam = 0x8245;
auto constexpr kOpenGLDebugGroupStackDepth = 0x826d;
auto constexpr kOpenGLDebugLoggedMessages = 0x9145;
auto constexpr kOpenGLDebugNextLoggedMessageLength = 0x8243;
auto constexpr kOpenGLDebugOutput = 0x92e0;
auto constexpr kOpenGLDebugOutputSynchronous = 0x8242;
auto constexpr kOpenGLDebugSeverityHigh = 0x9146;
auto constexpr kOpenGLDebugSeverityLow = 0x9148;
auto constexpr kOpenGLDebugSeverityMedium = 0x9147;
auto constexpr kOpenGLDebugSeverityNotification = 0x826b;
auto constexpr kOpenGLDebugSourceApi = 0x8246;
auto constexpr kOpenGLDebugSourceApplication = 0x824a;
auto constexpr kOpenGLDebugSourceOther = 0x824b;
auto constexpr kOpenGLDebugSourceShaderCompiler = 0x8248;
auto constexpr kOpenGLDebugSourceThirdParty = 0x8249;
auto constexpr kOpenGLDebugSourceWindowSystem = 0x8247;
auto constexpr kOpenGLDebugTypeDeprecatedBehavior = 0x824d;
auto constexpr kOpenGLDebugTypeError = 0x824c;
auto constexpr kOpenGLDebugTypeMarker = 0x8268;
auto constexpr kOpenGLDebugTypeOther = 0x8251;
auto constexpr kOpenGLDebugTypePerformance = 0x8250;
auto constexpr kOpenGLDebugTypePopGroup = 0x826a;
auto constexpr kOpenGLDebugTypePortability = 0x824f;
auto constexpr kOpenGLDebugTypePushGroup = 0x8269;
auto constexpr kOpenGLDebugTypeUndefinedBehavior = 0x824e;
auto constexpr kOpenGLDecal = 0x2101;
auto constexpr kOpenGLDecr = 0x1e03;
auto constexpr kOpenGLDecrWrap = 0x8508;
auto constexpr kOpenGLDeleteStatus = 0x8b80;
auto constexpr kOpenGLDepth = 0x1801;
auto constexpr kOpenGLDepth24Stencil8 = 0x88f0;
auto constexpr kOpenGLDepth32fStencil8 = 0x8cad;
auto constexpr kOpenGLDepthAttachment = 0x8d00;
auto constexpr kOpenGLDepthBias = 0x0d1f;
auto constexpr kOpenGLDepthBits = 0x0d56;
auto constexpr kOpenGLDepthBufferBit = 0x00000100;
auto constexpr kOpenGLDepthClamp = 0x864f;
auto constexpr kOpenGLDepthClearValue = 0x0b73;
auto constexpr kOpenGLDepthComponent = 0x1902;
auto constexpr kOpenGLDepthComponent16 = 0x81a5;
auto constexpr kOpenGLDepthComponent24 = 0x81a6;
auto constexpr kOpenGLDepthComponent32 = 0x81a7;
auto constexpr kOpenGLDepthComponent32f = 0x8cac;
auto constexpr kOpenGLDepthComponents = 0x8284;
auto constexpr kOpenGLDepthFunc = 0x0b74;
auto constexpr kOpenGLDepthRange = 0x0b70;
auto constexpr kOpenGLDepthRenderable = 0x8287;
auto constexpr kOpenGLDepthScale = 0x0d1e;
auto constexpr kOpenGLDepthStencil = 0x84f9;
auto constexpr kOpenGLDepthStencilAttachment = 0x821a;
auto constexpr kOpenGLDepthStencilTextureMode = 0x90ea;
auto constexpr kOpenGLDepthTest = 0x0b71;
auto constexpr kOpenGLDepthTextureMode = 0x884b;
auto constexpr kOpenGLDepthWriteMask = 0x0b72;
auto constexpr kOpenGLDifference = 0x929e;
auto constexpr kOpenGLDiffuse = 0x1201;
auto constexpr kOpenGLDispatchIndirectBuffer = 0x90ee;
auto constexpr kOpenGLDispatchIndirectBufferBinding = 0x90ef;
auto constexpr kOpenGLDisplayList = 0x82e7;
auto constexpr kOpenGLDither = 0x0bd0;
auto constexpr kOpenGLDomain = 0x0a02;
auto constexpr kOpenGLDontCare = 0x1100;
auto constexpr kOpenGLDot3RGBA = 0x86af;
auto constexpr kOpenGLDot3Rgb = 0x86ae;
auto constexpr kOpenGLDouble = 0x140a;
auto constexpr kOpenGLDoubleMat2 = 0x8f46;
auto constexpr kOpenGLDoubleMat2x3 = 0x8f49;
auto constexpr kOpenGLDoubleMat2x4 = 0x8f4a;
auto constexpr kOpenGLDoubleMat3 = 0x8f47;
auto constexpr kOpenGLDoubleMat3x2 = 0x8f4b;
auto constexpr kOpenGLDoubleMat3x4 = 0x8f4c;
auto constexpr kOpenGLDoubleMat4 = 0x8f48;
auto constexpr kOpenGLDoubleMat4x2 = 0x8f4d;
auto constexpr kOpenGLDoubleMat4x3 = 0x8f4e;
auto constexpr kOpenGLDoubleVec2 = 0x8ffc;
auto constexpr kOpenGLDoubleVec3 = 0x8ffd;
auto constexpr kOpenGLDoubleVec4 = 0x8ffe;
auto constexpr kOpenGLDoublebuffer = 0x0c32;
auto constexpr kOpenGLDrawBuffer = 0x0c01;
auto constexpr kOpenGLDrawBuffer0 = 0x8825;
auto constexpr kOpenGLDrawBuffer1 = 0x8826;
auto constexpr kOpenGLDrawBuffer10 = 0x882f;
auto constexpr kOpenGLDrawBuffer11 = 0x8830;
auto constexpr kOpenGLDrawBuffer12 = 0x8831;
auto constexpr kOpenGLDrawBuffer13 = 0x8832;
auto constexpr kOpenGLDrawBuffer14 = 0x8833;
auto constexpr kOpenGLDrawBuffer15 = 0x8834;
auto constexpr kOpenGLDrawBuffer2 = 0x8827;
auto constexpr kOpenGLDrawBuffer3 = 0x8828;
auto constexpr kOpenGLDrawBuffer4 = 0x8829;
auto constexpr kOpenGLDrawBuffer5 = 0x882a;
auto constexpr kOpenGLDrawBuffer6 = 0x882b;
auto constexpr kOpenGLDrawBuffer7 = 0x882c;
auto constexpr kOpenGLDrawBuffer8 = 0x882d;
auto constexpr kOpenGLDrawBuffer9 = 0x882e;
auto constexpr kOpenGLDrawFramebuffer = 0x8ca9;
auto constexpr kOpenGLDrawFramebufferBinding = 0x8ca6;
auto constexpr kOpenGLDrawIndirectBuffer = 0x8f3f;
auto constexpr kOpenGLDrawIndirectBufferBinding = 0x8f43;
auto constexpr kOpenGLDrawPixelToken = 0x0705;
auto constexpr kOpenGLDstAlpha = 0x0304;
auto constexpr kOpenGLDstColor = 0x0306;
auto constexpr kOpenGLDynamicCopy = 0x88ea;
auto constexpr kOpenGLDynamicDraw = 0x88e8;
auto constexpr kOpenGLDynamicRead = 0x88e9;
auto constexpr kOpenGLDynamicStorageBit = 0x0100;
auto constexpr kOpenGLEdgeFlag = 0x0b43;
auto constexpr kOpenGLEdgeFlagArray = 0x8079;
auto constexpr kOpenGLEdgeFlagArrayBufferBinding = 0x889b;
auto constexpr kOpenGLEdgeFlagArrayPointer = 0x8093;
auto constexpr kOpenGLEdgeFlagArrayStride = 0x808c;
auto constexpr kOpenGLElementArrayBarrierBit = 0x00000002;
auto constexpr kOpenGLElementArrayBuffer = 0x8893;
auto constexpr kOpenGLElementArrayBufferBinding = 0x8895;
auto constexpr kOpenGLEmission = 0x1600;
auto constexpr kOpenGLEnableBit = 0x00002000;
auto constexpr kOpenGLEqual = 0x0202;
auto constexpr kOpenGLEquiv = 0x1509;
auto constexpr kOpenGLEvalBit = 0x00010000;
auto constexpr kOpenGLExclusion = 0x92a0;
auto constexpr kOpenGLExp = 0x0800;
auto constexpr kOpenGLExp2 = 0x0801;
auto constexpr kOpenGLExtensions = 0x1f03;
auto constexpr kOpenGLEyeLinear = 0x2400;
auto constexpr kOpenGLEyePlane = 0x2502;
auto constexpr kOpenGLFastest = 0x1101;
auto constexpr kOpenGLFeedback = 0x1c01;
auto constexpr kOpenGLFeedbackBufferPointer = 0x0df0;
auto constexpr kOpenGLFeedbackBufferSize = 0x0df1;
auto constexpr kOpenGLFeedbackBufferType = 0x0df2;
auto constexpr kOpenGLFill = 0x1b02;
auto constexpr kOpenGLFilter = 0x829a;
auto constexpr kOpenGLFirstVertexConvention = 0x8e4d;
auto constexpr kOpenGLFixed = 0x140c;
auto constexpr kOpenGLFixedOnly = 0x891d;
auto constexpr kOpenGLFlat = 0x1d00;
auto constexpr kOpenGLFloat = 0x1406;
auto constexpr kOpenGLFloat32UnsignedInt248Rev = 0x8dad;
auto constexpr kOpenGLFloatMat2 = 0x8b5a;
auto constexpr kOpenGLFloatMat2x3 = 0x8b65;
auto constexpr kOpenGLFloatMat2x4 = 0x8b66;
auto constexpr kOpenGLFloatMat3 = 0x8b5b;
auto constexpr kOpenGLFloatMat3x2 = 0x8b67;
auto constexpr kOpenGLFloatMat3x4 = 0x8b68;
auto constexpr kOpenGLFloatMat4 = 0x8b5c;
auto constexpr kOpenGLFloatMat4x2 = 0x8b69;
auto constexpr kOpenGLFloatMat4x3 = 0x8b6a;
auto constexpr kOpenGLFloatVec2 = 0x8b50;
auto constexpr kOpenGLFloatVec3 = 0x8b51;
auto constexpr kOpenGLFloatVec4 = 0x8b52;
auto constexpr kOpenGLFog = 0x0b60;
auto constexpr kOpenGLFogBit = 0x00000080;
auto constexpr kOpenGLFogColor = 0x0b66;
auto constexpr kOpenGLFogCoord = 0x8451;
auto constexpr kOpenGLFogCoordArray = 0x8457;
auto constexpr kOpenGLFogCoordArrayBufferBinding = 0x889d;
auto constexpr kOpenGLFogCoordArrayPointer = 0x8456;
auto constexpr kOpenGLFogCoordArrayStride = 0x8455;
auto constexpr kOpenGLFogCoordArrayType = 0x8454;
auto constexpr kOpenGLFogCoordSrc = 0x8450;
auto constexpr kOpenGLFogCoordinate = 0x8451;
auto constexpr kOpenGLFogCoordinateArray = 0x8457;
auto constexpr kOpenGLFogCoordinateArrayBufferBinding = 0x889d;
auto constexpr kOpenGLFogCoordinateArrayPointer = 0x8456;
auto constexpr kOpenGLFogCoordinateArrayStride = 0x8455;
auto constexpr kOpenGLFogCoordinateArrayType = 0x8454;
auto constexpr kOpenGLFogCoordinateSource = 0x8450;
auto constexpr kOpenGLFogDensity = 0x0b62;
auto constexpr kOpenGLFogEnd = 0x0b64;
auto constexpr kOpenGLFogHint = 0x0c54;
auto constexpr kOpenGLFogIndex = 0x0b61;
auto constexpr kOpenGLFogMode = 0x0b65;
auto constexpr kOpenGLFogStart = 0x0b63;
auto constexpr kOpenGLFractionalEven = 0x8e7c;
auto constexpr kOpenGLFractionalOdd = 0x8e7b;
auto constexpr kOpenGLFragmentDepth = 0x8452;
auto constexpr kOpenGLFragmentInterpolationOffsetBits = 0x8e5d;
auto constexpr kOpenGLFragmentShader = 0x8b30;
auto constexpr kOpenGLFragmentShaderBit = 0x00000002;
auto constexpr kOpenGLFragmentShaderDerivativeHint = 0x8b8b;
auto constexpr kOpenGLFragmentShaderInvocations = 0x82f4;
auto constexpr kOpenGLFragmentSubroutine = 0x92ec;
auto constexpr kOpenGLFragmentSubroutineUniform = 0x92f2;
auto constexpr kOpenGLFragmentTexture = 0x829f;
auto constexpr kOpenGLFramebuffer = 0x8d40;
auto constexpr kOpenGLFramebufferAttachmentAlphaSize = 0x8215;
auto constexpr kOpenGLFramebufferAttachmentBlueSize = 0x8214;
auto constexpr kOpenGLFramebufferAttachmentColorEncoding = 0x8210;
auto constexpr kOpenGLFramebufferAttachmentComponentType = 0x8211;
auto constexpr kOpenGLFramebufferAttachmentDepthSize = 0x8216;
auto constexpr kOpenGLFramebufferAttachmentGreenSize = 0x8213;
auto constexpr kOpenGLFramebufferAttachmentLayered = 0x8da7;
auto constexpr kOpenGLFramebufferAttachmentObjectName = 0x8cd1;
auto constexpr kOpenGLFramebufferAttachmentObjectType = 0x8cd0;
auto constexpr kOpenGLFramebufferAttachmentRedSize = 0x8212;
auto constexpr kOpenGLFramebufferAttachmentStencilSize = 0x8217;
auto constexpr kOpenGLFramebufferAttachmentTextureCubeMapFace = 0x8cd3;
auto constexpr kOpenGLFramebufferAttachmentTextureLayer = 0x8cd4;
auto constexpr kOpenGLFramebufferAttachmentTextureLevel = 0x8cd2;
auto constexpr kOpenGLFramebufferBarrierBit = 0x00000400;
auto constexpr kOpenGLFramebufferBinding = 0x8ca6;
auto constexpr kOpenGLFramebufferBlend = 0x828b;
auto constexpr kOpenGLFramebufferComplete = 0x8cd5;
auto constexpr kOpenGLFramebufferDefault = 0x8218;
auto constexpr kOpenGLFramebufferDefaultFixedSampleLocations = 0x9314;
auto constexpr kOpenGLFramebufferDefaultHeight = 0x9311;
auto constexpr kOpenGLFramebufferDefaultLayers = 0x9312;
auto constexpr kOpenGLFramebufferDefaultSamples = 0x9313;
auto constexpr kOpenGLFramebufferDefaultWidth = 0x9310;
auto constexpr kOpenGLFramebufferIncompleteAttachment = 0x8cd6;
auto constexpr kOpenGLFramebufferIncompleteDimensions = 0x8cd9;
auto constexpr kOpenGLFramebufferIncompleteDrawBuffer = 0x8cdb;
auto constexpr kOpenGLFramebufferIncompleteLayerTargets = 0x8da8;
auto constexpr kOpenGLFramebufferIncompleteMissingAttachment = 0x8cd7;
auto constexpr kOpenGLFramebufferIncompleteMultisample = 0x8d56;
auto constexpr kOpenGLFramebufferIncompleteReadBuffer = 0x8cdc;
auto constexpr kOpenGLFramebufferRenderable = 0x8289;
auto constexpr kOpenGLFramebufferRenderableLayered = 0x828a;
auto constexpr kOpenGLFramebufferSRGB = 0x8db9;
auto constexpr kOpenGLFramebufferUndefined = 0x8219;
auto constexpr kOpenGLFramebufferUnsupported = 0x8cdd;
auto constexpr kOpenGLFront = 0x0404;
auto constexpr kOpenGLFrontAndBack = 0x0408;
auto constexpr kOpenGLFrontFace = 0x0b46;
auto constexpr kOpenGLFrontLeft = 0x0400;
auto constexpr kOpenGLFrontRight = 0x0401;
auto constexpr kOpenGLFullSupport = 0x82b7;
auto constexpr kOpenGLFuncAdd = 0x8006;
auto constexpr kOpenGLFuncReverseSubtract = 0x800b;
auto constexpr kOpenGLFuncSubtract = 0x800a;
auto constexpr kOpenGLGenerateMipmap = 0x8191;
auto constexpr kOpenGLGenerateMipmapHint = 0x8192;
auto constexpr kOpenGLGeometryInputType = 0x8917;
auto constexpr kOpenGLGeometryOutputType = 0x8918;
auto constexpr kOpenGLGeometryShader = 0x8dd9;
auto constexpr kOpenGLGeometryShaderBit = 0x00000004;
auto constexpr kOpenGLGeometryShaderInvocations = 0x887f;
auto constexpr kOpenGLGeometryShaderPrimitivesEmitted = 0x82f3;
auto constexpr kOpenGLGeometrySubroutine = 0x92eb;
auto constexpr kOpenGLGeometrySubroutineUniform = 0x92f1;
auto constexpr kOpenGLGeometryTexture = 0x829e;
auto constexpr kOpenGLGeometryVerticesOut = 0x8916;
auto constexpr kOpenGLGequal = 0x0206;
auto constexpr kOpenGLGetTextureImageFormat = 0x8291;
auto constexpr kOpenGLGetTextureImageType = 0x8292;
auto constexpr kOpenGLGreater = 0x0204;
auto constexpr kOpenGLGreen = 0x1904;
auto constexpr kOpenGLGreenBias = 0x0d19;
auto constexpr kOpenGLGreenBits = 0x0d53;
auto constexpr kOpenGLGreenInteger = 0x8d95;
auto constexpr kOpenGLGreenScale = 0x0d18;
auto constexpr kOpenGLGuiltyContextReset = 0x8253;
auto constexpr kOpenGLHalfFloat = 0x140b;
auto constexpr kOpenGLHardlight = 0x929b;
auto constexpr kOpenGLHighFloat = 0x8df2;
auto constexpr kOpenGLHighInt = 0x8df5;
auto constexpr kOpenGLHintBit = 0x00008000;
auto constexpr kOpenGLHistogram = 0x8024;
auto constexpr kOpenGLHslColor = 0x92af;
auto constexpr kOpenGLHslHue = 0x92ad;
auto constexpr kOpenGLHslLuminosity = 0x92b0;
auto constexpr kOpenGLHslSaturation = 0x92ae;
auto constexpr kOpenGLImage1D = 0x904c;
auto constexpr kOpenGLImage1DArray = 0x9052;
auto constexpr kOpenGLImage2D = 0x904d;
auto constexpr kOpenGLImage2DArray = 0x9053;
auto constexpr kOpenGLImage2DMultisample = 0x9055;
auto constexpr kOpenGLImage2DMultisampleArray = 0x9056;
auto constexpr kOpenGLImage2DRect = 0x904f;
auto constexpr kOpenGLImage3D = 0x904e;
auto constexpr kOpenGLImageBindingAccess = 0x8f3e;
auto constexpr kOpenGLImageBindingFormat = 0x906e;
auto constexpr kOpenGLImageBindingLayer = 0x8f3d;
auto constexpr kOpenGLImageBindingLayered = 0x8f3c;
auto constexpr kOpenGLImageBindingLevel = 0x8f3b;
auto constexpr kOpenGLImageBindingName = 0x8f3a;
auto constexpr kOpenGLImageBuffer = 0x9051;
auto constexpr kOpenGLImageClass1010102 = 0x82c3;
auto constexpr kOpenGLImageClass111110 = 0x82c2;
auto constexpr kOpenGLImageClass1X16 = 0x82be;
auto constexpr kOpenGLImageClass1X32 = 0x82bb;
auto constexpr kOpenGLImageClass1X8 = 0x82c1;
auto constexpr kOpenGLImageClass2X16 = 0x82bd;
auto constexpr kOpenGLImageClass2X32 = 0x82ba;
auto constexpr kOpenGLImageClass2X8 = 0x82c0;
auto constexpr kOpenGLImageClass4X16 = 0x82bc;
auto constexpr kOpenGLImageClass4X32 = 0x82b9;
auto constexpr kOpenGLImageClass4X8 = 0x82bf;
auto constexpr kOpenGLImageCompatibilityClass = 0x82a8;
auto constexpr kOpenGLImageCube = 0x9050;
auto constexpr kOpenGLImageCubeMapArray = 0x9054;
auto constexpr kOpenGLImageFormatCompatibilityByClass = 0x90c9;
auto constexpr kOpenGLImageFormatCompatibilityBySize = 0x90c8;
auto constexpr kOpenGLImageFormatCompatibilityType = 0x90c7;
auto constexpr kOpenGLImagePixelFormat = 0x82a9;
auto constexpr kOpenGLImagePixelType = 0x82aa;
auto constexpr kOpenGLImageTexelSize = 0x82a7;
auto constexpr kOpenGLImplementationColorReadFormat = 0x8b9b;
auto constexpr kOpenGLImplementationColorReadType = 0x8b9a;
auto constexpr kOpenGLIncr = 0x1e02;
auto constexpr kOpenGLIncrWrap = 0x8507;
auto constexpr kOpenGLIndex = 0x8222;
auto constexpr kOpenGLIndexArray = 0x8077;
auto constexpr kOpenGLIndexArrayBufferBinding = 0x8899;
auto constexpr kOpenGLIndexArrayPointer = 0x8091;
auto constexpr kOpenGLIndexArrayStride = 0x8086;
auto constexpr kOpenGLIndexArrayType = 0x8085;
auto constexpr kOpenGLIndexBits = 0x0d51;
auto constexpr kOpenGLIndexClearValue = 0x0c20;
auto constexpr kOpenGLIndexLogicOp = 0x0bf1;
auto constexpr kOpenGLIndexMode = 0x0c30;
auto constexpr kOpenGLIndexOffset = 0x0d13;
auto constexpr kOpenGLIndexShift = 0x0d12;
auto constexpr kOpenGLIndexWriteMask = 0x0c21;
auto constexpr kOpenGLInfoLogLength = 0x8b84;
auto constexpr kOpenGLInnocentContextReset = 0x8254;
auto constexpr kOpenGLInt = 0x1404;
auto constexpr kOpenGLInt2101010Rev = 0x8d9f;
auto constexpr kOpenGLIntImage1D = 0x9057;
auto constexpr kOpenGLIntImage1DArray = 0x905d;
auto constexpr kOpenGLIntImage2D = 0x9058;
auto constexpr kOpenGLIntImage2DArray = 0x905e;
auto constexpr kOpenGLIntImage2DMultisample = 0x9060;
auto constexpr kOpenGLIntImage2DMultisampleArray = 0x9061;
auto constexpr kOpenGLIntImage2DRect = 0x905a;
auto constexpr kOpenGLIntImage3D = 0x9059;
auto constexpr kOpenGLIntImageBuffer = 0x905c;
auto constexpr kOpenGLIntImageCube = 0x905b;
auto constexpr kOpenGLIntImageCubeMapArray = 0x905f;
auto constexpr kOpenGLIntSampler1D = 0x8dc9;
auto constexpr kOpenGLIntSampler1DArray = 0x8dce;
auto constexpr kOpenGLIntSampler2D = 0x8dca;
auto constexpr kOpenGLIntSampler2DArray = 0x8dcf;
auto constexpr kOpenGLIntSampler2DMultisample = 0x9109;
auto constexpr kOpenGLIntSampler2DMultisampleArray = 0x910c;
auto constexpr kOpenGLIntSampler2DRect = 0x8dcd;
auto constexpr kOpenGLIntSampler3D = 0x8dcb;
auto constexpr kOpenGLIntSamplerBuffer = 0x8dd0;
auto constexpr kOpenGLIntSamplerCube = 0x8dcc;
auto constexpr kOpenGLIntSamplerCubeMapArray = 0x900e;
auto constexpr kOpenGLIntVec2 = 0x8b53;
auto constexpr kOpenGLIntVec3 = 0x8b54;
auto constexpr kOpenGLIntVec4 = 0x8b55;
auto constexpr kOpenGLIntensity = 0x8049;
auto constexpr kOpenGLIntensity12 = 0x804c;
auto constexpr kOpenGLIntensity16 = 0x804d;
auto constexpr kOpenGLIntensity4 = 0x804a;
auto constexpr kOpenGLIntensity8 = 0x804b;
auto constexpr kOpenGLInterleavedAttribs = 0x8c8c;
auto constexpr kOpenGLInternalformatAlphaSize = 0x8274;
auto constexpr kOpenGLInternalformatAlphaType = 0x827b;
auto constexpr kOpenGLInternalformatBlueSize = 0x8273;
auto constexpr kOpenGLInternalformatBlueType = 0x827a;
auto constexpr kOpenGLInternalformatDepthSize = 0x8275;
auto constexpr kOpenGLInternalformatDepthType = 0x827c;
auto constexpr kOpenGLInternalformatGreenSize = 0x8272;
auto constexpr kOpenGLInternalformatGreenType = 0x8279;
auto constexpr kOpenGLInternalformatPreferred = 0x8270;
auto constexpr kOpenGLInternalformatRedSize = 0x8271;
auto constexpr kOpenGLInternalformatRedType = 0x8278;
auto constexpr kOpenGLInternalformatSharedSize = 0x8277;
auto constexpr kOpenGLInternalformatStencilSize = 0x8276;
auto constexpr kOpenGLInternalformatStencilType = 0x827d;
auto constexpr kOpenGLInternalformatSupported = 0x826f;
auto constexpr kOpenGLInterpolate = 0x8575;
auto constexpr kOpenGLInvalidEnum = 0x0500;
auto constexpr kOpenGLInvalidFramebufferOperation = 0x0506;
auto constexpr kOpenGLInvalidIndex = 0xffffffff;
auto constexpr kOpenGLInvalidOperation = 0x0502;
auto constexpr kOpenGLInvalidValue = 0x0501;
auto constexpr kOpenGLInvert = 0x150a;
auto constexpr kOpenGLIsPerPatch = 0x92e7;
auto constexpr kOpenGLIsRowMajor = 0x9300;
auto constexpr kOpenGLIsolines = 0x8e7a;
auto constexpr kOpenGLKeep = 0x1e00;
auto constexpr kOpenGLLastVertexConvention = 0x8e4e;
auto constexpr kOpenGLLayerProvokingVertex = 0x825e;
auto constexpr kOpenGLLeft = 0x0406;
auto constexpr kOpenGLLequal = 0x0203;
auto constexpr kOpenGLLess = 0x0201;
auto constexpr kOpenGLLight0 = 0x4000;
auto constexpr kOpenGLLight1 = 0x4001;
auto constexpr kOpenGLLight2 = 0x4002;
auto constexpr kOpenGLLight3 = 0x4003;
auto constexpr kOpenGLLight4 = 0x4004;
auto constexpr kOpenGLLight5 = 0x4005;
auto constexpr kOpenGLLight6 = 0x4006;
auto constexpr kOpenGLLight7 = 0x4007;
auto constexpr kOpenGLLightModelAmbient = 0x0b53;
auto constexpr kOpenGLLightModelColorControl = 0x81f8;
auto constexpr kOpenGLLightModelLocalViewer = 0x0b51;
auto constexpr kOpenGLLightModelTwoSide = 0x0b52;
auto constexpr kOpenGLLighten = 0x9298;
auto constexpr kOpenGLLighting = 0x0b50;
auto constexpr kOpenGLLightingBit = 0x00000040;
auto constexpr kOpenGLLine = 0x1b01;
auto constexpr kOpenGLLineBit = 0x00000004;
auto constexpr kOpenGLLineLoop = 0x0002;
auto constexpr kOpenGLLineResetToken = 0x0707;
auto constexpr kOpenGLLineSmooth = 0x0b20;
auto constexpr kOpenGLLineSmoothHint = 0x0c52;
auto constexpr kOpenGLLineStipple = 0x0b24;
auto constexpr kOpenGLLineStipplePattern = 0x0b25;
auto constexpr kOpenGLLineStippleRepeat = 0x0b26;
auto constexpr kOpenGLLineStrip = 0x0003;
auto constexpr kOpenGLLineStripAdjacency = 0x000b;
auto constexpr kOpenGLLineToken = 0x0702;
auto constexpr kOpenGLLineWidth = 0x0b21;
auto constexpr kOpenGLLineWidthGranularity = 0x0b23;
auto constexpr kOpenGLLineWidthRange = 0x0b22;
auto constexpr kOpenGLLinear = 0x2601;
auto constexpr kOpenGLLinearAttenuation = 0x1208;
auto constexpr kOpenGLLinearMipmapLinear = 0x2703;
auto constexpr kOpenGLLinearMipmapNearest = 0x2701;
auto constexpr kOpenGLLines = 0x0001;
auto constexpr kOpenGLLinesAdjacency = 0x000a;
auto constexpr kOpenGLLinkStatus = 0x8b82;
auto constexpr kOpenGLListBase = 0x0b32;
auto constexpr kOpenGLListBit = 0x00020000;
auto constexpr kOpenGLListIndex = 0x0b33;
auto constexpr kOpenGLListMode = 0x0b30;
auto constexpr kOpenGLLoad = 0x0101;
auto constexpr kOpenGLLocation = 0x930e;
auto constexpr kOpenGLLocationComponent = 0x934a;
auto constexpr kOpenGLLocationIndex = 0x930f;
auto constexpr kOpenGLLogicOp = 0x0bf1;
auto constexpr kOpenGLLogicOpMode = 0x0bf0;
auto constexpr kOpenGLLoseContextOnReset = 0x8252;
auto constexpr kOpenGLLowFloat = 0x8df0;
auto constexpr kOpenGLLowInt = 0x8df3;
auto constexpr kOpenGLLowerLeft = 0x8ca1;
auto constexpr kOpenGLLuminance = 0x1909;
auto constexpr kOpenGLLuminance12 = 0x8041;
auto constexpr kOpenGLLuminance12Alpha12 = 0x8047;
auto constexpr kOpenGLLuminance12Alpha4 = 0x8046;
auto constexpr kOpenGLLuminance16 = 0x8042;
auto constexpr kOpenGLLuminance16Alpha16 = 0x8048;
auto constexpr kOpenGLLuminance4 = 0x803f;
auto constexpr kOpenGLLuminance4Alpha4 = 0x8043;
auto constexpr kOpenGLLuminance6Alpha2 = 0x8044;
auto constexpr kOpenGLLuminance8 = 0x8040;
auto constexpr kOpenGLLuminance8Alpha8 = 0x8045;
auto constexpr kOpenGLLuminanceAlpha = 0x190a;
auto constexpr kOpenGLMajorVersion = 0x821b;
auto constexpr kOpenGLManualGenerateMipmap = 0x8294;
auto constexpr kOpenGLMap1Color4 = 0x0d90;
auto constexpr kOpenGLMap1GridDomain = 0x0dd0;
auto constexpr kOpenGLMap1GridSegments = 0x0dd1;
auto constexpr kOpenGLMap1Index = 0x0d91;
auto constexpr kOpenGLMap1Normal = 0x0d92;
auto constexpr kOpenGLMap1TextureCoord1 = 0x0d93;
auto constexpr kOpenGLMap1TextureCoord2 = 0x0d94;
auto constexpr kOpenGLMap1TextureCoord3 = 0x0d95;
auto constexpr kOpenGLMap1TextureCoord4 = 0x0d96;
auto constexpr kOpenGLMap1Vertex3 = 0x0d97;
auto constexpr kOpenGLMap1Vertex4 = 0x0d98;
auto constexpr kOpenGLMap2Color4 = 0x0db0;
auto constexpr kOpenGLMap2GridDomain = 0x0dd2;
auto constexpr kOpenGLMap2GridSegments = 0x0dd3;
auto constexpr kOpenGLMap2Index = 0x0db1;
auto constexpr kOpenGLMap2Normal = 0x0db2;
auto constexpr kOpenGLMap2TextureCoord1 = 0x0db3;
auto constexpr kOpenGLMap2TextureCoord2 = 0x0db4;
auto constexpr kOpenGLMap2TextureCoord3 = 0x0db5;
auto constexpr kOpenGLMap2TextureCoord4 = 0x0db6;
auto constexpr kOpenGLMap2Vertex3 = 0x0db7;
auto constexpr kOpenGLMap2Vertex4 = 0x0db8;
auto constexpr kOpenGLMapCoherentBit = 0x0080;
auto constexpr kOpenGLMapColor = 0x0d10;
auto constexpr kOpenGLMapFlushExplicitBit = 0x0010;
auto constexpr kOpenGLMapInvalidateBufferBit = 0x0008;
auto constexpr kOpenGLMapInvalidateRangeBit = 0x0004;
auto constexpr kOpenGLMapPersistentBit = 0x0040;
auto constexpr kOpenGLMapReadBit = 0x0001;
auto constexpr kOpenGLMapStencil = 0x0d11;
auto constexpr kOpenGLMapUnsynchronizedBit = 0x0020;
auto constexpr kOpenGLMapWriteBit = 0x0002;
auto constexpr kOpenGLMatrixMode = 0x0ba0;
auto constexpr kOpenGLMatrixStride = 0x92ff;
auto constexpr kOpenGLMax = 0x8008;
auto constexpr kOpenGLMax3DTextureSize = 0x8073;
auto constexpr kOpenGLMaxArrayTextureLayers = 0x88ff;
auto constexpr kOpenGLMaxAtomicCounterBufferBindings = 0x92dc;
auto constexpr kOpenGLMaxAtomicCounterBufferSize = 0x92d8;
auto constexpr kOpenGLMaxAttribStackDepth = 0x0d35;
auto constexpr kOpenGLMaxClientAttribStackDepth = 0x0d3b;
auto constexpr kOpenGLMaxClipDistances = 0x0d32;
auto constexpr kOpenGLMaxClipPlanes = 0x0d32;
auto constexpr kOpenGLMaxColorAttachments = 0x8cdf;
auto constexpr kOpenGLMaxColorTextureSamples = 0x910e;
auto constexpr kOpenGLMaxCombinedAtomicCounterBuffers = 0x92d1;
auto constexpr kOpenGLMaxCombinedAtomicCounters = 0x92d7;
auto constexpr kOpenGLMaxCombinedClipAndCullDistances = 0x82fa;
auto constexpr kOpenGLMaxCombinedComputeUniformComponents = 0x8266;
auto constexpr kOpenGLMaxCombinedDimensions = 0x8282;
auto constexpr kOpenGLMaxCombinedFragmentUniformComponents = 0x8a33;
auto constexpr kOpenGLMaxCombinedGeometryUniformComponents = 0x8a32;
auto constexpr kOpenGLMaxCombinedImageUniforms = 0x90cf;
auto constexpr kOpenGLMaxCombinedImageUnitsAndFragmentOutputs = 0x8f39;
auto constexpr kOpenGLMaxCombinedShaderOutputResources = 0x8f39;
auto constexpr kOpenGLMaxCombinedShaderStorageBlocks = 0x90dc;
auto constexpr kOpenGLMaxCombinedTessControlUniformComponents = 0x8e1e;
auto constexpr kOpenGLMaxCombinedTessEvaluationUniformComponents = 0x8e1f;
auto constexpr kOpenGLMaxCombinedTextureImageUnits = 0x8b4d;
auto constexpr kOpenGLMaxCombinedUniformBlocks = 0x8a2e;
auto constexpr kOpenGLMaxCombinedVertexUniformComponents = 0x8a31;
auto constexpr kOpenGLMaxComputeAtomicCounterBuffers = 0x8264;
auto constexpr kOpenGLMaxComputeAtomicCounters = 0x8265;
auto constexpr kOpenGLMaxComputeImageUniforms = 0x91bd;
auto constexpr kOpenGLMaxComputeShaderStorageBlocks = 0x90db;
auto constexpr kOpenGLMaxComputeSharedMemorySize = 0x8262;
auto constexpr kOpenGLMaxComputeTextureImageUnits = 0x91bc;
auto constexpr kOpenGLMaxComputeUniformBlocks = 0x91bb;
auto constexpr kOpenGLMaxComputeUniformComponents = 0x8263;
auto constexpr kOpenGLMaxComputeWorkGroupCount = 0x91be;
auto constexpr kOpenGLMaxComputeWorkGroupInvocations = 0x90eb;
auto constexpr kOpenGLMaxComputeWorkGroupSize = 0x91bf;
auto constexpr kOpenGLMaxCubeMapTextureSize = 0x851c;
auto constexpr kOpenGLMaxCullDistances = 0x82f9;
auto constexpr kOpenGLMaxDebugGroupStackDepth = 0x826c;
auto constexpr kOpenGLMaxDebugLoggedMessages = 0x9144;
auto constexpr kOpenGLMaxDebugMessageLength = 0x9143;
auto constexpr kOpenGLMaxDepth = 0x8280;
auto constexpr kOpenGLMaxDepthTextureSamples = 0x910f;
auto constexpr kOpenGLMaxDrawBuffers = 0x8824;
auto constexpr kOpenGLMaxDualSourceDrawBuffers = 0x88fc;
auto constexpr kOpenGLMaxElementIndex = 0x8d6b;
auto constexpr kOpenGLMaxElementsIndices = 0x80e9;
auto constexpr kOpenGLMaxElementsVertices = 0x80e8;
auto constexpr kOpenGLMaxEvalOrder = 0x0d30;
auto constexpr kOpenGLMaxFragmentAtomicCounterBuffers = 0x92d0;
auto constexpr kOpenGLMaxFragmentAtomicCounters = 0x92d6;
auto constexpr kOpenGLMaxFragmentImageUniforms = 0x90ce;
auto constexpr kOpenGLMaxFragmentInputComponents = 0x9125;
auto constexpr kOpenGLMaxFragmentInterpolationOffset = 0x8e5c;
auto constexpr kOpenGLMaxFragmentShaderStorageBlocks = 0x90da;
auto constexpr kOpenGLMaxFragmentUniformBlocks = 0x8a2d;
auto constexpr kOpenGLMaxFragmentUniformComponents = 0x8b49;
auto constexpr kOpenGLMaxFragmentUniformVectors = 0x8dfd;
auto constexpr kOpenGLMaxFramebufferHeight = 0x9316;
auto constexpr kOpenGLMaxFramebufferLayers = 0x9317;
auto constexpr kOpenGLMaxFramebufferSamples = 0x9318;
auto constexpr kOpenGLMaxFramebufferWidth = 0x9315;
auto constexpr kOpenGLMaxGeometryAtomicCounterBuffers = 0x92cf;
auto constexpr kOpenGLMaxGeometryAtomicCounters = 0x92d5;
auto constexpr kOpenGLMaxGeometryImageUniforms = 0x90cd;
auto constexpr kOpenGLMaxGeometryInputComponents = 0x9123;
auto constexpr kOpenGLMaxGeometryOutputComponents = 0x9124;
auto constexpr kOpenGLMaxGeometryOutputVertices = 0x8de0;
auto constexpr kOpenGLMaxGeometryShaderInvocations = 0x8e5a;
auto constexpr kOpenGLMaxGeometryShaderStorageBlocks = 0x90d7;
auto constexpr kOpenGLMaxGeometryTextureImageUnits = 0x8c29;
auto constexpr kOpenGLMaxGeometryTotalOutputComponents = 0x8de1;
auto constexpr kOpenGLMaxGeometryUniformBlocks = 0x8a2c;
auto constexpr kOpenGLMaxGeometryUniformComponents = 0x8ddf;
auto constexpr kOpenGLMaxHeight = 0x827f;
auto constexpr kOpenGLMaxImageSamples = 0x906d;
auto constexpr kOpenGLMaxImageUnits = 0x8f38;
auto constexpr kOpenGLMaxIntegerSamples = 0x9110;
auto constexpr kOpenGLMaxLabelLength = 0x82e8;
auto constexpr kOpenGLMaxLayers = 0x8281;
auto constexpr kOpenGLMaxLights = 0x0d31;
auto constexpr kOpenGLMaxListNesting = 0x0b31;
auto constexpr kOpenGLMaxModelviewStackDepth = 0x0d36;
auto constexpr kOpenGLMaxNameLength = 0x92f6;
auto constexpr kOpenGLMaxNameStackDepth = 0x0d37;
auto constexpr kOpenGLMaxNumActiveVariables = 0x92f7;
auto constexpr kOpenGLMaxNumCompatibleSubroutines = 0x92f8;
auto constexpr kOpenGLMaxPatchVertices = 0x8e7d;
auto constexpr kOpenGLMaxPixelMapTable = 0x0d34;
auto constexpr kOpenGLMaxProgramTexelOffset = 0x8905;
auto constexpr kOpenGLMaxProgramTextureGatherOffset = 0x8e5f;
auto constexpr kOpenGLMaxProjectionStackDepth = 0x0d38;
auto constexpr kOpenGLMaxRectangleTextureSize = 0x84f8;
auto constexpr kOpenGLMaxRenderbufferSize = 0x84e8;
auto constexpr kOpenGLMaxSampleMaskWords = 0x8e59;
auto constexpr kOpenGLMaxSamples = 0x8d57;
auto constexpr kOpenGLMaxServerWaitTimeout = 0x9111;
auto constexpr kOpenGLMaxShaderStorageBlockSize = 0x90de;
auto constexpr kOpenGLMaxShaderStorageBufferBindings = 0x90dd;
auto constexpr kOpenGLMaxSubroutineUniformLocations = 0x8de8;
auto constexpr kOpenGLMaxSubroutines = 0x8de7;
auto constexpr kOpenGLMaxTessControlAtomicCounterBuffers = 0x92cd;
auto constexpr kOpenGLMaxTessControlAtomicCounters = 0x92d3;
auto constexpr kOpenGLMaxTessControlImageUniforms = 0x90cb;
auto constexpr kOpenGLMaxTessControlInputComponents = 0x886c;
auto constexpr kOpenGLMaxTessControlOutputComponents = 0x8e83;
auto constexpr kOpenGLMaxTessControlShaderStorageBlocks = 0x90d8;
auto constexpr kOpenGLMaxTessControlTextureImageUnits = 0x8e81;
auto constexpr kOpenGLMaxTessControlTotalOutputComponents = 0x8e85;
auto constexpr kOpenGLMaxTessControlUniformBlocks = 0x8e89;
auto constexpr kOpenGLMaxTessControlUniformComponents = 0x8e7f;
auto constexpr kOpenGLMaxTessEvaluationAtomicCounterBuffers = 0x92ce;
auto constexpr kOpenGLMaxTessEvaluationAtomicCounters = 0x92d4;
auto constexpr kOpenGLMaxTessEvaluationImageUniforms = 0x90cc;
auto constexpr kOpenGLMaxTessEvaluationInputComponents = 0x886d;
auto constexpr kOpenGLMaxTessEvaluationOutputComponents = 0x8e86;
auto constexpr kOpenGLMaxTessEvaluationShaderStorageBlocks = 0x90d9;
auto constexpr kOpenGLMaxTessEvaluationTextureImageUnits = 0x8e82;
auto constexpr kOpenGLMaxTessEvaluationUniformBlocks = 0x8e8a;
auto constexpr kOpenGLMaxTessEvaluationUniformComponents = 0x8e80;
auto constexpr kOpenGLMaxTessGenLevel = 0x8e7e;
auto constexpr kOpenGLMaxTessPatchComponents = 0x8e84;
auto constexpr kOpenGLMaxTextureBufferSize = 0x8c2b;
auto constexpr kOpenGLMaxTextureCoords = 0x8871;
auto constexpr kOpenGLMaxTextureImageUnits = 0x8872;
auto constexpr kOpenGLMaxTextureLodBias = 0x84fd;
auto constexpr kOpenGLMaxTextureMaxAnisotropy = 0x84ff;
auto constexpr kOpenGLMaxTextureSize = 0x0d33;
auto constexpr kOpenGLMaxTextureStackDepth = 0x0d39;
auto constexpr kOpenGLMaxTextureUnits = 0x84e2;
auto constexpr kOpenGLMaxTransformFeedbackBuffers = 0x8e70;
auto constexpr kOpenGLMaxTransformFeedbackInterleavedComponents = 0x8c8a;
auto constexpr kOpenGLMaxTransformFeedbackSeparateAttribs = 0x8c8b;
auto constexpr kOpenGLMaxTransformFeedbackSeparateComponents = 0x8c80;
auto constexpr kOpenGLMaxUniformBlockSize = 0x8a30;
auto constexpr kOpenGLMaxUniformBufferBindings = 0x8a2f;
auto constexpr kOpenGLMaxUniformLocations = 0x826e;
auto constexpr kOpenGLMaxVaryingComponents = 0x8b4b;
auto constexpr kOpenGLMaxVaryingFloats = 0x8b4b;
auto constexpr kOpenGLMaxVaryingVectors = 0x8dfc;
auto constexpr kOpenGLMaxVertexAtomicCounterBuffers = 0x92cc;
auto constexpr kOpenGLMaxVertexAtomicCounters = 0x92d2;
auto constexpr kOpenGLMaxVertexAttribBindings = 0x82da;
auto constexpr kOpenGLMaxVertexAttribRelativeOffset = 0x82d9;
auto constexpr kOpenGLMaxVertexAttribStride = 0x82e5;
auto constexpr kOpenGLMaxVertexAttribs = 0x8869;
auto constexpr kOpenGLMaxVertexImageUniforms = 0x90ca;
auto constexpr kOpenGLMaxVertexOutputComponents = 0x9122;
auto constexpr kOpenGLMaxVertexShaderStorageBlocks = 0x90d6;
auto constexpr kOpenGLMaxVertexStreams = 0x8e71;
auto constexpr kOpenGLMaxVertexTextureImageUnits = 0x8b4c;
auto constexpr kOpenGLMaxVertexUniformBlocks = 0x8a2b;
auto constexpr kOpenGLMaxVertexUniformComponents = 0x8b4a;
auto constexpr kOpenGLMaxVertexUniformVectors = 0x8dfb;
auto constexpr kOpenGLMaxViewportDims = 0x0d3a;
auto constexpr kOpenGLMaxViewports = 0x825b;
auto constexpr kOpenGLMaxWidth = 0x827e;
auto constexpr kOpenGLMediumFloat = 0x8df1;
auto constexpr kOpenGLMediumInt = 0x8df4;
auto constexpr kOpenGLMin = 0x8007;
auto constexpr kOpenGLMinFragmentInterpolationOffset = 0x8e5b;
auto constexpr kOpenGLMinMapBufferAlignment = 0x90bc;
auto constexpr kOpenGLMinProgramTexelOffset = 0x8904;
auto constexpr kOpenGLMinProgramTextureGatherOffset = 0x8e5e;
auto constexpr kOpenGLMinSampleShadingValue = 0x8c37;
auto constexpr kOpenGLMinmax = 0x802e;
auto constexpr kOpenGLMinorVersion = 0x821c;
auto constexpr kOpenGLMipmap = 0x8293;
auto constexpr kOpenGLMirrorClampToEdge = 0x8743;
auto constexpr kOpenGLMirroredRepeat = 0x8370;
auto constexpr kOpenGLModelview = 0x1700;
auto constexpr kOpenGLModelviewMatrix = 0x0ba6;
auto constexpr kOpenGLModelviewStackDepth = 0x0ba3;
auto constexpr kOpenGLModulate = 0x2100;
auto constexpr kOpenGLMult = 0x0103;
auto constexpr kOpenGLMultiply = 0x9294;
auto constexpr kOpenGLMultisample = 0x809d;
auto constexpr kOpenGLMultisampleBit = 0x20000000;
auto constexpr kOpenGLMultisampleLineWidthGranularity = 0x9382;
auto constexpr kOpenGLMultisampleLineWidthRange = 0x9381;
auto constexpr kOpenGLN3fV3f = 0x2a25;
auto constexpr kOpenGLNameLength = 0x92f9;
auto constexpr kOpenGLNameStackDepth = 0x0d70;
auto constexpr kOpenGLNand = 0x150e;
auto constexpr kOpenGLNearest = 0x2600;
auto constexpr kOpenGLNearestMipmapLinear = 0x2702;
auto constexpr kOpenGLNearestMipmapNearest = 0x2700;
auto constexpr kOpenGLNegativeOneToOne = 0x935e;
auto constexpr kOpenGLNever = 0x0200;
auto constexpr kOpenGLNicest = 0x1102;
auto constexpr kOpenGLNoResetNotification = 0x8261;
auto constexpr kOpenGLNoop = 0x1505;
auto constexpr kOpenGLNor = 0x1508;
auto constexpr kOpenGLNormalArray = 0x8075;
auto constexpr kOpenGLNormalArrayBufferBinding = 0x8897;
auto constexpr kOpenGLNormalArrayPointer = 0x808f;
auto constexpr kOpenGLNormalArrayStride = 0x807f;
auto constexpr kOpenGLNormalArrayType = 0x807e;
auto constexpr kOpenGLNormalMap = 0x8511;
auto constexpr kOpenGLNormalize = 0x0ba1;
auto constexpr kOpenGLNotequal = 0x0205;
auto constexpr kOpenGLNumActiveVariables = 0x9304;
auto constexpr kOpenGLNumCompatibleSubroutines = 0x8e4a;
auto constexpr kOpenGLNumCompressedTextureFormats = 0x86a2;
auto constexpr kOpenGLNumExtensions = 0x821d;
auto constexpr kOpenGLNumProgramBinaryFormats = 0x87fe;
auto constexpr kOpenGLNumSampleCounts = 0x9380;
auto constexpr kOpenGLNumShaderBinaryFormats = 0x8df9;
auto constexpr kOpenGLNumShadingLanguageVersions = 0x82e9;
auto constexpr kOpenGLNumSpirVExtensions = 0x9554;
auto constexpr kOpenGLObjectLinear = 0x2401;
auto constexpr kOpenGLObjectPlane = 0x2501;
auto constexpr kOpenGLObjectType = 0x9112;
auto constexpr kOpenGLOffset = 0x92fc;
auto constexpr kOpenGLOneMinusConstantAlpha = 0x8004;
auto constexpr kOpenGLOneMinusConstantColor = 0x8002;
auto constexpr kOpenGLOneMinusDstAlpha = 0x0305;
auto constexpr kOpenGLOneMinusDstColor = 0x0307;
auto constexpr kOpenGLOneMinusSrc1Alpha = 0x88fb;
auto constexpr kOpenGLOneMinusSrc1Color = 0x88fa;
auto constexpr kOpenGLOneMinusSrcAlpha = 0x0303;
auto constexpr kOpenGLOneMinusSrcColor = 0x0301;
auto constexpr kOpenGLOperand0Alpha = 0x8598;
auto constexpr kOpenGLOperand0Rgb = 0x8590;
auto constexpr kOpenGLOperand1Alpha = 0x8599;
auto constexpr kOpenGLOperand1Rgb = 0x8591;
auto constexpr kOpenGLOperand2Alpha = 0x859a;
auto constexpr kOpenGLOperand2Rgb = 0x8592;
auto constexpr kOpenGLOr = 0x1507;
auto constexpr kOpenGLOrInverted = 0x150d;
auto constexpr kOpenGLOrReverse = 0x150b;
auto constexpr kOpenGLOrder = 0x0a01;
auto constexpr kOpenGLOutOfMemory = 0x0505;
auto constexpr kOpenGLOverlay = 0x9296;
auto constexpr kOpenGLPackAlignment = 0x0d05;
auto constexpr kOpenGLPackCompressedBlockDepth = 0x912d;
auto constexpr kOpenGLPackCompressedBlockHeight = 0x912c;
auto constexpr kOpenGLPackCompressedBlockSize = 0x912e;
auto constexpr kOpenGLPackCompressedBlockWidth = 0x912b;
auto constexpr kOpenGLPackImageHeight = 0x806c;
auto constexpr kOpenGLPackLSBFirst = 0x0d01;
auto constexpr kOpenGLPackRowLength = 0x0d02;
auto constexpr kOpenGLPackSkipImages = 0x806b;
auto constexpr kOpenGLPackSkipPixels = 0x0d04;
auto constexpr kOpenGLPackSkipRows = 0x0d03;
auto constexpr kOpenGLPackSwapBytes = 0x0d00;
auto constexpr kOpenGLParameterBuffer = 0x80ee;
auto constexpr kOpenGLParameterBufferBinding = 0x80ef;
auto constexpr kOpenGLPassThroughToken = 0x0700;
auto constexpr kOpenGLPatchDefaultInnerLevel = 0x8e73;
auto constexpr kOpenGLPatchDefaultOuterLevel = 0x8e74;
auto constexpr kOpenGLPatchVertices = 0x8e72;
auto constexpr kOpenGLPatches = 0x000e;
auto constexpr kOpenGLPerspectiveCorrectionHint = 0x0c50;
auto constexpr kOpenGLPixelBufferBarrierBit = 0x00000080;
auto constexpr kOpenGLPixelMapAToA = 0x0c79;
auto constexpr kOpenGLPixelMapAToASize = 0x0cb9;
auto constexpr kOpenGLPixelMapBToB = 0x0c78;
auto constexpr kOpenGLPixelMapBToBSize = 0x0cb8;
auto constexpr kOpenGLPixelMapGToG = 0x0c77;
auto constexpr kOpenGLPixelMapGToGSize = 0x0cb7;
auto constexpr kOpenGLPixelMapIToA = 0x0c75;
auto constexpr kOpenGLPixelMapIToASize = 0x0cb5;
auto constexpr kOpenGLPixelMapIToB = 0x0c74;
auto constexpr kOpenGLPixelMapIToBSize = 0x0cb4;
auto constexpr kOpenGLPixelMapIToG = 0x0c73;
auto constexpr kOpenGLPixelMapIToGSize = 0x0cb3;
auto constexpr kOpenGLPixelMapIToI = 0x0c70;
auto constexpr kOpenGLPixelMapIToISize = 0x0cb0;
auto constexpr kOpenGLPixelMapIToR = 0x0c72;
auto constexpr kOpenGLPixelMapIToRSize = 0x0cb2;
auto constexpr kOpenGLPixelMapRToR = 0x0c76;
auto constexpr kOpenGLPixelMapRToRSize = 0x0cb6;
auto constexpr kOpenGLPixelMapSToS = 0x0c71;
auto constexpr kOpenGLPixelMapSToSSize = 0x0cb1;
auto constexpr kOpenGLPixelModeBit = 0x00000020;
auto constexpr kOpenGLPixelPackBuffer = 0x88eb;
auto constexpr kOpenGLPixelPackBufferBinding = 0x88ed;
auto constexpr kOpenGLPixelUnpackBuffer = 0x88ec;
auto constexpr kOpenGLPixelUnpackBufferBinding = 0x88ef;
auto constexpr kOpenGLPoint = 0x1b00;
auto constexpr kOpenGLPointBit = 0x00000002;
auto constexpr kOpenGLPointDistanceAttenuation = 0x8129;
auto constexpr kOpenGLPointFadeThresholdSize = 0x8128;
auto constexpr kOpenGLPointSize = 0x0b11;
auto constexpr kOpenGLPointSizeGranularity = 0x0b13;
auto constexpr kOpenGLPointSizeMax = 0x8127;
auto constexpr kOpenGLPointSizeMin = 0x8126;
auto constexpr kOpenGLPointSizeRange = 0x0b12;
auto constexpr kOpenGLPointSmooth = 0x0b10;
auto constexpr kOpenGLPointSmoothHint = 0x0c51;
auto constexpr kOpenGLPointSprite = 0x8861;
auto constexpr kOpenGLPointSpriteCoordOrigin = 0x8ca0;
auto constexpr kOpenGLPointToken = 0x0701;
auto constexpr kOpenGLPoints = 0x0000;
auto constexpr kOpenGLPolygon = 0x0009;
auto constexpr kOpenGLPolygonBit = 0x00000008;
auto constexpr kOpenGLPolygonMode = 0x0b40;
auto constexpr kOpenGLPolygonOffsetClamp = 0x8e1b;
auto constexpr kOpenGLPolygonOffsetFactor = 0x8038;
auto constexpr kOpenGLPolygonOffsetFill = 0x8037;
auto constexpr kOpenGLPolygonOffsetLine = 0x2a02;
auto constexpr kOpenGLPolygonOffsetPoint = 0x2a01;
auto constexpr kOpenGLPolygonOffsetUnits = 0x2a00;
auto constexpr kOpenGLPolygonSmooth = 0x0b41;
auto constexpr kOpenGLPolygonSmoothHint = 0x0c53;
auto constexpr kOpenGLPolygonStipple = 0x0b42;
auto constexpr kOpenGLPolygonStippleBit = 0x00000010;
auto constexpr kOpenGLPolygonToken = 0x0703;
auto constexpr kOpenGLPosition = 0x1203;
auto constexpr kOpenGLPostColorMatrixColorTable = 0x80d2;
auto constexpr kOpenGLPostConvolutionColorTable = 0x80d1;
auto constexpr kOpenGLPrevious = 0x8578;
auto constexpr kOpenGLPrimaryColor = 0x8577;
auto constexpr kOpenGLPrimitiveBoundingBox = 0x92be;
auto constexpr kOpenGLPrimitiveRestart = 0x8f9d;
auto constexpr kOpenGLPrimitiveRestartFixedIndex = 0x8d69;
auto constexpr kOpenGLPrimitiveRestartForPatchesSupported = 0x8221;
auto constexpr kOpenGLPrimitiveRestartIndex = 0x8f9e;
auto constexpr kOpenGLPrimitivesGenerated = 0x8c87;
auto constexpr kOpenGLPrimitivesSubmitted = 0x82ef;
auto constexpr kOpenGLProgram = 0x82e2;
auto constexpr kOpenGLProgramBinaryFormats = 0x87ff;
auto constexpr kOpenGLProgramBinaryLength = 0x8741;
auto constexpr kOpenGLProgramBinaryRetrievableHint = 0x8257;
auto constexpr kOpenGLProgramInput = 0x92e3;
auto constexpr kOpenGLProgramOutput = 0x92e4;
auto constexpr kOpenGLProgramPipeline = 0x82e4;
auto constexpr kOpenGLProgramPipelineBinding = 0x825a;
auto constexpr kOpenGLProgramPointSize = 0x8642;
auto constexpr kOpenGLProgramSeparable = 0x8258;
auto constexpr kOpenGLProjection = 0x1701;
auto constexpr kOpenGLProjectionMatrix = 0x0ba7;
auto constexpr kOpenGLProjectionStackDepth = 0x0ba4;
auto constexpr kOpenGLProvokingVertex = 0x8e4f;
auto constexpr kOpenGLProxyColorTable = 0x80d3;
auto constexpr kOpenGLProxyHistogram = 0x8025;
auto constexpr kOpenGLProxyPostColorMatrixColorTable = 0x80d5;
auto constexpr kOpenGLProxyPostConvolutionColorTable = 0x80d4;
auto constexpr kOpenGLProxyTexture1D = 0x8063;
auto constexpr kOpenGLProxyTexture1DArray = 0x8c19;
auto constexpr kOpenGLProxyTexture2D = 0x8064;
auto constexpr kOpenGLProxyTexture2DArray = 0x8c1b;
auto constexpr kOpenGLProxyTexture2DMultisample = 0x9101;
auto constexpr kOpenGLProxyTexture2DMultisampleArray = 0x9103;
auto constexpr kOpenGLProxyTexture3D = 0x8070;
auto constexpr kOpenGLProxyTextureCubeMap = 0x851b;
auto constexpr kOpenGLProxyTextureCubeMapArray = 0x900b;
auto constexpr kOpenGLProxyTextureRectangle = 0x84f7;
auto constexpr kOpenGLQ = 0x2003;
auto constexpr kOpenGLQuadStrip = 0x0008;
auto constexpr kOpenGLQuadraticAttenuation = 0x1209;
auto constexpr kOpenGLQuads = 0x0007;
auto constexpr kOpenGLQuadsFollowProvokingVertexConvention = 0x8e4c;
auto constexpr kOpenGLQuery = 0x82e3;
auto constexpr kOpenGLQueryBuffer = 0x9192;
auto constexpr kOpenGLQueryBufferBarrierBit = 0x00008000;
auto constexpr kOpenGLQueryBufferBinding = 0x9193;
auto constexpr kOpenGLQueryByRegionNoWait = 0x8e16;
auto constexpr kOpenGLQueryByRegionNoWaitInverted = 0x8e1a;
auto constexpr kOpenGLQueryByRegionWait = 0x8e15;
auto constexpr kOpenGLQueryByRegionWaitInverted = 0x8e19;
auto constexpr kOpenGLQueryCounterBits = 0x8864;
auto constexpr kOpenGLQueryNoWait = 0x8e14;
auto constexpr kOpenGLQueryNoWaitInverted = 0x8e18;
auto constexpr kOpenGLQueryResult = 0x8866;
auto constexpr kOpenGLQueryResultAvailable = 0x8867;
auto constexpr kOpenGLQueryResultNoWait = 0x9194;
auto constexpr kOpenGLQueryTarget = 0x82ea;
auto constexpr kOpenGLQueryWait = 0x8e13;
auto constexpr kOpenGLQueryWaitInverted = 0x8e17;
auto constexpr kOpenGLR = 0x2002;
auto constexpr kOpenGLR11fG11fB10f = 0x8c3a;
auto constexpr kOpenGLR16 = 0x822a;
auto constexpr kOpenGLR16Snorm = 0x8f98;
auto constexpr kOpenGLR16f = 0x822d;
auto constexpr kOpenGLR16i = 0x8233;
auto constexpr kOpenGLR16ui = 0x8234;
auto constexpr kOpenGLR32f = 0x822e;
auto constexpr kOpenGLR32i = 0x8235;
auto constexpr kOpenGLR32ui = 0x8236;
auto constexpr kOpenGLR3G3B2 = 0x2a10;
auto constexpr kOpenGLR8 = 0x8229;
auto constexpr kOpenGLR8Snorm = 0x8f94;
auto constexpr kOpenGLR8i = 0x8231;
auto constexpr kOpenGLR8ui = 0x8232;
auto constexpr kOpenGLRGBA = 0x1908;
auto constexpr kOpenGLRGBA12 = 0x805a;
auto constexpr kOpenGLRGBA16 = 0x805b;
auto constexpr kOpenGLRGBA16Snorm = 0x8f9b;
auto constexpr kOpenGLRGBA16f = 0x881a;
auto constexpr kOpenGLRGBA16i = 0x8d88;
auto constexpr kOpenGLRGBA16ui = 0x8d76;
auto constexpr kOpenGLRGBA2 = 0x8055;
auto constexpr kOpenGLRGBA32f = 0x8814;
auto constexpr kOpenGLRGBA32i = 0x8d82;
auto constexpr kOpenGLRGBA32ui = 0x8d70;
auto constexpr kOpenGLRGBA4 = 0x8056;
auto constexpr kOpenGLRGBA8 = 0x8058;
auto constexpr kOpenGLRGBA8Snorm = 0x8f97;
auto constexpr kOpenGLRGBA8i = 0x8d8e;
auto constexpr kOpenGLRGBA8ui = 0x8d7c;
auto constexpr kOpenGLRGBAInteger = 0x8d99;
auto constexpr kOpenGLRGBAMode = 0x0c31;
auto constexpr kOpenGLRasterizerDiscard = 0x8c89;
auto constexpr kOpenGLReadBuffer = 0x0c02;
auto constexpr kOpenGLReadFramebuffer = 0x8ca8;
auto constexpr kOpenGLReadFramebufferBinding = 0x8caa;
auto constexpr kOpenGLReadOnly = 0x88b8;
auto constexpr kOpenGLReadPixels = 0x828c;
auto constexpr kOpenGLReadPixelsFormat = 0x828d;
auto constexpr kOpenGLReadPixelsType = 0x828e;
auto constexpr kOpenGLReadWrite = 0x88ba;
auto constexpr kOpenGLRed = 0x1903;
auto constexpr kOpenGLRedBias = 0x0d15;
auto constexpr kOpenGLRedBits = 0x0d52;
auto constexpr kOpenGLRedInteger = 0x8d94;
auto constexpr kOpenGLRedScale = 0x0d14;
auto constexpr kOpenGLReferencedByComputeShader = 0x930b;
auto constexpr kOpenGLReferencedByFragmentShader = 0x930a;
auto constexpr kOpenGLReferencedByGeometryShader = 0x9309;
auto constexpr kOpenGLReferencedByTessControlShader = 0x9307;
auto constexpr kOpenGLReferencedByTessEvaluationShader = 0x9308;
auto constexpr kOpenGLReferencedByVertexShader = 0x9306;
auto constexpr kOpenGLReflectionMap = 0x8512;
auto constexpr kOpenGLRender = 0x1c00;
auto constexpr kOpenGLRenderMode = 0x0c40;
auto constexpr kOpenGLRenderbuffer = 0x8d41;
auto constexpr kOpenGLRenderbufferAlphaSize = 0x8d53;
auto constexpr kOpenGLRenderbufferBinding = 0x8ca7;
auto constexpr kOpenGLRenderbufferBlueSize = 0x8d52;
auto constexpr kOpenGLRenderbufferDepthSize = 0x8d54;
auto constexpr kOpenGLRenderbufferGreenSize = 0x8d51;
auto constexpr kOpenGLRenderbufferHeight = 0x8d43;
auto constexpr kOpenGLRenderbufferInternalFormat = 0x8d44;
auto constexpr kOpenGLRenderbufferRedSize = 0x8d50;
auto constexpr kOpenGLRenderbufferSamples = 0x8cab;
auto constexpr kOpenGLRenderbufferStencilSize = 0x8d55;
auto constexpr kOpenGLRenderbufferWidth = 0x8d42;
auto constexpr kOpenGLRenderer = 0x1f01;
auto constexpr kOpenGLRepeat = 0x2901;
auto constexpr kOpenGLReplace = 0x1e01;
auto constexpr kOpenGLRescaleNormal = 0x803a;
auto constexpr kOpenGLResetNotificationStrategy = 0x8256;
auto constexpr kOpenGLReturn = 0x0102;
auto constexpr kOpenGLRg = 0x8227;
auto constexpr kOpenGLRg16 = 0x822c;
auto constexpr kOpenGLRg16Snorm = 0x8f99;
auto constexpr kOpenGLRg16f = 0x822f;
auto constexpr kOpenGLRg16i = 0x8239;
auto constexpr kOpenGLRg16ui = 0x823a;
auto constexpr kOpenGLRg32f = 0x8230;
auto constexpr kOpenGLRg32i = 0x823b;
auto constexpr kOpenGLRg32ui = 0x823c;
auto constexpr kOpenGLRg8 = 0x822b;
auto constexpr kOpenGLRg8Snorm = 0x8f95;
auto constexpr kOpenGLRg8i = 0x8237;
auto constexpr kOpenGLRg8ui = 0x8238;
auto constexpr kOpenGLRgInteger = 0x8228;
auto constexpr kOpenGLRgb = 0x1907;
auto constexpr kOpenGLRgb10 = 0x8052;
auto constexpr kOpenGLRgb10A2 = 0x8059;
auto constexpr kOpenGLRgb10A2ui = 0x906f;
auto constexpr kOpenGLRgb12 = 0x8053;
auto constexpr kOpenGLRgb16 = 0x8054;
auto constexpr kOpenGLRgb16Snorm = 0x8f9a;
auto constexpr kOpenGLRgb16f = 0x881b;
auto constexpr kOpenGLRgb16i = 0x8d89;
auto constexpr kOpenGLRgb16ui = 0x8d77;
auto constexpr kOpenGLRgb32f = 0x8815;
auto constexpr kOpenGLRgb32i = 0x8d83;
auto constexpr kOpenGLRgb32ui = 0x8d71;
auto constexpr kOpenGLRgb4 = 0x804f;
auto constexpr kOpenGLRgb5 = 0x8050;
auto constexpr kOpenGLRgb565 = 0x8d62;
auto constexpr kOpenGLRgb5A1 = 0x8057;
auto constexpr kOpenGLRgb8 = 0x8051;
auto constexpr kOpenGLRgb8Snorm = 0x8f96;
auto constexpr kOpenGLRgb8i = 0x8d8f;
auto constexpr kOpenGLRgb8ui = 0x8d7d;
auto constexpr kOpenGLRgb9E5 = 0x8c3d;
auto constexpr kOpenGLRgbInteger = 0x8d98;
auto constexpr kOpenGLRgbScale = 0x8573;
auto constexpr kOpenGLRight = 0x0407;
auto constexpr kOpenGLS = 0x2000;
auto constexpr kOpenGLSRGB = 0x8c40;
auto constexpr kOpenGLSRGB8 = 0x8c41;
auto constexpr kOpenGLSRGB8Alpha8 = 0x8c43;
auto constexpr kOpenGLSRGBAlpha = 0x8c42;
auto constexpr kOpenGLSRGBRead = 0x8297;
auto constexpr kOpenGLSRGBWrite = 0x8298;
auto constexpr kOpenGLSampleAlphaToCoverage = 0x809e;
auto constexpr kOpenGLSampleAlphaToOne = 0x809f;
auto constexpr kOpenGLSampleBuffers = 0x80a8;
auto constexpr kOpenGLSampleCoverage = 0x80a0;
auto constexpr kOpenGLSampleCoverageInvert = 0x80ab;
auto constexpr kOpenGLSampleCoverageValue = 0x80aa;
auto constexpr kOpenGLSampleMask = 0x8e51;
auto constexpr kOpenGLSampleMaskValue = 0x8e52;
auto constexpr kOpenGLSamplePosition = 0x8e50;
auto constexpr kOpenGLSampleShading = 0x8c36;
auto constexpr kOpenGLSampler = 0x82e6;
auto constexpr kOpenGLSampler1D = 0x8b5d;
auto constexpr kOpenGLSampler1DArray = 0x8dc0;
auto constexpr kOpenGLSampler1DArrayShadow = 0x8dc3;
auto constexpr kOpenGLSampler1DShadow = 0x8b61;
auto constexpr kOpenGLSampler2D = 0x8b5e;
auto constexpr kOpenGLSampler2DArray = 0x8dc1;
auto constexpr kOpenGLSampler2DArrayShadow = 0x8dc4;
auto constexpr kOpenGLSampler2DMultisample = 0x9108;
auto constexpr kOpenGLSampler2DMultisampleArray = 0x910b;
auto constexpr kOpenGLSampler2DRect = 0x8b63;
auto constexpr kOpenGLSampler2DRectShadow = 0x8b64;
auto constexpr kOpenGLSampler2DShadow = 0x8b62;
auto constexpr kOpenGLSampler3D = 0x8b5f;
auto constexpr kOpenGLSamplerBinding = 0x8919;
auto constexpr kOpenGLSamplerBuffer = 0x8dc2;
auto constexpr kOpenGLSamplerCube = 0x8b60;
auto constexpr kOpenGLSamplerCubeMapArray = 0x900c;
auto constexpr kOpenGLSamplerCubeMapArrayShadow = 0x900d;
auto constexpr kOpenGLSamplerCubeShadow = 0x8dc5;
auto constexpr kOpenGLSamples = 0x80a9;
auto constexpr kOpenGLSamplesPassed = 0x8914;
auto constexpr kOpenGLScissorBit = 0x00080000;
auto constexpr kOpenGLScissorBox = 0x0c10;
auto constexpr kOpenGLScissorTest = 0x0c11;
auto constexpr kOpenGLScreen = 0x9295;
auto constexpr kOpenGLSecondaryColorArray = 0x845e;
auto constexpr kOpenGLSecondaryColorArrayBufferBinding = 0x889c;
auto constexpr kOpenGLSecondaryColorArrayPointer = 0x845d;
auto constexpr kOpenGLSecondaryColorArraySize = 0x845a;
auto constexpr kOpenGLSecondaryColorArrayStride = 0x845c;
auto constexpr kOpenGLSecondaryColorArrayType = 0x845b;
auto constexpr kOpenGLSelect = 0x1c02;
auto constexpr kOpenGLSelectionBufferPointer = 0x0df3;
auto constexpr kOpenGLSelectionBufferSize = 0x0df4;
auto constexpr kOpenGLSeparable2D = 0x8012;
auto constexpr kOpenGLSeparateAttribs = 0x8c8d;
auto constexpr kOpenGLSeparateSpecularColor = 0x81fa;
auto constexpr kOpenGLSet = 0x150f;
auto constexpr kOpenGLShadeModel = 0x0b54;
auto constexpr kOpenGLShader = 0x82e1;
auto constexpr kOpenGLShaderBinaryFormatSpirV = 0x9551;
auto constexpr kOpenGLShaderBinaryFormats = 0x8df8;
auto constexpr kOpenGLShaderCompiler = 0x8dfa;
auto constexpr kOpenGLShaderImageAccessBarrierBit = 0x00000020;
auto constexpr kOpenGLShaderImageAtomic = 0x82a6;
auto constexpr kOpenGLShaderImageLoad = 0x82a4;
auto constexpr kOpenGLShaderImageStore = 0x82a5;
auto constexpr kOpenGLShaderSourceLength = 0x8b88;
auto constexpr kOpenGLShaderStorageBarrierBit = 0x00002000;
auto constexpr kOpenGLShaderStorageBlock = 0x92e6;
auto constexpr kOpenGLShaderStorageBuffer = 0x90d2;
auto constexpr kOpenGLShaderStorageBufferBinding = 0x90d3;
auto constexpr kOpenGLShaderStorageBufferOffsetAlignment = 0x90df;
auto constexpr kOpenGLShaderStorageBufferSize = 0x90d5;
auto constexpr kOpenGLShaderStorageBufferStart = 0x90d4;
auto constexpr kOpenGLShaderType = 0x8b4f;
auto constexpr kOpenGLShadingLanguageVersion = 0x8b8c;
auto constexpr kOpenGLShininess = 0x1601;
auto constexpr kOpenGLShort = 0x1402;
auto constexpr kOpenGLSignaled = 0x9119;
auto constexpr kOpenGLSignedNormalized = 0x8f9c;
auto constexpr kOpenGLSimultaneousTextureAndDepthTest = 0x82ac;
auto constexpr kOpenGLSimultaneousTextureAndDepthWrite = 0x82ae;
auto constexpr kOpenGLSimultaneousTextureAndStencilTest = 0x82ad;
auto constexpr kOpenGLSimultaneousTextureAndStencilWrite = 0x82af;
auto constexpr kOpenGLSingleColor = 0x81f9;
auto constexpr kOpenGLSluminance = 0x8c46;
auto constexpr kOpenGLSluminance8 = 0x8c47;
auto constexpr kOpenGLSluminance8Alpha8 = 0x8c45;
auto constexpr kOpenGLSluminanceAlpha = 0x8c44;
auto constexpr kOpenGLSmooth = 0x1d01;
auto constexpr kOpenGLSmoothLineWidthGranularity = 0x0b23;
auto constexpr kOpenGLSmoothLineWidthRange = 0x0b22;
auto constexpr kOpenGLSmoothPointSizeGranularity = 0x0b13;
auto constexpr kOpenGLSmoothPointSizeRange = 0x0b12;
auto constexpr kOpenGLSoftlight = 0x929c;
auto constexpr kOpenGLSource0Alpha = 0x8588;
auto constexpr kOpenGLSource0Rgb = 0x8580;
auto constexpr kOpenGLSource1Alpha = 0x8589;
auto constexpr kOpenGLSource1Rgb = 0x8581;
auto constexpr kOpenGLSource2Alpha = 0x858a;
auto constexpr kOpenGLSource2Rgb = 0x8582;
auto constexpr kOpenGLSpecular = 0x1202;
auto constexpr kOpenGLSphereMap = 0x2402;
auto constexpr kOpenGLSpirVBinary = 0x9552;
auto constexpr kOpenGLSpirVExtensions = 0x9553;
auto constexpr kOpenGLSpotCutoff = 0x1206;
auto constexpr kOpenGLSpotDirection = 0x1204;
auto constexpr kOpenGLSpotExponent = 0x1205;
auto constexpr kOpenGLSrc0Alpha = 0x8588;
auto constexpr kOpenGLSrc0Rgb = 0x8580;
auto constexpr kOpenGLSrc1Alpha = 0x8589;
auto constexpr kOpenGLSrc1Color = 0x88f9;
auto constexpr kOpenGLSrc1Rgb = 0x8581;
auto constexpr kOpenGLSrc2Alpha = 0x858a;
auto constexpr kOpenGLSrc2Rgb = 0x8582;
auto constexpr kOpenGLSrcAlpha = 0x0302;
auto constexpr kOpenGLSrcAlphaSaturate = 0x0308;
auto constexpr kOpenGLSrcColor = 0x0300;
auto constexpr kOpenGLStackOverflow = 0x0503;
auto constexpr kOpenGLStackUnderflow = 0x0504;
auto constexpr kOpenGLStaticCopy = 0x88e6;
auto constexpr kOpenGLStaticDraw = 0x88e4;
auto constexpr kOpenGLStaticRead = 0x88e5;
auto constexpr kOpenGLStencil = 0x1802;
auto constexpr kOpenGLStencilAttachment = 0x8d20;
auto constexpr kOpenGLStencilBackFail = 0x8801;
auto constexpr kOpenGLStencilBackFunc = 0x8800;
auto constexpr kOpenGLStencilBackPassDepthFail = 0x8802;
auto constexpr kOpenGLStencilBackPassDepthPass = 0x8803;
auto constexpr kOpenGLStencilBackRef = 0x8ca3;
auto constexpr kOpenGLStencilBackValueMask = 0x8ca4;
auto constexpr kOpenGLStencilBackWriteMask = 0x8ca5;
auto constexpr kOpenGLStencilBits = 0x0d57;
auto constexpr kOpenGLStencilBufferBit = 0x00000400;
auto constexpr kOpenGLStencilClearValue = 0x0b91;
auto constexpr kOpenGLStencilComponents = 0x8285;
auto constexpr kOpenGLStencilFail = 0x0b94;
auto constexpr kOpenGLStencilFunc = 0x0b92;
auto constexpr kOpenGLStencilIndex = 0x1901;
auto constexpr kOpenGLStencilIndex1 = 0x8d46;
auto constexpr kOpenGLStencilIndex16 = 0x8d49;
auto constexpr kOpenGLStencilIndex4 = 0x8d47;
auto constexpr kOpenGLStencilIndex8 = 0x8d48;
auto constexpr kOpenGLStencilPassDepthFail = 0x0b95;
auto constexpr kOpenGLStencilPassDepthPass = 0x0b96;
auto constexpr kOpenGLStencilRef = 0x0b97;
auto constexpr kOpenGLStencilRenderable = 0x8288;
auto constexpr kOpenGLStencilTest = 0x0b90;
auto constexpr kOpenGLStencilValueMask = 0x0b93;
auto constexpr kOpenGLStencilWriteMask = 0x0b98;
auto constexpr kOpenGLStereo = 0x0c33;
auto constexpr kOpenGLStreamCopy = 0x88e2;
auto constexpr kOpenGLStreamDraw = 0x88e0;
auto constexpr kOpenGLStreamRead = 0x88e1;
auto constexpr kOpenGLSubpixelBits = 0x0d50;
auto constexpr kOpenGLSubtract = 0x84e7;
auto constexpr kOpenGLSyncCondition = 0x9113;
auto constexpr kOpenGLSyncFence = 0x9116;
auto constexpr kOpenGLSyncFlags = 0x9115;
auto constexpr kOpenGLSyncFlushCommandsBit = 0x00000001;
auto constexpr kOpenGLSyncGpuCommandsComplete = 0x9117;
auto constexpr kOpenGLSyncStatus = 0x9114;
auto constexpr kOpenGLT = 0x2001;
auto constexpr kOpenGLT2fC3fV3f = 0x2a2a;
auto constexpr kOpenGLT2fC4fN3fV3f = 0x2a2c;
auto constexpr kOpenGLT2fC4ubV3f = 0x2a29;
auto constexpr kOpenGLT2fN3fV3f = 0x2a2b;
auto constexpr kOpenGLT2fV3f = 0x2a27;
auto constexpr kOpenGLT4fC4fN3fV4f = 0x2a2d;
auto constexpr kOpenGLT4fV4f = 0x2a28;
auto constexpr kOpenGLTessControlOutputVertices = 0x8e75;
auto constexpr kOpenGLTessControlShader = 0x8e88;
auto constexpr kOpenGLTessControlShaderBit = 0x00000008;
auto constexpr kOpenGLTessControlShaderPatches = 0x82f1;
auto constexpr kOpenGLTessControlSubroutine = 0x92e9;
auto constexpr kOpenGLTessControlSubroutineUniform = 0x92ef;
auto constexpr kOpenGLTessControlTexture = 0x829c;
auto constexpr kOpenGLTessEvaluationShader = 0x8e87;
auto constexpr kOpenGLTessEvaluationShaderBit = 0x00000010;
auto constexpr kOpenGLTessEvaluationShaderInvocations = 0x82f2;
auto constexpr kOpenGLTessEvaluationSubroutine = 0x92ea;
auto constexpr kOpenGLTessEvaluationSubroutineUniform = 0x92f0;
auto constexpr kOpenGLTessEvaluationTexture = 0x829d;
auto constexpr kOpenGLTessGenMode = 0x8e76;
auto constexpr kOpenGLTessGenPointMode = 0x8e79;
auto constexpr kOpenGLTessGenSpacing = 0x8e77;
auto constexpr kOpenGLTessGenVertexOrder = 0x8e78;
auto constexpr kOpenGLTexture = 0x1702;
auto constexpr kOpenGLTexture0 = 0x84c0;
auto constexpr kOpenGLTexture1 = 0x84c1;
auto constexpr kOpenGLTexture10 = 0x84ca;
auto constexpr kOpenGLTexture11 = 0x84cb;
auto constexpr kOpenGLTexture12 = 0x84cc;
auto constexpr kOpenGLTexture13 = 0x84cd;
auto constexpr kOpenGLTexture14 = 0x84ce;
auto constexpr kOpenGLTexture15 = 0x84cf;
auto constexpr kOpenGLTexture16 = 0x84d0;
auto constexpr kOpenGLTexture17 = 0x84d1;
auto constexpr kOpenGLTexture18 = 0x84d2;
auto constexpr kOpenGLTexture19 = 0x84d3;
auto constexpr kOpenGLTexture1D = 0x0de0;
auto constexpr kOpenGLTexture1DArray = 0x8c18;
auto constexpr kOpenGLTexture2 = 0x84c2;
auto constexpr kOpenGLTexture20 = 0x84d4;
auto constexpr kOpenGLTexture21 = 0x84d5;
auto constexpr kOpenGLTexture22 = 0x84d6;
auto constexpr kOpenGLTexture23 = 0x84d7;
auto constexpr kOpenGLTexture24 = 0x84d8;
auto constexpr kOpenGLTexture25 = 0x84d9;
auto constexpr kOpenGLTexture26 = 0x84da;
auto constexpr kOpenGLTexture27 = 0x84db;
auto constexpr kOpenGLTexture28 = 0x84dc;
auto constexpr kOpenGLTexture29 = 0x84dd;
auto constexpr kOpenGLTexture2D = 0x0de1;
auto constexpr kOpenGLTexture2DArray = 0x8c1a;
auto constexpr kOpenGLTexture2DMultisample = 0x9100;
auto constexpr kOpenGLTexture2DMultisampleArray = 0x9102;
auto constexpr kOpenGLTexture3 = 0x84c3;
auto constexpr kOpenGLTexture30 = 0x84de;
auto constexpr kOpenGLTexture31 = 0x84df;
auto constexpr kOpenGLTexture3D = 0x806f;
auto constexpr kOpenGLTexture4 = 0x84c4;
auto constexpr kOpenGLTexture5 = 0x84c5;
auto constexpr kOpenGLTexture6 = 0x84c6;
auto constexpr kOpenGLTexture7 = 0x84c7;
auto constexpr kOpenGLTexture8 = 0x84c8;
auto constexpr kOpenGLTexture9 = 0x84c9;
auto constexpr kOpenGLTextureAlphaSize = 0x805f;
auto constexpr kOpenGLTextureAlphaType = 0x8c13;
auto constexpr kOpenGLTextureBaseLevel = 0x813c;
auto constexpr kOpenGLTextureBinding1D = 0x8068;
auto constexpr kOpenGLTextureBinding1DArray = 0x8c1c;
auto constexpr kOpenGLTextureBinding2D = 0x8069;
auto constexpr kOpenGLTextureBinding2DArray = 0x8c1d;
auto constexpr kOpenGLTextureBinding2DMultisample = 0x9104;
auto constexpr kOpenGLTextureBinding2DMultisampleArray = 0x9105;
auto constexpr kOpenGLTextureBinding3D = 0x806a;
auto constexpr kOpenGLTextureBindingBuffer = 0x8c2c;
auto constexpr kOpenGLTextureBindingCubeMap = 0x8514;
auto constexpr kOpenGLTextureBindingCubeMapArray = 0x900a;
auto constexpr kOpenGLTextureBindingRectangle = 0x84f6;
auto constexpr kOpenGLTextureBit = 0x00040000;
auto constexpr kOpenGLTextureBlueSize = 0x805e;
auto constexpr kOpenGLTextureBlueType = 0x8c12;
auto constexpr kOpenGLTextureBorder = 0x1005;
auto constexpr kOpenGLTextureBorderColor = 0x1004;
auto constexpr kOpenGLTextureBuffer = 0x8c2a;
auto constexpr kOpenGLTextureBufferBinding = 0x8c2a;
auto constexpr kOpenGLTextureBufferDataStoreBinding = 0x8c2d;
auto constexpr kOpenGLTextureBufferOffset = 0x919d;
auto constexpr kOpenGLTextureBufferOffsetAlignment = 0x919f;
auto constexpr kOpenGLTextureBufferSize = 0x919e;
auto constexpr kOpenGLTextureCompareFunc = 0x884d;
auto constexpr kOpenGLTextureCompareMode = 0x884c;
auto constexpr kOpenGLTextureComponents = 0x1003;
auto constexpr kOpenGLTextureCompressed = 0x86a1;
auto constexpr kOpenGLTextureCompressedBlockHeight = 0x82b2;
auto constexpr kOpenGLTextureCompressedBlockSize = 0x82b3;
auto constexpr kOpenGLTextureCompressedBlockWidth = 0x82b1;
auto constexpr kOpenGLTextureCompressedImageSize = 0x86a0;
auto constexpr kOpenGLTextureCompressionHint = 0x84ef;
auto constexpr kOpenGLTextureCoordArray = 0x8078;
auto constexpr kOpenGLTextureCoordArrayBufferBinding = 0x889a;
auto constexpr kOpenGLTextureCoordArrayPointer = 0x8092;
auto constexpr kOpenGLTextureCoordArraySize = 0x8088;
auto constexpr kOpenGLTextureCoordArrayStride = 0x808a;
auto constexpr kOpenGLTextureCoordArrayType = 0x8089;
auto constexpr kOpenGLTextureCubeMap = 0x8513;
auto constexpr kOpenGLTextureCubeMapArray = 0x9009;
auto constexpr kOpenGLTextureCubeMapNegativeX = 0x8516;
auto constexpr kOpenGLTextureCubeMapNegativeY = 0x8518;
auto constexpr kOpenGLTextureCubeMapNegativeZ = 0x851a;
auto constexpr kOpenGLTextureCubeMapPositiveX = 0x8515;
auto constexpr kOpenGLTextureCubeMapPositiveY = 0x8517;
auto constexpr kOpenGLTextureCubeMapPositiveZ = 0x8519;
auto constexpr kOpenGLTextureCubeMapSeamless = 0x884f;
auto constexpr kOpenGLTextureDepth = 0x8071;
auto constexpr kOpenGLTextureDepthSize = 0x884a;
auto constexpr kOpenGLTextureDepthType = 0x8c16;
auto constexpr kOpenGLTextureEnv = 0x2300;
auto constexpr kOpenGLTextureEnvColor = 0x2201;
auto constexpr kOpenGLTextureEnvMode = 0x2200;
auto constexpr kOpenGLTextureFetchBarrierBit = 0x00000008;
auto constexpr kOpenGLTextureFilterControl = 0x8500;
auto constexpr kOpenGLTextureFixedSampleLocations = 0x9107;
auto constexpr kOpenGLTextureGather = 0x82a2;
auto constexpr kOpenGLTextureGatherShadow = 0x82a3;
auto constexpr kOpenGLTextureGenMode = 0x2500;
auto constexpr kOpenGLTextureGenQ = 0x0c63;
auto constexpr kOpenGLTextureGenR = 0x0c62;
auto constexpr kOpenGLTextureGenS = 0x0c60;
auto constexpr kOpenGLTextureGenT = 0x0c61;
auto constexpr kOpenGLTextureGreenSize = 0x805d;
auto constexpr kOpenGLTextureGreenType = 0x8c11;
auto constexpr kOpenGLTextureHeight = 0x1001;
auto constexpr kOpenGLTextureImageFormat = 0x828f;
auto constexpr kOpenGLTextureImageType = 0x8290;
auto constexpr kOpenGLTextureImmutableFormat = 0x912f;
auto constexpr kOpenGLTextureImmutableLevels = 0x82df;
auto constexpr kOpenGLTextureIntensitySize = 0x8061;
auto constexpr kOpenGLTextureIntensityType = 0x8c15;
auto constexpr kOpenGLTextureInternalFormat = 0x1003;
auto constexpr kOpenGLTextureLodBias = 0x8501;
auto constexpr kOpenGLTextureLuminanceSize = 0x8060;
auto constexpr kOpenGLTextureLuminanceType = 0x8c14;
auto constexpr kOpenGLTextureMagFilter = 0x2800;
auto constexpr kOpenGLTextureMatrix = 0x0ba8;
auto constexpr kOpenGLTextureMaxAnisotropy = 0x84fe;
auto constexpr kOpenGLTextureMaxLevel = 0x813d;
auto constexpr kOpenGLTextureMaxLod = 0x813b;
auto constexpr kOpenGLTextureMinFilter = 0x2801;
auto constexpr kOpenGLTextureMinLod = 0x813a;
auto constexpr kOpenGLTexturePriority = 0x8066;
auto constexpr kOpenGLTextureRectangle = 0x84f5;
auto constexpr kOpenGLTextureRedSize = 0x805c;
auto constexpr kOpenGLTextureRedType = 0x8c10;
auto constexpr kOpenGLTextureResident = 0x8067;
auto constexpr kOpenGLTextureSamples = 0x9106;
auto constexpr kOpenGLTextureShadow = 0x82a1;
auto constexpr kOpenGLTextureSharedSize = 0x8c3f;
auto constexpr kOpenGLTextureStackDepth = 0x0ba5;
auto constexpr kOpenGLTextureStencilSize = 0x88f1;
auto constexpr kOpenGLTextureSwizzleA = 0x8e45;
auto constexpr kOpenGLTextureSwizzleB = 0x8e44;
auto constexpr kOpenGLTextureSwizzleG = 0x8e43;
auto constexpr kOpenGLTextureSwizzleR = 0x8e42;
auto constexpr kOpenGLTextureSwizzleRGBA = 0x8e46;
auto constexpr kOpenGLTextureTarget = 0x1006;
auto constexpr kOpenGLTextureUpdateBarrierBit = 0x00000100;
auto constexpr kOpenGLTextureView = 0x82b5;
auto constexpr kOpenGLTextureViewMinLayer = 0x82dd;
auto constexpr kOpenGLTextureViewMinLevel = 0x82db;
auto constexpr kOpenGLTextureViewNumLayers = 0x82de;
auto constexpr kOpenGLTextureViewNumLevels = 0x82dc;
auto constexpr kOpenGLTextureWidth = 0x1000;
auto constexpr kOpenGLTextureWrapR = 0x8072;
auto constexpr kOpenGLTextureWrapS = 0x2802;
auto constexpr kOpenGLTextureWrapT = 0x2803;
auto constexpr kOpenGLTimeElapsed = 0x88bf;
auto constexpr kOpenGLTimeoutExpired = 0x911b;
auto constexpr kOpenGLTimeoutIgnored = 0xffffffffffffffff;
auto constexpr kOpenGLTimestamp = 0x8e28;
auto constexpr kOpenGLTopLevelArraySize = 0x930c;
auto constexpr kOpenGLTopLevelArrayStride = 0x930d;
auto constexpr kOpenGLTransformBit = 0x00001000;
auto constexpr kOpenGLTransformFeedback = 0x8e22;
auto constexpr kOpenGLTransformFeedbackActive = 0x8e24;
auto constexpr kOpenGLTransformFeedbackBarrierBit = 0x00000800;
auto constexpr kOpenGLTransformFeedbackBinding = 0x8e25;
auto constexpr kOpenGLTransformFeedbackBuffer = 0x8c8e;
auto constexpr kOpenGLTransformFeedbackBufferActive = 0x8e24;
auto constexpr kOpenGLTransformFeedbackBufferBinding = 0x8c8f;
auto constexpr kOpenGLTransformFeedbackBufferIndex = 0x934b;
auto constexpr kOpenGLTransformFeedbackBufferMode = 0x8c7f;
auto constexpr kOpenGLTransformFeedbackBufferPaused = 0x8e23;
auto constexpr kOpenGLTransformFeedbackBufferSize = 0x8c85;
auto constexpr kOpenGLTransformFeedbackBufferStart = 0x8c84;
auto constexpr kOpenGLTransformFeedbackBufferStride = 0x934c;
auto constexpr kOpenGLTransformFeedbackOverflow = 0x82ec;
auto constexpr kOpenGLTransformFeedbackPaused = 0x8e23;
auto constexpr kOpenGLTransformFeedbackPrimitivesWritten = 0x8c88;
auto constexpr kOpenGLTransformFeedbackStreamOverflow = 0x82ed;
auto constexpr kOpenGLTransformFeedbackVarying = 0x92f4;
auto constexpr kOpenGLTransformFeedbackVaryingMaxLength = 0x8c76;
auto constexpr kOpenGLTransformFeedbackVaryings = 0x8c83;
auto constexpr kOpenGLTransposeColorMatrix = 0x84e6;
auto constexpr kOpenGLTransposeModelviewMatrix = 0x84e3;
auto constexpr kOpenGLTransposeProjectionMatrix = 0x84e4;
auto constexpr kOpenGLTransposeTextureMatrix = 0x84e5;
auto constexpr kOpenGLTriangleFan = 0x0006;
auto constexpr kOpenGLTriangleStrip = 0x0005;
auto constexpr kOpenGLTriangleStripAdjacency = 0x000d;
auto constexpr kOpenGLTriangles = 0x0004;
auto constexpr kOpenGLTrianglesAdjacency = 0x000c;
auto constexpr kOpenGLType = 0x92fa;
auto constexpr kOpenGLUndefinedVertex = 0x8260;
auto constexpr kOpenGLUniform = 0x92e1;
auto constexpr kOpenGLUniformArrayStride = 0x8a3c;
auto constexpr kOpenGLUniformAtomicCounterBufferIndex = 0x92da;
auto constexpr kOpenGLUniformBarrierBit = 0x00000004;
auto constexpr kOpenGLUniformBlock = 0x92e2;
auto constexpr kOpenGLUniformBlockActiveUniformIndices = 0x8a43;
auto constexpr kOpenGLUniformBlockActiveUniforms = 0x8a42;
auto constexpr kOpenGLUniformBlockBinding = 0x8a3f;
auto constexpr kOpenGLUniformBlockDataSize = 0x8a40;
auto constexpr kOpenGLUniformBlockIndex = 0x8a3a;
auto constexpr kOpenGLUniformBlockNameLength = 0x8a41;
auto constexpr kOpenGLUniformBlockReferencedByComputeShader = 0x90ec;
auto constexpr kOpenGLUniformBlockReferencedByFragmentShader = 0x8a46;
auto constexpr kOpenGLUniformBlockReferencedByGeometryShader = 0x8a45;
auto constexpr kOpenGLUniformBlockReferencedByTessControlShader = 0x84f0;
auto constexpr kOpenGLUniformBlockReferencedByTessEvaluationShader = 0x84f1;
auto constexpr kOpenGLUniformBlockReferencedByVertexShader = 0x8a44;
auto constexpr kOpenGLUniformBuffer = 0x8a11;
auto constexpr kOpenGLUniformBufferBinding = 0x8a28;
auto constexpr kOpenGLUniformBufferOffsetAlignment = 0x8a34;
auto constexpr kOpenGLUniformBufferSize = 0x8a2a;
auto constexpr kOpenGLUniformBufferStart = 0x8a29;
auto constexpr kOpenGLUniformIsRowMajor = 0x8a3e;
auto constexpr kOpenGLUniformMatrixStride = 0x8a3d;
auto constexpr kOpenGLUniformNameLength = 0x8a39;
auto constexpr kOpenGLUniformOffset = 0x8a3b;
auto constexpr kOpenGLUniformSize = 0x8a38;
auto constexpr kOpenGLUniformType = 0x8a37;
auto constexpr kOpenGLUnknownContextReset = 0x8255;
auto constexpr kOpenGLUnpackAlignment = 0x0cf5;
auto constexpr kOpenGLUnpackCompressedBlockDepth = 0x9129;
auto constexpr kOpenGLUnpackCompressedBlockHeight = 0x9128;
auto constexpr kOpenGLUnpackCompressedBlockSize = 0x912a;
auto constexpr kOpenGLUnpackCompressedBlockWidth = 0x9127;
auto constexpr kOpenGLUnpackImageHeight = 0x806e;
auto constexpr kOpenGLUnpackLSBFirst = 0x0cf1;
auto constexpr kOpenGLUnpackRowLength = 0x0cf2;
auto constexpr kOpenGLUnpackSkipImages = 0x806d;
auto constexpr kOpenGLUnpackSkipPixels = 0x0cf4;
auto constexpr kOpenGLUnpackSkipRows = 0x0cf3;
auto constexpr kOpenGLUnpackSwapBytes = 0x0cf0;
auto constexpr kOpenGLUnsignaled = 0x9118;
auto constexpr kOpenGLUnsignedByte = 0x1401;
auto constexpr kOpenGLUnsignedByte233Rev = 0x8362;
auto constexpr kOpenGLUnsignedByte332 = 0x8032;
auto constexpr kOpenGLUnsignedInt = 0x1405;
auto constexpr kOpenGLUnsignedInt1010102 = 0x8036;
auto constexpr kOpenGLUnsignedInt10f11f11fRev = 0x8c3b;
auto constexpr kOpenGLUnsignedInt2101010Rev = 0x8368;
auto constexpr kOpenGLUnsignedInt248 = 0x84fa;
auto constexpr kOpenGLUnsignedInt5999Rev = 0x8c3e;
auto constexpr kOpenGLUnsignedInt8888 = 0x8035;
auto constexpr kOpenGLUnsignedInt8888Rev = 0x8367;
auto constexpr kOpenGLUnsignedIntAtomicCounter = 0x92db;
auto constexpr kOpenGLUnsignedIntImage1D = 0x9062;
auto constexpr kOpenGLUnsignedIntImage1DArray = 0x9068;
auto constexpr kOpenGLUnsignedIntImage2D = 0x9063;
auto constexpr kOpenGLUnsignedIntImage2DArray = 0x9069;
auto constexpr kOpenGLUnsignedIntImage2DMultisample = 0x906b;
auto constexpr kOpenGLUnsignedIntImage2DMultisampleArray = 0x906c;
auto constexpr kOpenGLUnsignedIntImage2DRect = 0x9065;
auto constexpr kOpenGLUnsignedIntImage3D = 0x9064;
auto constexpr kOpenGLUnsignedIntImageBuffer = 0x9067;
auto constexpr kOpenGLUnsignedIntImageCube = 0x9066;
auto constexpr kOpenGLUnsignedIntImageCubeMapArray = 0x906a;
auto constexpr kOpenGLUnsignedIntSampler1D = 0x8dd1;
auto constexpr kOpenGLUnsignedIntSampler1DArray = 0x8dd6;
auto constexpr kOpenGLUnsignedIntSampler2D = 0x8dd2;
auto constexpr kOpenGLUnsignedIntSampler2DArray = 0x8dd7;
auto constexpr kOpenGLUnsignedIntSampler2DMultisample = 0x910a;
auto constexpr kOpenGLUnsignedIntSampler2DMultisampleArray = 0x910d;
auto constexpr kOpenGLUnsignedIntSampler2DRect = 0x8dd5;
auto constexpr kOpenGLUnsignedIntSampler3D = 0x8dd3;
auto constexpr kOpenGLUnsignedIntSamplerBuffer = 0x8dd8;
auto constexpr kOpenGLUnsignedIntSamplerCube = 0x8dd4;
auto constexpr kOpenGLUnsignedIntSamplerCubeMapArray = 0x900f;
auto constexpr kOpenGLUnsignedIntVec2 = 0x8dc6;
auto constexpr kOpenGLUnsignedIntVec3 = 0x8dc7;
auto constexpr kOpenGLUnsignedIntVec4 = 0x8dc8;
auto constexpr kOpenGLUnsignedNormalized = 0x8c17;
auto constexpr kOpenGLUnsignedShort = 0x1403;
auto constexpr kOpenGLUnsignedShort1555Rev = 0x8366;
auto constexpr kOpenGLUnsignedShort4444 = 0x8033;
auto constexpr kOpenGLUnsignedShort4444Rev = 0x8365;
auto constexpr kOpenGLUnsignedShort5551 = 0x8034;
auto constexpr kOpenGLUnsignedShort565 = 0x8363;
auto constexpr kOpenGLUnsignedShort565Rev = 0x8364;
auto constexpr kOpenGLUpperLeft = 0x8ca2;
auto constexpr kOpenGLV2f = 0x2a20;
auto constexpr kOpenGLV3f = 0x2a21;
auto constexpr kOpenGLValidateStatus = 0x8b83;
auto constexpr kOpenGLVendor = 0x1f00;
auto constexpr kOpenGLVersion = 0x1f02;
auto constexpr kOpenGLVertexArray = 0x8074;
auto constexpr kOpenGLVertexArrayBinding = 0x85b5;
auto constexpr kOpenGLVertexArrayBufferBinding = 0x8896;
auto constexpr kOpenGLVertexArrayPointer = 0x808e;
auto constexpr kOpenGLVertexArraySize = 0x807a;
auto constexpr kOpenGLVertexArrayStride = 0x807c;
auto constexpr kOpenGLVertexArrayType = 0x807b;
auto constexpr kOpenGLVertexAttribArrayBarrierBit = 0x00000001;
auto constexpr kOpenGLVertexAttribArrayBufferBinding = 0x889f;
auto constexpr kOpenGLVertexAttribArrayDivisor = 0x88fe;
auto constexpr kOpenGLVertexAttribArrayEnabled = 0x8622;
auto constexpr kOpenGLVertexAttribArrayInteger = 0x88fd;
auto constexpr kOpenGLVertexAttribArrayLong = 0x874e;
auto constexpr kOpenGLVertexAttribArrayNormalized = 0x886a;
auto constexpr kOpenGLVertexAttribArrayPointer = 0x8645;
auto constexpr kOpenGLVertexAttribArraySize = 0x8623;
auto constexpr kOpenGLVertexAttribArrayStride = 0x8624;
auto constexpr kOpenGLVertexAttribArrayType = 0x8625;
auto constexpr kOpenGLVertexAttribBinding = 0x82d4;
auto constexpr kOpenGLVertexAttribRelativeOffset = 0x82d5;
auto constexpr kOpenGLVertexBindingBuffer = 0x8f4f;
auto constexpr kOpenGLVertexBindingDivisor = 0x82d6;
auto constexpr kOpenGLVertexBindingOffset = 0x82d7;
auto constexpr kOpenGLVertexBindingStride = 0x82d8;
auto constexpr kOpenGLVertexProgramPointSize = 0x8642;
auto constexpr kOpenGLVertexProgramTwoSide = 0x8643;
auto constexpr kOpenGLVertexShader = 0x8b31;
auto constexpr kOpenGLVertexShaderBit = 0x00000001;
auto constexpr kOpenGLVertexShaderInvocations = 0x82f0;
auto constexpr kOpenGLVertexSubroutine = 0x92e8;
auto constexpr kOpenGLVertexSubroutineUniform = 0x92ee;
auto constexpr kOpenGLVertexTexture = 0x829b;
auto constexpr kOpenGLVerticesSubmitted = 0x82ee;
auto constexpr kOpenGLViewClass128Bits = 0x82c4;
auto constexpr kOpenGLViewClass16Bits = 0x82ca;
auto constexpr kOpenGLViewClass24Bits = 0x82c9;
auto constexpr kOpenGLViewClass32Bits = 0x82c8;
auto constexpr kOpenGLViewClass48Bits = 0x82c7;
auto constexpr kOpenGLViewClass64Bits = 0x82c6;
auto constexpr kOpenGLViewClass8Bits = 0x82cb;
auto constexpr kOpenGLViewClass96Bits = 0x82c5;
auto constexpr kOpenGLViewClassBptcFloat = 0x82d3;
auto constexpr kOpenGLViewClassBptcUnorm = 0x82d2;
auto constexpr kOpenGLViewClassRgtc1Red = 0x82d0;
auto constexpr kOpenGLViewClassRgtc2Rg = 0x82d1;
auto constexpr kOpenGLViewClassS3tcDxt1RGBA = 0x82cd;
auto constexpr kOpenGLViewClassS3tcDxt1Rgb = 0x82cc;
auto constexpr kOpenGLViewClassS3tcDxt3RGBA = 0x82ce;
auto constexpr kOpenGLViewClassS3tcDxt5RGBA = 0x82cf;
auto constexpr kOpenGLViewCompatibilityClass = 0x82b6;
auto constexpr kOpenGLViewport = 0x0ba2;
auto constexpr kOpenGLViewportBit = 0x00000800;
auto constexpr kOpenGLViewportBoundsRange = 0x825d;
auto constexpr kOpenGLViewportIndexProvokingVertex = 0x825f;
auto constexpr kOpenGLViewportSubpixelBits = 0x825c;
auto constexpr kOpenGLWaitFailed = 0x911d;
auto constexpr kOpenGLWeightArrayBufferBinding = 0x889e;
auto constexpr kOpenGLWriteOnly = 0x88b9;
auto constexpr kOpenGLXor = 0x1506;
auto constexpr kOpenGLZeroToOne = 0x935f;
auto constexpr kOpenGLZoomX = 0x0d16;
auto constexpr kOpenGLZoomY = 0x0d17;

} /* namespace boom */