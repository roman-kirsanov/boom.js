#include <cinttypes>
#include <Boom/OpenGL.hpp>

namespace boom {

using OpenGLAccumFn = void (*)(std::uint32_t, float);
using OpenGLActiveShaderProgramFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLActiveTextureFn = void (*)(std::uint32_t);
using OpenGLAlphaFuncFn = void (*)(std::uint32_t, float);
using OpenGLAlphaFuncxFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLAreTexturesResidentFn = std::uint8_t (*)(std::int32_t, std::uint32_t const*, std::uint8_t*);
using OpenGLArrayElementFn = void (*)(std::int32_t);
using OpenGLAttachShaderFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBeginFn = void (*)(std::uint32_t);
using OpenGLBeginConditionalRenderFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBeginQueryFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBeginQueryIndexedFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLBeginTransformFeedbackFn = void (*)(std::uint32_t);
using OpenGLBindAttribLocationFn = void (*)(std::uint32_t, std::uint32_t, char const*);
using OpenGLBindBufferFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBindBufferBaseFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLBindBufferRangeFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::intptr_t, std::int64_t);
using OpenGLBindBuffersBaseFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t const*);
using OpenGLBindBuffersRangeFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t const*, std::intptr_t const*, std::int64_t const*);
using OpenGLBindFragDataLocationFn = void (*)(std::uint32_t, std::uint32_t, char const*);
using OpenGLBindFragDataLocationIndexedFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, char const*);
using OpenGLBindFramebufferFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBindImageTextureFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::uint8_t, std::int32_t, std::uint32_t, std::uint32_t);
using OpenGLBindImageTexturesFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*);
using OpenGLBindProgramPipelineFn = void (*)(std::uint32_t);
using OpenGLBindRenderbufferFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBindSamplerFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBindSamplersFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*);
using OpenGLBindTextureFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBindTextureUnitFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBindTexturesFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*);
using OpenGLBindTransformFeedbackFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBindVertexArrayFn = void (*)(std::uint32_t);
using OpenGLBindVertexBufferFn = void (*)(std::uint32_t, std::uint32_t, std::intptr_t, std::int32_t);
using OpenGLBindVertexBuffersFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*, std::intptr_t const*, std::int32_t const*);
using OpenGLBitmapFn = void (*)(std::int32_t, std::int32_t, float, float, float, float, std::uint8_t const*);
using OpenGLBlendBarrierFn = void (*)();
using OpenGLBlendColorFn = void (*)(float, float, float, float);
using OpenGLBlendEquationFn = void (*)(std::uint32_t);
using OpenGLBlendEquationSeparateFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBlendEquationSeparateiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLBlendEquationiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBlendFuncFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLBlendFuncSeparateFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLBlendFuncSeparateiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLBlendFunciFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLBlitFramebufferFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t);
using OpenGLBlitNamedFramebufferFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t);
using OpenGLBufferDataFn = void (*)(std::uint32_t, std::int64_t, void const*, std::uint32_t);
using OpenGLBufferStorageFn = void (*)(std::uint32_t, std::int64_t, void const*, std::uint32_t);
using OpenGLBufferSubDataFn = void (*)(std::uint32_t, std::intptr_t, std::int64_t, void const*);
using OpenGLCallListFn = void (*)(std::uint32_t);
using OpenGLCallListsFn = void (*)(std::int32_t, std::uint32_t, void const*);
using OpenGLCheckFramebufferStatusFn = std::uint32_t (*)(std::uint32_t);
using OpenGLCheckNamedFramebufferStatusFn = std::uint32_t (*)(std::uint32_t, std::uint32_t);
using OpenGLClampColorFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLClearFn = void (*)(std::uint32_t);
using OpenGLClearAccumFn = void (*)(float, float, float, float);
using OpenGLClearBufferDataFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLClearBufferSubDataFn = void (*)(std::uint32_t, std::uint32_t, std::intptr_t, std::int64_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLClearBufferfiFn = void (*)(std::uint32_t, std::int32_t, float, std::int32_t);
using OpenGLClearBufferfvFn = void (*)(std::uint32_t, std::int32_t, float const*);
using OpenGLClearBufferivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t const*);
using OpenGLClearBufferuivFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*);
using OpenGLClearColorFn = void (*)(float, float, float, float);
using OpenGLClearColorxFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLClearDepthFn = void (*)(double);
using OpenGLClearDepthfFn = void (*)(float);
using OpenGLClearDepthxFn = void (*)(std::int32_t);
using OpenGLClearIndexFn = void (*)(float);
using OpenGLClearNamedBufferDataFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLClearNamedBufferSubDataFn = void (*)(std::uint32_t, std::uint32_t, std::intptr_t, std::int64_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLClearNamedFramebufferfiFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, float, std::int32_t);
using OpenGLClearNamedFramebufferfvFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, float const*);
using OpenGLClearNamedFramebufferivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t const*);
using OpenGLClearNamedFramebufferuivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t const*);
using OpenGLClearStencilFn = void (*)(std::int32_t);
using OpenGLClearTexImageFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLClearTexSubImageFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLClientActiveTextureFn = void (*)(std::uint32_t);
using OpenGLClientWaitSyncFn = std::uint32_t (*)(void*, std::uint32_t, std::uint64_t);
using OpenGLClipControlFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLClipPlaneFn = void (*)(std::uint32_t, double const*);
using OpenGLClipPlanefFn = void (*)(std::uint32_t, float const*);
using OpenGLClipPlanexFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLColor3bFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLColor3bvFn = void (*)(std::int32_t const*);
using OpenGLColor3dFn = void (*)(double, double, double);
using OpenGLColor3dvFn = void (*)(double const*);
using OpenGLColor3fFn = void (*)(float, float, float);
using OpenGLColor3fvFn = void (*)(float const*);
using OpenGLColor3iFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLColor3ivFn = void (*)(std::int32_t const*);
using OpenGLColor3sFn = void (*)(std::int16_t, std::int16_t, std::int16_t);
using OpenGLColor3svFn = void (*)(std::int16_t const*);
using OpenGLColor3ubFn = void (*)(std::uint8_t, std::uint8_t, std::uint8_t);
using OpenGLColor3ubvFn = void (*)(std::uint8_t const*);
using OpenGLColor3uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLColor3uivFn = void (*)(std::uint32_t const*);
using OpenGLColor3usFn = void (*)(std::uint16_t, std::uint16_t, std::uint16_t);
using OpenGLColor3usvFn = void (*)(std::uint16_t const*);
using OpenGLColor4bFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLColor4bvFn = void (*)(std::int32_t const*);
using OpenGLColor4dFn = void (*)(double, double, double, double);
using OpenGLColor4dvFn = void (*)(double const*);
using OpenGLColor4fFn = void (*)(float, float, float, float);
using OpenGLColor4fvFn = void (*)(float const*);
using OpenGLColor4iFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLColor4ivFn = void (*)(std::int32_t const*);
using OpenGLColor4sFn = void (*)(std::int16_t, std::int16_t, std::int16_t, std::int16_t);
using OpenGLColor4svFn = void (*)(std::int16_t const*);
using OpenGLColor4ubFn = void (*)(std::uint8_t, std::uint8_t, std::uint8_t, std::uint8_t);
using OpenGLColor4ubvFn = void (*)(std::uint8_t const*);
using OpenGLColor4uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLColor4uivFn = void (*)(std::uint32_t const*);
using OpenGLColor4usFn = void (*)(std::uint16_t, std::uint16_t, std::uint16_t, std::uint16_t);
using OpenGLColor4usvFn = void (*)(std::uint16_t const*);
using OpenGLColor4xFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLColorMaskFn = void (*)(std::uint8_t, std::uint8_t, std::uint8_t, std::uint8_t);
using OpenGLColorMaskiFn = void (*)(std::uint32_t, std::uint8_t, std::uint8_t, std::uint8_t, std::uint8_t);
using OpenGLColorMaterialFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLColorP3uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLColorP3uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLColorP4uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLColorP4uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLColorPointerFn = void (*)(std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLCompileShaderFn = void (*)(std::uint32_t);
using OpenGLCompressedTexImage1DFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t, void const*);
using OpenGLCompressedTexImage2DFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, void const*);
using OpenGLCompressedTexImage3DFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, void const*);
using OpenGLCompressedTexSubImage1DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLCompressedTexSubImage2DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLCompressedTexSubImage3DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLCompressedTextureSubImage1DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLCompressedTextureSubImage2DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLCompressedTextureSubImage3DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLCopyBufferSubDataFn = void (*)(std::uint32_t, std::uint32_t, std::intptr_t, std::intptr_t, std::int64_t);
using OpenGLCopyImageSubDataFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLCopyNamedBufferSubDataFn = void (*)(std::uint32_t, std::uint32_t, std::intptr_t, std::intptr_t, std::int64_t);
using OpenGLCopyPixelsFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t);
using OpenGLCopyTexImage1DFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLCopyTexImage2DFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLCopyTexSubImage1DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLCopyTexSubImage2DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLCopyTexSubImage3DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLCopyTextureSubImage1DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLCopyTextureSubImage2DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLCopyTextureSubImage3DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLCreateBuffersFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLCreateFramebuffersFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLCreateProgramFn = std::uint32_t (*)();
using OpenGLCreateProgramPipelinesFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLCreateQueriesFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t*);
using OpenGLCreateRenderbuffersFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLCreateSamplersFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLCreateShaderFn = std::uint32_t (*)(std::uint32_t);
using OpenGLCreateShaderProgramvFn = std::uint32_t (*)(std::uint32_t, std::int32_t, char const* const*);
using OpenGLCreateTexturesFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t*);
using OpenGLCreateTransformFeedbacksFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLCreateVertexArraysFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLCullFaceFn = void (*)(std::uint32_t);
using OpenGLDebugMessageCallbackFn = void (*)(void*, void const*);
using OpenGLDebugMessageControlFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t const*, std::uint8_t);
using OpenGLDebugMessageInsertFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, char const*);
using OpenGLDeleteBuffersFn = void (*)(std::int32_t, std::uint32_t const*);
using OpenGLDeleteFramebuffersFn = void (*)(std::int32_t, std::uint32_t const*);
using OpenGLDeleteListsFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLDeleteProgramFn = void (*)(std::uint32_t);
using OpenGLDeleteProgramPipelinesFn = void (*)(std::int32_t, std::uint32_t const*);
using OpenGLDeleteQueriesFn = void (*)(std::int32_t, std::uint32_t const*);
using OpenGLDeleteRenderbuffersFn = void (*)(std::int32_t, std::uint32_t const*);
using OpenGLDeleteSamplersFn = void (*)(std::int32_t, std::uint32_t const*);
using OpenGLDeleteShaderFn = void (*)(std::uint32_t);
using OpenGLDeleteSyncFn = void (*)(void*);
using OpenGLDeleteTexturesFn = void (*)(std::int32_t, std::uint32_t const*);
using OpenGLDeleteTransformFeedbacksFn = void (*)(std::int32_t, std::uint32_t const*);
using OpenGLDeleteVertexArraysFn = void (*)(std::int32_t, std::uint32_t const*);
using OpenGLDepthFuncFn = void (*)(std::uint32_t);
using OpenGLDepthMaskFn = void (*)(std::uint8_t);
using OpenGLDepthRangeFn = void (*)(double, double);
using OpenGLDepthRangeArrayvFn = void (*)(std::uint32_t, std::int32_t, double const*);
using OpenGLDepthRangeIndexedFn = void (*)(std::uint32_t, double, double);
using OpenGLDepthRangefFn = void (*)(float, float);
using OpenGLDepthRangexFn = void (*)(std::int32_t, std::int32_t);
using OpenGLDetachShaderFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLDisableFn = void (*)(std::uint32_t);
using OpenGLDisableClientStateFn = void (*)(std::uint32_t);
using OpenGLDisableVertexArrayAttribFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLDisableVertexAttribArrayFn = void (*)(std::uint32_t);
using OpenGLDisableiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLDispatchComputeFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLDispatchComputeIndirectFn = void (*)(std::intptr_t);
using OpenGLDrawArraysFn = void (*)(std::uint32_t, std::int32_t, std::int32_t);
using OpenGLDrawArraysIndirectFn = void (*)(std::uint32_t, void const*);
using OpenGLDrawArraysInstancedFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLDrawArraysInstancedBaseInstanceFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t);
using OpenGLDrawBufferFn = void (*)(std::uint32_t);
using OpenGLDrawBuffersFn = void (*)(std::int32_t, std::uint32_t const*);
using OpenGLDrawElementsFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, void const*);
using OpenGLDrawElementsBaseVertexFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, void const*, std::int32_t);
using OpenGLDrawElementsIndirectFn = void (*)(std::uint32_t, std::uint32_t, void const*);
using OpenGLDrawElementsInstancedFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, void const*, std::int32_t);
using OpenGLDrawElementsInstancedBaseInstanceFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, void const*, std::int32_t, std::uint32_t);
using OpenGLDrawElementsInstancedBaseVertexFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, void const*, std::int32_t, std::int32_t);
using OpenGLDrawElementsInstancedBaseVertexBaseInstanceFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, void const*, std::int32_t, std::int32_t, std::uint32_t);
using OpenGLDrawPixelsFn = void (*)(std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLDrawRangeElementsFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t, void const*);
using OpenGLDrawRangeElementsBaseVertexFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t, void const*, std::int32_t);
using OpenGLDrawTransformFeedbackFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLDrawTransformFeedbackInstancedFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLDrawTransformFeedbackStreamFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLDrawTransformFeedbackStreamInstancedFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLEdgeFlagFn = void (*)(std::uint8_t);
using OpenGLEdgeFlagPointerFn = void (*)(std::int32_t, void const*);
using OpenGLEdgeFlagvFn = void (*)(std::uint8_t const*);
using OpenGLEnableFn = void (*)(std::uint32_t);
using OpenGLEnableClientStateFn = void (*)(std::uint32_t);
using OpenGLEnableVertexArrayAttribFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLEnableVertexAttribArrayFn = void (*)(std::uint32_t);
using OpenGLEnableiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLEndFn = void (*)();
using OpenGLEndConditionalRenderFn = void (*)();
using OpenGLEndListFn = void (*)();
using OpenGLEndQueryFn = void (*)(std::uint32_t);
using OpenGLEndQueryIndexedFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLEndTransformFeedbackFn = void (*)();
using OpenGLEvalCoord1dFn = void (*)(double);
using OpenGLEvalCoord1dvFn = void (*)(double const*);
using OpenGLEvalCoord1fFn = void (*)(float);
using OpenGLEvalCoord1fvFn = void (*)(float const*);
using OpenGLEvalCoord2dFn = void (*)(double, double);
using OpenGLEvalCoord2dvFn = void (*)(double const*);
using OpenGLEvalCoord2fFn = void (*)(float, float);
using OpenGLEvalCoord2fvFn = void (*)(float const*);
using OpenGLEvalMesh1Fn = void (*)(std::uint32_t, std::int32_t, std::int32_t);
using OpenGLEvalMesh2Fn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLEvalPoint1Fn = void (*)(std::int32_t);
using OpenGLEvalPoint2Fn = void (*)(std::int32_t, std::int32_t);
using OpenGLFeedbackBufferFn = void (*)(std::int32_t, std::uint32_t, float*);
using OpenGLFenceSyncFn = void* (*)(std::uint32_t, std::uint32_t);
using OpenGLFinishFn = void (*)();
using OpenGLFlushFn = void (*)();
using OpenGLFlushMappedBufferRangeFn = void (*)(std::uint32_t, std::intptr_t, std::int64_t);
using OpenGLFlushMappedNamedBufferRangeFn = void (*)(std::uint32_t, std::intptr_t, std::int64_t);
using OpenGLFogCoordPointerFn = void (*)(std::uint32_t, std::int32_t, void const*);
using OpenGLFogCoorddFn = void (*)(double);
using OpenGLFogCoorddvFn = void (*)(double const*);
using OpenGLFogCoordfFn = void (*)(float);
using OpenGLFogCoordfvFn = void (*)(float const*);
using OpenGLFogfFn = void (*)(std::uint32_t, float);
using OpenGLFogfvFn = void (*)(std::uint32_t, float const*);
using OpenGLFogiFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLFogivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLFogxFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLFogxvFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLFramebufferParameteriFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLFramebufferRenderbufferFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLFramebufferTextureFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLFramebufferTexture1DFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLFramebufferTexture2DFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLFramebufferTexture3DFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::int32_t);
using OpenGLFramebufferTextureLayerFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::int32_t);
using OpenGLFrontFaceFn = void (*)(std::uint32_t);
using OpenGLFrustumFn = void (*)(double, double, double, double, double, double);
using OpenGLFrustumfFn = void (*)(float, float, float, float, float, float);
using OpenGLFrustumxFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLGenBuffersFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLGenFramebuffersFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLGenListsFn = std::uint32_t (*)(std::int32_t);
using OpenGLGenProgramPipelinesFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLGenQueriesFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLGenRenderbuffersFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLGenSamplersFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLGenTexturesFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLGenTransformFeedbacksFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLGenVertexArraysFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLGenerateMipmapFn = void (*)(std::uint32_t);
using OpenGLGenerateTextureMipmapFn = void (*)(std::uint32_t);
using OpenGLGetActiveAtomicCounterBufferivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetActiveAttribFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t*, std::int32_t*, std::uint32_t*, char*);
using OpenGLGetActiveSubroutineNameFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::int32_t*, char*);
using OpenGLGetActiveSubroutineUniformNameFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::int32_t*, char*);
using OpenGLGetActiveSubroutineUniformivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetActiveUniformFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t*, std::int32_t*, std::uint32_t*, char*);
using OpenGLGetActiveUniformBlockNameFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t*, char*);
using OpenGLGetActiveUniformBlockivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetActiveUniformNameFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t*, char*);
using OpenGLGetActiveUniformsivFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*, std::uint32_t, std::int32_t*);
using OpenGLGetAttachedShadersFn = void (*)(std::uint32_t, std::int32_t, std::int32_t*, std::uint32_t*);
using OpenGLGetAttribLocationFn = std::int32_t (*)(std::uint32_t, char const*);
using OpenGLGetBooleani_vFn = void (*)(std::uint32_t, std::uint32_t, std::uint8_t*);
using OpenGLGetBooleanvFn = void (*)(std::uint32_t, std::uint8_t*);
using OpenGLGetBufferParameteri64vFn = void (*)(std::uint32_t, std::uint32_t, std::int64_t*);
using OpenGLGetBufferParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetBufferPointervFn = void (*)(std::uint32_t, std::uint32_t, void**);
using OpenGLGetBufferSubDataFn = void (*)(std::uint32_t, std::intptr_t, std::int64_t, void*);
using OpenGLGetClipPlaneFn = void (*)(std::uint32_t, double*);
using OpenGLGetClipPlanefFn = void (*)(std::uint32_t, float*);
using OpenGLGetClipPlanexFn = void (*)(std::uint32_t, std::int32_t*);
using OpenGLGetCompressedTexImageFn = void (*)(std::uint32_t, std::int32_t, void*);
using OpenGLGetCompressedTextureImageFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, void*);
using OpenGLGetCompressedTextureSubImageFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, void*);
using OpenGLGetDebugMessageLogFn = std::uint32_t (*)(std::uint32_t, std::int32_t, std::uint32_t*, std::uint32_t*, std::uint32_t*, std::uint32_t*, std::int32_t*, char*);
using OpenGLGetDoublei_vFn = void (*)(std::uint32_t, std::uint32_t, double*);
using OpenGLGetDoublevFn = void (*)(std::uint32_t, double*);
using OpenGLGetErrorFn = std::uint32_t (*)();
using OpenGLGetFixedvFn = void (*)(std::uint32_t, std::int32_t*);
using OpenGLGetFloati_vFn = void (*)(std::uint32_t, std::uint32_t, float*);
using OpenGLGetFloatvFn = void (*)(std::uint32_t, float*);
using OpenGLGetFragDataIndexFn = std::int32_t (*)(std::uint32_t, char const*);
using OpenGLGetFragDataLocationFn = std::int32_t (*)(std::uint32_t, char const*);
using OpenGLGetFramebufferAttachmentParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetFramebufferParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetGraphicsResetStatusFn = std::uint32_t (*)();
using OpenGLGetInteger64i_vFn = void (*)(std::uint32_t, std::uint32_t, std::int64_t*);
using OpenGLGetInteger64vFn = void (*)(std::uint32_t, std::int64_t*);
using OpenGLGetIntegeri_vFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetIntegervFn = void (*)(std::uint32_t, std::int32_t*);
using OpenGLGetInternalformati64vFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::int64_t*);
using OpenGLGetInternalformativFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::int32_t*);
using OpenGLGetLightfvFn = void (*)(std::uint32_t, std::uint32_t, float*);
using OpenGLGetLightivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetLightxvFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetMapdvFn = void (*)(std::uint32_t, std::uint32_t, double*);
using OpenGLGetMapfvFn = void (*)(std::uint32_t, std::uint32_t, float*);
using OpenGLGetMapivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetMaterialfvFn = void (*)(std::uint32_t, std::uint32_t, float*);
using OpenGLGetMaterialivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetMaterialxvFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetMultisamplefvFn = void (*)(std::uint32_t, std::uint32_t, float*);
using OpenGLGetNamedBufferParameteri64vFn = void (*)(std::uint32_t, std::uint32_t, std::int64_t*);
using OpenGLGetNamedBufferParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetNamedBufferPointervFn = void (*)(std::uint32_t, std::uint32_t, void**);
using OpenGLGetNamedBufferSubDataFn = void (*)(std::uint32_t, std::intptr_t, std::int64_t, void*);
using OpenGLGetNamedFramebufferAttachmentParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetNamedFramebufferParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetNamedRenderbufferParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetObjectLabelFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t*, char*);
using OpenGLGetObjectPtrLabelFn = void (*)(void const*, std::int32_t, std::int32_t*, char*);
using OpenGLGetPixelMapfvFn = void (*)(std::uint32_t, float*);
using OpenGLGetPixelMapuivFn = void (*)(std::uint32_t, std::uint32_t*);
using OpenGLGetPixelMapusvFn = void (*)(std::uint32_t, std::uint16_t*);
using OpenGLGetPointervFn = void (*)(std::uint32_t, void**);
using OpenGLGetPolygonStippleFn = void (*)(std::uint8_t*);
using OpenGLGetProgramBinaryFn = void (*)(std::uint32_t, std::int32_t, std::int32_t*, std::uint32_t*, void*);
using OpenGLGetProgramInfoLogFn = void (*)(std::uint32_t, std::int32_t, std::int32_t*, char*);
using OpenGLGetProgramInterfaceivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetProgramPipelineInfoLogFn = void (*)(std::uint32_t, std::int32_t, std::int32_t*, char*);
using OpenGLGetProgramPipelineivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetProgramResourceIndexFn = std::uint32_t (*)(std::uint32_t, std::uint32_t, char const*);
using OpenGLGetProgramResourceLocationFn = std::int32_t (*)(std::uint32_t, std::uint32_t, char const*);
using OpenGLGetProgramResourceLocationIndexFn = std::int32_t (*)(std::uint32_t, std::uint32_t, char const*);
using OpenGLGetProgramResourceNameFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::int32_t*, char*);
using OpenGLGetProgramResourceivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t const*, std::int32_t, std::int32_t*, std::int32_t*);
using OpenGLGetProgramStageivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetProgramivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetQueryBufferObjecti64vFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::intptr_t);
using OpenGLGetQueryBufferObjectivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::intptr_t);
using OpenGLGetQueryBufferObjectui64vFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::intptr_t);
using OpenGLGetQueryBufferObjectuivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::intptr_t);
using OpenGLGetQueryIndexedivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetQueryObjecti64vFn = void (*)(std::uint32_t, std::uint32_t, std::int64_t*);
using OpenGLGetQueryObjectivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetQueryObjectui64vFn = void (*)(std::uint32_t, std::uint32_t, std::uint64_t*);
using OpenGLGetQueryObjectuivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t*);
using OpenGLGetQueryivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetRenderbufferParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetSamplerParameterIivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetSamplerParameterIuivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t*);
using OpenGLGetSamplerParameterfvFn = void (*)(std::uint32_t, std::uint32_t, float*);
using OpenGLGetSamplerParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetShaderInfoLogFn = void (*)(std::uint32_t, std::int32_t, std::int32_t*, char*);
using OpenGLGetShaderPrecisionFormatFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*, std::int32_t*);
using OpenGLGetShaderSourceFn = void (*)(std::uint32_t, std::int32_t, std::int32_t*, char*);
using OpenGLGetShaderivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetStringFn = std::uint8_t const* (*)(std::uint32_t);
using OpenGLGetStringiFn = std::uint8_t const* (*)(std::uint32_t, std::uint32_t);
using OpenGLGetSubroutineIndexFn = std::uint32_t (*)(std::uint32_t, std::uint32_t, char const*);
using OpenGLGetSubroutineUniformLocationFn = std::int32_t (*)(std::uint32_t, std::uint32_t, char const*);
using OpenGLGetSyncivFn = void (*)(void*, std::uint32_t, std::int32_t, std::int32_t*, std::int32_t*);
using OpenGLGetTexEnvfvFn = void (*)(std::uint32_t, std::uint32_t, float*);
using OpenGLGetTexEnvivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetTexEnvxvFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetTexGendvFn = void (*)(std::uint32_t, std::uint32_t, double*);
using OpenGLGetTexGenfvFn = void (*)(std::uint32_t, std::uint32_t, float*);
using OpenGLGetTexGenivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetTexImageFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t, void*);
using OpenGLGetTexLevelParameterfvFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, float*);
using OpenGLGetTexLevelParameterivFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t*);
using OpenGLGetTexParameterIivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetTexParameterIuivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t*);
using OpenGLGetTexParameterfvFn = void (*)(std::uint32_t, std::uint32_t, float*);
using OpenGLGetTexParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetTexParameterxvFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetTextureImageFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t, std::int32_t, void*);
using OpenGLGetTextureLevelParameterfvFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, float*);
using OpenGLGetTextureLevelParameterivFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t*);
using OpenGLGetTextureParameterIivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetTextureParameterIuivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t*);
using OpenGLGetTextureParameterfvFn = void (*)(std::uint32_t, std::uint32_t, float*);
using OpenGLGetTextureParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetTextureSubImageFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, std::int32_t, void*);
using OpenGLGetTransformFeedbackVaryingFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t*, std::int32_t*, std::uint32_t*, char*);
using OpenGLGetTransformFeedbacki64_vFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int64_t*);
using OpenGLGetTransformFeedbacki_vFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetTransformFeedbackivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetUniformBlockIndexFn = std::uint32_t (*)(std::uint32_t, char const*);
using OpenGLGetUniformIndicesFn = void (*)(std::uint32_t, std::int32_t, char const* const*, std::uint32_t*);
using OpenGLGetUniformLocationFn = std::int32_t (*)(std::uint32_t, char const*);
using OpenGLGetUniformSubroutineuivFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t*);
using OpenGLGetUniformdvFn = void (*)(std::uint32_t, std::int32_t, double*);
using OpenGLGetUniformfvFn = void (*)(std::uint32_t, std::int32_t, float*);
using OpenGLGetUniformivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t*);
using OpenGLGetUniformuivFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t*);
using OpenGLGetVertexArrayIndexed64ivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int64_t*);
using OpenGLGetVertexArrayIndexedivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetVertexArrayivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetVertexAttribIivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetVertexAttribIuivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t*);
using OpenGLGetVertexAttribLdvFn = void (*)(std::uint32_t, std::uint32_t, double*);
using OpenGLGetVertexAttribPointervFn = void (*)(std::uint32_t, std::uint32_t, void**);
using OpenGLGetVertexAttribdvFn = void (*)(std::uint32_t, std::uint32_t, double*);
using OpenGLGetVertexAttribfvFn = void (*)(std::uint32_t, std::uint32_t, float*);
using OpenGLGetVertexAttribivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t*);
using OpenGLGetnColorTableFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, void*);
using OpenGLGetnCompressedTexImageFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, void*);
using OpenGLGetnConvolutionFilterFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, void*);
using OpenGLGetnHistogramFn = void (*)(std::uint32_t, std::uint8_t, std::uint32_t, std::uint32_t, std::int32_t, void*);
using OpenGLGetnMapdvFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, double*);
using OpenGLGetnMapfvFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, float*);
using OpenGLGetnMapivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t*);
using OpenGLGetnMinmaxFn = void (*)(std::uint32_t, std::uint8_t, std::uint32_t, std::uint32_t, std::int32_t, void*);
using OpenGLGetnPixelMapfvFn = void (*)(std::uint32_t, std::int32_t, float*);
using OpenGLGetnPixelMapuivFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t*);
using OpenGLGetnPixelMapusvFn = void (*)(std::uint32_t, std::int32_t, std::uint16_t*);
using OpenGLGetnPolygonStippleFn = void (*)(std::int32_t, std::uint8_t*);
using OpenGLGetnSeparableFilterFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, void*, std::int32_t, void*, void*);
using OpenGLGetnTexImageFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t, std::int32_t, void*);
using OpenGLGetnUniformdvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, double*);
using OpenGLGetnUniformfvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, float*);
using OpenGLGetnUniformivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t*);
using OpenGLGetnUniformuivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint32_t*);
using OpenGLHintFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLIndexMaskFn = void (*)(std::uint32_t);
using OpenGLIndexPointerFn = void (*)(std::uint32_t, std::int32_t, void const*);
using OpenGLIndexdFn = void (*)(double);
using OpenGLIndexdvFn = void (*)(double const*);
using OpenGLIndexfFn = void (*)(float);
using OpenGLIndexfvFn = void (*)(float const*);
using OpenGLIndexiFn = void (*)(std::int32_t);
using OpenGLIndexivFn = void (*)(std::int32_t const*);
using OpenGLIndexsFn = void (*)(std::int16_t);
using OpenGLIndexsvFn = void (*)(std::int16_t const*);
using OpenGLIndexubFn = void (*)(std::uint8_t);
using OpenGLIndexubvFn = void (*)(std::uint8_t const*);
using OpenGLInitNamesFn = void (*)();
using OpenGLInterleavedArraysFn = void (*)(std::uint32_t, std::int32_t, void const*);
using OpenGLInvalidateBufferDataFn = void (*)(std::uint32_t);
using OpenGLInvalidateBufferSubDataFn = void (*)(std::uint32_t, std::intptr_t, std::int64_t);
using OpenGLInvalidateFramebufferFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*);
using OpenGLInvalidateNamedFramebufferDataFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*);
using OpenGLInvalidateNamedFramebufferSubDataFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLInvalidateSubFramebufferFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLInvalidateTexImageFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLInvalidateTexSubImageFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLIsBufferFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsEnabledFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsEnablediFn = std::uint8_t (*)(std::uint32_t, std::uint32_t);
using OpenGLIsFramebufferFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsListFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsProgramFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsProgramPipelineFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsQueryFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsRenderbufferFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsSamplerFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsShaderFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsSyncFn = std::uint8_t (*)(void*);
using OpenGLIsTextureFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsTransformFeedbackFn = std::uint8_t (*)(std::uint32_t);
using OpenGLIsVertexArrayFn = std::uint8_t (*)(std::uint32_t);
using OpenGLLightModelfFn = void (*)(std::uint32_t, float);
using OpenGLLightModelfvFn = void (*)(std::uint32_t, float const*);
using OpenGLLightModeliFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLLightModelivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLLightModelxFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLLightModelxvFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLLightfFn = void (*)(std::uint32_t, std::uint32_t, float);
using OpenGLLightfvFn = void (*)(std::uint32_t, std::uint32_t, float const*);
using OpenGLLightiFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLLightivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLLightxFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLLightxvFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLLineStippleFn = void (*)(std::int32_t, std::uint16_t);
using OpenGLLineWidthFn = void (*)(float);
using OpenGLLineWidthxFn = void (*)(std::int32_t);
using OpenGLLinkProgramFn = void (*)(std::uint32_t);
using OpenGLListBaseFn = void (*)(std::uint32_t);
using OpenGLLoadIdentityFn = void (*)();
using OpenGLLoadMatrixdFn = void (*)(double const*);
using OpenGLLoadMatrixfFn = void (*)(float const*);
using OpenGLLoadMatrixxFn = void (*)(std::int32_t const*);
using OpenGLLoadNameFn = void (*)(std::uint32_t);
using OpenGLLoadTransposeMatrixdFn = void (*)(double const*);
using OpenGLLoadTransposeMatrixfFn = void (*)(float const*);
using OpenGLLogicOpFn = void (*)(std::uint32_t);
using OpenGLMap1dFn = void (*)(std::uint32_t, double, double, std::int32_t, std::int32_t, double const*);
using OpenGLMap1fFn = void (*)(std::uint32_t, float, float, std::int32_t, std::int32_t, float const*);
using OpenGLMap2dFn = void (*)(std::uint32_t, double, double, std::int32_t, std::int32_t, double, double, std::int32_t, std::int32_t, double const*);
using OpenGLMap2fFn = void (*)(std::uint32_t, float, float, std::int32_t, std::int32_t, float, float, std::int32_t, std::int32_t, float const*);
using OpenGLMapBufferFn = void* (*)(std::uint32_t, std::uint32_t);
using OpenGLMapBufferRangeFn = void* (*)(std::uint32_t, std::intptr_t, std::int64_t, std::uint32_t);
using OpenGLMapGrid1dFn = void (*)(std::int32_t, double, double);
using OpenGLMapGrid1fFn = void (*)(std::int32_t, float, float);
using OpenGLMapGrid2dFn = void (*)(std::int32_t, double, double, std::int32_t, double, double);
using OpenGLMapGrid2fFn = void (*)(std::int32_t, float, float, std::int32_t, float, float);
using OpenGLMapNamedBufferFn = void* (*)(std::uint32_t, std::uint32_t);
using OpenGLMapNamedBufferRangeFn = void* (*)(std::uint32_t, std::intptr_t, std::int64_t, std::uint32_t);
using OpenGLMaterialfFn = void (*)(std::uint32_t, std::uint32_t, float);
using OpenGLMaterialfvFn = void (*)(std::uint32_t, std::uint32_t, float const*);
using OpenGLMaterialiFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLMaterialivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLMaterialxFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLMaterialxvFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLMatrixModeFn = void (*)(std::uint32_t);
using OpenGLMemoryBarrierFn = void (*)(std::uint32_t);
using OpenGLMemoryBarrierByRegionFn = void (*)(std::uint32_t);
using OpenGLMinSampleShadingFn = void (*)(float);
using OpenGLMultMatrixdFn = void (*)(double const*);
using OpenGLMultMatrixfFn = void (*)(float const*);
using OpenGLMultMatrixxFn = void (*)(std::int32_t const*);
using OpenGLMultTransposeMatrixdFn = void (*)(double const*);
using OpenGLMultTransposeMatrixfFn = void (*)(float const*);
using OpenGLMultiDrawArraysFn = void (*)(std::uint32_t, std::int32_t const*, std::int32_t const*, std::int32_t);
using OpenGLMultiDrawArraysIndirectFn = void (*)(std::uint32_t, void const*, std::int32_t, std::int32_t);
using OpenGLMultiDrawArraysIndirectCountFn = void (*)(std::uint32_t, void const*, std::intptr_t, std::int32_t, std::int32_t);
using OpenGLMultiDrawElementsFn = void (*)(std::uint32_t, std::int32_t const*, std::uint32_t, void const* const*, std::int32_t);
using OpenGLMultiDrawElementsBaseVertexFn = void (*)(std::uint32_t, std::int32_t const*, std::uint32_t, void const* const*, std::int32_t, std::int32_t const*);
using OpenGLMultiDrawElementsIndirectFn = void (*)(std::uint32_t, std::uint32_t, void const*, std::int32_t, std::int32_t);
using OpenGLMultiDrawElementsIndirectCountFn = void (*)(std::uint32_t, std::uint32_t, void const*, std::intptr_t, std::int32_t, std::int32_t);
using OpenGLMultiTexCoord1dFn = void (*)(std::uint32_t, double);
using OpenGLMultiTexCoord1dvFn = void (*)(std::uint32_t, double const*);
using OpenGLMultiTexCoord1fFn = void (*)(std::uint32_t, float);
using OpenGLMultiTexCoord1fvFn = void (*)(std::uint32_t, float const*);
using OpenGLMultiTexCoord1iFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLMultiTexCoord1ivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLMultiTexCoord1sFn = void (*)(std::uint32_t, std::int16_t);
using OpenGLMultiTexCoord1svFn = void (*)(std::uint32_t, std::int16_t const*);
using OpenGLMultiTexCoord2dFn = void (*)(std::uint32_t, double, double);
using OpenGLMultiTexCoord2dvFn = void (*)(std::uint32_t, double const*);
using OpenGLMultiTexCoord2fFn = void (*)(std::uint32_t, float, float);
using OpenGLMultiTexCoord2fvFn = void (*)(std::uint32_t, float const*);
using OpenGLMultiTexCoord2iFn = void (*)(std::uint32_t, std::int32_t, std::int32_t);
using OpenGLMultiTexCoord2ivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLMultiTexCoord2sFn = void (*)(std::uint32_t, std::int16_t, std::int16_t);
using OpenGLMultiTexCoord2svFn = void (*)(std::uint32_t, std::int16_t const*);
using OpenGLMultiTexCoord3dFn = void (*)(std::uint32_t, double, double, double);
using OpenGLMultiTexCoord3dvFn = void (*)(std::uint32_t, double const*);
using OpenGLMultiTexCoord3fFn = void (*)(std::uint32_t, float, float, float);
using OpenGLMultiTexCoord3fvFn = void (*)(std::uint32_t, float const*);
using OpenGLMultiTexCoord3iFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLMultiTexCoord3ivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLMultiTexCoord3sFn = void (*)(std::uint32_t, std::int16_t, std::int16_t, std::int16_t);
using OpenGLMultiTexCoord3svFn = void (*)(std::uint32_t, std::int16_t const*);
using OpenGLMultiTexCoord4dFn = void (*)(std::uint32_t, double, double, double, double);
using OpenGLMultiTexCoord4dvFn = void (*)(std::uint32_t, double const*);
using OpenGLMultiTexCoord4fFn = void (*)(std::uint32_t, float, float, float, float);
using OpenGLMultiTexCoord4fvFn = void (*)(std::uint32_t, float const*);
using OpenGLMultiTexCoord4iFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLMultiTexCoord4ivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLMultiTexCoord4sFn = void (*)(std::uint32_t, std::int16_t, std::int16_t, std::int16_t, std::int16_t);
using OpenGLMultiTexCoord4svFn = void (*)(std::uint32_t, std::int16_t const*);
using OpenGLMultiTexCoord4xFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLMultiTexCoordP1uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLMultiTexCoordP1uivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t const*);
using OpenGLMultiTexCoordP2uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLMultiTexCoordP2uivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t const*);
using OpenGLMultiTexCoordP3uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLMultiTexCoordP3uivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t const*);
using OpenGLMultiTexCoordP4uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLMultiTexCoordP4uivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t const*);
using OpenGLNamedBufferDataFn = void (*)(std::uint32_t, std::int64_t, void const*, std::uint32_t);
using OpenGLNamedBufferStorageFn = void (*)(std::uint32_t, std::int64_t, void const*, std::uint32_t);
using OpenGLNamedBufferSubDataFn = void (*)(std::uint32_t, std::intptr_t, std::int64_t, void const*);
using OpenGLNamedFramebufferDrawBufferFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLNamedFramebufferDrawBuffersFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*);
using OpenGLNamedFramebufferParameteriFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLNamedFramebufferReadBufferFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLNamedFramebufferRenderbufferFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLNamedFramebufferTextureFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLNamedFramebufferTextureLayerFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::int32_t, std::int32_t);
using OpenGLNamedRenderbufferStorageFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t);
using OpenGLNamedRenderbufferStorageMultisampleFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t);
using OpenGLNewListFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLNormal3bFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLNormal3bvFn = void (*)(std::int32_t const*);
using OpenGLNormal3dFn = void (*)(double, double, double);
using OpenGLNormal3dvFn = void (*)(double const*);
using OpenGLNormal3fFn = void (*)(float, float, float);
using OpenGLNormal3fvFn = void (*)(float const*);
using OpenGLNormal3iFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLNormal3ivFn = void (*)(std::int32_t const*);
using OpenGLNormal3sFn = void (*)(std::int16_t, std::int16_t, std::int16_t);
using OpenGLNormal3svFn = void (*)(std::int16_t const*);
using OpenGLNormal3xFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLNormalP3uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLNormalP3uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLNormalPointerFn = void (*)(std::uint32_t, std::int32_t, void const*);
using OpenGLObjectLabelFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, char const*);
using OpenGLObjectPtrLabelFn = void (*)(void const*, std::int32_t, char const*);
using OpenGLOrthoFn = void (*)(double, double, double, double, double, double);
using OpenGLOrthofFn = void (*)(float, float, float, float, float, float);
using OpenGLOrthoxFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLPassThroughFn = void (*)(float);
using OpenGLPatchParameterfvFn = void (*)(std::uint32_t, float const*);
using OpenGLPatchParameteriFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLPauseTransformFeedbackFn = void (*)();
using OpenGLPixelMapfvFn = void (*)(std::uint32_t, std::int32_t, float const*);
using OpenGLPixelMapuivFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*);
using OpenGLPixelMapusvFn = void (*)(std::uint32_t, std::int32_t, std::uint16_t const*);
using OpenGLPixelStorefFn = void (*)(std::uint32_t, float);
using OpenGLPixelStoreiFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLPixelTransferfFn = void (*)(std::uint32_t, float);
using OpenGLPixelTransferiFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLPixelZoomFn = void (*)(float, float);
using OpenGLPointParameterfFn = void (*)(std::uint32_t, float);
using OpenGLPointParameterfvFn = void (*)(std::uint32_t, float const*);
using OpenGLPointParameteriFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLPointParameterivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLPointParameterxFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLPointParameterxvFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLPointSizeFn = void (*)(float);
using OpenGLPointSizexFn = void (*)(std::int32_t);
using OpenGLPolygonModeFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLPolygonOffsetFn = void (*)(float, float);
using OpenGLPolygonOffsetClampFn = void (*)(float, float, float);
using OpenGLPolygonOffsetxFn = void (*)(std::int32_t, std::int32_t);
using OpenGLPolygonStippleFn = void (*)(std::uint8_t const*);
using OpenGLPopAttribFn = void (*)();
using OpenGLPopClientAttribFn = void (*)();
using OpenGLPopDebugGroupFn = void (*)();
using OpenGLPopMatrixFn = void (*)();
using OpenGLPopNameFn = void (*)();
using OpenGLPrimitiveBoundingBoxFn = void (*)(float, float, float, float, float, float, float, float);
using OpenGLPrimitiveRestartIndexFn = void (*)(std::uint32_t);
using OpenGLPrioritizeTexturesFn = void (*)(std::int32_t, std::uint32_t const*, float const*);
using OpenGLProgramBinaryFn = void (*)(std::uint32_t, std::uint32_t, void const*, std::int32_t);
using OpenGLProgramParameteriFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLProgramUniform1dFn = void (*)(std::uint32_t, std::int32_t, double);
using OpenGLProgramUniform1dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, double const*);
using OpenGLProgramUniform1fFn = void (*)(std::uint32_t, std::int32_t, float);
using OpenGLProgramUniform1fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, float const*);
using OpenGLProgramUniform1iFn = void (*)(std::uint32_t, std::int32_t, std::int32_t);
using OpenGLProgramUniform1ivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t const*);
using OpenGLProgramUniform1uiFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t);
using OpenGLProgramUniform1uivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint32_t const*);
using OpenGLProgramUniform2dFn = void (*)(std::uint32_t, std::int32_t, double, double);
using OpenGLProgramUniform2dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, double const*);
using OpenGLProgramUniform2fFn = void (*)(std::uint32_t, std::int32_t, float, float);
using OpenGLProgramUniform2fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, float const*);
using OpenGLProgramUniform2iFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLProgramUniform2ivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t const*);
using OpenGLProgramUniform2uiFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t);
using OpenGLProgramUniform2uivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint32_t const*);
using OpenGLProgramUniform3dFn = void (*)(std::uint32_t, std::int32_t, double, double, double);
using OpenGLProgramUniform3dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, double const*);
using OpenGLProgramUniform3fFn = void (*)(std::uint32_t, std::int32_t, float, float, float);
using OpenGLProgramUniform3fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, float const*);
using OpenGLProgramUniform3iFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLProgramUniform3ivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t const*);
using OpenGLProgramUniform3uiFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLProgramUniform3uivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint32_t const*);
using OpenGLProgramUniform4dFn = void (*)(std::uint32_t, std::int32_t, double, double, double, double);
using OpenGLProgramUniform4dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, double const*);
using OpenGLProgramUniform4fFn = void (*)(std::uint32_t, std::int32_t, float, float, float, float);
using OpenGLProgramUniform4fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, float const*);
using OpenGLProgramUniform4iFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLProgramUniform4ivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t const*);
using OpenGLProgramUniform4uiFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLProgramUniform4uivFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint32_t const*);
using OpenGLProgramUniformMatrix2dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLProgramUniformMatrix2fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLProgramUniformMatrix2x3dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLProgramUniformMatrix2x3fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLProgramUniformMatrix2x4dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLProgramUniformMatrix2x4fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLProgramUniformMatrix3dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLProgramUniformMatrix3fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLProgramUniformMatrix3x2dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLProgramUniformMatrix3x2fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLProgramUniformMatrix3x4dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLProgramUniformMatrix3x4fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLProgramUniformMatrix4dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLProgramUniformMatrix4fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLProgramUniformMatrix4x2dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLProgramUniformMatrix4x2fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLProgramUniformMatrix4x3dvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLProgramUniformMatrix4x3fvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLProvokingVertexFn = void (*)(std::uint32_t);
using OpenGLPushAttribFn = void (*)(std::uint32_t);
using OpenGLPushClientAttribFn = void (*)(std::uint32_t);
using OpenGLPushDebugGroupFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, char const*);
using OpenGLPushMatrixFn = void (*)();
using OpenGLPushNameFn = void (*)(std::uint32_t);
using OpenGLQueryCounterFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLRasterPos2dFn = void (*)(double, double);
using OpenGLRasterPos2dvFn = void (*)(double const*);
using OpenGLRasterPos2fFn = void (*)(float, float);
using OpenGLRasterPos2fvFn = void (*)(float const*);
using OpenGLRasterPos2iFn = void (*)(std::int32_t, std::int32_t);
using OpenGLRasterPos2ivFn = void (*)(std::int32_t const*);
using OpenGLRasterPos2sFn = void (*)(std::int16_t, std::int16_t);
using OpenGLRasterPos2svFn = void (*)(std::int16_t const*);
using OpenGLRasterPos3dFn = void (*)(double, double, double);
using OpenGLRasterPos3dvFn = void (*)(double const*);
using OpenGLRasterPos3fFn = void (*)(float, float, float);
using OpenGLRasterPos3fvFn = void (*)(float const*);
using OpenGLRasterPos3iFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLRasterPos3ivFn = void (*)(std::int32_t const*);
using OpenGLRasterPos3sFn = void (*)(std::int16_t, std::int16_t, std::int16_t);
using OpenGLRasterPos3svFn = void (*)(std::int16_t const*);
using OpenGLRasterPos4dFn = void (*)(double, double, double, double);
using OpenGLRasterPos4dvFn = void (*)(double const*);
using OpenGLRasterPos4fFn = void (*)(float, float, float, float);
using OpenGLRasterPos4fvFn = void (*)(float const*);
using OpenGLRasterPos4iFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLRasterPos4ivFn = void (*)(std::int32_t const*);
using OpenGLRasterPos4sFn = void (*)(std::int16_t, std::int16_t, std::int16_t, std::int16_t);
using OpenGLRasterPos4svFn = void (*)(std::int16_t const*);
using OpenGLReadBufferFn = void (*)(std::uint32_t);
using OpenGLReadPixelsFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void*);
using OpenGLReadnPixelsFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, std::int32_t, void*);
using OpenGLRectdFn = void (*)(double, double, double, double);
using OpenGLRectdvFn = void (*)(double const*, double const*);
using OpenGLRectfFn = void (*)(float, float, float, float);
using OpenGLRectfvFn = void (*)(float const*, float const*);
using OpenGLRectiFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLRectivFn = void (*)(std::int32_t const*, std::int32_t const*);
using OpenGLRectsFn = void (*)(std::int16_t, std::int16_t, std::int16_t, std::int16_t);
using OpenGLRectsvFn = void (*)(std::int16_t const*, std::int16_t const*);
using OpenGLReleaseShaderCompilerFn = void (*)();
using OpenGLRenderModeFn = std::int32_t (*)(std::uint32_t);
using OpenGLRenderbufferStorageFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::int32_t);
using OpenGLRenderbufferStorageMultisampleFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t);
using OpenGLResumeTransformFeedbackFn = void (*)();
using OpenGLRotatedFn = void (*)(double, double, double, double);
using OpenGLRotatefFn = void (*)(float, float, float, float);
using OpenGLRotatexFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLSampleCoverageFn = void (*)(float, std::uint8_t);
using OpenGLSampleCoveragexFn = void (*)(std::int32_t, std::uint8_t);
using OpenGLSampleMaskiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLSamplerParameterIivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLSamplerParameterIuivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t const*);
using OpenGLSamplerParameterfFn = void (*)(std::uint32_t, std::uint32_t, float);
using OpenGLSamplerParameterfvFn = void (*)(std::uint32_t, std::uint32_t, float const*);
using OpenGLSamplerParameteriFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLSamplerParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLScaledFn = void (*)(double, double, double);
using OpenGLScalefFn = void (*)(float, float, float);
using OpenGLScalexFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLScissorFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLScissorArrayvFn = void (*)(std::uint32_t, std::int32_t, std::int32_t const*);
using OpenGLScissorIndexedFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLScissorIndexedvFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLSecondaryColor3bFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLSecondaryColor3bvFn = void (*)(std::int32_t const*);
using OpenGLSecondaryColor3dFn = void (*)(double, double, double);
using OpenGLSecondaryColor3dvFn = void (*)(double const*);
using OpenGLSecondaryColor3fFn = void (*)(float, float, float);
using OpenGLSecondaryColor3fvFn = void (*)(float const*);
using OpenGLSecondaryColor3iFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLSecondaryColor3ivFn = void (*)(std::int32_t const*);
using OpenGLSecondaryColor3sFn = void (*)(std::int16_t, std::int16_t, std::int16_t);
using OpenGLSecondaryColor3svFn = void (*)(std::int16_t const*);
using OpenGLSecondaryColor3ubFn = void (*)(std::uint8_t, std::uint8_t, std::uint8_t);
using OpenGLSecondaryColor3ubvFn = void (*)(std::uint8_t const*);
using OpenGLSecondaryColor3uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLSecondaryColor3uivFn = void (*)(std::uint32_t const*);
using OpenGLSecondaryColor3usFn = void (*)(std::uint16_t, std::uint16_t, std::uint16_t);
using OpenGLSecondaryColor3usvFn = void (*)(std::uint16_t const*);
using OpenGLSecondaryColorP3uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLSecondaryColorP3uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLSecondaryColorPointerFn = void (*)(std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLSelectBufferFn = void (*)(std::int32_t, std::uint32_t*);
using OpenGLShadeModelFn = void (*)(std::uint32_t);
using OpenGLShaderBinaryFn = void (*)(std::int32_t, std::uint32_t const*, std::uint32_t, void const*, std::int32_t);
using OpenGLShaderSourceFn = void (*)(std::uint32_t, std::int32_t, char const* const*, std::int32_t const*);
using OpenGLShaderStorageBlockBindingFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLSpecializeShaderFn = void (*)(std::uint32_t, char const*, std::uint32_t, std::uint32_t const*, std::uint32_t const*);
using OpenGLStencilFuncFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t);
using OpenGLStencilFuncSeparateFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t);
using OpenGLStencilMaskFn = void (*)(std::uint32_t);
using OpenGLStencilMaskSeparateFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLStencilOpFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLStencilOpSeparateFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLTexBufferFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLTexBufferRangeFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::intptr_t, std::int64_t);
using OpenGLTexCoord1dFn = void (*)(double);
using OpenGLTexCoord1dvFn = void (*)(double const*);
using OpenGLTexCoord1fFn = void (*)(float);
using OpenGLTexCoord1fvFn = void (*)(float const*);
using OpenGLTexCoord1iFn = void (*)(std::int32_t);
using OpenGLTexCoord1ivFn = void (*)(std::int32_t const*);
using OpenGLTexCoord1sFn = void (*)(std::int16_t);
using OpenGLTexCoord1svFn = void (*)(std::int16_t const*);
using OpenGLTexCoord2dFn = void (*)(double, double);
using OpenGLTexCoord2dvFn = void (*)(double const*);
using OpenGLTexCoord2fFn = void (*)(float, float);
using OpenGLTexCoord2fvFn = void (*)(float const*);
using OpenGLTexCoord2iFn = void (*)(std::int32_t, std::int32_t);
using OpenGLTexCoord2ivFn = void (*)(std::int32_t const*);
using OpenGLTexCoord2sFn = void (*)(std::int16_t, std::int16_t);
using OpenGLTexCoord2svFn = void (*)(std::int16_t const*);
using OpenGLTexCoord3dFn = void (*)(double, double, double);
using OpenGLTexCoord3dvFn = void (*)(double const*);
using OpenGLTexCoord3fFn = void (*)(float, float, float);
using OpenGLTexCoord3fvFn = void (*)(float const*);
using OpenGLTexCoord3iFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLTexCoord3ivFn = void (*)(std::int32_t const*);
using OpenGLTexCoord3sFn = void (*)(std::int16_t, std::int16_t, std::int16_t);
using OpenGLTexCoord3svFn = void (*)(std::int16_t const*);
using OpenGLTexCoord4dFn = void (*)(double, double, double, double);
using OpenGLTexCoord4dvFn = void (*)(double const*);
using OpenGLTexCoord4fFn = void (*)(float, float, float, float);
using OpenGLTexCoord4fvFn = void (*)(float const*);
using OpenGLTexCoord4iFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLTexCoord4ivFn = void (*)(std::int32_t const*);
using OpenGLTexCoord4sFn = void (*)(std::int16_t, std::int16_t, std::int16_t, std::int16_t);
using OpenGLTexCoord4svFn = void (*)(std::int16_t const*);
using OpenGLTexCoordP1uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLTexCoordP1uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLTexCoordP2uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLTexCoordP2uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLTexCoordP3uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLTexCoordP3uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLTexCoordP4uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLTexCoordP4uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLTexCoordPointerFn = void (*)(std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLTexEnvfFn = void (*)(std::uint32_t, std::uint32_t, float);
using OpenGLTexEnvfvFn = void (*)(std::uint32_t, std::uint32_t, float const*);
using OpenGLTexEnviFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLTexEnvivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLTexEnvxFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLTexEnvxvFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLTexGendFn = void (*)(std::uint32_t, std::uint32_t, double);
using OpenGLTexGendvFn = void (*)(std::uint32_t, std::uint32_t, double const*);
using OpenGLTexGenfFn = void (*)(std::uint32_t, std::uint32_t, float);
using OpenGLTexGenfvFn = void (*)(std::uint32_t, std::uint32_t, float const*);
using OpenGLTexGeniFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLTexGenivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLTexImage1DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLTexImage2DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLTexImage2DMultisampleFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::uint8_t);
using OpenGLTexImage3DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLTexImage3DMultisampleFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::uint8_t);
using OpenGLTexParameterIivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLTexParameterIuivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t const*);
using OpenGLTexParameterfFn = void (*)(std::uint32_t, std::uint32_t, float);
using OpenGLTexParameterfvFn = void (*)(std::uint32_t, std::uint32_t, float const*);
using OpenGLTexParameteriFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLTexParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLTexParameterxFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLTexParameterxvFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLTexStorage1DFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t);
using OpenGLTexStorage2DFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t);
using OpenGLTexStorage2DMultisampleFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::uint8_t);
using OpenGLTexStorage3DFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLTexStorage3DMultisampleFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::uint8_t);
using OpenGLTexSubImage1DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLTexSubImage2DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLTexSubImage3DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLTextureBarrierFn = void (*)();
using OpenGLTextureBufferFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLTextureBufferRangeFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::intptr_t, std::int64_t);
using OpenGLTextureParameterIivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLTextureParameterIuivFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t const*);
using OpenGLTextureParameterfFn = void (*)(std::uint32_t, std::uint32_t, float);
using OpenGLTextureParameterfvFn = void (*)(std::uint32_t, std::uint32_t, float const*);
using OpenGLTextureParameteriFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t);
using OpenGLTextureParameterivFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t const*);
using OpenGLTextureStorage1DFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t);
using OpenGLTextureStorage2DFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t);
using OpenGLTextureStorage2DMultisampleFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::uint8_t);
using OpenGLTextureStorage3DFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLTextureStorage3DMultisampleFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::uint8_t);
using OpenGLTextureSubImage1DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLTextureSubImage2DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLTextureSubImage3DFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::uint32_t, std::uint32_t, void const*);
using OpenGLTextureViewFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLTransformFeedbackBufferBaseFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLTransformFeedbackBufferRangeFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::intptr_t, std::int64_t);
using OpenGLTransformFeedbackVaryingsFn = void (*)(std::uint32_t, std::int32_t, char const* const*, std::uint32_t);
using OpenGLTranslatedFn = void (*)(double, double, double);
using OpenGLTranslatefFn = void (*)(float, float, float);
using OpenGLTranslatexFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLUniform1dFn = void (*)(std::int32_t, double);
using OpenGLUniform1dvFn = void (*)(std::int32_t, std::int32_t, double const*);
using OpenGLUniform1fFn = void (*)(std::int32_t, float);
using OpenGLUniform1fvFn = void (*)(std::int32_t, std::int32_t, float const*);
using OpenGLUniform1iFn = void (*)(std::int32_t, std::int32_t);
using OpenGLUniform1ivFn = void (*)(std::int32_t, std::int32_t, std::int32_t const*);
using OpenGLUniform1uiFn = void (*)(std::int32_t, std::uint32_t);
using OpenGLUniform1uivFn = void (*)(std::int32_t, std::int32_t, std::uint32_t const*);
using OpenGLUniform2dFn = void (*)(std::int32_t, double, double);
using OpenGLUniform2dvFn = void (*)(std::int32_t, std::int32_t, double const*);
using OpenGLUniform2fFn = void (*)(std::int32_t, float, float);
using OpenGLUniform2fvFn = void (*)(std::int32_t, std::int32_t, float const*);
using OpenGLUniform2iFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLUniform2ivFn = void (*)(std::int32_t, std::int32_t, std::int32_t const*);
using OpenGLUniform2uiFn = void (*)(std::int32_t, std::uint32_t, std::uint32_t);
using OpenGLUniform2uivFn = void (*)(std::int32_t, std::int32_t, std::uint32_t const*);
using OpenGLUniform3dFn = void (*)(std::int32_t, double, double, double);
using OpenGLUniform3dvFn = void (*)(std::int32_t, std::int32_t, double const*);
using OpenGLUniform3fFn = void (*)(std::int32_t, float, float, float);
using OpenGLUniform3fvFn = void (*)(std::int32_t, std::int32_t, float const*);
using OpenGLUniform3iFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLUniform3ivFn = void (*)(std::int32_t, std::int32_t, std::int32_t const*);
using OpenGLUniform3uiFn = void (*)(std::int32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLUniform3uivFn = void (*)(std::int32_t, std::int32_t, std::uint32_t const*);
using OpenGLUniform4dFn = void (*)(std::int32_t, double, double, double, double);
using OpenGLUniform4dvFn = void (*)(std::int32_t, std::int32_t, double const*);
using OpenGLUniform4fFn = void (*)(std::int32_t, float, float, float, float);
using OpenGLUniform4fvFn = void (*)(std::int32_t, std::int32_t, float const*);
using OpenGLUniform4iFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLUniform4ivFn = void (*)(std::int32_t, std::int32_t, std::int32_t const*);
using OpenGLUniform4uiFn = void (*)(std::int32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLUniform4uivFn = void (*)(std::int32_t, std::int32_t, std::uint32_t const*);
using OpenGLUniformBlockBindingFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLUniformMatrix2dvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLUniformMatrix2fvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLUniformMatrix2x3dvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLUniformMatrix2x3fvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLUniformMatrix2x4dvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLUniformMatrix2x4fvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLUniformMatrix3dvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLUniformMatrix3fvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLUniformMatrix3x2dvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLUniformMatrix3x2fvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLUniformMatrix3x4dvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLUniformMatrix3x4fvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLUniformMatrix4dvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLUniformMatrix4fvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLUniformMatrix4x2dvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLUniformMatrix4x2fvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLUniformMatrix4x3dvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, double const*);
using OpenGLUniformMatrix4x3fvFn = void (*)(std::int32_t, std::int32_t, std::uint8_t, float const*);
using OpenGLUniformSubroutinesuivFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t const*);
using OpenGLUnmapBufferFn = std::uint8_t (*)(std::uint32_t);
using OpenGLUnmapNamedBufferFn = std::uint8_t (*)(std::uint32_t);
using OpenGLUseProgramFn = void (*)(std::uint32_t);
using OpenGLUseProgramStagesFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLValidateProgramFn = void (*)(std::uint32_t);
using OpenGLValidateProgramPipelineFn = void (*)(std::uint32_t);
using OpenGLVertex2dFn = void (*)(double, double);
using OpenGLVertex2dvFn = void (*)(double const*);
using OpenGLVertex2fFn = void (*)(float, float);
using OpenGLVertex2fvFn = void (*)(float const*);
using OpenGLVertex2iFn = void (*)(std::int32_t, std::int32_t);
using OpenGLVertex2ivFn = void (*)(std::int32_t const*);
using OpenGLVertex2sFn = void (*)(std::int16_t, std::int16_t);
using OpenGLVertex2svFn = void (*)(std::int16_t const*);
using OpenGLVertex3dFn = void (*)(double, double, double);
using OpenGLVertex3dvFn = void (*)(double const*);
using OpenGLVertex3fFn = void (*)(float, float, float);
using OpenGLVertex3fvFn = void (*)(float const*);
using OpenGLVertex3iFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLVertex3ivFn = void (*)(std::int32_t const*);
using OpenGLVertex3sFn = void (*)(std::int16_t, std::int16_t, std::int16_t);
using OpenGLVertex3svFn = void (*)(std::int16_t const*);
using OpenGLVertex4dFn = void (*)(double, double, double, double);
using OpenGLVertex4dvFn = void (*)(double const*);
using OpenGLVertex4fFn = void (*)(float, float, float, float);
using OpenGLVertex4fvFn = void (*)(float const*);
using OpenGLVertex4iFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLVertex4ivFn = void (*)(std::int32_t const*);
using OpenGLVertex4sFn = void (*)(std::int16_t, std::int16_t, std::int16_t, std::int16_t);
using OpenGLVertex4svFn = void (*)(std::int16_t const*);
using OpenGLVertexArrayAttribBindingFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLVertexArrayAttribFormatFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t, std::uint8_t, std::uint32_t);
using OpenGLVertexArrayAttribIFormatFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t);
using OpenGLVertexArrayAttribLFormatFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t);
using OpenGLVertexArrayBindingDivisorFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLVertexArrayElementBufferFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLVertexArrayVertexBufferFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::intptr_t, std::int32_t);
using OpenGLVertexArrayVertexBuffersFn = void (*)(std::uint32_t, std::uint32_t, std::int32_t, std::uint32_t const*, std::intptr_t const*, std::int32_t const*);
using OpenGLVertexAttrib1dFn = void (*)(std::uint32_t, double);
using OpenGLVertexAttrib1dvFn = void (*)(std::uint32_t, double const*);
using OpenGLVertexAttrib1fFn = void (*)(std::uint32_t, float);
using OpenGLVertexAttrib1fvFn = void (*)(std::uint32_t, float const*);
using OpenGLVertexAttrib1sFn = void (*)(std::uint32_t, std::int16_t);
using OpenGLVertexAttrib1svFn = void (*)(std::uint32_t, std::int16_t const*);
using OpenGLVertexAttrib2dFn = void (*)(std::uint32_t, double, double);
using OpenGLVertexAttrib2dvFn = void (*)(std::uint32_t, double const*);
using OpenGLVertexAttrib2fFn = void (*)(std::uint32_t, float, float);
using OpenGLVertexAttrib2fvFn = void (*)(std::uint32_t, float const*);
using OpenGLVertexAttrib2sFn = void (*)(std::uint32_t, std::int16_t, std::int16_t);
using OpenGLVertexAttrib2svFn = void (*)(std::uint32_t, std::int16_t const*);
using OpenGLVertexAttrib3dFn = void (*)(std::uint32_t, double, double, double);
using OpenGLVertexAttrib3dvFn = void (*)(std::uint32_t, double const*);
using OpenGLVertexAttrib3fFn = void (*)(std::uint32_t, float, float, float);
using OpenGLVertexAttrib3fvFn = void (*)(std::uint32_t, float const*);
using OpenGLVertexAttrib3sFn = void (*)(std::uint32_t, std::int16_t, std::int16_t, std::int16_t);
using OpenGLVertexAttrib3svFn = void (*)(std::uint32_t, std::int16_t const*);
using OpenGLVertexAttrib4NbvFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLVertexAttrib4NivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLVertexAttrib4NsvFn = void (*)(std::uint32_t, std::int16_t const*);
using OpenGLVertexAttrib4NubFn = void (*)(std::uint32_t, std::uint8_t, std::uint8_t, std::uint8_t, std::uint8_t);
using OpenGLVertexAttrib4NubvFn = void (*)(std::uint32_t, std::uint8_t const*);
using OpenGLVertexAttrib4NuivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLVertexAttrib4NusvFn = void (*)(std::uint32_t, std::uint16_t const*);
using OpenGLVertexAttrib4bvFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLVertexAttrib4dFn = void (*)(std::uint32_t, double, double, double, double);
using OpenGLVertexAttrib4dvFn = void (*)(std::uint32_t, double const*);
using OpenGLVertexAttrib4fFn = void (*)(std::uint32_t, float, float, float, float);
using OpenGLVertexAttrib4fvFn = void (*)(std::uint32_t, float const*);
using OpenGLVertexAttrib4ivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLVertexAttrib4sFn = void (*)(std::uint32_t, std::int16_t, std::int16_t, std::int16_t, std::int16_t);
using OpenGLVertexAttrib4svFn = void (*)(std::uint32_t, std::int16_t const*);
using OpenGLVertexAttrib4ubvFn = void (*)(std::uint32_t, std::uint8_t const*);
using OpenGLVertexAttrib4uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLVertexAttrib4usvFn = void (*)(std::uint32_t, std::uint16_t const*);
using OpenGLVertexAttribBindingFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLVertexAttribDivisorFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLVertexAttribFormatFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::uint8_t, std::uint32_t);
using OpenGLVertexAttribI1iFn = void (*)(std::uint32_t, std::int32_t);
using OpenGLVertexAttribI1ivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLVertexAttribI1uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLVertexAttribI1uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLVertexAttribI2iFn = void (*)(std::uint32_t, std::int32_t, std::int32_t);
using OpenGLVertexAttribI2ivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLVertexAttribI2uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLVertexAttribI2uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLVertexAttribI3iFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLVertexAttribI3ivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLVertexAttribI3uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLVertexAttribI3uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLVertexAttribI4bvFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLVertexAttribI4iFn = void (*)(std::uint32_t, std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLVertexAttribI4ivFn = void (*)(std::uint32_t, std::int32_t const*);
using OpenGLVertexAttribI4svFn = void (*)(std::uint32_t, std::int16_t const*);
using OpenGLVertexAttribI4ubvFn = void (*)(std::uint32_t, std::uint8_t const*);
using OpenGLVertexAttribI4uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t, std::uint32_t);
using OpenGLVertexAttribI4uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLVertexAttribI4usvFn = void (*)(std::uint32_t, std::uint16_t const*);
using OpenGLVertexAttribIFormatFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t);
using OpenGLVertexAttribIPointerFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLVertexAttribL1dFn = void (*)(std::uint32_t, double);
using OpenGLVertexAttribL1dvFn = void (*)(std::uint32_t, double const*);
using OpenGLVertexAttribL2dFn = void (*)(std::uint32_t, double, double);
using OpenGLVertexAttribL2dvFn = void (*)(std::uint32_t, double const*);
using OpenGLVertexAttribL3dFn = void (*)(std::uint32_t, double, double, double);
using OpenGLVertexAttribL3dvFn = void (*)(std::uint32_t, double const*);
using OpenGLVertexAttribL4dFn = void (*)(std::uint32_t, double, double, double, double);
using OpenGLVertexAttribL4dvFn = void (*)(std::uint32_t, double const*);
using OpenGLVertexAttribLFormatFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::uint32_t);
using OpenGLVertexAttribLPointerFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLVertexAttribP1uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint8_t, std::uint32_t);
using OpenGLVertexAttribP1uivFn = void (*)(std::uint32_t, std::uint32_t, std::uint8_t, std::uint32_t const*);
using OpenGLVertexAttribP2uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint8_t, std::uint32_t);
using OpenGLVertexAttribP2uivFn = void (*)(std::uint32_t, std::uint32_t, std::uint8_t, std::uint32_t const*);
using OpenGLVertexAttribP3uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint8_t, std::uint32_t);
using OpenGLVertexAttribP3uivFn = void (*)(std::uint32_t, std::uint32_t, std::uint8_t, std::uint32_t const*);
using OpenGLVertexAttribP4uiFn = void (*)(std::uint32_t, std::uint32_t, std::uint8_t, std::uint32_t);
using OpenGLVertexAttribP4uivFn = void (*)(std::uint32_t, std::uint32_t, std::uint8_t, std::uint32_t const*);
using OpenGLVertexAttribPointerFn = void (*)(std::uint32_t, std::int32_t, std::uint32_t, std::uint8_t, std::int32_t, void const*);
using OpenGLVertexBindingDivisorFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLVertexP2uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLVertexP2uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLVertexP3uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLVertexP3uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLVertexP4uiFn = void (*)(std::uint32_t, std::uint32_t);
using OpenGLVertexP4uivFn = void (*)(std::uint32_t, std::uint32_t const*);
using OpenGLVertexPointerFn = void (*)(std::int32_t, std::uint32_t, std::int32_t, void const*);
using OpenGLViewportFn = void (*)(std::int32_t, std::int32_t, std::int32_t, std::int32_t);
using OpenGLViewportArrayvFn = void (*)(std::uint32_t, std::int32_t, float const*);
using OpenGLViewportIndexedfFn = void (*)(std::uint32_t, float, float, float, float);
using OpenGLViewportIndexedfvFn = void (*)(std::uint32_t, float const*);
using OpenGLWaitSyncFn = void (*)(void*, std::uint32_t, std::uint64_t);
using OpenGLWindowPos2dFn = void (*)(double, double);
using OpenGLWindowPos2dvFn = void (*)(double const*);
using OpenGLWindowPos2fFn = void (*)(float, float);
using OpenGLWindowPos2fvFn = void (*)(float const*);
using OpenGLWindowPos2iFn = void (*)(std::int32_t, std::int32_t);
using OpenGLWindowPos2ivFn = void (*)(std::int32_t const*);
using OpenGLWindowPos2sFn = void (*)(std::int16_t, std::int16_t);
using OpenGLWindowPos2svFn = void (*)(std::int16_t const*);
using OpenGLWindowPos3dFn = void (*)(double, double, double);
using OpenGLWindowPos3dvFn = void (*)(double const*);
using OpenGLWindowPos3fFn = void (*)(float, float, float);
using OpenGLWindowPos3fvFn = void (*)(float const*);
using OpenGLWindowPos3iFn = void (*)(std::int32_t, std::int32_t, std::int32_t);
using OpenGLWindowPos3ivFn = void (*)(std::int32_t const*);
using OpenGLWindowPos3sFn = void (*)(std::int16_t, std::int16_t, std::int16_t);
using OpenGLWindowPos3svFn = void (*)(std::int16_t const*);

extern boom::OpenGLAccumFn glAccum;
extern boom::OpenGLActiveShaderProgramFn glActiveShaderProgram;
extern boom::OpenGLActiveTextureFn glActiveTexture;
extern boom::OpenGLAlphaFuncFn glAlphaFunc;
extern boom::OpenGLAlphaFuncxFn glAlphaFuncx;
extern boom::OpenGLAreTexturesResidentFn glAreTexturesResident;
extern boom::OpenGLArrayElementFn glArrayElement;
extern boom::OpenGLAttachShaderFn glAttachShader;
extern boom::OpenGLBeginFn glBegin;
extern boom::OpenGLBeginConditionalRenderFn glBeginConditionalRender;
extern boom::OpenGLBeginQueryFn glBeginQuery;
extern boom::OpenGLBeginQueryIndexedFn glBeginQueryIndexed;
extern boom::OpenGLBeginTransformFeedbackFn glBeginTransformFeedback;
extern boom::OpenGLBindAttribLocationFn glBindAttribLocation;
extern boom::OpenGLBindBufferFn glBindBuffer;
extern boom::OpenGLBindBufferBaseFn glBindBufferBase;
extern boom::OpenGLBindBufferRangeFn glBindBufferRange;
extern boom::OpenGLBindBuffersBaseFn glBindBuffersBase;
extern boom::OpenGLBindBuffersRangeFn glBindBuffersRange;
extern boom::OpenGLBindFragDataLocationFn glBindFragDataLocation;
extern boom::OpenGLBindFragDataLocationIndexedFn glBindFragDataLocationIndexed;
extern boom::OpenGLBindFramebufferFn glBindFramebuffer;
extern boom::OpenGLBindImageTextureFn glBindImageTexture;
extern boom::OpenGLBindImageTexturesFn glBindImageTextures;
extern boom::OpenGLBindProgramPipelineFn glBindProgramPipeline;
extern boom::OpenGLBindRenderbufferFn glBindRenderbuffer;
extern boom::OpenGLBindSamplerFn glBindSampler;
extern boom::OpenGLBindSamplersFn glBindSamplers;
extern boom::OpenGLBindTextureFn glBindTexture;
extern boom::OpenGLBindTextureUnitFn glBindTextureUnit;
extern boom::OpenGLBindTexturesFn glBindTextures;
extern boom::OpenGLBindTransformFeedbackFn glBindTransformFeedback;
extern boom::OpenGLBindVertexArrayFn glBindVertexArray;
extern boom::OpenGLBindVertexBufferFn glBindVertexBuffer;
extern boom::OpenGLBindVertexBuffersFn glBindVertexBuffers;
extern boom::OpenGLBitmapFn glBitmap;
extern boom::OpenGLBlendBarrierFn glBlendBarrier;
extern boom::OpenGLBlendColorFn glBlendColor;
extern boom::OpenGLBlendEquationFn glBlendEquation;
extern boom::OpenGLBlendEquationSeparateFn glBlendEquationSeparate;
extern boom::OpenGLBlendEquationSeparateiFn glBlendEquationSeparatei;
extern boom::OpenGLBlendEquationiFn glBlendEquationi;
extern boom::OpenGLBlendFuncFn glBlendFunc;
extern boom::OpenGLBlendFuncSeparateFn glBlendFuncSeparate;
extern boom::OpenGLBlendFuncSeparateiFn glBlendFuncSeparatei;
extern boom::OpenGLBlendFunciFn glBlendFunci;
extern boom::OpenGLBlitFramebufferFn glBlitFramebuffer;
extern boom::OpenGLBlitNamedFramebufferFn glBlitNamedFramebuffer;
extern boom::OpenGLBufferDataFn glBufferData;
extern boom::OpenGLBufferStorageFn glBufferStorage;
extern boom::OpenGLBufferSubDataFn glBufferSubData;
extern boom::OpenGLCallListFn glCallList;
extern boom::OpenGLCallListsFn glCallLists;
extern boom::OpenGLCheckFramebufferStatusFn glCheckFramebufferStatus;
extern boom::OpenGLCheckNamedFramebufferStatusFn glCheckNamedFramebufferStatus;
extern boom::OpenGLClampColorFn glClampColor;
extern boom::OpenGLClearFn glClear;
extern boom::OpenGLClearAccumFn glClearAccum;
extern boom::OpenGLClearBufferDataFn glClearBufferData;
extern boom::OpenGLClearBufferSubDataFn glClearBufferSubData;
extern boom::OpenGLClearBufferfiFn glClearBufferfi;
extern boom::OpenGLClearBufferfvFn glClearBufferfv;
extern boom::OpenGLClearBufferivFn glClearBufferiv;
extern boom::OpenGLClearBufferuivFn glClearBufferuiv;
extern boom::OpenGLClearColorFn glClearColor;
extern boom::OpenGLClearColorxFn glClearColorx;
extern boom::OpenGLClearDepthFn glClearDepth;
extern boom::OpenGLClearDepthfFn glClearDepthf;
extern boom::OpenGLClearDepthxFn glClearDepthx;
extern boom::OpenGLClearIndexFn glClearIndex;
extern boom::OpenGLClearNamedBufferDataFn glClearNamedBufferData;
extern boom::OpenGLClearNamedBufferSubDataFn glClearNamedBufferSubData;
extern boom::OpenGLClearNamedFramebufferfiFn glClearNamedFramebufferfi;
extern boom::OpenGLClearNamedFramebufferfvFn glClearNamedFramebufferfv;
extern boom::OpenGLClearNamedFramebufferivFn glClearNamedFramebufferiv;
extern boom::OpenGLClearNamedFramebufferuivFn glClearNamedFramebufferuiv;
extern boom::OpenGLClearStencilFn glClearStencil;
extern boom::OpenGLClearTexImageFn glClearTexImage;
extern boom::OpenGLClearTexSubImageFn glClearTexSubImage;
extern boom::OpenGLClientActiveTextureFn glClientActiveTexture;
extern boom::OpenGLClientWaitSyncFn glClientWaitSync;
extern boom::OpenGLClipControlFn glClipControl;
extern boom::OpenGLClipPlaneFn glClipPlane;
extern boom::OpenGLClipPlanefFn glClipPlanef;
extern boom::OpenGLClipPlanexFn glClipPlanex;
extern boom::OpenGLColor3bFn glColor3b;
extern boom::OpenGLColor3bvFn glColor3bv;
extern boom::OpenGLColor3dFn glColor3d;
extern boom::OpenGLColor3dvFn glColor3dv;
extern boom::OpenGLColor3fFn glColor3f;
extern boom::OpenGLColor3fvFn glColor3fv;
extern boom::OpenGLColor3iFn glColor3i;
extern boom::OpenGLColor3ivFn glColor3iv;
extern boom::OpenGLColor3sFn glColor3s;
extern boom::OpenGLColor3svFn glColor3sv;
extern boom::OpenGLColor3ubFn glColor3ub;
extern boom::OpenGLColor3ubvFn glColor3ubv;
extern boom::OpenGLColor3uiFn glColor3ui;
extern boom::OpenGLColor3uivFn glColor3uiv;
extern boom::OpenGLColor3usFn glColor3us;
extern boom::OpenGLColor3usvFn glColor3usv;
extern boom::OpenGLColor4bFn glColor4b;
extern boom::OpenGLColor4bvFn glColor4bv;
extern boom::OpenGLColor4dFn glColor4d;
extern boom::OpenGLColor4dvFn glColor4dv;
extern boom::OpenGLColor4fFn glColor4f;
extern boom::OpenGLColor4fvFn glColor4fv;
extern boom::OpenGLColor4iFn glColor4i;
extern boom::OpenGLColor4ivFn glColor4iv;
extern boom::OpenGLColor4sFn glColor4s;
extern boom::OpenGLColor4svFn glColor4sv;
extern boom::OpenGLColor4ubFn glColor4ub;
extern boom::OpenGLColor4ubvFn glColor4ubv;
extern boom::OpenGLColor4uiFn glColor4ui;
extern boom::OpenGLColor4uivFn glColor4uiv;
extern boom::OpenGLColor4usFn glColor4us;
extern boom::OpenGLColor4usvFn glColor4usv;
extern boom::OpenGLColor4xFn glColor4x;
extern boom::OpenGLColorMaskFn glColorMask;
extern boom::OpenGLColorMaskiFn glColorMaski;
extern boom::OpenGLColorMaterialFn glColorMaterial;
extern boom::OpenGLColorP3uiFn glColorP3ui;
extern boom::OpenGLColorP3uivFn glColorP3uiv;
extern boom::OpenGLColorP4uiFn glColorP4ui;
extern boom::OpenGLColorP4uivFn glColorP4uiv;
extern boom::OpenGLColorPointerFn glColorPointer;
extern boom::OpenGLCompileShaderFn glCompileShader;
extern boom::OpenGLCompressedTexImage1DFn glCompressedTexImage1D;
extern boom::OpenGLCompressedTexImage2DFn glCompressedTexImage2D;
extern boom::OpenGLCompressedTexImage3DFn glCompressedTexImage3D;
extern boom::OpenGLCompressedTexSubImage1DFn glCompressedTexSubImage1D;
extern boom::OpenGLCompressedTexSubImage2DFn glCompressedTexSubImage2D;
extern boom::OpenGLCompressedTexSubImage3DFn glCompressedTexSubImage3D;
extern boom::OpenGLCompressedTextureSubImage1DFn glCompressedTextureSubImage1D;
extern boom::OpenGLCompressedTextureSubImage2DFn glCompressedTextureSubImage2D;
extern boom::OpenGLCompressedTextureSubImage3DFn glCompressedTextureSubImage3D;
extern boom::OpenGLCopyBufferSubDataFn glCopyBufferSubData;
extern boom::OpenGLCopyImageSubDataFn glCopyImageSubData;
extern boom::OpenGLCopyNamedBufferSubDataFn glCopyNamedBufferSubData;
extern boom::OpenGLCopyPixelsFn glCopyPixels;
extern boom::OpenGLCopyTexImage1DFn glCopyTexImage1D;
extern boom::OpenGLCopyTexImage2DFn glCopyTexImage2D;
extern boom::OpenGLCopyTexSubImage1DFn glCopyTexSubImage1D;
extern boom::OpenGLCopyTexSubImage2DFn glCopyTexSubImage2D;
extern boom::OpenGLCopyTexSubImage3DFn glCopyTexSubImage3D;
extern boom::OpenGLCopyTextureSubImage1DFn glCopyTextureSubImage1D;
extern boom::OpenGLCopyTextureSubImage2DFn glCopyTextureSubImage2D;
extern boom::OpenGLCopyTextureSubImage3DFn glCopyTextureSubImage3D;
extern boom::OpenGLCreateBuffersFn glCreateBuffers;
extern boom::OpenGLCreateFramebuffersFn glCreateFramebuffers;
extern boom::OpenGLCreateProgramFn glCreateProgram;
extern boom::OpenGLCreateProgramPipelinesFn glCreateProgramPipelines;
extern boom::OpenGLCreateQueriesFn glCreateQueries;
extern boom::OpenGLCreateRenderbuffersFn glCreateRenderbuffers;
extern boom::OpenGLCreateSamplersFn glCreateSamplers;
extern boom::OpenGLCreateShaderFn glCreateShader;
extern boom::OpenGLCreateShaderProgramvFn glCreateShaderProgramv;
extern boom::OpenGLCreateTexturesFn glCreateTextures;
extern boom::OpenGLCreateTransformFeedbacksFn glCreateTransformFeedbacks;
extern boom::OpenGLCreateVertexArraysFn glCreateVertexArrays;
extern boom::OpenGLCullFaceFn glCullFace;
extern boom::OpenGLDebugMessageCallbackFn glDebugMessageCallback;
extern boom::OpenGLDebugMessageControlFn glDebugMessageControl;
extern boom::OpenGLDebugMessageInsertFn glDebugMessageInsert;
extern boom::OpenGLDeleteBuffersFn glDeleteBuffers;
extern boom::OpenGLDeleteFramebuffersFn glDeleteFramebuffers;
extern boom::OpenGLDeleteListsFn glDeleteLists;
extern boom::OpenGLDeleteProgramFn glDeleteProgram;
extern boom::OpenGLDeleteProgramPipelinesFn glDeleteProgramPipelines;
extern boom::OpenGLDeleteQueriesFn glDeleteQueries;
extern boom::OpenGLDeleteRenderbuffersFn glDeleteRenderbuffers;
extern boom::OpenGLDeleteSamplersFn glDeleteSamplers;
extern boom::OpenGLDeleteShaderFn glDeleteShader;
extern boom::OpenGLDeleteSyncFn glDeleteSync;
extern boom::OpenGLDeleteTexturesFn glDeleteTextures;
extern boom::OpenGLDeleteTransformFeedbacksFn glDeleteTransformFeedbacks;
extern boom::OpenGLDeleteVertexArraysFn glDeleteVertexArrays;
extern boom::OpenGLDepthFuncFn glDepthFunc;
extern boom::OpenGLDepthMaskFn glDepthMask;
extern boom::OpenGLDepthRangeFn glDepthRange;
extern boom::OpenGLDepthRangeArrayvFn glDepthRangeArrayv;
extern boom::OpenGLDepthRangeIndexedFn glDepthRangeIndexed;
extern boom::OpenGLDepthRangefFn glDepthRangef;
extern boom::OpenGLDepthRangexFn glDepthRangex;
extern boom::OpenGLDetachShaderFn glDetachShader;
extern boom::OpenGLDisableFn glDisable;
extern boom::OpenGLDisableClientStateFn glDisableClientState;
extern boom::OpenGLDisableVertexArrayAttribFn glDisableVertexArrayAttrib;
extern boom::OpenGLDisableVertexAttribArrayFn glDisableVertexAttribArray;
extern boom::OpenGLDisableiFn glDisablei;
extern boom::OpenGLDispatchComputeFn glDispatchCompute;
extern boom::OpenGLDispatchComputeIndirectFn glDispatchComputeIndirect;
extern boom::OpenGLDrawArraysFn glDrawArrays;
extern boom::OpenGLDrawArraysIndirectFn glDrawArraysIndirect;
extern boom::OpenGLDrawArraysInstancedFn glDrawArraysInstanced;
extern boom::OpenGLDrawArraysInstancedBaseInstanceFn glDrawArraysInstancedBaseInstance;
extern boom::OpenGLDrawBufferFn glDrawBuffer;
extern boom::OpenGLDrawBuffersFn glDrawBuffers;
extern boom::OpenGLDrawElementsFn glDrawElements;
extern boom::OpenGLDrawElementsBaseVertexFn glDrawElementsBaseVertex;
extern boom::OpenGLDrawElementsIndirectFn glDrawElementsIndirect;
extern boom::OpenGLDrawElementsInstancedFn glDrawElementsInstanced;
extern boom::OpenGLDrawElementsInstancedBaseInstanceFn glDrawElementsInstancedBaseInstance;
extern boom::OpenGLDrawElementsInstancedBaseVertexFn glDrawElementsInstancedBaseVertex;
extern boom::OpenGLDrawElementsInstancedBaseVertexBaseInstanceFn glDrawElementsInstancedBaseVertexBaseInstance;
extern boom::OpenGLDrawPixelsFn glDrawPixels;
extern boom::OpenGLDrawRangeElementsFn glDrawRangeElements;
extern boom::OpenGLDrawRangeElementsBaseVertexFn glDrawRangeElementsBaseVertex;
extern boom::OpenGLDrawTransformFeedbackFn glDrawTransformFeedback;
extern boom::OpenGLDrawTransformFeedbackInstancedFn glDrawTransformFeedbackInstanced;
extern boom::OpenGLDrawTransformFeedbackStreamFn glDrawTransformFeedbackStream;
extern boom::OpenGLDrawTransformFeedbackStreamInstancedFn glDrawTransformFeedbackStreamInstanced;
extern boom::OpenGLEdgeFlagFn glEdgeFlag;
extern boom::OpenGLEdgeFlagPointerFn glEdgeFlagPointer;
extern boom::OpenGLEdgeFlagvFn glEdgeFlagv;
extern boom::OpenGLEnableFn glEnable;
extern boom::OpenGLEnableClientStateFn glEnableClientState;
extern boom::OpenGLEnableVertexArrayAttribFn glEnableVertexArrayAttrib;
extern boom::OpenGLEnableVertexAttribArrayFn glEnableVertexAttribArray;
extern boom::OpenGLEnableiFn glEnablei;
extern boom::OpenGLEndFn glEnd;
extern boom::OpenGLEndConditionalRenderFn glEndConditionalRender;
extern boom::OpenGLEndListFn glEndList;
extern boom::OpenGLEndQueryFn glEndQuery;
extern boom::OpenGLEndQueryIndexedFn glEndQueryIndexed;
extern boom::OpenGLEndTransformFeedbackFn glEndTransformFeedback;
extern boom::OpenGLEvalCoord1dFn glEvalCoord1d;
extern boom::OpenGLEvalCoord1dvFn glEvalCoord1dv;
extern boom::OpenGLEvalCoord1fFn glEvalCoord1f;
extern boom::OpenGLEvalCoord1fvFn glEvalCoord1fv;
extern boom::OpenGLEvalCoord2dFn glEvalCoord2d;
extern boom::OpenGLEvalCoord2dvFn glEvalCoord2dv;
extern boom::OpenGLEvalCoord2fFn glEvalCoord2f;
extern boom::OpenGLEvalCoord2fvFn glEvalCoord2fv;
extern boom::OpenGLEvalMesh1Fn glEvalMesh1;
extern boom::OpenGLEvalMesh2Fn glEvalMesh2;
extern boom::OpenGLEvalPoint1Fn glEvalPoint1;
extern boom::OpenGLEvalPoint2Fn glEvalPoint2;
extern boom::OpenGLFeedbackBufferFn glFeedbackBuffer;
extern boom::OpenGLFenceSyncFn glFenceSync;
extern boom::OpenGLFinishFn glFinish;
extern boom::OpenGLFlushFn glFlush;
extern boom::OpenGLFlushMappedBufferRangeFn glFlushMappedBufferRange;
extern boom::OpenGLFlushMappedNamedBufferRangeFn glFlushMappedNamedBufferRange;
extern boom::OpenGLFogCoordPointerFn glFogCoordPointer;
extern boom::OpenGLFogCoorddFn glFogCoordd;
extern boom::OpenGLFogCoorddvFn glFogCoorddv;
extern boom::OpenGLFogCoordfFn glFogCoordf;
extern boom::OpenGLFogCoordfvFn glFogCoordfv;
extern boom::OpenGLFogfFn glFogf;
extern boom::OpenGLFogfvFn glFogfv;
extern boom::OpenGLFogiFn glFogi;
extern boom::OpenGLFogivFn glFogiv;
extern boom::OpenGLFogxFn glFogx;
extern boom::OpenGLFogxvFn glFogxv;
extern boom::OpenGLFramebufferParameteriFn glFramebufferParameteri;
extern boom::OpenGLFramebufferRenderbufferFn glFramebufferRenderbuffer;
extern boom::OpenGLFramebufferTextureFn glFramebufferTexture;
extern boom::OpenGLFramebufferTexture1DFn glFramebufferTexture1D;
extern boom::OpenGLFramebufferTexture2DFn glFramebufferTexture2D;
extern boom::OpenGLFramebufferTexture3DFn glFramebufferTexture3D;
extern boom::OpenGLFramebufferTextureLayerFn glFramebufferTextureLayer;
extern boom::OpenGLFrontFaceFn glFrontFace;
extern boom::OpenGLFrustumFn glFrustum;
extern boom::OpenGLFrustumfFn glFrustumf;
extern boom::OpenGLFrustumxFn glFrustumx;
extern boom::OpenGLGenBuffersFn glGenBuffers;
extern boom::OpenGLGenFramebuffersFn glGenFramebuffers;
extern boom::OpenGLGenListsFn glGenLists;
extern boom::OpenGLGenProgramPipelinesFn glGenProgramPipelines;
extern boom::OpenGLGenQueriesFn glGenQueries;
extern boom::OpenGLGenRenderbuffersFn glGenRenderbuffers;
extern boom::OpenGLGenSamplersFn glGenSamplers;
extern boom::OpenGLGenTexturesFn glGenTextures;
extern boom::OpenGLGenTransformFeedbacksFn glGenTransformFeedbacks;
extern boom::OpenGLGenVertexArraysFn glGenVertexArrays;
extern boom::OpenGLGenerateMipmapFn glGenerateMipmap;
extern boom::OpenGLGenerateTextureMipmapFn glGenerateTextureMipmap;
extern boom::OpenGLGetActiveAtomicCounterBufferivFn glGetActiveAtomicCounterBufferiv;
extern boom::OpenGLGetActiveAttribFn glGetActiveAttrib;
extern boom::OpenGLGetActiveSubroutineNameFn glGetActiveSubroutineName;
extern boom::OpenGLGetActiveSubroutineUniformNameFn glGetActiveSubroutineUniformName;
extern boom::OpenGLGetActiveSubroutineUniformivFn glGetActiveSubroutineUniformiv;
extern boom::OpenGLGetActiveUniformFn glGetActiveUniform;
extern boom::OpenGLGetActiveUniformBlockNameFn glGetActiveUniformBlockName;
extern boom::OpenGLGetActiveUniformBlockivFn glGetActiveUniformBlockiv;
extern boom::OpenGLGetActiveUniformNameFn glGetActiveUniformName;
extern boom::OpenGLGetActiveUniformsivFn glGetActiveUniformsiv;
extern boom::OpenGLGetAttachedShadersFn glGetAttachedShaders;
extern boom::OpenGLGetAttribLocationFn glGetAttribLocation;
extern boom::OpenGLGetBooleani_vFn glGetBooleani_v;
extern boom::OpenGLGetBooleanvFn glGetBooleanv;
extern boom::OpenGLGetBufferParameteri64vFn glGetBufferParameteri64v;
extern boom::OpenGLGetBufferParameterivFn glGetBufferParameteriv;
extern boom::OpenGLGetBufferPointervFn glGetBufferPointerv;
extern boom::OpenGLGetBufferSubDataFn glGetBufferSubData;
extern boom::OpenGLGetClipPlaneFn glGetClipPlane;
extern boom::OpenGLGetClipPlanefFn glGetClipPlanef;
extern boom::OpenGLGetClipPlanexFn glGetClipPlanex;
extern boom::OpenGLGetCompressedTexImageFn glGetCompressedTexImage;
extern boom::OpenGLGetCompressedTextureImageFn glGetCompressedTextureImage;
extern boom::OpenGLGetCompressedTextureSubImageFn glGetCompressedTextureSubImage;
extern boom::OpenGLGetDebugMessageLogFn glGetDebugMessageLog;
extern boom::OpenGLGetDoublei_vFn glGetDoublei_v;
extern boom::OpenGLGetDoublevFn glGetDoublev;
extern boom::OpenGLGetErrorFn glGetError;
extern boom::OpenGLGetFixedvFn glGetFixedv;
extern boom::OpenGLGetFloati_vFn glGetFloati_v;
extern boom::OpenGLGetFloatvFn glGetFloatv;
extern boom::OpenGLGetFragDataIndexFn glGetFragDataIndex;
extern boom::OpenGLGetFragDataLocationFn glGetFragDataLocation;
extern boom::OpenGLGetFramebufferAttachmentParameterivFn glGetFramebufferAttachmentParameteriv;
extern boom::OpenGLGetFramebufferParameterivFn glGetFramebufferParameteriv;
extern boom::OpenGLGetGraphicsResetStatusFn glGetGraphicsResetStatus;
extern boom::OpenGLGetInteger64i_vFn glGetInteger64i_v;
extern boom::OpenGLGetInteger64vFn glGetInteger64v;
extern boom::OpenGLGetIntegeri_vFn glGetIntegeri_v;
extern boom::OpenGLGetIntegervFn glGetIntegerv;
extern boom::OpenGLGetInternalformati64vFn glGetInternalformati64v;
extern boom::OpenGLGetInternalformativFn glGetInternalformativ;
extern boom::OpenGLGetLightfvFn glGetLightfv;
extern boom::OpenGLGetLightivFn glGetLightiv;
extern boom::OpenGLGetLightxvFn glGetLightxv;
extern boom::OpenGLGetMapdvFn glGetMapdv;
extern boom::OpenGLGetMapfvFn glGetMapfv;
extern boom::OpenGLGetMapivFn glGetMapiv;
extern boom::OpenGLGetMaterialfvFn glGetMaterialfv;
extern boom::OpenGLGetMaterialivFn glGetMaterialiv;
extern boom::OpenGLGetMaterialxvFn glGetMaterialxv;
extern boom::OpenGLGetMultisamplefvFn glGetMultisamplefv;
extern boom::OpenGLGetNamedBufferParameteri64vFn glGetNamedBufferParameteri64v;
extern boom::OpenGLGetNamedBufferParameterivFn glGetNamedBufferParameteriv;
extern boom::OpenGLGetNamedBufferPointervFn glGetNamedBufferPointerv;
extern boom::OpenGLGetNamedBufferSubDataFn glGetNamedBufferSubData;
extern boom::OpenGLGetNamedFramebufferAttachmentParameterivFn glGetNamedFramebufferAttachmentParameteriv;
extern boom::OpenGLGetNamedFramebufferParameterivFn glGetNamedFramebufferParameteriv;
extern boom::OpenGLGetNamedRenderbufferParameterivFn glGetNamedRenderbufferParameteriv;
extern boom::OpenGLGetObjectLabelFn glGetObjectLabel;
extern boom::OpenGLGetObjectPtrLabelFn glGetObjectPtrLabel;
extern boom::OpenGLGetPixelMapfvFn glGetPixelMapfv;
extern boom::OpenGLGetPixelMapuivFn glGetPixelMapuiv;
extern boom::OpenGLGetPixelMapusvFn glGetPixelMapusv;
extern boom::OpenGLGetPointervFn glGetPointerv;
extern boom::OpenGLGetPolygonStippleFn glGetPolygonStipple;
extern boom::OpenGLGetProgramBinaryFn glGetProgramBinary;
extern boom::OpenGLGetProgramInfoLogFn glGetProgramInfoLog;
extern boom::OpenGLGetProgramInterfaceivFn glGetProgramInterfaceiv;
extern boom::OpenGLGetProgramPipelineInfoLogFn glGetProgramPipelineInfoLog;
extern boom::OpenGLGetProgramPipelineivFn glGetProgramPipelineiv;
extern boom::OpenGLGetProgramResourceIndexFn glGetProgramResourceIndex;
extern boom::OpenGLGetProgramResourceLocationFn glGetProgramResourceLocation;
extern boom::OpenGLGetProgramResourceLocationIndexFn glGetProgramResourceLocationIndex;
extern boom::OpenGLGetProgramResourceNameFn glGetProgramResourceName;
extern boom::OpenGLGetProgramResourceivFn glGetProgramResourceiv;
extern boom::OpenGLGetProgramStageivFn glGetProgramStageiv;
extern boom::OpenGLGetProgramivFn glGetProgramiv;
extern boom::OpenGLGetQueryBufferObjecti64vFn glGetQueryBufferObjecti64v;
extern boom::OpenGLGetQueryBufferObjectivFn glGetQueryBufferObjectiv;
extern boom::OpenGLGetQueryBufferObjectui64vFn glGetQueryBufferObjectui64v;
extern boom::OpenGLGetQueryBufferObjectuivFn glGetQueryBufferObjectuiv;
extern boom::OpenGLGetQueryIndexedivFn glGetQueryIndexediv;
extern boom::OpenGLGetQueryObjecti64vFn glGetQueryObjecti64v;
extern boom::OpenGLGetQueryObjectivFn glGetQueryObjectiv;
extern boom::OpenGLGetQueryObjectui64vFn glGetQueryObjectui64v;
extern boom::OpenGLGetQueryObjectuivFn glGetQueryObjectuiv;
extern boom::OpenGLGetQueryivFn glGetQueryiv;
extern boom::OpenGLGetRenderbufferParameterivFn glGetRenderbufferParameteriv;
extern boom::OpenGLGetSamplerParameterIivFn glGetSamplerParameterIiv;
extern boom::OpenGLGetSamplerParameterIuivFn glGetSamplerParameterIuiv;
extern boom::OpenGLGetSamplerParameterfvFn glGetSamplerParameterfv;
extern boom::OpenGLGetSamplerParameterivFn glGetSamplerParameteriv;
extern boom::OpenGLGetShaderInfoLogFn glGetShaderInfoLog;
extern boom::OpenGLGetShaderPrecisionFormatFn glGetShaderPrecisionFormat;
extern boom::OpenGLGetShaderSourceFn glGetShaderSource;
extern boom::OpenGLGetShaderivFn glGetShaderiv;
extern boom::OpenGLGetStringFn glGetString;
extern boom::OpenGLGetStringiFn glGetStringi;
extern boom::OpenGLGetSubroutineIndexFn glGetSubroutineIndex;
extern boom::OpenGLGetSubroutineUniformLocationFn glGetSubroutineUniformLocation;
extern boom::OpenGLGetSyncivFn glGetSynciv;
extern boom::OpenGLGetTexEnvfvFn glGetTexEnvfv;
extern boom::OpenGLGetTexEnvivFn glGetTexEnviv;
extern boom::OpenGLGetTexEnvxvFn glGetTexEnvxv;
extern boom::OpenGLGetTexGendvFn glGetTexGendv;
extern boom::OpenGLGetTexGenfvFn glGetTexGenfv;
extern boom::OpenGLGetTexGenivFn glGetTexGeniv;
extern boom::OpenGLGetTexImageFn glGetTexImage;
extern boom::OpenGLGetTexLevelParameterfvFn glGetTexLevelParameterfv;
extern boom::OpenGLGetTexLevelParameterivFn glGetTexLevelParameteriv;
extern boom::OpenGLGetTexParameterIivFn glGetTexParameterIiv;
extern boom::OpenGLGetTexParameterIuivFn glGetTexParameterIuiv;
extern boom::OpenGLGetTexParameterfvFn glGetTexParameterfv;
extern boom::OpenGLGetTexParameterivFn glGetTexParameteriv;
extern boom::OpenGLGetTexParameterxvFn glGetTexParameterxv;
extern boom::OpenGLGetTextureImageFn glGetTextureImage;
extern boom::OpenGLGetTextureLevelParameterfvFn glGetTextureLevelParameterfv;
extern boom::OpenGLGetTextureLevelParameterivFn glGetTextureLevelParameteriv;
extern boom::OpenGLGetTextureParameterIivFn glGetTextureParameterIiv;
extern boom::OpenGLGetTextureParameterIuivFn glGetTextureParameterIuiv;
extern boom::OpenGLGetTextureParameterfvFn glGetTextureParameterfv;
extern boom::OpenGLGetTextureParameterivFn glGetTextureParameteriv;
extern boom::OpenGLGetTextureSubImageFn glGetTextureSubImage;
extern boom::OpenGLGetTransformFeedbackVaryingFn glGetTransformFeedbackVarying;
extern boom::OpenGLGetTransformFeedbacki64_vFn glGetTransformFeedbacki64_v;
extern boom::OpenGLGetTransformFeedbacki_vFn glGetTransformFeedbacki_v;
extern boom::OpenGLGetTransformFeedbackivFn glGetTransformFeedbackiv;
extern boom::OpenGLGetUniformBlockIndexFn glGetUniformBlockIndex;
extern boom::OpenGLGetUniformIndicesFn glGetUniformIndices;
extern boom::OpenGLGetUniformLocationFn glGetUniformLocation;
extern boom::OpenGLGetUniformSubroutineuivFn glGetUniformSubroutineuiv;
extern boom::OpenGLGetUniformdvFn glGetUniformdv;
extern boom::OpenGLGetUniformfvFn glGetUniformfv;
extern boom::OpenGLGetUniformivFn glGetUniformiv;
extern boom::OpenGLGetUniformuivFn glGetUniformuiv;
extern boom::OpenGLGetVertexArrayIndexed64ivFn glGetVertexArrayIndexed64iv;
extern boom::OpenGLGetVertexArrayIndexedivFn glGetVertexArrayIndexediv;
extern boom::OpenGLGetVertexArrayivFn glGetVertexArrayiv;
extern boom::OpenGLGetVertexAttribIivFn glGetVertexAttribIiv;
extern boom::OpenGLGetVertexAttribIuivFn glGetVertexAttribIuiv;
extern boom::OpenGLGetVertexAttribLdvFn glGetVertexAttribLdv;
extern boom::OpenGLGetVertexAttribPointervFn glGetVertexAttribPointerv;
extern boom::OpenGLGetVertexAttribdvFn glGetVertexAttribdv;
extern boom::OpenGLGetVertexAttribfvFn glGetVertexAttribfv;
extern boom::OpenGLGetVertexAttribivFn glGetVertexAttribiv;
extern boom::OpenGLGetnColorTableFn glGetnColorTable;
extern boom::OpenGLGetnCompressedTexImageFn glGetnCompressedTexImage;
extern boom::OpenGLGetnConvolutionFilterFn glGetnConvolutionFilter;
extern boom::OpenGLGetnHistogramFn glGetnHistogram;
extern boom::OpenGLGetnMapdvFn glGetnMapdv;
extern boom::OpenGLGetnMapfvFn glGetnMapfv;
extern boom::OpenGLGetnMapivFn glGetnMapiv;
extern boom::OpenGLGetnMinmaxFn glGetnMinmax;
extern boom::OpenGLGetnPixelMapfvFn glGetnPixelMapfv;
extern boom::OpenGLGetnPixelMapuivFn glGetnPixelMapuiv;
extern boom::OpenGLGetnPixelMapusvFn glGetnPixelMapusv;
extern boom::OpenGLGetnPolygonStippleFn glGetnPolygonStipple;
extern boom::OpenGLGetnSeparableFilterFn glGetnSeparableFilter;
extern boom::OpenGLGetnTexImageFn glGetnTexImage;
extern boom::OpenGLGetnUniformdvFn glGetnUniformdv;
extern boom::OpenGLGetnUniformfvFn glGetnUniformfv;
extern boom::OpenGLGetnUniformivFn glGetnUniformiv;
extern boom::OpenGLGetnUniformuivFn glGetnUniformuiv;
extern boom::OpenGLHintFn glHint;
extern boom::OpenGLIndexMaskFn glIndexMask;
extern boom::OpenGLIndexPointerFn glIndexPointer;
extern boom::OpenGLIndexdFn glIndexd;
extern boom::OpenGLIndexdvFn glIndexdv;
extern boom::OpenGLIndexfFn glIndexf;
extern boom::OpenGLIndexfvFn glIndexfv;
extern boom::OpenGLIndexiFn glIndexi;
extern boom::OpenGLIndexivFn glIndexiv;
extern boom::OpenGLIndexsFn glIndexs;
extern boom::OpenGLIndexsvFn glIndexsv;
extern boom::OpenGLIndexubFn glIndexub;
extern boom::OpenGLIndexubvFn glIndexubv;
extern boom::OpenGLInitNamesFn glInitNames;
extern boom::OpenGLInterleavedArraysFn glInterleavedArrays;
extern boom::OpenGLInvalidateBufferDataFn glInvalidateBufferData;
extern boom::OpenGLInvalidateBufferSubDataFn glInvalidateBufferSubData;
extern boom::OpenGLInvalidateFramebufferFn glInvalidateFramebuffer;
extern boom::OpenGLInvalidateNamedFramebufferDataFn glInvalidateNamedFramebufferData;
extern boom::OpenGLInvalidateNamedFramebufferSubDataFn glInvalidateNamedFramebufferSubData;
extern boom::OpenGLInvalidateSubFramebufferFn glInvalidateSubFramebuffer;
extern boom::OpenGLInvalidateTexImageFn glInvalidateTexImage;
extern boom::OpenGLInvalidateTexSubImageFn glInvalidateTexSubImage;
extern boom::OpenGLIsBufferFn glIsBuffer;
extern boom::OpenGLIsEnabledFn glIsEnabled;
extern boom::OpenGLIsEnablediFn glIsEnabledi;
extern boom::OpenGLIsFramebufferFn glIsFramebuffer;
extern boom::OpenGLIsListFn glIsList;
extern boom::OpenGLIsProgramFn glIsProgram;
extern boom::OpenGLIsProgramPipelineFn glIsProgramPipeline;
extern boom::OpenGLIsQueryFn glIsQuery;
extern boom::OpenGLIsRenderbufferFn glIsRenderbuffer;
extern boom::OpenGLIsSamplerFn glIsSampler;
extern boom::OpenGLIsShaderFn glIsShader;
extern boom::OpenGLIsSyncFn glIsSync;
extern boom::OpenGLIsTextureFn glIsTexture;
extern boom::OpenGLIsTransformFeedbackFn glIsTransformFeedback;
extern boom::OpenGLIsVertexArrayFn glIsVertexArray;
extern boom::OpenGLLightModelfFn glLightModelf;
extern boom::OpenGLLightModelfvFn glLightModelfv;
extern boom::OpenGLLightModeliFn glLightModeli;
extern boom::OpenGLLightModelivFn glLightModeliv;
extern boom::OpenGLLightModelxFn glLightModelx;
extern boom::OpenGLLightModelxvFn glLightModelxv;
extern boom::OpenGLLightfFn glLightf;
extern boom::OpenGLLightfvFn glLightfv;
extern boom::OpenGLLightiFn glLighti;
extern boom::OpenGLLightivFn glLightiv;
extern boom::OpenGLLightxFn glLightx;
extern boom::OpenGLLightxvFn glLightxv;
extern boom::OpenGLLineStippleFn glLineStipple;
extern boom::OpenGLLineWidthFn glLineWidth;
extern boom::OpenGLLineWidthxFn glLineWidthx;
extern boom::OpenGLLinkProgramFn glLinkProgram;
extern boom::OpenGLListBaseFn glListBase;
extern boom::OpenGLLoadIdentityFn glLoadIdentity;
extern boom::OpenGLLoadMatrixdFn glLoadMatrixd;
extern boom::OpenGLLoadMatrixfFn glLoadMatrixf;
extern boom::OpenGLLoadMatrixxFn glLoadMatrixx;
extern boom::OpenGLLoadNameFn glLoadName;
extern boom::OpenGLLoadTransposeMatrixdFn glLoadTransposeMatrixd;
extern boom::OpenGLLoadTransposeMatrixfFn glLoadTransposeMatrixf;
extern boom::OpenGLLogicOpFn glLogicOp;
extern boom::OpenGLMap1dFn glMap1d;
extern boom::OpenGLMap1fFn glMap1f;
extern boom::OpenGLMap2dFn glMap2d;
extern boom::OpenGLMap2fFn glMap2f;
extern boom::OpenGLMapBufferFn glMapBuffer;
extern boom::OpenGLMapBufferRangeFn glMapBufferRange;
extern boom::OpenGLMapGrid1dFn glMapGrid1d;
extern boom::OpenGLMapGrid1fFn glMapGrid1f;
extern boom::OpenGLMapGrid2dFn glMapGrid2d;
extern boom::OpenGLMapGrid2fFn glMapGrid2f;
extern boom::OpenGLMapNamedBufferFn glMapNamedBuffer;
extern boom::OpenGLMapNamedBufferRangeFn glMapNamedBufferRange;
extern boom::OpenGLMaterialfFn glMaterialf;
extern boom::OpenGLMaterialfvFn glMaterialfv;
extern boom::OpenGLMaterialiFn glMateriali;
extern boom::OpenGLMaterialivFn glMaterialiv;
extern boom::OpenGLMaterialxFn glMaterialx;
extern boom::OpenGLMaterialxvFn glMaterialxv;
extern boom::OpenGLMatrixModeFn glMatrixMode;
extern boom::OpenGLMemoryBarrierFn glMemoryBarrier;
extern boom::OpenGLMemoryBarrierByRegionFn glMemoryBarrierByRegion;
extern boom::OpenGLMinSampleShadingFn glMinSampleShading;
extern boom::OpenGLMultMatrixdFn glMultMatrixd;
extern boom::OpenGLMultMatrixfFn glMultMatrixf;
extern boom::OpenGLMultMatrixxFn glMultMatrixx;
extern boom::OpenGLMultTransposeMatrixdFn glMultTransposeMatrixd;
extern boom::OpenGLMultTransposeMatrixfFn glMultTransposeMatrixf;
extern boom::OpenGLMultiDrawArraysFn glMultiDrawArrays;
extern boom::OpenGLMultiDrawArraysIndirectFn glMultiDrawArraysIndirect;
extern boom::OpenGLMultiDrawArraysIndirectCountFn glMultiDrawArraysIndirectCount;
extern boom::OpenGLMultiDrawElementsFn glMultiDrawElements;
extern boom::OpenGLMultiDrawElementsBaseVertexFn glMultiDrawElementsBaseVertex;
extern boom::OpenGLMultiDrawElementsIndirectFn glMultiDrawElementsIndirect;
extern boom::OpenGLMultiDrawElementsIndirectCountFn glMultiDrawElementsIndirectCount;
extern boom::OpenGLMultiTexCoord1dFn glMultiTexCoord1d;
extern boom::OpenGLMultiTexCoord1dvFn glMultiTexCoord1dv;
extern boom::OpenGLMultiTexCoord1fFn glMultiTexCoord1f;
extern boom::OpenGLMultiTexCoord1fvFn glMultiTexCoord1fv;
extern boom::OpenGLMultiTexCoord1iFn glMultiTexCoord1i;
extern boom::OpenGLMultiTexCoord1ivFn glMultiTexCoord1iv;
extern boom::OpenGLMultiTexCoord1sFn glMultiTexCoord1s;
extern boom::OpenGLMultiTexCoord1svFn glMultiTexCoord1sv;
extern boom::OpenGLMultiTexCoord2dFn glMultiTexCoord2d;
extern boom::OpenGLMultiTexCoord2dvFn glMultiTexCoord2dv;
extern boom::OpenGLMultiTexCoord2fFn glMultiTexCoord2f;
extern boom::OpenGLMultiTexCoord2fvFn glMultiTexCoord2fv;
extern boom::OpenGLMultiTexCoord2iFn glMultiTexCoord2i;
extern boom::OpenGLMultiTexCoord2ivFn glMultiTexCoord2iv;
extern boom::OpenGLMultiTexCoord2sFn glMultiTexCoord2s;
extern boom::OpenGLMultiTexCoord2svFn glMultiTexCoord2sv;
extern boom::OpenGLMultiTexCoord3dFn glMultiTexCoord3d;
extern boom::OpenGLMultiTexCoord3dvFn glMultiTexCoord3dv;
extern boom::OpenGLMultiTexCoord3fFn glMultiTexCoord3f;
extern boom::OpenGLMultiTexCoord3fvFn glMultiTexCoord3fv;
extern boom::OpenGLMultiTexCoord3iFn glMultiTexCoord3i;
extern boom::OpenGLMultiTexCoord3ivFn glMultiTexCoord3iv;
extern boom::OpenGLMultiTexCoord3sFn glMultiTexCoord3s;
extern boom::OpenGLMultiTexCoord3svFn glMultiTexCoord3sv;
extern boom::OpenGLMultiTexCoord4dFn glMultiTexCoord4d;
extern boom::OpenGLMultiTexCoord4dvFn glMultiTexCoord4dv;
extern boom::OpenGLMultiTexCoord4fFn glMultiTexCoord4f;
extern boom::OpenGLMultiTexCoord4fvFn glMultiTexCoord4fv;
extern boom::OpenGLMultiTexCoord4iFn glMultiTexCoord4i;
extern boom::OpenGLMultiTexCoord4ivFn glMultiTexCoord4iv;
extern boom::OpenGLMultiTexCoord4sFn glMultiTexCoord4s;
extern boom::OpenGLMultiTexCoord4svFn glMultiTexCoord4sv;
extern boom::OpenGLMultiTexCoord4xFn glMultiTexCoord4x;
extern boom::OpenGLMultiTexCoordP1uiFn glMultiTexCoordP1ui;
extern boom::OpenGLMultiTexCoordP1uivFn glMultiTexCoordP1uiv;
extern boom::OpenGLMultiTexCoordP2uiFn glMultiTexCoordP2ui;
extern boom::OpenGLMultiTexCoordP2uivFn glMultiTexCoordP2uiv;
extern boom::OpenGLMultiTexCoordP3uiFn glMultiTexCoordP3ui;
extern boom::OpenGLMultiTexCoordP3uivFn glMultiTexCoordP3uiv;
extern boom::OpenGLMultiTexCoordP4uiFn glMultiTexCoordP4ui;
extern boom::OpenGLMultiTexCoordP4uivFn glMultiTexCoordP4uiv;
extern boom::OpenGLNamedBufferDataFn glNamedBufferData;
extern boom::OpenGLNamedBufferStorageFn glNamedBufferStorage;
extern boom::OpenGLNamedBufferSubDataFn glNamedBufferSubData;
extern boom::OpenGLNamedFramebufferDrawBufferFn glNamedFramebufferDrawBuffer;
extern boom::OpenGLNamedFramebufferDrawBuffersFn glNamedFramebufferDrawBuffers;
extern boom::OpenGLNamedFramebufferParameteriFn glNamedFramebufferParameteri;
extern boom::OpenGLNamedFramebufferReadBufferFn glNamedFramebufferReadBuffer;
extern boom::OpenGLNamedFramebufferRenderbufferFn glNamedFramebufferRenderbuffer;
extern boom::OpenGLNamedFramebufferTextureFn glNamedFramebufferTexture;
extern boom::OpenGLNamedFramebufferTextureLayerFn glNamedFramebufferTextureLayer;
extern boom::OpenGLNamedRenderbufferStorageFn glNamedRenderbufferStorage;
extern boom::OpenGLNamedRenderbufferStorageMultisampleFn glNamedRenderbufferStorageMultisample;
extern boom::OpenGLNewListFn glNewList;
extern boom::OpenGLNormal3bFn glNormal3b;
extern boom::OpenGLNormal3bvFn glNormal3bv;
extern boom::OpenGLNormal3dFn glNormal3d;
extern boom::OpenGLNormal3dvFn glNormal3dv;
extern boom::OpenGLNormal3fFn glNormal3f;
extern boom::OpenGLNormal3fvFn glNormal3fv;
extern boom::OpenGLNormal3iFn glNormal3i;
extern boom::OpenGLNormal3ivFn glNormal3iv;
extern boom::OpenGLNormal3sFn glNormal3s;
extern boom::OpenGLNormal3svFn glNormal3sv;
extern boom::OpenGLNormal3xFn glNormal3x;
extern boom::OpenGLNormalP3uiFn glNormalP3ui;
extern boom::OpenGLNormalP3uivFn glNormalP3uiv;
extern boom::OpenGLNormalPointerFn glNormalPointer;
extern boom::OpenGLObjectLabelFn glObjectLabel;
extern boom::OpenGLObjectPtrLabelFn glObjectPtrLabel;
extern boom::OpenGLOrthoFn glOrtho;
extern boom::OpenGLOrthofFn glOrthof;
extern boom::OpenGLOrthoxFn glOrthox;
extern boom::OpenGLPassThroughFn glPassThrough;
extern boom::OpenGLPatchParameterfvFn glPatchParameterfv;
extern boom::OpenGLPatchParameteriFn glPatchParameteri;
extern boom::OpenGLPauseTransformFeedbackFn glPauseTransformFeedback;
extern boom::OpenGLPixelMapfvFn glPixelMapfv;
extern boom::OpenGLPixelMapuivFn glPixelMapuiv;
extern boom::OpenGLPixelMapusvFn glPixelMapusv;
extern boom::OpenGLPixelStorefFn glPixelStoref;
extern boom::OpenGLPixelStoreiFn glPixelStorei;
extern boom::OpenGLPixelTransferfFn glPixelTransferf;
extern boom::OpenGLPixelTransferiFn glPixelTransferi;
extern boom::OpenGLPixelZoomFn glPixelZoom;
extern boom::OpenGLPointParameterfFn glPointParameterf;
extern boom::OpenGLPointParameterfvFn glPointParameterfv;
extern boom::OpenGLPointParameteriFn glPointParameteri;
extern boom::OpenGLPointParameterivFn glPointParameteriv;
extern boom::OpenGLPointParameterxFn glPointParameterx;
extern boom::OpenGLPointParameterxvFn glPointParameterxv;
extern boom::OpenGLPointSizeFn glPointSize;
extern boom::OpenGLPointSizexFn glPointSizex;
extern boom::OpenGLPolygonModeFn glPolygonMode;
extern boom::OpenGLPolygonOffsetFn glPolygonOffset;
extern boom::OpenGLPolygonOffsetClampFn glPolygonOffsetClamp;
extern boom::OpenGLPolygonOffsetxFn glPolygonOffsetx;
extern boom::OpenGLPolygonStippleFn glPolygonStipple;
extern boom::OpenGLPopAttribFn glPopAttrib;
extern boom::OpenGLPopClientAttribFn glPopClientAttrib;
extern boom::OpenGLPopDebugGroupFn glPopDebugGroup;
extern boom::OpenGLPopMatrixFn glPopMatrix;
extern boom::OpenGLPopNameFn glPopName;
extern boom::OpenGLPrimitiveBoundingBoxFn glPrimitiveBoundingBox;
extern boom::OpenGLPrimitiveRestartIndexFn glPrimitiveRestartIndex;
extern boom::OpenGLPrioritizeTexturesFn glPrioritizeTextures;
extern boom::OpenGLProgramBinaryFn glProgramBinary;
extern boom::OpenGLProgramParameteriFn glProgramParameteri;
extern boom::OpenGLProgramUniform1dFn glProgramUniform1d;
extern boom::OpenGLProgramUniform1dvFn glProgramUniform1dv;
extern boom::OpenGLProgramUniform1fFn glProgramUniform1f;
extern boom::OpenGLProgramUniform1fvFn glProgramUniform1fv;
extern boom::OpenGLProgramUniform1iFn glProgramUniform1i;
extern boom::OpenGLProgramUniform1ivFn glProgramUniform1iv;
extern boom::OpenGLProgramUniform1uiFn glProgramUniform1ui;
extern boom::OpenGLProgramUniform1uivFn glProgramUniform1uiv;
extern boom::OpenGLProgramUniform2dFn glProgramUniform2d;
extern boom::OpenGLProgramUniform2dvFn glProgramUniform2dv;
extern boom::OpenGLProgramUniform2fFn glProgramUniform2f;
extern boom::OpenGLProgramUniform2fvFn glProgramUniform2fv;
extern boom::OpenGLProgramUniform2iFn glProgramUniform2i;
extern boom::OpenGLProgramUniform2ivFn glProgramUniform2iv;
extern boom::OpenGLProgramUniform2uiFn glProgramUniform2ui;
extern boom::OpenGLProgramUniform2uivFn glProgramUniform2uiv;
extern boom::OpenGLProgramUniform3dFn glProgramUniform3d;
extern boom::OpenGLProgramUniform3dvFn glProgramUniform3dv;
extern boom::OpenGLProgramUniform3fFn glProgramUniform3f;
extern boom::OpenGLProgramUniform3fvFn glProgramUniform3fv;
extern boom::OpenGLProgramUniform3iFn glProgramUniform3i;
extern boom::OpenGLProgramUniform3ivFn glProgramUniform3iv;
extern boom::OpenGLProgramUniform3uiFn glProgramUniform3ui;
extern boom::OpenGLProgramUniform3uivFn glProgramUniform3uiv;
extern boom::OpenGLProgramUniform4dFn glProgramUniform4d;
extern boom::OpenGLProgramUniform4dvFn glProgramUniform4dv;
extern boom::OpenGLProgramUniform4fFn glProgramUniform4f;
extern boom::OpenGLProgramUniform4fvFn glProgramUniform4fv;
extern boom::OpenGLProgramUniform4iFn glProgramUniform4i;
extern boom::OpenGLProgramUniform4ivFn glProgramUniform4iv;
extern boom::OpenGLProgramUniform4uiFn glProgramUniform4ui;
extern boom::OpenGLProgramUniform4uivFn glProgramUniform4uiv;
extern boom::OpenGLProgramUniformMatrix2dvFn glProgramUniformMatrix2dv;
extern boom::OpenGLProgramUniformMatrix2fvFn glProgramUniformMatrix2fv;
extern boom::OpenGLProgramUniformMatrix2x3dvFn glProgramUniformMatrix2x3dv;
extern boom::OpenGLProgramUniformMatrix2x3fvFn glProgramUniformMatrix2x3fv;
extern boom::OpenGLProgramUniformMatrix2x4dvFn glProgramUniformMatrix2x4dv;
extern boom::OpenGLProgramUniformMatrix2x4fvFn glProgramUniformMatrix2x4fv;
extern boom::OpenGLProgramUniformMatrix3dvFn glProgramUniformMatrix3dv;
extern boom::OpenGLProgramUniformMatrix3fvFn glProgramUniformMatrix3fv;
extern boom::OpenGLProgramUniformMatrix3x2dvFn glProgramUniformMatrix3x2dv;
extern boom::OpenGLProgramUniformMatrix3x2fvFn glProgramUniformMatrix3x2fv;
extern boom::OpenGLProgramUniformMatrix3x4dvFn glProgramUniformMatrix3x4dv;
extern boom::OpenGLProgramUniformMatrix3x4fvFn glProgramUniformMatrix3x4fv;
extern boom::OpenGLProgramUniformMatrix4dvFn glProgramUniformMatrix4dv;
extern boom::OpenGLProgramUniformMatrix4fvFn glProgramUniformMatrix4fv;
extern boom::OpenGLProgramUniformMatrix4x2dvFn glProgramUniformMatrix4x2dv;
extern boom::OpenGLProgramUniformMatrix4x2fvFn glProgramUniformMatrix4x2fv;
extern boom::OpenGLProgramUniformMatrix4x3dvFn glProgramUniformMatrix4x3dv;
extern boom::OpenGLProgramUniformMatrix4x3fvFn glProgramUniformMatrix4x3fv;
extern boom::OpenGLProvokingVertexFn glProvokingVertex;
extern boom::OpenGLPushAttribFn glPushAttrib;
extern boom::OpenGLPushClientAttribFn glPushClientAttrib;
extern boom::OpenGLPushDebugGroupFn glPushDebugGroup;
extern boom::OpenGLPushMatrixFn glPushMatrix;
extern boom::OpenGLPushNameFn glPushName;
extern boom::OpenGLQueryCounterFn glQueryCounter;
extern boom::OpenGLRasterPos2dFn glRasterPos2d;
extern boom::OpenGLRasterPos2dvFn glRasterPos2dv;
extern boom::OpenGLRasterPos2fFn glRasterPos2f;
extern boom::OpenGLRasterPos2fvFn glRasterPos2fv;
extern boom::OpenGLRasterPos2iFn glRasterPos2i;
extern boom::OpenGLRasterPos2ivFn glRasterPos2iv;
extern boom::OpenGLRasterPos2sFn glRasterPos2s;
extern boom::OpenGLRasterPos2svFn glRasterPos2sv;
extern boom::OpenGLRasterPos3dFn glRasterPos3d;
extern boom::OpenGLRasterPos3dvFn glRasterPos3dv;
extern boom::OpenGLRasterPos3fFn glRasterPos3f;
extern boom::OpenGLRasterPos3fvFn glRasterPos3fv;
extern boom::OpenGLRasterPos3iFn glRasterPos3i;
extern boom::OpenGLRasterPos3ivFn glRasterPos3iv;
extern boom::OpenGLRasterPos3sFn glRasterPos3s;
extern boom::OpenGLRasterPos3svFn glRasterPos3sv;
extern boom::OpenGLRasterPos4dFn glRasterPos4d;
extern boom::OpenGLRasterPos4dvFn glRasterPos4dv;
extern boom::OpenGLRasterPos4fFn glRasterPos4f;
extern boom::OpenGLRasterPos4fvFn glRasterPos4fv;
extern boom::OpenGLRasterPos4iFn glRasterPos4i;
extern boom::OpenGLRasterPos4ivFn glRasterPos4iv;
extern boom::OpenGLRasterPos4sFn glRasterPos4s;
extern boom::OpenGLRasterPos4svFn glRasterPos4sv;
extern boom::OpenGLReadBufferFn glReadBuffer;
extern boom::OpenGLReadPixelsFn glReadPixels;
extern boom::OpenGLReadnPixelsFn glReadnPixels;
extern boom::OpenGLRectdFn glRectd;
extern boom::OpenGLRectdvFn glRectdv;
extern boom::OpenGLRectfFn glRectf;
extern boom::OpenGLRectfvFn glRectfv;
extern boom::OpenGLRectiFn glRecti;
extern boom::OpenGLRectivFn glRectiv;
extern boom::OpenGLRectsFn glRects;
extern boom::OpenGLRectsvFn glRectsv;
extern boom::OpenGLReleaseShaderCompilerFn glReleaseShaderCompiler;
extern boom::OpenGLRenderModeFn glRenderMode;
extern boom::OpenGLRenderbufferStorageFn glRenderbufferStorage;
extern boom::OpenGLRenderbufferStorageMultisampleFn glRenderbufferStorageMultisample;
extern boom::OpenGLResumeTransformFeedbackFn glResumeTransformFeedback;
extern boom::OpenGLRotatedFn glRotated;
extern boom::OpenGLRotatefFn glRotatef;
extern boom::OpenGLRotatexFn glRotatex;
extern boom::OpenGLSampleCoverageFn glSampleCoverage;
extern boom::OpenGLSampleCoveragexFn glSampleCoveragex;
extern boom::OpenGLSampleMaskiFn glSampleMaski;
extern boom::OpenGLSamplerParameterIivFn glSamplerParameterIiv;
extern boom::OpenGLSamplerParameterIuivFn glSamplerParameterIuiv;
extern boom::OpenGLSamplerParameterfFn glSamplerParameterf;
extern boom::OpenGLSamplerParameterfvFn glSamplerParameterfv;
extern boom::OpenGLSamplerParameteriFn glSamplerParameteri;
extern boom::OpenGLSamplerParameterivFn glSamplerParameteriv;
extern boom::OpenGLScaledFn glScaled;
extern boom::OpenGLScalefFn glScalef;
extern boom::OpenGLScalexFn glScalex;
extern boom::OpenGLScissorFn glScissor;
extern boom::OpenGLScissorArrayvFn glScissorArrayv;
extern boom::OpenGLScissorIndexedFn glScissorIndexed;
extern boom::OpenGLScissorIndexedvFn glScissorIndexedv;
extern boom::OpenGLSecondaryColor3bFn glSecondaryColor3b;
extern boom::OpenGLSecondaryColor3bvFn glSecondaryColor3bv;
extern boom::OpenGLSecondaryColor3dFn glSecondaryColor3d;
extern boom::OpenGLSecondaryColor3dvFn glSecondaryColor3dv;
extern boom::OpenGLSecondaryColor3fFn glSecondaryColor3f;
extern boom::OpenGLSecondaryColor3fvFn glSecondaryColor3fv;
extern boom::OpenGLSecondaryColor3iFn glSecondaryColor3i;
extern boom::OpenGLSecondaryColor3ivFn glSecondaryColor3iv;
extern boom::OpenGLSecondaryColor3sFn glSecondaryColor3s;
extern boom::OpenGLSecondaryColor3svFn glSecondaryColor3sv;
extern boom::OpenGLSecondaryColor3ubFn glSecondaryColor3ub;
extern boom::OpenGLSecondaryColor3ubvFn glSecondaryColor3ubv;
extern boom::OpenGLSecondaryColor3uiFn glSecondaryColor3ui;
extern boom::OpenGLSecondaryColor3uivFn glSecondaryColor3uiv;
extern boom::OpenGLSecondaryColor3usFn glSecondaryColor3us;
extern boom::OpenGLSecondaryColor3usvFn glSecondaryColor3usv;
extern boom::OpenGLSecondaryColorP3uiFn glSecondaryColorP3ui;
extern boom::OpenGLSecondaryColorP3uivFn glSecondaryColorP3uiv;
extern boom::OpenGLSecondaryColorPointerFn glSecondaryColorPointer;
extern boom::OpenGLSelectBufferFn glSelectBuffer;
extern boom::OpenGLShadeModelFn glShadeModel;
extern boom::OpenGLShaderBinaryFn glShaderBinary;
extern boom::OpenGLShaderSourceFn glShaderSource;
extern boom::OpenGLShaderStorageBlockBindingFn glShaderStorageBlockBinding;
extern boom::OpenGLSpecializeShaderFn glSpecializeShader;
extern boom::OpenGLStencilFuncFn glStencilFunc;
extern boom::OpenGLStencilFuncSeparateFn glStencilFuncSeparate;
extern boom::OpenGLStencilMaskFn glStencilMask;
extern boom::OpenGLStencilMaskSeparateFn glStencilMaskSeparate;
extern boom::OpenGLStencilOpFn glStencilOp;
extern boom::OpenGLStencilOpSeparateFn glStencilOpSeparate;
extern boom::OpenGLTexBufferFn glTexBuffer;
extern boom::OpenGLTexBufferRangeFn glTexBufferRange;
extern boom::OpenGLTexCoord1dFn glTexCoord1d;
extern boom::OpenGLTexCoord1dvFn glTexCoord1dv;
extern boom::OpenGLTexCoord1fFn glTexCoord1f;
extern boom::OpenGLTexCoord1fvFn glTexCoord1fv;
extern boom::OpenGLTexCoord1iFn glTexCoord1i;
extern boom::OpenGLTexCoord1ivFn glTexCoord1iv;
extern boom::OpenGLTexCoord1sFn glTexCoord1s;
extern boom::OpenGLTexCoord1svFn glTexCoord1sv;
extern boom::OpenGLTexCoord2dFn glTexCoord2d;
extern boom::OpenGLTexCoord2dvFn glTexCoord2dv;
extern boom::OpenGLTexCoord2fFn glTexCoord2f;
extern boom::OpenGLTexCoord2fvFn glTexCoord2fv;
extern boom::OpenGLTexCoord2iFn glTexCoord2i;
extern boom::OpenGLTexCoord2ivFn glTexCoord2iv;
extern boom::OpenGLTexCoord2sFn glTexCoord2s;
extern boom::OpenGLTexCoord2svFn glTexCoord2sv;
extern boom::OpenGLTexCoord3dFn glTexCoord3d;
extern boom::OpenGLTexCoord3dvFn glTexCoord3dv;
extern boom::OpenGLTexCoord3fFn glTexCoord3f;
extern boom::OpenGLTexCoord3fvFn glTexCoord3fv;
extern boom::OpenGLTexCoord3iFn glTexCoord3i;
extern boom::OpenGLTexCoord3ivFn glTexCoord3iv;
extern boom::OpenGLTexCoord3sFn glTexCoord3s;
extern boom::OpenGLTexCoord3svFn glTexCoord3sv;
extern boom::OpenGLTexCoord4dFn glTexCoord4d;
extern boom::OpenGLTexCoord4dvFn glTexCoord4dv;
extern boom::OpenGLTexCoord4fFn glTexCoord4f;
extern boom::OpenGLTexCoord4fvFn glTexCoord4fv;
extern boom::OpenGLTexCoord4iFn glTexCoord4i;
extern boom::OpenGLTexCoord4ivFn glTexCoord4iv;
extern boom::OpenGLTexCoord4sFn glTexCoord4s;
extern boom::OpenGLTexCoord4svFn glTexCoord4sv;
extern boom::OpenGLTexCoordP1uiFn glTexCoordP1ui;
extern boom::OpenGLTexCoordP1uivFn glTexCoordP1uiv;
extern boom::OpenGLTexCoordP2uiFn glTexCoordP2ui;
extern boom::OpenGLTexCoordP2uivFn glTexCoordP2uiv;
extern boom::OpenGLTexCoordP3uiFn glTexCoordP3ui;
extern boom::OpenGLTexCoordP3uivFn glTexCoordP3uiv;
extern boom::OpenGLTexCoordP4uiFn glTexCoordP4ui;
extern boom::OpenGLTexCoordP4uivFn glTexCoordP4uiv;
extern boom::OpenGLTexCoordPointerFn glTexCoordPointer;
extern boom::OpenGLTexEnvfFn glTexEnvf;
extern boom::OpenGLTexEnvfvFn glTexEnvfv;
extern boom::OpenGLTexEnviFn glTexEnvi;
extern boom::OpenGLTexEnvivFn glTexEnviv;
extern boom::OpenGLTexEnvxFn glTexEnvx;
extern boom::OpenGLTexEnvxvFn glTexEnvxv;
extern boom::OpenGLTexGendFn glTexGend;
extern boom::OpenGLTexGendvFn glTexGendv;
extern boom::OpenGLTexGenfFn glTexGenf;
extern boom::OpenGLTexGenfvFn glTexGenfv;
extern boom::OpenGLTexGeniFn glTexGeni;
extern boom::OpenGLTexGenivFn glTexGeniv;
extern boom::OpenGLTexImage1DFn glTexImage1D;
extern boom::OpenGLTexImage2DFn glTexImage2D;
extern boom::OpenGLTexImage2DMultisampleFn glTexImage2DMultisample;
extern boom::OpenGLTexImage3DFn glTexImage3D;
extern boom::OpenGLTexImage3DMultisampleFn glTexImage3DMultisample;
extern boom::OpenGLTexParameterIivFn glTexParameterIiv;
extern boom::OpenGLTexParameterIuivFn glTexParameterIuiv;
extern boom::OpenGLTexParameterfFn glTexParameterf;
extern boom::OpenGLTexParameterfvFn glTexParameterfv;
extern boom::OpenGLTexParameteriFn glTexParameteri;
extern boom::OpenGLTexParameterivFn glTexParameteriv;
extern boom::OpenGLTexParameterxFn glTexParameterx;
extern boom::OpenGLTexParameterxvFn glTexParameterxv;
extern boom::OpenGLTexStorage1DFn glTexStorage1D;
extern boom::OpenGLTexStorage2DFn glTexStorage2D;
extern boom::OpenGLTexStorage2DMultisampleFn glTexStorage2DMultisample;
extern boom::OpenGLTexStorage3DFn glTexStorage3D;
extern boom::OpenGLTexStorage3DMultisampleFn glTexStorage3DMultisample;
extern boom::OpenGLTexSubImage1DFn glTexSubImage1D;
extern boom::OpenGLTexSubImage2DFn glTexSubImage2D;
extern boom::OpenGLTexSubImage3DFn glTexSubImage3D;
extern boom::OpenGLTextureBarrierFn glTextureBarrier;
extern boom::OpenGLTextureBufferFn glTextureBuffer;
extern boom::OpenGLTextureBufferRangeFn glTextureBufferRange;
extern boom::OpenGLTextureParameterIivFn glTextureParameterIiv;
extern boom::OpenGLTextureParameterIuivFn glTextureParameterIuiv;
extern boom::OpenGLTextureParameterfFn glTextureParameterf;
extern boom::OpenGLTextureParameterfvFn glTextureParameterfv;
extern boom::OpenGLTextureParameteriFn glTextureParameteri;
extern boom::OpenGLTextureParameterivFn glTextureParameteriv;
extern boom::OpenGLTextureStorage1DFn glTextureStorage1D;
extern boom::OpenGLTextureStorage2DFn glTextureStorage2D;
extern boom::OpenGLTextureStorage2DMultisampleFn glTextureStorage2DMultisample;
extern boom::OpenGLTextureStorage3DFn glTextureStorage3D;
extern boom::OpenGLTextureStorage3DMultisampleFn glTextureStorage3DMultisample;
extern boom::OpenGLTextureSubImage1DFn glTextureSubImage1D;
extern boom::OpenGLTextureSubImage2DFn glTextureSubImage2D;
extern boom::OpenGLTextureSubImage3DFn glTextureSubImage3D;
extern boom::OpenGLTextureViewFn glTextureView;
extern boom::OpenGLTransformFeedbackBufferBaseFn glTransformFeedbackBufferBase;
extern boom::OpenGLTransformFeedbackBufferRangeFn glTransformFeedbackBufferRange;
extern boom::OpenGLTransformFeedbackVaryingsFn glTransformFeedbackVaryings;
extern boom::OpenGLTranslatedFn glTranslated;
extern boom::OpenGLTranslatefFn glTranslatef;
extern boom::OpenGLTranslatexFn glTranslatex;
extern boom::OpenGLUniform1dFn glUniform1d;
extern boom::OpenGLUniform1dvFn glUniform1dv;
extern boom::OpenGLUniform1fFn glUniform1f;
extern boom::OpenGLUniform1fvFn glUniform1fv;
extern boom::OpenGLUniform1iFn glUniform1i;
extern boom::OpenGLUniform1ivFn glUniform1iv;
extern boom::OpenGLUniform1uiFn glUniform1ui;
extern boom::OpenGLUniform1uivFn glUniform1uiv;
extern boom::OpenGLUniform2dFn glUniform2d;
extern boom::OpenGLUniform2dvFn glUniform2dv;
extern boom::OpenGLUniform2fFn glUniform2f;
extern boom::OpenGLUniform2fvFn glUniform2fv;
extern boom::OpenGLUniform2iFn glUniform2i;
extern boom::OpenGLUniform2ivFn glUniform2iv;
extern boom::OpenGLUniform2uiFn glUniform2ui;
extern boom::OpenGLUniform2uivFn glUniform2uiv;
extern boom::OpenGLUniform3dFn glUniform3d;
extern boom::OpenGLUniform3dvFn glUniform3dv;
extern boom::OpenGLUniform3fFn glUniform3f;
extern boom::OpenGLUniform3fvFn glUniform3fv;
extern boom::OpenGLUniform3iFn glUniform3i;
extern boom::OpenGLUniform3ivFn glUniform3iv;
extern boom::OpenGLUniform3uiFn glUniform3ui;
extern boom::OpenGLUniform3uivFn glUniform3uiv;
extern boom::OpenGLUniform4dFn glUniform4d;
extern boom::OpenGLUniform4dvFn glUniform4dv;
extern boom::OpenGLUniform4fFn glUniform4f;
extern boom::OpenGLUniform4fvFn glUniform4fv;
extern boom::OpenGLUniform4iFn glUniform4i;
extern boom::OpenGLUniform4ivFn glUniform4iv;
extern boom::OpenGLUniform4uiFn glUniform4ui;
extern boom::OpenGLUniform4uivFn glUniform4uiv;
extern boom::OpenGLUniformBlockBindingFn glUniformBlockBinding;
extern boom::OpenGLUniformMatrix2dvFn glUniformMatrix2dv;
extern boom::OpenGLUniformMatrix2fvFn glUniformMatrix2fv;
extern boom::OpenGLUniformMatrix2x3dvFn glUniformMatrix2x3dv;
extern boom::OpenGLUniformMatrix2x3fvFn glUniformMatrix2x3fv;
extern boom::OpenGLUniformMatrix2x4dvFn glUniformMatrix2x4dv;
extern boom::OpenGLUniformMatrix2x4fvFn glUniformMatrix2x4fv;
extern boom::OpenGLUniformMatrix3dvFn glUniformMatrix3dv;
extern boom::OpenGLUniformMatrix3fvFn glUniformMatrix3fv;
extern boom::OpenGLUniformMatrix3x2dvFn glUniformMatrix3x2dv;
extern boom::OpenGLUniformMatrix3x2fvFn glUniformMatrix3x2fv;
extern boom::OpenGLUniformMatrix3x4dvFn glUniformMatrix3x4dv;
extern boom::OpenGLUniformMatrix3x4fvFn glUniformMatrix3x4fv;
extern boom::OpenGLUniformMatrix4dvFn glUniformMatrix4dv;
extern boom::OpenGLUniformMatrix4fvFn glUniformMatrix4fv;
extern boom::OpenGLUniformMatrix4x2dvFn glUniformMatrix4x2dv;
extern boom::OpenGLUniformMatrix4x2fvFn glUniformMatrix4x2fv;
extern boom::OpenGLUniformMatrix4x3dvFn glUniformMatrix4x3dv;
extern boom::OpenGLUniformMatrix4x3fvFn glUniformMatrix4x3fv;
extern boom::OpenGLUniformSubroutinesuivFn glUniformSubroutinesuiv;
extern boom::OpenGLUnmapBufferFn glUnmapBuffer;
extern boom::OpenGLUnmapNamedBufferFn glUnmapNamedBuffer;
extern boom::OpenGLUseProgramFn glUseProgram;
extern boom::OpenGLUseProgramStagesFn glUseProgramStages;
extern boom::OpenGLValidateProgramFn glValidateProgram;
extern boom::OpenGLValidateProgramPipelineFn glValidateProgramPipeline;
extern boom::OpenGLVertex2dFn glVertex2d;
extern boom::OpenGLVertex2dvFn glVertex2dv;
extern boom::OpenGLVertex2fFn glVertex2f;
extern boom::OpenGLVertex2fvFn glVertex2fv;
extern boom::OpenGLVertex2iFn glVertex2i;
extern boom::OpenGLVertex2ivFn glVertex2iv;
extern boom::OpenGLVertex2sFn glVertex2s;
extern boom::OpenGLVertex2svFn glVertex2sv;
extern boom::OpenGLVertex3dFn glVertex3d;
extern boom::OpenGLVertex3dvFn glVertex3dv;
extern boom::OpenGLVertex3fFn glVertex3f;
extern boom::OpenGLVertex3fvFn glVertex3fv;
extern boom::OpenGLVertex3iFn glVertex3i;
extern boom::OpenGLVertex3ivFn glVertex3iv;
extern boom::OpenGLVertex3sFn glVertex3s;
extern boom::OpenGLVertex3svFn glVertex3sv;
extern boom::OpenGLVertex4dFn glVertex4d;
extern boom::OpenGLVertex4dvFn glVertex4dv;
extern boom::OpenGLVertex4fFn glVertex4f;
extern boom::OpenGLVertex4fvFn glVertex4fv;
extern boom::OpenGLVertex4iFn glVertex4i;
extern boom::OpenGLVertex4ivFn glVertex4iv;
extern boom::OpenGLVertex4sFn glVertex4s;
extern boom::OpenGLVertex4svFn glVertex4sv;
extern boom::OpenGLVertexArrayAttribBindingFn glVertexArrayAttribBinding;
extern boom::OpenGLVertexArrayAttribFormatFn glVertexArrayAttribFormat;
extern boom::OpenGLVertexArrayAttribIFormatFn glVertexArrayAttribIFormat;
extern boom::OpenGLVertexArrayAttribLFormatFn glVertexArrayAttribLFormat;
extern boom::OpenGLVertexArrayBindingDivisorFn glVertexArrayBindingDivisor;
extern boom::OpenGLVertexArrayElementBufferFn glVertexArrayElementBuffer;
extern boom::OpenGLVertexArrayVertexBufferFn glVertexArrayVertexBuffer;
extern boom::OpenGLVertexArrayVertexBuffersFn glVertexArrayVertexBuffers;
extern boom::OpenGLVertexAttrib1dFn glVertexAttrib1d;
extern boom::OpenGLVertexAttrib1dvFn glVertexAttrib1dv;
extern boom::OpenGLVertexAttrib1fFn glVertexAttrib1f;
extern boom::OpenGLVertexAttrib1fvFn glVertexAttrib1fv;
extern boom::OpenGLVertexAttrib1sFn glVertexAttrib1s;
extern boom::OpenGLVertexAttrib1svFn glVertexAttrib1sv;
extern boom::OpenGLVertexAttrib2dFn glVertexAttrib2d;
extern boom::OpenGLVertexAttrib2dvFn glVertexAttrib2dv;
extern boom::OpenGLVertexAttrib2fFn glVertexAttrib2f;
extern boom::OpenGLVertexAttrib2fvFn glVertexAttrib2fv;
extern boom::OpenGLVertexAttrib2sFn glVertexAttrib2s;
extern boom::OpenGLVertexAttrib2svFn glVertexAttrib2sv;
extern boom::OpenGLVertexAttrib3dFn glVertexAttrib3d;
extern boom::OpenGLVertexAttrib3dvFn glVertexAttrib3dv;
extern boom::OpenGLVertexAttrib3fFn glVertexAttrib3f;
extern boom::OpenGLVertexAttrib3fvFn glVertexAttrib3fv;
extern boom::OpenGLVertexAttrib3sFn glVertexAttrib3s;
extern boom::OpenGLVertexAttrib3svFn glVertexAttrib3sv;
extern boom::OpenGLVertexAttrib4NbvFn glVertexAttrib4Nbv;
extern boom::OpenGLVertexAttrib4NivFn glVertexAttrib4Niv;
extern boom::OpenGLVertexAttrib4NsvFn glVertexAttrib4Nsv;
extern boom::OpenGLVertexAttrib4NubFn glVertexAttrib4Nub;
extern boom::OpenGLVertexAttrib4NubvFn glVertexAttrib4Nubv;
extern boom::OpenGLVertexAttrib4NuivFn glVertexAttrib4Nuiv;
extern boom::OpenGLVertexAttrib4NusvFn glVertexAttrib4Nusv;
extern boom::OpenGLVertexAttrib4bvFn glVertexAttrib4bv;
extern boom::OpenGLVertexAttrib4dFn glVertexAttrib4d;
extern boom::OpenGLVertexAttrib4dvFn glVertexAttrib4dv;
extern boom::OpenGLVertexAttrib4fFn glVertexAttrib4f;
extern boom::OpenGLVertexAttrib4fvFn glVertexAttrib4fv;
extern boom::OpenGLVertexAttrib4ivFn glVertexAttrib4iv;
extern boom::OpenGLVertexAttrib4sFn glVertexAttrib4s;
extern boom::OpenGLVertexAttrib4svFn glVertexAttrib4sv;
extern boom::OpenGLVertexAttrib4ubvFn glVertexAttrib4ubv;
extern boom::OpenGLVertexAttrib4uivFn glVertexAttrib4uiv;
extern boom::OpenGLVertexAttrib4usvFn glVertexAttrib4usv;
extern boom::OpenGLVertexAttribBindingFn glVertexAttribBinding;
extern boom::OpenGLVertexAttribDivisorFn glVertexAttribDivisor;
extern boom::OpenGLVertexAttribFormatFn glVertexAttribFormat;
extern boom::OpenGLVertexAttribI1iFn glVertexAttribI1i;
extern boom::OpenGLVertexAttribI1ivFn glVertexAttribI1iv;
extern boom::OpenGLVertexAttribI1uiFn glVertexAttribI1ui;
extern boom::OpenGLVertexAttribI1uivFn glVertexAttribI1uiv;
extern boom::OpenGLVertexAttribI2iFn glVertexAttribI2i;
extern boom::OpenGLVertexAttribI2ivFn glVertexAttribI2iv;
extern boom::OpenGLVertexAttribI2uiFn glVertexAttribI2ui;
extern boom::OpenGLVertexAttribI2uivFn glVertexAttribI2uiv;
extern boom::OpenGLVertexAttribI3iFn glVertexAttribI3i;
extern boom::OpenGLVertexAttribI3ivFn glVertexAttribI3iv;
extern boom::OpenGLVertexAttribI3uiFn glVertexAttribI3ui;
extern boom::OpenGLVertexAttribI3uivFn glVertexAttribI3uiv;
extern boom::OpenGLVertexAttribI4bvFn glVertexAttribI4bv;
extern boom::OpenGLVertexAttribI4iFn glVertexAttribI4i;
extern boom::OpenGLVertexAttribI4ivFn glVertexAttribI4iv;
extern boom::OpenGLVertexAttribI4svFn glVertexAttribI4sv;
extern boom::OpenGLVertexAttribI4ubvFn glVertexAttribI4ubv;
extern boom::OpenGLVertexAttribI4uiFn glVertexAttribI4ui;
extern boom::OpenGLVertexAttribI4uivFn glVertexAttribI4uiv;
extern boom::OpenGLVertexAttribI4usvFn glVertexAttribI4usv;
extern boom::OpenGLVertexAttribIFormatFn glVertexAttribIFormat;
extern boom::OpenGLVertexAttribIPointerFn glVertexAttribIPointer;
extern boom::OpenGLVertexAttribL1dFn glVertexAttribL1d;
extern boom::OpenGLVertexAttribL1dvFn glVertexAttribL1dv;
extern boom::OpenGLVertexAttribL2dFn glVertexAttribL2d;
extern boom::OpenGLVertexAttribL2dvFn glVertexAttribL2dv;
extern boom::OpenGLVertexAttribL3dFn glVertexAttribL3d;
extern boom::OpenGLVertexAttribL3dvFn glVertexAttribL3dv;
extern boom::OpenGLVertexAttribL4dFn glVertexAttribL4d;
extern boom::OpenGLVertexAttribL4dvFn glVertexAttribL4dv;
extern boom::OpenGLVertexAttribLFormatFn glVertexAttribLFormat;
extern boom::OpenGLVertexAttribLPointerFn glVertexAttribLPointer;
extern boom::OpenGLVertexAttribP1uiFn glVertexAttribP1ui;
extern boom::OpenGLVertexAttribP1uivFn glVertexAttribP1uiv;
extern boom::OpenGLVertexAttribP2uiFn glVertexAttribP2ui;
extern boom::OpenGLVertexAttribP2uivFn glVertexAttribP2uiv;
extern boom::OpenGLVertexAttribP3uiFn glVertexAttribP3ui;
extern boom::OpenGLVertexAttribP3uivFn glVertexAttribP3uiv;
extern boom::OpenGLVertexAttribP4uiFn glVertexAttribP4ui;
extern boom::OpenGLVertexAttribP4uivFn glVertexAttribP4uiv;
extern boom::OpenGLVertexAttribPointerFn glVertexAttribPointer;
extern boom::OpenGLVertexBindingDivisorFn glVertexBindingDivisor;
extern boom::OpenGLVertexP2uiFn glVertexP2ui;
extern boom::OpenGLVertexP2uivFn glVertexP2uiv;
extern boom::OpenGLVertexP3uiFn glVertexP3ui;
extern boom::OpenGLVertexP3uivFn glVertexP3uiv;
extern boom::OpenGLVertexP4uiFn glVertexP4ui;
extern boom::OpenGLVertexP4uivFn glVertexP4uiv;
extern boom::OpenGLVertexPointerFn glVertexPointer;
extern boom::OpenGLViewportFn glViewport;
extern boom::OpenGLViewportArrayvFn glViewportArrayv;
extern boom::OpenGLViewportIndexedfFn glViewportIndexedf;
extern boom::OpenGLViewportIndexedfvFn glViewportIndexedfv;
extern boom::OpenGLWaitSyncFn glWaitSync;
extern boom::OpenGLWindowPos2dFn glWindowPos2d;
extern boom::OpenGLWindowPos2dvFn glWindowPos2dv;
extern boom::OpenGLWindowPos2fFn glWindowPos2f;
extern boom::OpenGLWindowPos2fvFn glWindowPos2fv;
extern boom::OpenGLWindowPos2iFn glWindowPos2i;
extern boom::OpenGLWindowPos2ivFn glWindowPos2iv;
extern boom::OpenGLWindowPos2sFn glWindowPos2s;
extern boom::OpenGLWindowPos2svFn glWindowPos2sv;
extern boom::OpenGLWindowPos3dFn glWindowPos3d;
extern boom::OpenGLWindowPos3dvFn glWindowPos3dv;
extern boom::OpenGLWindowPos3fFn glWindowPos3f;
extern boom::OpenGLWindowPos3fvFn glWindowPos3fv;
extern boom::OpenGLWindowPos3iFn glWindowPos3i;
extern boom::OpenGLWindowPos3ivFn glWindowPos3iv;
extern boom::OpenGLWindowPos3sFn glWindowPos3s;
extern boom::OpenGLWindowPos3svFn glWindowPos3sv;

} /* namespace boom */