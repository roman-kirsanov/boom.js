#include <cinttypes>
#include <Boom/OpenGL.hpp>

namespace boom {

using GLvoid = void;
using GLenum = std::uint32_t;
using GLboolean = std::uint8_t;
using GLbitfield = std::uint32_t;
using GLbyte = std::int32_t;
using GLubyte = std::uint8_t;
using GLshort = std::int16_t;
using GLushort = std::uint16_t;
using GLint = std::int32_t;
using GLuint = std::uint32_t;
using GLclampx = std::int32_t;
using GLsizei = std::int32_t;
using GLfloat = float;
using GLclampf = float;
using GLdouble = double;
using GLclampd = double;
using GLeglClientBufferEXT = void*;
using GLeglImageOES = void*;
using GLchar = char;
using GLcharARB = char;
using GLhalf = std::uint16_t;
using GLhalfARB = std::uint16_t;
using GLfixed = std::int32_t;
using GLintptr = std::intptr_t;
using GLintptrARB = std::intptr_t;
using GLsizeiptr = std::int64_t;
using GLsizeiptrARB = std::int64_t;
using GLint64 = std::int64_t;
using GLint64EXT = std::int64_t;
using GLuint64 = std::uint64_t;
using GLuint64EXT = std::uint64_t;
using GLCullFace = void(*)(GLenum mode);
using GLFrontFace = void(*)(GLenum mode);
using GLHint = void(*)(GLenum target, GLenum mode);
using GLLineWidth = void(*)(GLfloat width);
using GLPointSize = void(*)(GLfloat size);
using GLPolygonMode = void(*)(GLenum face, GLenum mode);
using GLScissor = void(*)(GLint x, GLint y, GLsizei width, GLsizei height);
using GLTexParameterf = void(*)(GLenum target, GLenum pname, GLfloat param);
using GLTexParameterfv = void(*)(GLenum target, GLenum pname, const GLfloat *params);
using GLTexParameteri = void(*)(GLenum target, GLenum pname, GLint param);
using GLTexParameteriv = void(*)(GLenum target, GLenum pname, const GLint *params);
using GLTexImage1D = void(*)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLint border, GLenum format, GLenum type, const void *pixels);
using GLTexImage2D = void(*)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLint border, GLenum format, GLenum type, const void *pixels);
using GLDrawBuffer = void(*)(GLenum buf);
using GLClear = void(*)(GLbitfield mask);
using GLClearColor = void(*)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
using GLClearStencil = void(*)(GLint s);
using GLClearDepth = void(*)(GLdouble depth);
using GLStencilMask = void(*)(GLuint mask);
using GLColorMask = void(*)(GLboolean red, GLboolean green, GLboolean blue, GLboolean alpha);
using GLDepthMask = void(*)(GLboolean flag);
using GLDisable = void(*)(GLenum cap);
using GLEnable = void(*)(GLenum cap);
using GLFinish = void(*)(void);
using GLFlush = void(*)(void);
using GLBlendFunc = void(*)(GLenum sfactor, GLenum dfactor);
using GLLogicOp = void(*)(GLenum opcode);
using GLStencilFunc = void(*)(GLenum func, GLint ref, GLuint mask);
using GLStencilOp = void(*)(GLenum fail, GLenum zfail, GLenum zpass);
using GLDepthFunc = void(*)(GLenum func);
using GLPixelStoref = void(*)(GLenum pname, GLfloat param);
using GLPixelStorei = void(*)(GLenum pname, GLint param);
using GLReadBuffer = void(*)(GLenum src);
using GLReadPixels = void(*)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, void *pixels);
using GLGetBooleanv = void(*)(GLenum pname, GLboolean *data);
using GLGetDoublev = void(*)(GLenum pname, GLdouble *data);
using GLGetFloatv = void(*)(GLenum pname, GLfloat *data);
using GLGetIntegerv = void(*)(GLenum pname, GLint *data);
using GLGetTexImage = void(*)(GLenum target, GLint level, GLenum format, GLenum type, void *pixels);
using GLGetTexParameterfv = void(*)(GLenum target, GLenum pname, GLfloat *params);
using GLGetTexParameteriv = void(*)(GLenum target, GLenum pname, GLint *params);
using GLGetTexLevelParameterfv = void(*)(GLenum target, GLint level, GLenum pname, GLfloat *params);
using GLGetTexLevelParameteriv = void(*)(GLenum target, GLint level, GLenum pname, GLint *params);
using GLDepthRange = void(*)(GLdouble n, GLdouble f);
using GLViewport = void(*)(GLint x, GLint y, GLsizei width, GLsizei height);
using GLDrawArrays = void(*)(GLenum mode, GLint first, GLsizei count);
using GLDrawElements = void(*)(GLenum mode, GLsizei count, GLenum type, const void *indices);
using GLPolygonOffset = void(*)(GLfloat factor, GLfloat units);
using GLCopyTexImage1D = void(*)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLint border);
using GLCopyTexImage2D = void(*)(GLenum target, GLint level, GLenum internalformat, GLint x, GLint y, GLsizei width, GLsizei height, GLint border);
using GLCopyTexSubImage1D = void(*)(GLenum target, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
using GLCopyTexSubImage2D = void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
using GLTexSubImage1D = void(*)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
using GLTexSubImage2D = void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
using GLBindTexture = void(*)(GLenum target, GLuint texture);
using GLDeleteTextures = void(*)(GLsizei n, const GLuint *textures);
using GLGenTextures = void(*)(GLsizei n, GLuint *textures);
using GLDrawRangeElements = void(*)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices);
using GLTexImage3D = void(*)(GLenum target, GLint level, GLint internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLenum format, GLenum type, const void *pixels);
using GLTexSubImage3D = void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
using GLCopyTexSubImage3D = void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
using GLActiveTexture = void(*)(GLenum texture);
using GLSampleCoverage = void(*)(GLfloat value, GLboolean invert);
using GLCompressedTexImage3D = void(*)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLint border, GLsizei imageSize, const void *data);
using GLCompressedTexImage2D = void(*)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLsizei height, GLint border, GLsizei imageSize, const void *data);
using GLCompressedTexImage1D = void(*)(GLenum target, GLint level, GLenum internalformat, GLsizei width, GLint border, GLsizei imageSize, const void *data);
using GLCompressedTexSubImage3D = void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
using GLCompressedTexSubImage2D = void(*)(GLenum target, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
using GLCompressedTexSubImage1D = void(*)(GLenum target, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
using GLGetCompressedTexImage = void(*)(GLenum target, GLint level, void *img);
using GLBlendFuncSeparate = void(*)(GLenum sfactorRGB, GLenum dfactorRGB, GLenum sfactorAlpha, GLenum dfactorAlpha);
using GLMultiDrawArrays = void(*)(GLenum mode, const GLint *first, const GLsizei *count, GLsizei drawcount);
using GLMultiDrawElements = void(*)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount);
using GLPointParameterf = void(*)(GLenum pname, GLfloat param);
using GLPointParameterfv = void(*)(GLenum pname, const GLfloat *params);
using GLPointParameteri = void(*)(GLenum pname, GLint param);
using GLPointParameteriv = void(*)(GLenum pname, const GLint *params);
using GLBlendColor = void(*)(GLfloat red, GLfloat green, GLfloat blue, GLfloat alpha);
using GLBlendEquation = void(*)(GLenum mode);
using GLGenQueries = void(*)(GLsizei n, GLuint *ids);
using GLDeleteQueries = void(*)(GLsizei n, const GLuint *ids);
using GLBeginQuery = void(*)(GLenum target, GLuint id);
using GLEndQuery = void(*)(GLenum target);
using GLGetQueryiv = void(*)(GLenum target, GLenum pname, GLint *params);
using GLGetQueryObjectiv = void(*)(GLuint id, GLenum pname, GLint *params);
using GLGetQueryObjectuiv = void(*)(GLuint id, GLenum pname, GLuint *params);
using GLBindBuffer = void(*)(GLenum target, GLuint buffer);
using GLDeleteBuffers = void(*)(GLsizei n, const GLuint *buffers);
using GLGenBuffers = void(*)(GLsizei n, GLuint *buffers);
using GLBufferData = void(*)(GLenum target, GLsizeiptr size, const void *data, GLenum usage);
using GLBufferSubData = void(*)(GLenum target, GLintptr offset, GLsizeiptr size, const void *data);
using GLGetBufferSubData = void(*)(GLenum target, GLintptr offset, GLsizeiptr size, void *data);
using GLGetBufferParameteriv = void(*)(GLenum target, GLenum pname, GLint *params);
using GLGetBufferPointerv = void(*)(GLenum target, GLenum pname, void **params);
using GLBlendEquationSeparate = void(*)(GLenum modeRGB, GLenum modeAlpha);
using GLDrawBuffers = void(*)(GLsizei n, const GLenum *bufs);
using GLStencilOpSeparate = void(*)(GLenum face, GLenum sfail, GLenum dpfail, GLenum dppass);
using GLStencilFuncSeparate = void(*)(GLenum face, GLenum func, GLint ref, GLuint mask);
using GLStencilMaskSeparate = void(*)(GLenum face, GLuint mask);
using GLAttachShader = void(*)(GLuint program, GLuint shader);
using GLBindAttribLocation = void(*)(GLuint program, GLuint index, const GLchar *name);
using GLCompileShader = void(*)(GLuint shader);
using GLDeleteProgram = void(*)(GLuint program);
using GLDeleteShader = void(*)(GLuint shader);
using GLDetachShader = void(*)(GLuint program, GLuint shader);
using GLDisableVertexAttribArray = void(*)(GLuint index);
using GLEnableVertexAttribArray = void(*)(GLuint index);
using GLGetActiveAttrib = void(*)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
using GLGetActiveUniform = void(*)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLint *size, GLenum *type, GLchar *name);
using GLGetAttachedShaders = void(*)(GLuint program, GLsizei maxCount, GLsizei *count, GLuint *shaders);
using GLGetProgramiv = void(*)(GLuint program, GLenum pname, GLint *params);
using GLGetProgramInfoLog = void(*)(GLuint program, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
using GLGetShaderiv = void(*)(GLuint shader, GLenum pname, GLint *params);
using GLGetShaderInfoLog = void(*)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
using GLGetShaderSource = void(*)(GLuint shader, GLsizei bufSize, GLsizei *length, GLchar *source);
using GLGetUniformfv = void(*)(GLuint program, GLint location, GLfloat *params);
using GLGetUniformiv = void(*)(GLuint program, GLint location, GLint *params);
using GLGetVertexAttribdv = void(*)(GLuint index, GLenum pname, GLdouble *params);
using GLGetVertexAttribfv = void(*)(GLuint index, GLenum pname, GLfloat *params);
using GLGetVertexAttribiv = void(*)(GLuint index, GLenum pname, GLint *params);
using GLGetVertexAttribPointerv = void(*)(GLuint index, GLenum pname, void **pointer);
using GLLinkProgram = void(*)(GLuint program);
using GLShaderSource = void(*)(GLuint shader, GLsizei count, const GLchar *const*string, const GLint *length);
using GLUseProgram = void(*)(GLuint program);
using GLUniform1f = void(*)(GLint location, GLfloat v0);
using GLUniform2f = void(*)(GLint location, GLfloat v0, GLfloat v1);
using GLUniform3f = void(*)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
using GLUniform4f = void(*)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
using GLUniform1i = void(*)(GLint location, GLint v0);
using GLUniform2i = void(*)(GLint location, GLint v0, GLint v1);
using GLUniform3i = void(*)(GLint location, GLint v0, GLint v1, GLint v2);
using GLUniform4i = void(*)(GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
using GLUniform1fv = void(*)(GLint location, GLsizei count, const GLfloat *value);
using GLUniform2fv = void(*)(GLint location, GLsizei count, const GLfloat *value);
using GLUniform3fv = void(*)(GLint location, GLsizei count, const GLfloat *value);
using GLUniform4fv = void(*)(GLint location, GLsizei count, const GLfloat *value);
using GLUniform1iv = void(*)(GLint location, GLsizei count, const GLint *value);
using GLUniform2iv = void(*)(GLint location, GLsizei count, const GLint *value);
using GLUniform3iv = void(*)(GLint location, GLsizei count, const GLint *value);
using GLUniform4iv = void(*)(GLint location, GLsizei count, const GLint *value);
using GLUniformMatrix2fv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLUniformMatrix3fv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLUniformMatrix4fv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLValidateProgram = void(*)(GLuint program);
using GLVertexAttrib1d = void(*)(GLuint index, GLdouble x);
using GLVertexAttrib1dv = void(*)(GLuint index, const GLdouble *v);
using GLVertexAttrib1f = void(*)(GLuint index, GLfloat x);
using GLVertexAttrib1fv = void(*)(GLuint index, const GLfloat *v);
using GLVertexAttrib1s = void(*)(GLuint index, GLshort x);
using GLVertexAttrib1sv = void(*)(GLuint index, const GLshort *v);
using GLVertexAttrib2d = void(*)(GLuint index, GLdouble x, GLdouble y);
using GLVertexAttrib2dv = void(*)(GLuint index, const GLdouble *v);
using GLVertexAttrib2f = void(*)(GLuint index, GLfloat x, GLfloat y);
using GLVertexAttrib2fv = void(*)(GLuint index, const GLfloat *v);
using GLVertexAttrib2s = void(*)(GLuint index, GLshort x, GLshort y);
using GLVertexAttrib2sv = void(*)(GLuint index, const GLshort *v);
using GLVertexAttrib3d = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
using GLVertexAttrib3dv = void(*)(GLuint index, const GLdouble *v);
using GLVertexAttrib3f = void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat z);
using GLVertexAttrib3fv = void(*)(GLuint index, const GLfloat *v);
using GLVertexAttrib3s = void(*)(GLuint index, GLshort x, GLshort y, GLshort z);
using GLVertexAttrib3sv = void(*)(GLuint index, const GLshort *v);
using GLVertexAttrib4Nbv = void(*)(GLuint index, const GLbyte *v);
using GLVertexAttrib4Niv = void(*)(GLuint index, const GLint *v);
using GLVertexAttrib4Nsv = void(*)(GLuint index, const GLshort *v);
using GLVertexAttrib4Nub = void(*)(GLuint index, GLubyte x, GLubyte y, GLubyte z, GLubyte w);
using GLVertexAttrib4Nubv = void(*)(GLuint index, const GLubyte *v);
using GLVertexAttrib4Nuiv = void(*)(GLuint index, const GLuint *v);
using GLVertexAttrib4Nusv = void(*)(GLuint index, const GLushort *v);
using GLVertexAttrib4bv = void(*)(GLuint index, const GLbyte *v);
using GLVertexAttrib4d = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
using GLVertexAttrib4dv = void(*)(GLuint index, const GLdouble *v);
using GLVertexAttrib4f = void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat z, GLfloat w);
using GLVertexAttrib4fv = void(*)(GLuint index, const GLfloat *v);
using GLVertexAttrib4iv = void(*)(GLuint index, const GLint *v);
using GLVertexAttrib4s = void(*)(GLuint index, GLshort x, GLshort y, GLshort z, GLshort w);
using GLVertexAttrib4sv = void(*)(GLuint index, const GLshort *v);
using GLVertexAttrib4ubv = void(*)(GLuint index, const GLubyte *v);
using GLVertexAttrib4uiv = void(*)(GLuint index, const GLuint *v);
using GLVertexAttrib4usv = void(*)(GLuint index, const GLushort *v);
using GLVertexAttribPointer = void(*)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const void *pointer);
using GLUniformMatrix2x3fv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLUniformMatrix3x2fv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLUniformMatrix2x4fv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLUniformMatrix4x2fv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLUniformMatrix3x4fv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLUniformMatrix4x3fv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLColorMaski = void(*)(GLuint index, GLboolean r, GLboolean g, GLboolean b, GLboolean a);
using GLGetBooleani_v = void(*)(GLenum target, GLuint index, GLboolean *data);
using GLGetIntegeri_v = void(*)(GLenum target, GLuint index, GLint *data);
using GLEnablei = void(*)(GLenum target, GLuint index);
using GLDisablei = void(*)(GLenum target, GLuint index);
using GLBeginTransformFeedback = void(*)(GLenum primitiveMode);
using GLEndTransformFeedback = void(*)(void);
using GLBindBufferRange = void(*)(GLenum target, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
using GLBindBufferBase = void(*)(GLenum target, GLuint index, GLuint buffer);
using GLTransformFeedbackVaryings = void(*)(GLuint program, GLsizei count, const GLchar *const*varyings, GLenum bufferMode);
using GLGetTransformFeedbackVarying = void(*)(GLuint program, GLuint index, GLsizei bufSize, GLsizei *length, GLsizei *size, GLenum *type, GLchar *name);
using GLClampColor = void(*)(GLenum target, GLenum clamp);
using GLBeginConditionalRender = void(*)(GLuint id, GLenum mode);
using GLEndConditionalRender = void(*)(void);
using GLVertexAttribIPointer = void(*)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
using GLGetVertexAttribIiv = void(*)(GLuint index, GLenum pname, GLint *params);
using GLGetVertexAttribIuiv = void(*)(GLuint index, GLenum pname, GLuint *params);
using GLVertexAttribI1i = void(*)(GLuint index, GLint x);
using GLVertexAttribI2i = void(*)(GLuint index, GLint x, GLint y);
using GLVertexAttribI3i = void(*)(GLuint index, GLint x, GLint y, GLint z);
using GLVertexAttribI4i = void(*)(GLuint index, GLint x, GLint y, GLint z, GLint w);
using GLVertexAttribI1ui = void(*)(GLuint index, GLuint x);
using GLVertexAttribI2ui = void(*)(GLuint index, GLuint x, GLuint y);
using GLVertexAttribI3ui = void(*)(GLuint index, GLuint x, GLuint y, GLuint z);
using GLVertexAttribI4ui = void(*)(GLuint index, GLuint x, GLuint y, GLuint z, GLuint w);
using GLVertexAttribI1iv = void(*)(GLuint index, const GLint *v);
using GLVertexAttribI2iv = void(*)(GLuint index, const GLint *v);
using GLVertexAttribI3iv = void(*)(GLuint index, const GLint *v);
using GLVertexAttribI4iv = void(*)(GLuint index, const GLint *v);
using GLVertexAttribI1uiv = void(*)(GLuint index, const GLuint *v);
using GLVertexAttribI2uiv = void(*)(GLuint index, const GLuint *v);
using GLVertexAttribI3uiv = void(*)(GLuint index, const GLuint *v);
using GLVertexAttribI4uiv = void(*)(GLuint index, const GLuint *v);
using GLVertexAttribI4bv = void(*)(GLuint index, const GLbyte *v);
using GLVertexAttribI4sv = void(*)(GLuint index, const GLshort *v);
using GLVertexAttribI4ubv = void(*)(GLuint index, const GLubyte *v);
using GLVertexAttribI4usv = void(*)(GLuint index, const GLushort *v);
using GLGetUniformuiv = void(*)(GLuint program, GLint location, GLuint *params);
using GLBindFragDataLocation = void(*)(GLuint program, GLuint color, const GLchar *name);
using GLUniform1ui = void(*)(GLint location, GLuint v0);
using GLUniform2ui = void(*)(GLint location, GLuint v0, GLuint v1);
using GLUniform3ui = void(*)(GLint location, GLuint v0, GLuint v1, GLuint v2);
using GLUniform4ui = void(*)(GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
using GLUniform1uiv = void(*)(GLint location, GLsizei count, const GLuint *value);
using GLUniform2uiv = void(*)(GLint location, GLsizei count, const GLuint *value);
using GLUniform3uiv = void(*)(GLint location, GLsizei count, const GLuint *value);
using GLUniform4uiv = void(*)(GLint location, GLsizei count, const GLuint *value);
using GLTexParameterIiv = void(*)(GLenum target, GLenum pname, const GLint *params);
using GLTexParameterIuiv = void(*)(GLenum target, GLenum pname, const GLuint *params);
using GLGetTexParameterIiv = void(*)(GLenum target, GLenum pname, GLint *params);
using GLGetTexParameterIuiv = void(*)(GLenum target, GLenum pname, GLuint *params);
using GLClearBufferiv = void(*)(GLenum buffer, GLint drawbuffer, const GLint *value);
using GLClearBufferuiv = void(*)(GLenum buffer, GLint drawbuffer, const GLuint *value);
using GLClearBufferfv = void(*)(GLenum buffer, GLint drawbuffer, const GLfloat *value);
using GLClearBufferfi = void(*)(GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
using GLBindRenderbuffer = void(*)(GLenum target, GLuint renderbuffer);
using GLDeleteRenderbuffers = void(*)(GLsizei n, const GLuint *renderbuffers);
using GLGenRenderbuffers = void(*)(GLsizei n, GLuint *renderbuffers);
using GLRenderbufferStorage = void(*)(GLenum target, GLenum internalformat, GLsizei width, GLsizei height);
using GLGetRenderbufferParameteriv = void(*)(GLenum target, GLenum pname, GLint *params);
using GLBindFramebuffer = void(*)(GLenum target, GLuint framebuffer);
using GLDeleteFramebuffers = void(*)(GLsizei n, const GLuint *framebuffers);
using GLGenFramebuffers = void(*)(GLsizei n, GLuint *framebuffers);
using GLFramebufferTexture1D = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
using GLFramebufferTexture2D = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level);
using GLFramebufferTexture3D = void(*)(GLenum target, GLenum attachment, GLenum textarget, GLuint texture, GLint level, GLint zoffset);
using GLFramebufferRenderbuffer = void(*)(GLenum target, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
using GLGetFramebufferAttachmentParameteriv = void(*)(GLenum target, GLenum attachment, GLenum pname, GLint *params);
using GLGenerateMipmap = void(*)(GLenum target);
using GLBlitFramebuffer = void(*)(GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
using GLRenderbufferStorageMultisample = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
using GLFramebufferTextureLayer = void(*)(GLenum target, GLenum attachment, GLuint texture, GLint level, GLint layer);
using GLFlushMappedBufferRange = void(*)(GLenum target, GLintptr offset, GLsizeiptr length);
using GLBindVertexArray = void(*)(GLuint array);
using GLDeleteVertexArrays = void(*)(GLsizei n, const GLuint *arrays);
using GLGenVertexArrays = void(*)(GLsizei n, GLuint *arrays);
using GLDrawArraysInstanced = void(*)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount);
using GLDrawElementsInstanced = void(*)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount);
using GLTexBuffer = void(*)(GLenum target, GLenum internalformat, GLuint buffer);
using GLPrimitiveRestartIndex = void(*)(GLuint index);
using GLCopyBufferSubData = void(*)(GLenum readTarget, GLenum writeTarget, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
using GLGetUniformIndices = void(*)(GLuint program, GLsizei uniformCount, const GLchar *const*uniformNames, GLuint *uniformIndices);
using GLGetActiveUniformsiv = void(*)(GLuint program, GLsizei uniformCount, const GLuint *uniformIndices, GLenum pname, GLint *params);
using GLGetActiveUniformName = void(*)(GLuint program, GLuint uniformIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformName);
using GLGetActiveUniformBlockiv = void(*)(GLuint program, GLuint uniformBlockIndex, GLenum pname, GLint *params);
using GLGetActiveUniformBlockName = void(*)(GLuint program, GLuint uniformBlockIndex, GLsizei bufSize, GLsizei *length, GLchar *uniformBlockName);
using GLUniformBlockBinding = void(*)(GLuint program, GLuint uniformBlockIndex, GLuint uniformBlockBinding);
using GLDrawElementsBaseVertex = void(*)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLint basevertex);
using GLDrawRangeElementsBaseVertex = void(*)(GLenum mode, GLuint start, GLuint end, GLsizei count, GLenum type, const void *indices, GLint basevertex);
using GLDrawElementsInstancedBaseVertex = void(*)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex);
using GLMultiDrawElementsBaseVertex = void(*)(GLenum mode, const GLsizei *count, GLenum type, const void *const*indices, GLsizei drawcount, const GLint *basevertex);
using GLProvokingVertex = void(*)(GLenum mode);
using GLDeleteSync = void(*)(void* sync);
using GLWaitSync = void(*)(void* sync, GLbitfield flags, GLuint64 timeout);
using GLGetInteger64v = void(*)(GLenum pname, GLint64 *data);
using GLGetSynciv = void(*)(void* sync, GLenum pname, GLsizei count, GLsizei *length, GLint *values);
using GLGetInteger64i_v = void(*)(GLenum target, GLuint index, GLint64 *data);
using GLGetBufferParameteri64v = void(*)(GLenum target, GLenum pname, GLint64 *params);
using GLFramebufferTexture = void(*)(GLenum target, GLenum attachment, GLuint texture, GLint level);
using GLTexImage2DMultisample = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
using GLTexImage3DMultisample = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
using GLGetMultisamplefv = void(*)(GLenum pname, GLuint index, GLfloat *val);
using GLSampleMaski = void(*)(GLuint maskNumber, GLbitfield mask);
using GLBindFragDataLocationIndexed = void(*)(GLuint program, GLuint colorNumber, GLuint index, const GLchar *name);
using GLGenSamplers = void(*)(GLsizei count, GLuint *samplers);
using GLDeleteSamplers = void(*)(GLsizei count, const GLuint *samplers);
using GLBindSampler = void(*)(GLuint unit, GLuint sampler);
using GLSamplerParameteri = void(*)(GLuint sampler, GLenum pname, GLint param);
using GLSamplerParameteriv = void(*)(GLuint sampler, GLenum pname, const GLint *param);
using GLSamplerParameterf = void(*)(GLuint sampler, GLenum pname, GLfloat param);
using GLSamplerParameterfv = void(*)(GLuint sampler, GLenum pname, const GLfloat *param);
using GLSamplerParameterIiv = void(*)(GLuint sampler, GLenum pname, const GLint *param);
using GLSamplerParameterIuiv = void(*)(GLuint sampler, GLenum pname, const GLuint *param);
using GLGetSamplerParameteriv = void(*)(GLuint sampler, GLenum pname, GLint *params);
using GLGetSamplerParameterIiv = void(*)(GLuint sampler, GLenum pname, GLint *params);
using GLGetSamplerParameterfv = void(*)(GLuint sampler, GLenum pname, GLfloat *params);
using GLGetSamplerParameterIuiv = void(*)(GLuint sampler, GLenum pname, GLuint *params);
using GLQueryCounter = void(*)(GLuint id, GLenum target);
using GLGetQueryObjecti64v = void(*)(GLuint id, GLenum pname, GLint64 *params);
using GLGetQueryObjectui64v = void(*)(GLuint id, GLenum pname, GLuint64 *params);
using GLVertexAttribDivisor = void(*)(GLuint index, GLuint divisor);
using GLVertexAttribP1ui = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
using GLVertexAttribP1uiv = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
using GLVertexAttribP2ui = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
using GLVertexAttribP2uiv = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
using GLVertexAttribP3ui = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
using GLVertexAttribP3uiv = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
using GLVertexAttribP4ui = void(*)(GLuint index, GLenum type, GLboolean normalized, GLuint value);
using GLVertexAttribP4uiv = void(*)(GLuint index, GLenum type, GLboolean normalized, const GLuint *value);
using GLVertexP2ui = void(*)(GLenum type, GLuint value);
using GLVertexP2uiv = void(*)(GLenum type, const GLuint *value);
using GLVertexP3ui = void(*)(GLenum type, GLuint value);
using GLVertexP3uiv = void(*)(GLenum type, const GLuint *value);
using GLVertexP4ui = void(*)(GLenum type, GLuint value);
using GLVertexP4uiv = void(*)(GLenum type, const GLuint *value);
using GLTexCoordP1ui = void(*)(GLenum type, GLuint coords);
using GLTexCoordP1uiv = void(*)(GLenum type, const GLuint *coords);
using GLTexCoordP2ui = void(*)(GLenum type, GLuint coords);
using GLTexCoordP2uiv = void(*)(GLenum type, const GLuint *coords);
using GLTexCoordP3ui = void(*)(GLenum type, GLuint coords);
using GLTexCoordP3uiv = void(*)(GLenum type, const GLuint *coords);
using GLTexCoordP4ui = void(*)(GLenum type, GLuint coords);
using GLTexCoordP4uiv = void(*)(GLenum type, const GLuint *coords);
using GLMultiTexCoordP1ui = void(*)(GLenum texture, GLenum type, GLuint coords);
using GLMultiTexCoordP1uiv = void(*)(GLenum texture, GLenum type, const GLuint *coords);
using GLMultiTexCoordP2ui = void(*)(GLenum texture, GLenum type, GLuint coords);
using GLMultiTexCoordP2uiv = void(*)(GLenum texture, GLenum type, const GLuint *coords);
using GLMultiTexCoordP3ui = void(*)(GLenum texture, GLenum type, GLuint coords);
using GLMultiTexCoordP3uiv = void(*)(GLenum texture, GLenum type, const GLuint *coords);
using GLMultiTexCoordP4ui = void(*)(GLenum texture, GLenum type, GLuint coords);
using GLMultiTexCoordP4uiv = void(*)(GLenum texture, GLenum type, const GLuint *coords);
using GLNormalP3ui = void(*)(GLenum type, GLuint coords);
using GLNormalP3uiv = void(*)(GLenum type, const GLuint *coords);
using GLColorP3ui = void(*)(GLenum type, GLuint color);
using GLColorP3uiv = void(*)(GLenum type, const GLuint *color);
using GLColorP4ui = void(*)(GLenum type, GLuint color);
using GLColorP4uiv = void(*)(GLenum type, const GLuint *color);
using GLSecondaryColorP3ui = void(*)(GLenum type, GLuint color);
using GLSecondaryColorP3uiv = void(*)(GLenum type, const GLuint *color);
using GLMinSampleShading = void(*)(GLfloat value);
using GLBlendEquationi = void(*)(GLuint buf, GLenum mode);
using GLBlendEquationSeparatei = void(*)(GLuint buf, GLenum modeRGB, GLenum modeAlpha);
using GLBlendFunci = void(*)(GLuint buf, GLenum src, GLenum dst);
using GLBlendFuncSeparatei = void(*)(GLuint buf, GLenum srcRGB, GLenum dstRGB, GLenum srcAlpha, GLenum dstAlpha);
using GLDrawArraysIndirect = void(*)(GLenum mode, const void *indirect);
using GLDrawElementsIndirect = void(*)(GLenum mode, GLenum type, const void *indirect);
using GLUniform1d = void(*)(GLint location, GLdouble x);
using GLUniform2d = void(*)(GLint location, GLdouble x, GLdouble y);
using GLUniform3d = void(*)(GLint location, GLdouble x, GLdouble y, GLdouble z);
using GLUniform4d = void(*)(GLint location, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
using GLUniform1dv = void(*)(GLint location, GLsizei count, const GLdouble *value);
using GLUniform2dv = void(*)(GLint location, GLsizei count, const GLdouble *value);
using GLUniform3dv = void(*)(GLint location, GLsizei count, const GLdouble *value);
using GLUniform4dv = void(*)(GLint location, GLsizei count, const GLdouble *value);
using GLUniformMatrix2dv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLUniformMatrix3dv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLUniformMatrix4dv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLUniformMatrix2x3dv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLUniformMatrix2x4dv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLUniformMatrix3x2dv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLUniformMatrix3x4dv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLUniformMatrix4x2dv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLUniformMatrix4x3dv = void(*)(GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLGetUniformdv = void(*)(GLuint program, GLint location, GLdouble *params);
using GLGetActiveSubroutineUniformiv = void(*)(GLuint program, GLenum shadertype, GLuint index, GLenum pname, GLint *values);
using GLGetActiveSubroutineUniformName = void(*)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
using GLGetActiveSubroutineName = void(*)(GLuint program, GLenum shadertype, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
using GLUniformSubroutinesuiv = void(*)(GLenum shadertype, GLsizei count, const GLuint *indices);
using GLGetUniformSubroutineuiv = void(*)(GLenum shadertype, GLint location, GLuint *params);
using GLGetProgramStageiv = void(*)(GLuint program, GLenum shadertype, GLenum pname, GLint *values);
using GLPatchParameteri = void(*)(GLenum pname, GLint value);
using GLPatchParameterfv = void(*)(GLenum pname, const GLfloat *values);
using GLBindTransformFeedback = void(*)(GLenum target, GLuint id);
using GLDeleteTransformFeedbacks = void(*)(GLsizei n, const GLuint *ids);
using GLGenTransformFeedbacks = void(*)(GLsizei n, GLuint *ids);
using GLPauseTransformFeedback = void(*)(void);
using GLResumeTransformFeedback = void(*)(void);
using GLDrawTransformFeedback = void(*)(GLenum mode, GLuint id);
using GLDrawTransformFeedbackStream = void(*)(GLenum mode, GLuint id, GLuint stream);
using GLBeginQueryIndexed = void(*)(GLenum target, GLuint index, GLuint id);
using GLEndQueryIndexed = void(*)(GLenum target, GLuint index);
using GLGetQueryIndexediv = void(*)(GLenum target, GLuint index, GLenum pname, GLint *params);
using GLReleaseShaderCompiler = void(*)(void);
using GLShaderBinary = void(*)(GLsizei count, const GLuint *shaders, GLenum binaryFormat, const void *binary, GLsizei length);
using GLGetShaderPrecisionFormat = void(*)(GLenum shadertype, GLenum precisiontype, GLint *range, GLint *precision);
using GLDepthRangef = void(*)(GLfloat n, GLfloat f);
using GLClearDepthf = void(*)(GLfloat d);
using GLGetProgramBinary = void(*)(GLuint program, GLsizei bufSize, GLsizei *length, GLenum *binaryFormat, void *binary);
using GLProgramBinary = void(*)(GLuint program, GLenum binaryFormat, const void *binary, GLsizei length);
using GLProgramParameteri = void(*)(GLuint program, GLenum pname, GLint value);
using GLUseProgramStages = void(*)(GLuint pipeline, GLbitfield stages, GLuint program);
using GLActiveShaderProgram = void(*)(GLuint pipeline, GLuint program);
using GLBindProgramPipeline = void(*)(GLuint pipeline);
using GLDeleteProgramPipelines = void(*)(GLsizei n, const GLuint *pipelines);
using GLGenProgramPipelines = void(*)(GLsizei n, GLuint *pipelines);
using GLGetProgramPipelineiv = void(*)(GLuint pipeline, GLenum pname, GLint *params);
using GLProgramUniform1i = void(*)(GLuint program, GLint location, GLint v0);
using GLProgramUniform1iv = void(*)(GLuint program, GLint location, GLsizei count, const GLint *value);
using GLProgramUniform1f = void(*)(GLuint program, GLint location, GLfloat v0);
using GLProgramUniform1fv = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
using GLProgramUniform1d = void(*)(GLuint program, GLint location, GLdouble v0);
using GLProgramUniform1dv = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
using GLProgramUniform1ui = void(*)(GLuint program, GLint location, GLuint v0);
using GLProgramUniform1uiv = void(*)(GLuint program, GLint location, GLsizei count, const GLuint *value);
using GLProgramUniform2i = void(*)(GLuint program, GLint location, GLint v0, GLint v1);
using GLProgramUniform2iv = void(*)(GLuint program, GLint location, GLsizei count, const GLint *value);
using GLProgramUniform2f = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1);
using GLProgramUniform2fv = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
using GLProgramUniform2d = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1);
using GLProgramUniform2dv = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
using GLProgramUniform2ui = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1);
using GLProgramUniform2uiv = void(*)(GLuint program, GLint location, GLsizei count, const GLuint *value);
using GLProgramUniform3i = void(*)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2);
using GLProgramUniform3iv = void(*)(GLuint program, GLint location, GLsizei count, const GLint *value);
using GLProgramUniform3f = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2);
using GLProgramUniform3fv = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
using GLProgramUniform3d = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2);
using GLProgramUniform3dv = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
using GLProgramUniform3ui = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2);
using GLProgramUniform3uiv = void(*)(GLuint program, GLint location, GLsizei count, const GLuint *value);
using GLProgramUniform4i = void(*)(GLuint program, GLint location, GLint v0, GLint v1, GLint v2, GLint v3);
using GLProgramUniform4iv = void(*)(GLuint program, GLint location, GLsizei count, const GLint *value);
using GLProgramUniform4f = void(*)(GLuint program, GLint location, GLfloat v0, GLfloat v1, GLfloat v2, GLfloat v3);
using GLProgramUniform4fv = void(*)(GLuint program, GLint location, GLsizei count, const GLfloat *value);
using GLProgramUniform4d = void(*)(GLuint program, GLint location, GLdouble v0, GLdouble v1, GLdouble v2, GLdouble v3);
using GLProgramUniform4dv = void(*)(GLuint program, GLint location, GLsizei count, const GLdouble *value);
using GLProgramUniform4ui = void(*)(GLuint program, GLint location, GLuint v0, GLuint v1, GLuint v2, GLuint v3);
using GLProgramUniform4uiv = void(*)(GLuint program, GLint location, GLsizei count, const GLuint *value);
using GLProgramUniformMatrix2fv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLProgramUniformMatrix3fv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLProgramUniformMatrix4fv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLProgramUniformMatrix2dv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLProgramUniformMatrix3dv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLProgramUniformMatrix4dv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLProgramUniformMatrix2x3fv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLProgramUniformMatrix3x2fv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLProgramUniformMatrix2x4fv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLProgramUniformMatrix4x2fv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLProgramUniformMatrix3x4fv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLProgramUniformMatrix4x3fv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLfloat *value);
using GLProgramUniformMatrix2x3dv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLProgramUniformMatrix3x2dv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLProgramUniformMatrix2x4dv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLProgramUniformMatrix4x2dv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLProgramUniformMatrix3x4dv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLProgramUniformMatrix4x3dv = void(*)(GLuint program, GLint location, GLsizei count, GLboolean transpose, const GLdouble *value);
using GLValidateProgramPipeline = void(*)(GLuint pipeline);
using GLGetProgramPipelineInfoLog = void(*)(GLuint pipeline, GLsizei bufSize, GLsizei *length, GLchar *infoLog);
using GLVertexAttribL1d = void(*)(GLuint index, GLdouble x);
using GLVertexAttribL2d = void(*)(GLuint index, GLdouble x, GLdouble y);
using GLVertexAttribL3d = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z);
using GLVertexAttribL4d = void(*)(GLuint index, GLdouble x, GLdouble y, GLdouble z, GLdouble w);
using GLVertexAttribL1dv = void(*)(GLuint index, const GLdouble *v);
using GLVertexAttribL2dv = void(*)(GLuint index, const GLdouble *v);
using GLVertexAttribL3dv = void(*)(GLuint index, const GLdouble *v);
using GLVertexAttribL4dv = void(*)(GLuint index, const GLdouble *v);
using GLVertexAttribLPointer = void(*)(GLuint index, GLint size, GLenum type, GLsizei stride, const void *pointer);
using GLGetVertexAttribLdv = void(*)(GLuint index, GLenum pname, GLdouble *params);
using GLViewportArrayv = void(*)(GLuint first, GLsizei count, const GLfloat *v);
using GLViewportIndexedf = void(*)(GLuint index, GLfloat x, GLfloat y, GLfloat w, GLfloat h);
using GLViewportIndexedfv = void(*)(GLuint index, const GLfloat *v);
using GLScissorArrayv = void(*)(GLuint first, GLsizei count, const GLint *v);
using GLScissorIndexed = void(*)(GLuint index, GLint left, GLint bottom, GLsizei width, GLsizei height);
using GLScissorIndexedv = void(*)(GLuint index, const GLint *v);
using GLDepthRangeArrayv = void(*)(GLuint first, GLsizei count, const GLdouble *v);
using GLDepthRangeIndexed = void(*)(GLuint index, GLdouble n, GLdouble f);
using GLGetFloati_v = void(*)(GLenum target, GLuint index, GLfloat *data);
using GLGetDoublei_v = void(*)(GLenum target, GLuint index, GLdouble *data);
using GLDrawArraysInstancedBaseInstance = void(*)(GLenum mode, GLint first, GLsizei count, GLsizei instancecount, GLuint baseinstance);
using GLDrawElementsInstancedBaseInstance = void(*)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLuint baseinstance);
using GLDrawElementsInstancedBaseVertexBaseInstance = void(*)(GLenum mode, GLsizei count, GLenum type, const void *indices, GLsizei instancecount, GLint basevertex, GLuint baseinstance);
using GLGetInternalformativ = void(*)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint *params);
using GLGetActiveAtomicCounterBufferiv = void(*)(GLuint program, GLuint bufferIndex, GLenum pname, GLint *params);
using GLBindImageTexture = void(*)(GLuint unit, GLuint texture, GLint level, GLboolean layered, GLint layer, GLenum access, GLenum format);
using GLMemoryBarrier = void(*)(GLbitfield barriers);
using GLTexStorage1D = void(*)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width);
using GLTexStorage2D = void(*)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
using GLTexStorage3D = void(*)(GLenum target, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
using GLDrawTransformFeedbackInstanced = void(*)(GLenum mode, GLuint id, GLsizei instancecount);
using GLDrawTransformFeedbackStreamInstanced = void(*)(GLenum mode, GLuint id, GLuint stream, GLsizei instancecount);
using GLClearBufferData = void(*)(GLenum target, GLenum internalformat, GLenum format, GLenum type, const void *data);
using GLClearBufferSubData = void(*)(GLenum target, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
using GLDispatchCompute = void(*)(GLuint num_groups_x, GLuint num_groups_y, GLuint num_groups_z);
using GLDispatchComputeIndirect = void(*)(GLintptr indirect);
using GLCopyImageSubData = void(*)(GLuint srcName, GLenum srcTarget, GLint srcLevel, GLint srcX, GLint srcY, GLint srcZ, GLuint dstName, GLenum dstTarget, GLint dstLevel, GLint dstX, GLint dstY, GLint dstZ, GLsizei srcWidth, GLsizei srcHeight, GLsizei srcDepth);
using GLFramebufferParameteri = void(*)(GLenum target, GLenum pname, GLint param);
using GLGetFramebufferParameteriv = void(*)(GLenum target, GLenum pname, GLint *params);
using GLGetInternalformati64v = void(*)(GLenum target, GLenum internalformat, GLenum pname, GLsizei count, GLint64 *params);
using GLInvalidateTexSubImage = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth);
using GLInvalidateTexImage = void(*)(GLuint texture, GLint level);
using GLInvalidateBufferSubData = void(*)(GLuint buffer, GLintptr offset, GLsizeiptr length);
using GLInvalidateBufferData = void(*)(GLuint buffer);
using GLInvalidateFramebuffer = void(*)(GLenum target, GLsizei numAttachments, const GLenum *attachments);
using GLInvalidateSubFramebuffer = void(*)(GLenum target, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
using GLMultiDrawArraysIndirect = void(*)(GLenum mode, const void *indirect, GLsizei drawcount, GLsizei stride);
using GLMultiDrawElementsIndirect = void(*)(GLenum mode, GLenum type, const void *indirect, GLsizei drawcount, GLsizei stride);
using GLGetProgramInterfaceiv = void(*)(GLuint program, GLenum programInterface, GLenum pname, GLint *params);
using GLGetProgramResourceName = void(*)(GLuint program, GLenum programInterface, GLuint index, GLsizei bufSize, GLsizei *length, GLchar *name);
using GLGetProgramResourceiv = void(*)(GLuint program, GLenum programInterface, GLuint index, GLsizei propCount, const GLenum *props, GLsizei count, GLsizei *length, GLint *params);
using GLShaderStorageBlockBinding = void(*)(GLuint program, GLuint storageBlockIndex, GLuint storageBlockBinding);
using GLTexBufferRange = void(*)(GLenum target, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
using GLTexStorage2DMultisample = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
using GLTexStorage3DMultisample = void(*)(GLenum target, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
using GLTextureView = void(*)(GLuint texture, GLenum target, GLuint origtexture, GLenum internalformat, GLuint minlevel, GLuint numlevels, GLuint minlayer, GLuint numlayers);
using GLBindVertexBuffer = void(*)(GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
using GLVertexAttribFormat = void(*)(GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
using GLVertexAttribIFormat = void(*)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
using GLVertexAttribLFormat = void(*)(GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
using GLVertexAttribBinding = void(*)(GLuint attribindex, GLuint bindingindex);
using GLVertexBindingDivisor = void(*)(GLuint bindingindex, GLuint divisor);
using GLDebugMessageControl = void(*)(GLenum source, GLenum type, GLenum severity, GLsizei count, const GLuint *ids, GLboolean enabled);
using GLDebugMessageInsert = void(*)(GLenum source, GLenum type, GLuint id, GLenum severity, GLsizei length, const GLchar *buf);
using GLDebugMessageCallback = void(*)(void* callback, const void *userParam);
using GLPushDebugGroup = void(*)(GLenum source, GLuint id, GLsizei length, const GLchar *message);
using GLPopDebugGroup = void(*)(void);
using GLObjectLabel = void(*)(GLenum identifier, GLuint name, GLsizei length, const GLchar *label);
using GLGetObjectLabel = void(*)(GLenum identifier, GLuint name, GLsizei bufSize, GLsizei *length, GLchar *label);
using GLObjectPtrLabel = void(*)(const void *ptr, GLsizei length, const GLchar *label);
using GLGetObjectPtrLabel = void(*)(const void *ptr, GLsizei bufSize, GLsizei *length, GLchar *label);
using GLGetPointerv = void(*)(GLenum pname, void **params);
using GLBufferStorage = void(*)(GLenum target, GLsizeiptr size, const void *data, GLbitfield flags);
using GLClearTexImage = void(*)(GLuint texture, GLint level, GLenum format, GLenum type, const void *data);
using GLClearTexSubImage = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *data);
using GLBindBuffersBase = void(*)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers);
using GLBindBuffersRange = void(*)(GLenum target, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizeiptr *sizes);
using GLBindTextures = void(*)(GLuint first, GLsizei count, const GLuint *textures);
using GLBindSamplers = void(*)(GLuint first, GLsizei count, const GLuint *samplers);
using GLBindImageTextures = void(*)(GLuint first, GLsizei count, const GLuint *textures);
using GLBindVertexBuffers = void(*)(GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
using GLClipControl = void(*)(GLenum origin, GLenum depth);
using GLCreateTransformFeedbacks = void(*)(GLsizei n, GLuint *ids);
using GLTransformFeedbackBufferBase = void(*)(GLuint xfb, GLuint index, GLuint buffer);
using GLTransformFeedbackBufferRange = void(*)(GLuint xfb, GLuint index, GLuint buffer, GLintptr offset, GLsizeiptr size);
using GLGetTransformFeedbackiv = void(*)(GLuint xfb, GLenum pname, GLint *param);
using GLGetTransformFeedbacki_v = void(*)(GLuint xfb, GLenum pname, GLuint index, GLint *param);
using GLGetTransformFeedbacki64_v = void(*)(GLuint xfb, GLenum pname, GLuint index, GLint64 *param);
using GLCreateBuffers = void(*)(GLsizei n, GLuint *buffers);
using GLNamedBufferStorage = void(*)(GLuint buffer, GLsizeiptr size, const void *data, GLbitfield flags);
using GLNamedBufferData = void(*)(GLuint buffer, GLsizeiptr size, const void *data, GLenum usage);
using GLNamedBufferSubData = void(*)(GLuint buffer, GLintptr offset, GLsizeiptr size, const void *data);
using GLCopyNamedBufferSubData = void(*)(GLuint readBuffer, GLuint writeBuffer, GLintptr readOffset, GLintptr writeOffset, GLsizeiptr size);
using GLClearNamedBufferData = void(*)(GLuint buffer, GLenum internalformat, GLenum format, GLenum type, const void *data);
using GLClearNamedBufferSubData = void(*)(GLuint buffer, GLenum internalformat, GLintptr offset, GLsizeiptr size, GLenum format, GLenum type, const void *data);
using GLFlushMappedNamedBufferRange = void(*)(GLuint buffer, GLintptr offset, GLsizeiptr length);
using GLGetNamedBufferParameteriv = void(*)(GLuint buffer, GLenum pname, GLint *params);
using GLGetNamedBufferParameteri64v = void(*)(GLuint buffer, GLenum pname, GLint64 *params);
using GLGetNamedBufferPointerv = void(*)(GLuint buffer, GLenum pname, void **params);
using GLGetNamedBufferSubData = void(*)(GLuint buffer, GLintptr offset, GLsizeiptr size, void *data);
using GLCreateFramebuffers = void(*)(GLsizei n, GLuint *framebuffers);
using GLNamedFramebufferRenderbuffer = void(*)(GLuint framebuffer, GLenum attachment, GLenum renderbuffertarget, GLuint renderbuffer);
using GLNamedFramebufferParameteri = void(*)(GLuint framebuffer, GLenum pname, GLint param);
using GLNamedFramebufferTexture = void(*)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level);
using GLNamedFramebufferTextureLayer = void(*)(GLuint framebuffer, GLenum attachment, GLuint texture, GLint level, GLint layer);
using GLNamedFramebufferDrawBuffer = void(*)(GLuint framebuffer, GLenum buf);
using GLNamedFramebufferDrawBuffers = void(*)(GLuint framebuffer, GLsizei n, const GLenum *bufs);
using GLNamedFramebufferReadBuffer = void(*)(GLuint framebuffer, GLenum src);
using GLInvalidateNamedFramebufferData = void(*)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments);
using GLInvalidateNamedFramebufferSubData = void(*)(GLuint framebuffer, GLsizei numAttachments, const GLenum *attachments, GLint x, GLint y, GLsizei width, GLsizei height);
using GLClearNamedFramebufferiv = void(*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLint *value);
using GLClearNamedFramebufferuiv = void(*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLuint *value);
using GLClearNamedFramebufferfv = void(*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, const GLfloat *value);
using GLClearNamedFramebufferfi = void(*)(GLuint framebuffer, GLenum buffer, GLint drawbuffer, GLfloat depth, GLint stencil);
using GLBlitNamedFramebuffer = void(*)(GLuint readFramebuffer, GLuint drawFramebuffer, GLint srcX0, GLint srcY0, GLint srcX1, GLint srcY1, GLint dstX0, GLint dstY0, GLint dstX1, GLint dstY1, GLbitfield mask, GLenum filter);
using GLGetNamedFramebufferParameteriv = void(*)(GLuint framebuffer, GLenum pname, GLint *param);
using GLGetNamedFramebufferAttachmentParameteriv = void(*)(GLuint framebuffer, GLenum attachment, GLenum pname, GLint *params);
using GLCreateRenderbuffers = void(*)(GLsizei n, GLuint *renderbuffers);
using GLNamedRenderbufferStorage = void(*)(GLuint renderbuffer, GLenum internalformat, GLsizei width, GLsizei height);
using GLNamedRenderbufferStorageMultisample = void(*)(GLuint renderbuffer, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height);
using GLGetNamedRenderbufferParameteriv = void(*)(GLuint renderbuffer, GLenum pname, GLint *params);
using GLCreateTextures = void(*)(GLenum target, GLsizei n, GLuint *textures);
using GLTextureBuffer = void(*)(GLuint texture, GLenum internalformat, GLuint buffer);
using GLTextureBufferRange = void(*)(GLuint texture, GLenum internalformat, GLuint buffer, GLintptr offset, GLsizeiptr size);
using GLTextureStorage1D = void(*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width);
using GLTextureStorage2D = void(*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height);
using GLTextureStorage3D = void(*)(GLuint texture, GLsizei levels, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth);
using GLTextureStorage2DMultisample = void(*)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLboolean fixedsamplelocations);
using GLTextureStorage3DMultisample = void(*)(GLuint texture, GLsizei samples, GLenum internalformat, GLsizei width, GLsizei height, GLsizei depth, GLboolean fixedsamplelocations);
using GLTextureSubImage1D = void(*)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLenum type, const void *pixels);
using GLTextureSubImage2D = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLenum type, const void *pixels);
using GLTextureSubImage3D = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, const void *pixels);
using GLCompressedTextureSubImage1D = void(*)(GLuint texture, GLint level, GLint xoffset, GLsizei width, GLenum format, GLsizei imageSize, const void *data);
using GLCompressedTextureSubImage2D = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLsizei width, GLsizei height, GLenum format, GLsizei imageSize, const void *data);
using GLCompressedTextureSubImage3D = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLsizei imageSize, const void *data);
using GLCopyTextureSubImage1D = void(*)(GLuint texture, GLint level, GLint xoffset, GLint x, GLint y, GLsizei width);
using GLCopyTextureSubImage2D = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint x, GLint y, GLsizei width, GLsizei height);
using GLCopyTextureSubImage3D = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLint x, GLint y, GLsizei width, GLsizei height);
using GLTextureParameterf = void(*)(GLuint texture, GLenum pname, GLfloat param);
using GLTextureParameterfv = void(*)(GLuint texture, GLenum pname, const GLfloat *param);
using GLTextureParameteri = void(*)(GLuint texture, GLenum pname, GLint param);
using GLTextureParameterIiv = void(*)(GLuint texture, GLenum pname, const GLint *params);
using GLTextureParameterIuiv = void(*)(GLuint texture, GLenum pname, const GLuint *params);
using GLTextureParameteriv = void(*)(GLuint texture, GLenum pname, const GLint *param);
using GLGenerateTextureMipmap = void(*)(GLuint texture);
using GLBindTextureUnit = void(*)(GLuint unit, GLuint texture);
using GLGetTextureImage = void(*)(GLuint texture, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
using GLGetCompressedTextureImage = void(*)(GLuint texture, GLint level, GLsizei bufSize, void *pixels);
using GLGetTextureLevelParameterfv = void(*)(GLuint texture, GLint level, GLenum pname, GLfloat *params);
using GLGetTextureLevelParameteriv = void(*)(GLuint texture, GLint level, GLenum pname, GLint *params);
using GLGetTextureParameterfv = void(*)(GLuint texture, GLenum pname, GLfloat *params);
using GLGetTextureParameterIiv = void(*)(GLuint texture, GLenum pname, GLint *params);
using GLGetTextureParameterIuiv = void(*)(GLuint texture, GLenum pname, GLuint *params);
using GLGetTextureParameteriv = void(*)(GLuint texture, GLenum pname, GLint *params);
using GLCreateVertexArrays = void(*)(GLsizei n, GLuint *arrays);
using GLDisableVertexArrayAttrib = void(*)(GLuint vaobj, GLuint index);
using GLEnableVertexArrayAttrib = void(*)(GLuint vaobj, GLuint index);
using GLVertexArrayElementBuffer = void(*)(GLuint vaobj, GLuint buffer);
using GLVertexArrayVertexBuffer = void(*)(GLuint vaobj, GLuint bindingindex, GLuint buffer, GLintptr offset, GLsizei stride);
using GLVertexArrayVertexBuffers = void(*)(GLuint vaobj, GLuint first, GLsizei count, const GLuint *buffers, const GLintptr *offsets, const GLsizei *strides);
using GLVertexArrayAttribBinding = void(*)(GLuint vaobj, GLuint attribindex, GLuint bindingindex);
using GLVertexArrayAttribFormat = void(*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLboolean normalized, GLuint relativeoffset);
using GLVertexArrayAttribIFormat = void(*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
using GLVertexArrayAttribLFormat = void(*)(GLuint vaobj, GLuint attribindex, GLint size, GLenum type, GLuint relativeoffset);
using GLVertexArrayBindingDivisor = void(*)(GLuint vaobj, GLuint bindingindex, GLuint divisor);
using GLGetVertexArrayiv = void(*)(GLuint vaobj, GLenum pname, GLint *param);
using GLGetVertexArrayIndexediv = void(*)(GLuint vaobj, GLuint index, GLenum pname, GLint *param);
using GLGetVertexArrayIndexed64iv = void(*)(GLuint vaobj, GLuint index, GLenum pname, GLint64 *param);
using GLCreateSamplers = void(*)(GLsizei n, GLuint *samplers);
using GLCreateProgramPipelines = void(*)(GLsizei n, GLuint *pipelines);
using GLCreateQueries = void(*)(GLenum target, GLsizei n, GLuint *ids);
using GLGetQueryBufferObjecti64v = void(*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
using GLGetQueryBufferObjectiv = void(*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
using GLGetQueryBufferObjectui64v = void(*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
using GLGetQueryBufferObjectuiv = void(*)(GLuint id, GLuint buffer, GLenum pname, GLintptr offset);
using GLMemoryBarrierByRegion = void(*)(GLbitfield barriers);
using GLGetTextureSubImage = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
using GLGetCompressedTextureSubImage = void(*)(GLuint texture, GLint level, GLint xoffset, GLint yoffset, GLint zoffset, GLsizei width, GLsizei height, GLsizei depth, GLsizei bufSize, void *pixels);
using GLGetnCompressedTexImage = void(*)(GLenum target, GLint lod, GLsizei bufSize, void *pixels);
using GLGetnTexImage = void(*)(GLenum target, GLint level, GLenum format, GLenum type, GLsizei bufSize, void *pixels);
using GLGetnUniformdv = void(*)(GLuint program, GLint location, GLsizei bufSize, GLdouble *params);
using GLGetnUniformfv = void(*)(GLuint program, GLint location, GLsizei bufSize, GLfloat *params);
using GLGetnUniformiv = void(*)(GLuint program, GLint location, GLsizei bufSize, GLint *params);
using GLGetnUniformuiv = void(*)(GLuint program, GLint location, GLsizei bufSize, GLuint *params);
using GLReadnPixels = void(*)(GLint x, GLint y, GLsizei width, GLsizei height, GLenum format, GLenum type, GLsizei bufSize, void *data);
using GLGetnMapdv = void(*)(GLenum target, GLenum query, GLsizei bufSize, GLdouble *v);
using GLGetnMapfv = void(*)(GLenum target, GLenum query, GLsizei bufSize, GLfloat *v);
using GLGetnMapiv = void(*)(GLenum target, GLenum query, GLsizei bufSize, GLint *v);
using GLGetnPixelMapfv = void(*)(GLenum map, GLsizei bufSize, GLfloat *values);
using GLGetnPixelMapuiv = void(*)(GLenum map, GLsizei bufSize, GLuint *values);
using GLGetnPixelMapusv = void(*)(GLenum map, GLsizei bufSize, GLushort *values);
using GLGetnPolygonStipple = void(*)(GLsizei bufSize, GLubyte *pattern);
using GLGetnColorTable = void(*)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *table);
using GLGetnConvolutionFilter = void(*)(GLenum target, GLenum format, GLenum type, GLsizei bufSize, void *image);
using GLGetnSeparableFilter = void(*)(GLenum target, GLenum format, GLenum type, GLsizei rowBufSize, void *row, GLsizei columnBufSize, void *column, void *span);
using GLGetnHistogram = void(*)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
using GLGetnMinmax = void(*)(GLenum target, GLboolean reset, GLenum format, GLenum type, GLsizei bufSize, void *values);
using GLTextureBarrier = void(*)(void);
using GLSpecializeShader = void(*)(GLuint shader, const GLchar *pEntryPoint, GLuint numSpecializationConstants, const GLuint *pConstantIndex, const GLuint *pConstantValue);
using GLMultiDrawArraysIndirectCount = void(*)(GLenum mode, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
using GLMultiDrawElementsIndirectCount = void(*)(GLenum mode, GLenum type, const void *indirect, GLintptr drawcount, GLsizei maxdrawcount, GLsizei stride);
using GLPolygonOffsetClamp = void(*)(GLfloat factor, GLfloat units, GLfloat clamp);
using GLBlendBarrier = void(*)(void);
using GLPrimitiveBoundingBox = void(*)(GLfloat minX, GLfloat minY, GLfloat minZ, GLfloat minW, GLfloat maxX, GLfloat maxY, GLfloat maxZ, GLfloat maxW);

extern boom::GLCullFace glCullFace;
extern boom::GLFrontFace glFrontFace;
extern boom::GLHint glHint;
extern boom::GLLineWidth glLineWidth;
extern boom::GLPointSize glPointSize;
extern boom::GLPolygonMode glPolygonMode;
extern boom::GLScissor glScissor;
extern boom::GLTexParameterf glTexParameterf;
extern boom::GLTexParameterfv glTexParameterfv;
extern boom::GLTexParameteri glTexParameteri;
extern boom::GLTexParameteriv glTexParameteriv;
extern boom::GLTexImage1D glTexImage1D;
extern boom::GLTexImage2D glTexImage2D;
extern boom::GLDrawBuffer glDrawBuffer;
extern boom::GLClear glClear;
extern boom::GLClearColor glClearColor;
extern boom::GLClearStencil glClearStencil;
extern boom::GLClearDepth glClearDepth;
extern boom::GLStencilMask glStencilMask;
extern boom::GLColorMask glColorMask;
extern boom::GLDepthMask glDepthMask;
extern boom::GLDisable glDisable;
extern boom::GLEnable glEnable;
extern boom::GLFinish glFinish;
extern boom::GLFlush glFlush;
extern boom::GLBlendFunc glBlendFunc;
extern boom::GLLogicOp glLogicOp;
extern boom::GLStencilFunc glStencilFunc;
extern boom::GLStencilOp glStencilOp;
extern boom::GLDepthFunc glDepthFunc;
extern boom::GLPixelStoref glPixelStoref;
extern boom::GLPixelStorei glPixelStorei;
extern boom::GLReadBuffer glReadBuffer;
extern boom::GLReadPixels glReadPixels;
extern boom::GLGetBooleanv glGetBooleanv;
extern boom::GLGetDoublev glGetDoublev;
extern boom::GLGetFloatv glGetFloatv;
extern boom::GLGetIntegerv glGetIntegerv;
extern boom::GLGetTexImage glGetTexImage;
extern boom::GLGetTexParameterfv glGetTexParameterfv;
extern boom::GLGetTexParameteriv glGetTexParameteriv;
extern boom::GLGetTexLevelParameterfv glGetTexLevelParameterfv;
extern boom::GLGetTexLevelParameteriv glGetTexLevelParameteriv;
extern boom::GLDepthRange glDepthRange;
extern boom::GLViewport glViewport;
extern boom::GLDrawArrays glDrawArrays;
extern boom::GLDrawElements glDrawElements;
extern boom::GLPolygonOffset glPolygonOffset;
extern boom::GLCopyTexImage1D glCopyTexImage1D;
extern boom::GLCopyTexImage2D glCopyTexImage2D;
extern boom::GLCopyTexSubImage1D glCopyTexSubImage1D;
extern boom::GLCopyTexSubImage2D glCopyTexSubImage2D;
extern boom::GLTexSubImage1D glTexSubImage1D;
extern boom::GLTexSubImage2D glTexSubImage2D;
extern boom::GLBindTexture glBindTexture;
extern boom::GLDeleteTextures glDeleteTextures;
extern boom::GLGenTextures glGenTextures;
extern boom::GLDrawRangeElements glDrawRangeElements;
extern boom::GLTexImage3D glTexImage3D;
extern boom::GLTexSubImage3D glTexSubImage3D;
extern boom::GLCopyTexSubImage3D glCopyTexSubImage3D;
extern boom::GLActiveTexture glActiveTexture;
extern boom::GLSampleCoverage glSampleCoverage;
extern boom::GLCompressedTexImage3D glCompressedTexImage3D;
extern boom::GLCompressedTexImage2D glCompressedTexImage2D;
extern boom::GLCompressedTexImage1D glCompressedTexImage1D;
extern boom::GLCompressedTexSubImage3D glCompressedTexSubImage3D;
extern boom::GLCompressedTexSubImage2D glCompressedTexSubImage2D;
extern boom::GLCompressedTexSubImage1D glCompressedTexSubImage1D;
extern boom::GLGetCompressedTexImage glGetCompressedTexImage;
extern boom::GLBlendFuncSeparate glBlendFuncSeparate;
extern boom::GLMultiDrawArrays glMultiDrawArrays;
extern boom::GLMultiDrawElements glMultiDrawElements;
extern boom::GLPointParameterf glPointParameterf;
extern boom::GLPointParameterfv glPointParameterfv;
extern boom::GLPointParameteri glPointParameteri;
extern boom::GLPointParameteriv glPointParameteriv;
extern boom::GLBlendColor glBlendColor;
extern boom::GLBlendEquation glBlendEquation;
extern boom::GLGenQueries glGenQueries;
extern boom::GLDeleteQueries glDeleteQueries;
extern boom::GLBeginQuery glBeginQuery;
extern boom::GLEndQuery glEndQuery;
extern boom::GLGetQueryiv glGetQueryiv;
extern boom::GLGetQueryObjectiv glGetQueryObjectiv;
extern boom::GLGetQueryObjectuiv glGetQueryObjectuiv;
extern boom::GLBindBuffer glBindBuffer;
extern boom::GLDeleteBuffers glDeleteBuffers;
extern boom::GLGenBuffers glGenBuffers;
extern boom::GLBufferData glBufferData;
extern boom::GLBufferSubData glBufferSubData;
extern boom::GLGetBufferSubData glGetBufferSubData;
extern boom::GLGetBufferParameteriv glGetBufferParameteriv;
extern boom::GLGetBufferPointerv glGetBufferPointerv;
extern boom::GLBlendEquationSeparate glBlendEquationSeparate;
extern boom::GLDrawBuffers glDrawBuffers;
extern boom::GLStencilOpSeparate glStencilOpSeparate;
extern boom::GLStencilFuncSeparate glStencilFuncSeparate;
extern boom::GLStencilMaskSeparate glStencilMaskSeparate;
extern boom::GLAttachShader glAttachShader;
extern boom::GLBindAttribLocation glBindAttribLocation;
extern boom::GLCompileShader glCompileShader;
extern boom::GLDeleteProgram glDeleteProgram;
extern boom::GLDeleteShader glDeleteShader;
extern boom::GLDetachShader glDetachShader;
extern boom::GLDisableVertexAttribArray glDisableVertexAttribArray;
extern boom::GLEnableVertexAttribArray glEnableVertexAttribArray;
extern boom::GLGetActiveAttrib glGetActiveAttrib;
extern boom::GLGetActiveUniform glGetActiveUniform;
extern boom::GLGetAttachedShaders glGetAttachedShaders;
extern boom::GLGetProgramiv glGetProgramiv;
extern boom::GLGetProgramInfoLog glGetProgramInfoLog;
extern boom::GLGetShaderiv glGetShaderiv;
extern boom::GLGetShaderInfoLog glGetShaderInfoLog;
extern boom::GLGetShaderSource glGetShaderSource;
extern boom::GLGetUniformfv glGetUniformfv;
extern boom::GLGetUniformiv glGetUniformiv;
extern boom::GLGetVertexAttribdv glGetVertexAttribdv;
extern boom::GLGetVertexAttribfv glGetVertexAttribfv;
extern boom::GLGetVertexAttribiv glGetVertexAttribiv;
extern boom::GLGetVertexAttribPointerv glGetVertexAttribPointerv;
extern boom::GLLinkProgram glLinkProgram;
extern boom::GLShaderSource glShaderSource;
extern boom::GLUseProgram glUseProgram;
extern boom::GLUniform1f glUniform1f;
extern boom::GLUniform2f glUniform2f;
extern boom::GLUniform3f glUniform3f;
extern boom::GLUniform4f glUniform4f;
extern boom::GLUniform1i glUniform1i;
extern boom::GLUniform2i glUniform2i;
extern boom::GLUniform3i glUniform3i;
extern boom::GLUniform4i glUniform4i;
extern boom::GLUniform1fv glUniform1fv;
extern boom::GLUniform2fv glUniform2fv;
extern boom::GLUniform3fv glUniform3fv;
extern boom::GLUniform4fv glUniform4fv;
extern boom::GLUniform1iv glUniform1iv;
extern boom::GLUniform2iv glUniform2iv;
extern boom::GLUniform3iv glUniform3iv;
extern boom::GLUniform4iv glUniform4iv;
extern boom::GLUniformMatrix2fv glUniformMatrix2fv;
extern boom::GLUniformMatrix3fv glUniformMatrix3fv;
extern boom::GLUniformMatrix4fv glUniformMatrix4fv;
extern boom::GLValidateProgram glValidateProgram;
extern boom::GLVertexAttrib1d glVertexAttrib1d;
extern boom::GLVertexAttrib1dv glVertexAttrib1dv;
extern boom::GLVertexAttrib1f glVertexAttrib1f;
extern boom::GLVertexAttrib1fv glVertexAttrib1fv;
extern boom::GLVertexAttrib1s glVertexAttrib1s;
extern boom::GLVertexAttrib1sv glVertexAttrib1sv;
extern boom::GLVertexAttrib2d glVertexAttrib2d;
extern boom::GLVertexAttrib2dv glVertexAttrib2dv;
extern boom::GLVertexAttrib2f glVertexAttrib2f;
extern boom::GLVertexAttrib2fv glVertexAttrib2fv;
extern boom::GLVertexAttrib2s glVertexAttrib2s;
extern boom::GLVertexAttrib2sv glVertexAttrib2sv;
extern boom::GLVertexAttrib3d glVertexAttrib3d;
extern boom::GLVertexAttrib3dv glVertexAttrib3dv;
extern boom::GLVertexAttrib3f glVertexAttrib3f;
extern boom::GLVertexAttrib3fv glVertexAttrib3fv;
extern boom::GLVertexAttrib3s glVertexAttrib3s;
extern boom::GLVertexAttrib3sv glVertexAttrib3sv;
extern boom::GLVertexAttrib4Nbv glVertexAttrib4Nbv;
extern boom::GLVertexAttrib4Niv glVertexAttrib4Niv;
extern boom::GLVertexAttrib4Nsv glVertexAttrib4Nsv;
extern boom::GLVertexAttrib4Nub glVertexAttrib4Nub;
extern boom::GLVertexAttrib4Nubv glVertexAttrib4Nubv;
extern boom::GLVertexAttrib4Nuiv glVertexAttrib4Nuiv;
extern boom::GLVertexAttrib4Nusv glVertexAttrib4Nusv;
extern boom::GLVertexAttrib4bv glVertexAttrib4bv;
extern boom::GLVertexAttrib4d glVertexAttrib4d;
extern boom::GLVertexAttrib4dv glVertexAttrib4dv;
extern boom::GLVertexAttrib4f glVertexAttrib4f;
extern boom::GLVertexAttrib4fv glVertexAttrib4fv;
extern boom::GLVertexAttrib4iv glVertexAttrib4iv;
extern boom::GLVertexAttrib4s glVertexAttrib4s;
extern boom::GLVertexAttrib4sv glVertexAttrib4sv;
extern boom::GLVertexAttrib4ubv glVertexAttrib4ubv;
extern boom::GLVertexAttrib4uiv glVertexAttrib4uiv;
extern boom::GLVertexAttrib4usv glVertexAttrib4usv;
extern boom::GLVertexAttribPointer glVertexAttribPointer;
extern boom::GLUniformMatrix2x3fv glUniformMatrix2x3fv;
extern boom::GLUniformMatrix3x2fv glUniformMatrix3x2fv;
extern boom::GLUniformMatrix2x4fv glUniformMatrix2x4fv;
extern boom::GLUniformMatrix4x2fv glUniformMatrix4x2fv;
extern boom::GLUniformMatrix3x4fv glUniformMatrix3x4fv;
extern boom::GLUniformMatrix4x3fv glUniformMatrix4x3fv;
extern boom::GLColorMaski glColorMaski;
extern boom::GLGetBooleani_v glGetBooleani_v;
extern boom::GLGetIntegeri_v glGetIntegeri_v;
extern boom::GLEnablei glEnablei;
extern boom::GLDisablei glDisablei;
extern boom::GLBeginTransformFeedback glBeginTransformFeedback;
extern boom::GLEndTransformFeedback glEndTransformFeedback;
extern boom::GLBindBufferRange glBindBufferRange;
extern boom::GLBindBufferBase glBindBufferBase;
extern boom::GLTransformFeedbackVaryings glTransformFeedbackVaryings;
extern boom::GLGetTransformFeedbackVarying glGetTransformFeedbackVarying;
extern boom::GLClampColor glClampColor;
extern boom::GLBeginConditionalRender glBeginConditionalRender;
extern boom::GLEndConditionalRender glEndConditionalRender;
extern boom::GLVertexAttribIPointer glVertexAttribIPointer;
extern boom::GLGetVertexAttribIiv glGetVertexAttribIiv;
extern boom::GLGetVertexAttribIuiv glGetVertexAttribIuiv;
extern boom::GLVertexAttribI1i glVertexAttribI1i;
extern boom::GLVertexAttribI2i glVertexAttribI2i;
extern boom::GLVertexAttribI3i glVertexAttribI3i;
extern boom::GLVertexAttribI4i glVertexAttribI4i;
extern boom::GLVertexAttribI1ui glVertexAttribI1ui;
extern boom::GLVertexAttribI2ui glVertexAttribI2ui;
extern boom::GLVertexAttribI3ui glVertexAttribI3ui;
extern boom::GLVertexAttribI4ui glVertexAttribI4ui;
extern boom::GLVertexAttribI1iv glVertexAttribI1iv;
extern boom::GLVertexAttribI2iv glVertexAttribI2iv;
extern boom::GLVertexAttribI3iv glVertexAttribI3iv;
extern boom::GLVertexAttribI4iv glVertexAttribI4iv;
extern boom::GLVertexAttribI1uiv glVertexAttribI1uiv;
extern boom::GLVertexAttribI2uiv glVertexAttribI2uiv;
extern boom::GLVertexAttribI3uiv glVertexAttribI3uiv;
extern boom::GLVertexAttribI4uiv glVertexAttribI4uiv;
extern boom::GLVertexAttribI4bv glVertexAttribI4bv;
extern boom::GLVertexAttribI4sv glVertexAttribI4sv;
extern boom::GLVertexAttribI4ubv glVertexAttribI4ubv;
extern boom::GLVertexAttribI4usv glVertexAttribI4usv;
extern boom::GLGetUniformuiv glGetUniformuiv;
extern boom::GLBindFragDataLocation glBindFragDataLocation;
extern boom::GLUniform1ui glUniform1ui;
extern boom::GLUniform2ui glUniform2ui;
extern boom::GLUniform3ui glUniform3ui;
extern boom::GLUniform4ui glUniform4ui;
extern boom::GLUniform1uiv glUniform1uiv;
extern boom::GLUniform2uiv glUniform2uiv;
extern boom::GLUniform3uiv glUniform3uiv;
extern boom::GLUniform4uiv glUniform4uiv;
extern boom::GLTexParameterIiv glTexParameterIiv;
extern boom::GLTexParameterIuiv glTexParameterIuiv;
extern boom::GLGetTexParameterIiv glGetTexParameterIiv;
extern boom::GLGetTexParameterIuiv glGetTexParameterIuiv;
extern boom::GLClearBufferiv glClearBufferiv;
extern boom::GLClearBufferuiv glClearBufferuiv;
extern boom::GLClearBufferfv glClearBufferfv;
extern boom::GLClearBufferfi glClearBufferfi;
extern boom::GLBindRenderbuffer glBindRenderbuffer;
extern boom::GLDeleteRenderbuffers glDeleteRenderbuffers;
extern boom::GLGenRenderbuffers glGenRenderbuffers;
extern boom::GLRenderbufferStorage glRenderbufferStorage;
extern boom::GLGetRenderbufferParameteriv glGetRenderbufferParameteriv;
extern boom::GLBindFramebuffer glBindFramebuffer;
extern boom::GLDeleteFramebuffers glDeleteFramebuffers;
extern boom::GLGenFramebuffers glGenFramebuffers;
extern boom::GLFramebufferTexture1D glFramebufferTexture1D;
extern boom::GLFramebufferTexture2D glFramebufferTexture2D;
extern boom::GLFramebufferTexture3D glFramebufferTexture3D;
extern boom::GLFramebufferRenderbuffer glFramebufferRenderbuffer;
extern boom::GLGetFramebufferAttachmentParameteriv glGetFramebufferAttachmentParameteriv;
extern boom::GLGenerateMipmap glGenerateMipmap;
extern boom::GLBlitFramebuffer glBlitFramebuffer;
extern boom::GLRenderbufferStorageMultisample glRenderbufferStorageMultisample;
extern boom::GLFramebufferTextureLayer glFramebufferTextureLayer;
extern boom::GLFlushMappedBufferRange glFlushMappedBufferRange;
extern boom::GLBindVertexArray glBindVertexArray;
extern boom::GLDeleteVertexArrays glDeleteVertexArrays;
extern boom::GLGenVertexArrays glGenVertexArrays;
extern boom::GLDrawArraysInstanced glDrawArraysInstanced;
extern boom::GLDrawElementsInstanced glDrawElementsInstanced;
extern boom::GLTexBuffer glTexBuffer;
extern boom::GLPrimitiveRestartIndex glPrimitiveRestartIndex;
extern boom::GLCopyBufferSubData glCopyBufferSubData;
extern boom::GLGetUniformIndices glGetUniformIndices;
extern boom::GLGetActiveUniformsiv glGetActiveUniformsiv;
extern boom::GLGetActiveUniformName glGetActiveUniformName;
extern boom::GLGetActiveUniformBlockiv glGetActiveUniformBlockiv;
extern boom::GLGetActiveUniformBlockName glGetActiveUniformBlockName;
extern boom::GLUniformBlockBinding glUniformBlockBinding;
extern boom::GLDrawElementsBaseVertex glDrawElementsBaseVertex;
extern boom::GLDrawRangeElementsBaseVertex glDrawRangeElementsBaseVertex;
extern boom::GLDrawElementsInstancedBaseVertex glDrawElementsInstancedBaseVertex;
extern boom::GLMultiDrawElementsBaseVertex glMultiDrawElementsBaseVertex;
extern boom::GLProvokingVertex glProvokingVertex;
extern boom::GLDeleteSync glDeleteSync;
extern boom::GLWaitSync glWaitSync;
extern boom::GLGetInteger64v glGetInteger64v;
extern boom::GLGetSynciv glGetSynciv;
extern boom::GLGetInteger64i_v glGetInteger64i_v;
extern boom::GLGetBufferParameteri64v glGetBufferParameteri64v;
extern boom::GLFramebufferTexture glFramebufferTexture;
extern boom::GLTexImage2DMultisample glTexImage2DMultisample;
extern boom::GLTexImage3DMultisample glTexImage3DMultisample;
extern boom::GLGetMultisamplefv glGetMultisamplefv;
extern boom::GLSampleMaski glSampleMaski;
extern boom::GLBindFragDataLocationIndexed glBindFragDataLocationIndexed;
extern boom::GLGenSamplers glGenSamplers;
extern boom::GLDeleteSamplers glDeleteSamplers;
extern boom::GLBindSampler glBindSampler;
extern boom::GLSamplerParameteri glSamplerParameteri;
extern boom::GLSamplerParameteriv glSamplerParameteriv;
extern boom::GLSamplerParameterf glSamplerParameterf;
extern boom::GLSamplerParameterfv glSamplerParameterfv;
extern boom::GLSamplerParameterIiv glSamplerParameterIiv;
extern boom::GLSamplerParameterIuiv glSamplerParameterIuiv;
extern boom::GLGetSamplerParameteriv glGetSamplerParameteriv;
extern boom::GLGetSamplerParameterIiv glGetSamplerParameterIiv;
extern boom::GLGetSamplerParameterfv glGetSamplerParameterfv;
extern boom::GLGetSamplerParameterIuiv glGetSamplerParameterIuiv;
extern boom::GLQueryCounter glQueryCounter;
extern boom::GLGetQueryObjecti64v glGetQueryObjecti64v;
extern boom::GLGetQueryObjectui64v glGetQueryObjectui64v;
extern boom::GLVertexAttribDivisor glVertexAttribDivisor;
extern boom::GLVertexAttribP1ui glVertexAttribP1ui;
extern boom::GLVertexAttribP1uiv glVertexAttribP1uiv;
extern boom::GLVertexAttribP2ui glVertexAttribP2ui;
extern boom::GLVertexAttribP2uiv glVertexAttribP2uiv;
extern boom::GLVertexAttribP3ui glVertexAttribP3ui;
extern boom::GLVertexAttribP3uiv glVertexAttribP3uiv;
extern boom::GLVertexAttribP4ui glVertexAttribP4ui;
extern boom::GLVertexAttribP4uiv glVertexAttribP4uiv;
extern boom::GLVertexP2ui glVertexP2ui;
extern boom::GLVertexP2uiv glVertexP2uiv;
extern boom::GLVertexP3ui glVertexP3ui;
extern boom::GLVertexP3uiv glVertexP3uiv;
extern boom::GLVertexP4ui glVertexP4ui;
extern boom::GLVertexP4uiv glVertexP4uiv;
extern boom::GLTexCoordP1ui glTexCoordP1ui;
extern boom::GLTexCoordP1uiv glTexCoordP1uiv;
extern boom::GLTexCoordP2ui glTexCoordP2ui;
extern boom::GLTexCoordP2uiv glTexCoordP2uiv;
extern boom::GLTexCoordP3ui glTexCoordP3ui;
extern boom::GLTexCoordP3uiv glTexCoordP3uiv;
extern boom::GLTexCoordP4ui glTexCoordP4ui;
extern boom::GLTexCoordP4uiv glTexCoordP4uiv;
extern boom::GLMultiTexCoordP1ui glMultiTexCoordP1ui;
extern boom::GLMultiTexCoordP1uiv glMultiTexCoordP1uiv;
extern boom::GLMultiTexCoordP2ui glMultiTexCoordP2ui;
extern boom::GLMultiTexCoordP2uiv glMultiTexCoordP2uiv;
extern boom::GLMultiTexCoordP3ui glMultiTexCoordP3ui;
extern boom::GLMultiTexCoordP3uiv glMultiTexCoordP3uiv;
extern boom::GLMultiTexCoordP4ui glMultiTexCoordP4ui;
extern boom::GLMultiTexCoordP4uiv glMultiTexCoordP4uiv;
extern boom::GLNormalP3ui glNormalP3ui;
extern boom::GLNormalP3uiv glNormalP3uiv;
extern boom::GLColorP3ui glColorP3ui;
extern boom::GLColorP3uiv glColorP3uiv;
extern boom::GLColorP4ui glColorP4ui;
extern boom::GLColorP4uiv glColorP4uiv;
extern boom::GLSecondaryColorP3ui glSecondaryColorP3ui;
extern boom::GLSecondaryColorP3uiv glSecondaryColorP3uiv;
extern boom::GLMinSampleShading glMinSampleShading;
extern boom::GLBlendEquationi glBlendEquationi;
extern boom::GLBlendEquationSeparatei glBlendEquationSeparatei;
extern boom::GLBlendFunci glBlendFunci;
extern boom::GLBlendFuncSeparatei glBlendFuncSeparatei;
extern boom::GLDrawArraysIndirect glDrawArraysIndirect;
extern boom::GLDrawElementsIndirect glDrawElementsIndirect;
extern boom::GLUniform1d glUniform1d;
extern boom::GLUniform2d glUniform2d;
extern boom::GLUniform3d glUniform3d;
extern boom::GLUniform4d glUniform4d;
extern boom::GLUniform1dv glUniform1dv;
extern boom::GLUniform2dv glUniform2dv;
extern boom::GLUniform3dv glUniform3dv;
extern boom::GLUniform4dv glUniform4dv;
extern boom::GLUniformMatrix2dv glUniformMatrix2dv;
extern boom::GLUniformMatrix3dv glUniformMatrix3dv;
extern boom::GLUniformMatrix4dv glUniformMatrix4dv;
extern boom::GLUniformMatrix2x3dv glUniformMatrix2x3dv;
extern boom::GLUniformMatrix2x4dv glUniformMatrix2x4dv;
extern boom::GLUniformMatrix3x2dv glUniformMatrix3x2dv;
extern boom::GLUniformMatrix3x4dv glUniformMatrix3x4dv;
extern boom::GLUniformMatrix4x2dv glUniformMatrix4x2dv;
extern boom::GLUniformMatrix4x3dv glUniformMatrix4x3dv;
extern boom::GLGetUniformdv glGetUniformdv;
extern boom::GLGetActiveSubroutineUniformiv glGetActiveSubroutineUniformiv;
extern boom::GLGetActiveSubroutineUniformName glGetActiveSubroutineUniformName;
extern boom::GLGetActiveSubroutineName glGetActiveSubroutineName;
extern boom::GLUniformSubroutinesuiv glUniformSubroutinesuiv;
extern boom::GLGetUniformSubroutineuiv glGetUniformSubroutineuiv;
extern boom::GLGetProgramStageiv glGetProgramStageiv;
extern boom::GLPatchParameteri glPatchParameteri;
extern boom::GLPatchParameterfv glPatchParameterfv;
extern boom::GLBindTransformFeedback glBindTransformFeedback;
extern boom::GLDeleteTransformFeedbacks glDeleteTransformFeedbacks;
extern boom::GLGenTransformFeedbacks glGenTransformFeedbacks;
extern boom::GLPauseTransformFeedback glPauseTransformFeedback;
extern boom::GLResumeTransformFeedback glResumeTransformFeedback;
extern boom::GLDrawTransformFeedback glDrawTransformFeedback;
extern boom::GLDrawTransformFeedbackStream glDrawTransformFeedbackStream;
extern boom::GLBeginQueryIndexed glBeginQueryIndexed;
extern boom::GLEndQueryIndexed glEndQueryIndexed;
extern boom::GLGetQueryIndexediv glGetQueryIndexediv;
extern boom::GLReleaseShaderCompiler glReleaseShaderCompiler;
extern boom::GLShaderBinary glShaderBinary;
extern boom::GLGetShaderPrecisionFormat glGetShaderPrecisionFormat;
extern boom::GLDepthRangef glDepthRangef;
extern boom::GLClearDepthf glClearDepthf;
extern boom::GLGetProgramBinary glGetProgramBinary;
extern boom::GLProgramBinary glProgramBinary;
extern boom::GLProgramParameteri glProgramParameteri;
extern boom::GLUseProgramStages glUseProgramStages;
extern boom::GLActiveShaderProgram glActiveShaderProgram;
extern boom::GLBindProgramPipeline glBindProgramPipeline;
extern boom::GLDeleteProgramPipelines glDeleteProgramPipelines;
extern boom::GLGenProgramPipelines glGenProgramPipelines;
extern boom::GLGetProgramPipelineiv glGetProgramPipelineiv;
extern boom::GLProgramUniform1i glProgramUniform1i;
extern boom::GLProgramUniform1iv glProgramUniform1iv;
extern boom::GLProgramUniform1f glProgramUniform1f;
extern boom::GLProgramUniform1fv glProgramUniform1fv;
extern boom::GLProgramUniform1d glProgramUniform1d;
extern boom::GLProgramUniform1dv glProgramUniform1dv;
extern boom::GLProgramUniform1ui glProgramUniform1ui;
extern boom::GLProgramUniform1uiv glProgramUniform1uiv;
extern boom::GLProgramUniform2i glProgramUniform2i;
extern boom::GLProgramUniform2iv glProgramUniform2iv;
extern boom::GLProgramUniform2f glProgramUniform2f;
extern boom::GLProgramUniform2fv glProgramUniform2fv;
extern boom::GLProgramUniform2d glProgramUniform2d;
extern boom::GLProgramUniform2dv glProgramUniform2dv;
extern boom::GLProgramUniform2ui glProgramUniform2ui;
extern boom::GLProgramUniform2uiv glProgramUniform2uiv;
extern boom::GLProgramUniform3i glProgramUniform3i;
extern boom::GLProgramUniform3iv glProgramUniform3iv;
extern boom::GLProgramUniform3f glProgramUniform3f;
extern boom::GLProgramUniform3fv glProgramUniform3fv;
extern boom::GLProgramUniform3d glProgramUniform3d;
extern boom::GLProgramUniform3dv glProgramUniform3dv;
extern boom::GLProgramUniform3ui glProgramUniform3ui;
extern boom::GLProgramUniform3uiv glProgramUniform3uiv;
extern boom::GLProgramUniform4i glProgramUniform4i;
extern boom::GLProgramUniform4iv glProgramUniform4iv;
extern boom::GLProgramUniform4f glProgramUniform4f;
extern boom::GLProgramUniform4fv glProgramUniform4fv;
extern boom::GLProgramUniform4d glProgramUniform4d;
extern boom::GLProgramUniform4dv glProgramUniform4dv;
extern boom::GLProgramUniform4ui glProgramUniform4ui;
extern boom::GLProgramUniform4uiv glProgramUniform4uiv;
extern boom::GLProgramUniformMatrix2fv glProgramUniformMatrix2fv;
extern boom::GLProgramUniformMatrix3fv glProgramUniformMatrix3fv;
extern boom::GLProgramUniformMatrix4fv glProgramUniformMatrix4fv;
extern boom::GLProgramUniformMatrix2dv glProgramUniformMatrix2dv;
extern boom::GLProgramUniformMatrix3dv glProgramUniformMatrix3dv;
extern boom::GLProgramUniformMatrix4dv glProgramUniformMatrix4dv;
extern boom::GLProgramUniformMatrix2x3fv glProgramUniformMatrix2x3fv;
extern boom::GLProgramUniformMatrix3x2fv glProgramUniformMatrix3x2fv;
extern boom::GLProgramUniformMatrix2x4fv glProgramUniformMatrix2x4fv;
extern boom::GLProgramUniformMatrix4x2fv glProgramUniformMatrix4x2fv;
extern boom::GLProgramUniformMatrix3x4fv glProgramUniformMatrix3x4fv;
extern boom::GLProgramUniformMatrix4x3fv glProgramUniformMatrix4x3fv;
extern boom::GLProgramUniformMatrix2x3dv glProgramUniformMatrix2x3dv;
extern boom::GLProgramUniformMatrix3x2dv glProgramUniformMatrix3x2dv;
extern boom::GLProgramUniformMatrix2x4dv glProgramUniformMatrix2x4dv;
extern boom::GLProgramUniformMatrix4x2dv glProgramUniformMatrix4x2dv;
extern boom::GLProgramUniformMatrix3x4dv glProgramUniformMatrix3x4dv;
extern boom::GLProgramUniformMatrix4x3dv glProgramUniformMatrix4x3dv;
extern boom::GLValidateProgramPipeline glValidateProgramPipeline;
extern boom::GLGetProgramPipelineInfoLog glGetProgramPipelineInfoLog;
extern boom::GLVertexAttribL1d glVertexAttribL1d;
extern boom::GLVertexAttribL2d glVertexAttribL2d;
extern boom::GLVertexAttribL3d glVertexAttribL3d;
extern boom::GLVertexAttribL4d glVertexAttribL4d;
extern boom::GLVertexAttribL1dv glVertexAttribL1dv;
extern boom::GLVertexAttribL2dv glVertexAttribL2dv;
extern boom::GLVertexAttribL3dv glVertexAttribL3dv;
extern boom::GLVertexAttribL4dv glVertexAttribL4dv;
extern boom::GLVertexAttribLPointer glVertexAttribLPointer;
extern boom::GLGetVertexAttribLdv glGetVertexAttribLdv;
extern boom::GLViewportArrayv glViewportArrayv;
extern boom::GLViewportIndexedf glViewportIndexedf;
extern boom::GLViewportIndexedfv glViewportIndexedfv;
extern boom::GLScissorArrayv glScissorArrayv;
extern boom::GLScissorIndexed glScissorIndexed;
extern boom::GLScissorIndexedv glScissorIndexedv;
extern boom::GLDepthRangeArrayv glDepthRangeArrayv;
extern boom::GLDepthRangeIndexed glDepthRangeIndexed;
extern boom::GLGetFloati_v glGetFloati_v;
extern boom::GLGetDoublei_v glGetDoublei_v;
extern boom::GLDrawArraysInstancedBaseInstance glDrawArraysInstancedBaseInstance;
extern boom::GLDrawElementsInstancedBaseInstance glDrawElementsInstancedBaseInstance;
extern boom::GLDrawElementsInstancedBaseVertexBaseInstance glDrawElementsInstancedBaseVertexBaseInstance;
extern boom::GLGetInternalformativ glGetInternalformativ;
extern boom::GLGetActiveAtomicCounterBufferiv glGetActiveAtomicCounterBufferiv;
extern boom::GLBindImageTexture glBindImageTexture;
extern boom::GLMemoryBarrier glMemoryBarrier;
extern boom::GLTexStorage1D glTexStorage1D;
extern boom::GLTexStorage2D glTexStorage2D;
extern boom::GLTexStorage3D glTexStorage3D;
extern boom::GLDrawTransformFeedbackInstanced glDrawTransformFeedbackInstanced;
extern boom::GLDrawTransformFeedbackStreamInstanced glDrawTransformFeedbackStreamInstanced;
extern boom::GLClearBufferData glClearBufferData;
extern boom::GLClearBufferSubData glClearBufferSubData;
extern boom::GLDispatchCompute glDispatchCompute;
extern boom::GLDispatchComputeIndirect glDispatchComputeIndirect;
extern boom::GLCopyImageSubData glCopyImageSubData;
extern boom::GLFramebufferParameteri glFramebufferParameteri;
extern boom::GLGetFramebufferParameteriv glGetFramebufferParameteriv;
extern boom::GLGetInternalformati64v glGetInternalformati64v;
extern boom::GLInvalidateTexSubImage glInvalidateTexSubImage;
extern boom::GLInvalidateTexImage glInvalidateTexImage;
extern boom::GLInvalidateBufferSubData glInvalidateBufferSubData;
extern boom::GLInvalidateBufferData glInvalidateBufferData;
extern boom::GLInvalidateFramebuffer glInvalidateFramebuffer;
extern boom::GLInvalidateSubFramebuffer glInvalidateSubFramebuffer;
extern boom::GLMultiDrawArraysIndirect glMultiDrawArraysIndirect;
extern boom::GLMultiDrawElementsIndirect glMultiDrawElementsIndirect;
extern boom::GLGetProgramInterfaceiv glGetProgramInterfaceiv;
extern boom::GLGetProgramResourceName glGetProgramResourceName;
extern boom::GLGetProgramResourceiv glGetProgramResourceiv;
extern boom::GLShaderStorageBlockBinding glShaderStorageBlockBinding;
extern boom::GLTexBufferRange glTexBufferRange;
extern boom::GLTexStorage2DMultisample glTexStorage2DMultisample;
extern boom::GLTexStorage3DMultisample glTexStorage3DMultisample;
extern boom::GLTextureView glTextureView;
extern boom::GLBindVertexBuffer glBindVertexBuffer;
extern boom::GLVertexAttribFormat glVertexAttribFormat;
extern boom::GLVertexAttribIFormat glVertexAttribIFormat;
extern boom::GLVertexAttribLFormat glVertexAttribLFormat;
extern boom::GLVertexAttribBinding glVertexAttribBinding;
extern boom::GLVertexBindingDivisor glVertexBindingDivisor;
extern boom::GLDebugMessageControl glDebugMessageControl;
extern boom::GLDebugMessageInsert glDebugMessageInsert;
extern boom::GLDebugMessageCallback glDebugMessageCallback;
extern boom::GLPushDebugGroup glPushDebugGroup;
extern boom::GLPopDebugGroup glPopDebugGroup;
extern boom::GLObjectLabel glObjectLabel;
extern boom::GLGetObjectLabel glGetObjectLabel;
extern boom::GLObjectPtrLabel glObjectPtrLabel;
extern boom::GLGetObjectPtrLabel glGetObjectPtrLabel;
extern boom::GLGetPointerv glGetPointerv;
extern boom::GLBufferStorage glBufferStorage;
extern boom::GLClearTexImage glClearTexImage;
extern boom::GLClearTexSubImage glClearTexSubImage;
extern boom::GLBindBuffersBase glBindBuffersBase;
extern boom::GLBindBuffersRange glBindBuffersRange;
extern boom::GLBindTextures glBindTextures;
extern boom::GLBindSamplers glBindSamplers;
extern boom::GLBindImageTextures glBindImageTextures;
extern boom::GLBindVertexBuffers glBindVertexBuffers;
extern boom::GLClipControl glClipControl;
extern boom::GLCreateTransformFeedbacks glCreateTransformFeedbacks;
extern boom::GLTransformFeedbackBufferBase glTransformFeedbackBufferBase;
extern boom::GLTransformFeedbackBufferRange glTransformFeedbackBufferRange;
extern boom::GLGetTransformFeedbackiv glGetTransformFeedbackiv;
extern boom::GLGetTransformFeedbacki_v glGetTransformFeedbacki_v;
extern boom::GLGetTransformFeedbacki64_v glGetTransformFeedbacki64_v;
extern boom::GLCreateBuffers glCreateBuffers;
extern boom::GLNamedBufferStorage glNamedBufferStorage;
extern boom::GLNamedBufferData glNamedBufferData;
extern boom::GLNamedBufferSubData glNamedBufferSubData;
extern boom::GLCopyNamedBufferSubData glCopyNamedBufferSubData;
extern boom::GLClearNamedBufferData glClearNamedBufferData;
extern boom::GLClearNamedBufferSubData glClearNamedBufferSubData;
extern boom::GLFlushMappedNamedBufferRange glFlushMappedNamedBufferRange;
extern boom::GLGetNamedBufferParameteriv glGetNamedBufferParameteriv;
extern boom::GLGetNamedBufferParameteri64v glGetNamedBufferParameteri64v;
extern boom::GLGetNamedBufferPointerv glGetNamedBufferPointerv;
extern boom::GLGetNamedBufferSubData glGetNamedBufferSubData;
extern boom::GLCreateFramebuffers glCreateFramebuffers;
extern boom::GLNamedFramebufferRenderbuffer glNamedFramebufferRenderbuffer;
extern boom::GLNamedFramebufferParameteri glNamedFramebufferParameteri;
extern boom::GLNamedFramebufferTexture glNamedFramebufferTexture;
extern boom::GLNamedFramebufferTextureLayer glNamedFramebufferTextureLayer;
extern boom::GLNamedFramebufferDrawBuffer glNamedFramebufferDrawBuffer;
extern boom::GLNamedFramebufferDrawBuffers glNamedFramebufferDrawBuffers;
extern boom::GLNamedFramebufferReadBuffer glNamedFramebufferReadBuffer;
extern boom::GLInvalidateNamedFramebufferData glInvalidateNamedFramebufferData;
extern boom::GLInvalidateNamedFramebufferSubData glInvalidateNamedFramebufferSubData;
extern boom::GLClearNamedFramebufferiv glClearNamedFramebufferiv;
extern boom::GLClearNamedFramebufferuiv glClearNamedFramebufferuiv;
extern boom::GLClearNamedFramebufferfv glClearNamedFramebufferfv;
extern boom::GLClearNamedFramebufferfi glClearNamedFramebufferfi;
extern boom::GLBlitNamedFramebuffer glBlitNamedFramebuffer;
extern boom::GLGetNamedFramebufferParameteriv glGetNamedFramebufferParameteriv;
extern boom::GLGetNamedFramebufferAttachmentParameteriv glGetNamedFramebufferAttachmentParameteriv;
extern boom::GLCreateRenderbuffers glCreateRenderbuffers;
extern boom::GLNamedRenderbufferStorage glNamedRenderbufferStorage;
extern boom::GLNamedRenderbufferStorageMultisample glNamedRenderbufferStorageMultisample;
extern boom::GLGetNamedRenderbufferParameteriv glGetNamedRenderbufferParameteriv;
extern boom::GLCreateTextures glCreateTextures;
extern boom::GLTextureBuffer glTextureBuffer;
extern boom::GLTextureBufferRange glTextureBufferRange;
extern boom::GLTextureStorage1D glTextureStorage1D;
extern boom::GLTextureStorage2D glTextureStorage2D;
extern boom::GLTextureStorage3D glTextureStorage3D;
extern boom::GLTextureStorage2DMultisample glTextureStorage2DMultisample;
extern boom::GLTextureStorage3DMultisample glTextureStorage3DMultisample;
extern boom::GLTextureSubImage1D glTextureSubImage1D;
extern boom::GLTextureSubImage2D glTextureSubImage2D;
extern boom::GLTextureSubImage3D glTextureSubImage3D;
extern boom::GLCompressedTextureSubImage1D glCompressedTextureSubImage1D;
extern boom::GLCompressedTextureSubImage2D glCompressedTextureSubImage2D;
extern boom::GLCompressedTextureSubImage3D glCompressedTextureSubImage3D;
extern boom::GLCopyTextureSubImage1D glCopyTextureSubImage1D;
extern boom::GLCopyTextureSubImage2D glCopyTextureSubImage2D;
extern boom::GLCopyTextureSubImage3D glCopyTextureSubImage3D;
extern boom::GLTextureParameterf glTextureParameterf;
extern boom::GLTextureParameterfv glTextureParameterfv;
extern boom::GLTextureParameteri glTextureParameteri;
extern boom::GLTextureParameterIiv glTextureParameterIiv;
extern boom::GLTextureParameterIuiv glTextureParameterIuiv;
extern boom::GLTextureParameteriv glTextureParameteriv;
extern boom::GLGenerateTextureMipmap glGenerateTextureMipmap;
extern boom::GLBindTextureUnit glBindTextureUnit;
extern boom::GLGetTextureImage glGetTextureImage;
extern boom::GLGetCompressedTextureImage glGetCompressedTextureImage;
extern boom::GLGetTextureLevelParameterfv glGetTextureLevelParameterfv;
extern boom::GLGetTextureLevelParameteriv glGetTextureLevelParameteriv;
extern boom::GLGetTextureParameterfv glGetTextureParameterfv;
extern boom::GLGetTextureParameterIiv glGetTextureParameterIiv;
extern boom::GLGetTextureParameterIuiv glGetTextureParameterIuiv;
extern boom::GLGetTextureParameteriv glGetTextureParameteriv;
extern boom::GLCreateVertexArrays glCreateVertexArrays;
extern boom::GLDisableVertexArrayAttrib glDisableVertexArrayAttrib;
extern boom::GLEnableVertexArrayAttrib glEnableVertexArrayAttrib;
extern boom::GLVertexArrayElementBuffer glVertexArrayElementBuffer;
extern boom::GLVertexArrayVertexBuffer glVertexArrayVertexBuffer;
extern boom::GLVertexArrayVertexBuffers glVertexArrayVertexBuffers;
extern boom::GLVertexArrayAttribBinding glVertexArrayAttribBinding;
extern boom::GLVertexArrayAttribFormat glVertexArrayAttribFormat;
extern boom::GLVertexArrayAttribIFormat glVertexArrayAttribIFormat;
extern boom::GLVertexArrayAttribLFormat glVertexArrayAttribLFormat;
extern boom::GLVertexArrayBindingDivisor glVertexArrayBindingDivisor;
extern boom::GLGetVertexArrayiv glGetVertexArrayiv;
extern boom::GLGetVertexArrayIndexediv glGetVertexArrayIndexediv;
extern boom::GLGetVertexArrayIndexed64iv glGetVertexArrayIndexed64iv;
extern boom::GLCreateSamplers glCreateSamplers;
extern boom::GLCreateProgramPipelines glCreateProgramPipelines;
extern boom::GLCreateQueries glCreateQueries;
extern boom::GLGetQueryBufferObjecti64v glGetQueryBufferObjecti64v;
extern boom::GLGetQueryBufferObjectiv glGetQueryBufferObjectiv;
extern boom::GLGetQueryBufferObjectui64v glGetQueryBufferObjectui64v;
extern boom::GLGetQueryBufferObjectuiv glGetQueryBufferObjectuiv;
extern boom::GLMemoryBarrierByRegion glMemoryBarrierByRegion;
extern boom::GLGetTextureSubImage glGetTextureSubImage;
extern boom::GLGetCompressedTextureSubImage glGetCompressedTextureSubImage;
extern boom::GLGetnCompressedTexImage glGetnCompressedTexImage;
extern boom::GLGetnTexImage glGetnTexImage;
extern boom::GLGetnUniformdv glGetnUniformdv;
extern boom::GLGetnUniformfv glGetnUniformfv;
extern boom::GLGetnUniformiv glGetnUniformiv;
extern boom::GLGetnUniformuiv glGetnUniformuiv;
extern boom::GLReadnPixels glReadnPixels;
extern boom::GLGetnMapdv glGetnMapdv;
extern boom::GLGetnMapfv glGetnMapfv;
extern boom::GLGetnMapiv glGetnMapiv;
extern boom::GLGetnPixelMapfv glGetnPixelMapfv;
extern boom::GLGetnPixelMapuiv glGetnPixelMapuiv;
extern boom::GLGetnPixelMapusv glGetnPixelMapusv;
extern boom::GLGetnPolygonStipple glGetnPolygonStipple;
extern boom::GLGetnColorTable glGetnColorTable;
extern boom::GLGetnConvolutionFilter glGetnConvolutionFilter;
extern boom::GLGetnSeparableFilter glGetnSeparableFilter;
extern boom::GLGetnHistogram glGetnHistogram;
extern boom::GLGetnMinmax glGetnMinmax;
extern boom::GLTextureBarrier glTextureBarrier;
extern boom::GLSpecializeShader glSpecializeShader;
extern boom::GLMultiDrawArraysIndirectCount glMultiDrawArraysIndirectCount;
extern boom::GLMultiDrawElementsIndirectCount glMultiDrawElementsIndirectCount;
extern boom::GLPolygonOffsetClamp glPolygonOffsetClamp;
extern boom::GLBlendBarrier glBlendBarrier;
extern boom::GLPrimitiveBoundingBox glPrimitiveBoundingBox;

} /* namespace boom */